<?php
namespace Docova\DocovaBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ReviewPoliciesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReviewPoliciesRepository extends EntityRepository
{
	/**
	 * Get review policies based on criteria as string or XML DomDocument
	 * 
	 * @param array $criteria
	 * @param array $sortBy
	 * @param boolean $return_obj
	 * @return string|\DOMDocument
	 */
	public function getDataXML($criteria = array(), $sortBy = array(), $return_obj = false)
	{
		if (empty($criteria) && empty($sortBy)) {
			$review_policies = $this->findAll();
		}
		else {
			$orderBy = array();
			if (!empty($sortBy))
			{
				foreach ($sortBy as $key => $value) {
					if ($this->_class->hasField($key) && !empty($value)) {
						$orderBy[$key] = strtoupper($value) == 'DESC' ? 'DESC' : 'ASC';
					}
				}
			}			
			$review_policies = $this->findBy($criteria, $orderBy);
		}

		$data_xml = ($return_obj === false) ? array() : new \DOMDocument('1.0', 'UTF-8');
		foreach ($review_policies as $doc)
		{
			$libraries = '--- All Libraries ---';
			if ($doc->getLibraries()->count() > 0) 
			{
				$libraries = '';
				foreach ($doc->getLibraries() as $lib)
				{
					if ($lib->getTrash() === false) 
					{
						$libraries .= $lib->getLibraryTitle().',';
					}
				}
				$libraries = substr_replace($libraries, '', -1);
			}

			$doctypes = '--- All Types ---';
			if ($doc->getDocumentTypes()->count() > 0) 
			{
				$doctypes = '';
				foreach ($doc->getDocumentTypes() as $type)
				{
					if (!$type->getTrash()) { 
						$doctypes .= $type->getDocName().',';
					}
				}
				$doctypes = (!empty($doctypes)) ? substr_replace($doctypes, '', -1) : '';
			}

			if ($return_obj === false) 
			{
				$data_xml[] = array(
					'dockey' => $doc->getId(),
					'policyStatus' => ($doc->getPolicyStatus() ? 'Active' : 'Inactive'),
					'libraries' => $libraries,
					'policyPriority' => $doc->getPolicyPriority(),
					'policyName' => $doc->getPolicyName(),
					'documenttypes' => $doctypes,
					'description' => $doc->getDescription()
				);
/*
				$data_xml .= '<document>';
				$data_xml .= '<dockey>'.$doc->getId().'</dockey>';
				$data_xml .= '<docid>'.$doc->getId().'</docid>';
				$data_xml .= '<rectype>doc</rectype>';
				$data_xml .= '<policystatus>'.($doc->getPolicyStatus() ? 'Active' : 'Inactive').'</policystatus>';
				$data_xml .= "<libraries><![CDATA[$libraries]]></libraries>";
				$data_xml .= '<priority>'.$doc->getPolicyPriority().'</priority>';
				$data_xml .= '<policyname><![CDATA['.$doc->getPolicyName().']]></policyname>';
				$data_xml .= "<documenttypes><![CDATA[$doctypes]]></documenttypes>";
				$data_xml .= '<description><![CDATA['.$doc->getDescription().']]></description>';
				$data_xml .= '<statno />';
				$data_xml .= '<wfstarted />';
				$data_xml .= '<delflag />';
				$data_xml .= '</document>';
*/
			}
			else {
				$root = $data_xml->appendChild($data_xml->createElement('document'));
				$root->appendChild($data_xml->createElement('dockey', $doc->getId()));
				$root->appendChild($data_xml->createElement('docid', $doc->getId()));
				$root->appendChild($data_xml->createElement('rectype', 'doc'));
				$newnode = $data_xml->createElement('policystatus', $doc->getPolicyStatus() ? 'Active' : 'Inactive');
				$root->appendChild($newnode);
				$cdata = $data_xml->createCDATASection($libraries);
				$newnode = $data_xml->createElement('libraries');
				$newnode->appendChild($cdata);
				$root->appendChild($newnode);
				$newnode = $data_xml->createElement('priority', $doc->getPolicyPriority());
				$root->appendChild($newnode);
				$cdata = $data_xml->createCDATASection($doc->getPolicyName());
				$newnode = $data_xml->createElement('policyname');
				$newnode->appendChild($cdata);
				$root->appendChild($newnode);
				$cdata = $data_xml->createCDATASection($doctypes);
				$newnode = $data_xml->createElement('documenttypes');
				$newnode->appendChild($cdata);
				$root->appendChild($newnode);
				$cdata = $data_xml->createCDATASection($doc->getDescription());
				$newnode = $data_xml->createElement('description');
				$newnode->appendChild($cdata);
				$root->appendChild($newnode);
			}
		}
		
		return $data_xml;
	}
	
	/**
	* Deletes review policy from web admin view
	* 
	* @param: xml data with id to delete
	* @return: xml Data response
	*/
	public function deleteSelectedDocuments($post_xml){
	
		$deleted=0;
	
		foreach ($post_xml->getElementsByTagName('Unid') as $doc_id)
		{
			$document = $this->find($doc_id->nodeValue);
			if (!empty($document))
			{
				$this->_em->remove($document);
				$deleted++;
				$this->_em->flush(); // commit each delete
			}
	
		}
		// setup return xml
		$response_xml = new \DOMDocument("1.0", "UTF-8");
		$root = $response_xml->appendChild($response_xml->createElement('Results'));
		if ($deleted !== 0)
		{
			$child = $response_xml->createElement('Result', 'OK');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Status';
			$child->appendChild($attrib);
			$root->appendChild($child);
	
			$child = $response_xml->createElement('Result', $deleted);
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Ret1';
			$child->appendChild($attrib);
			$root->appendChild($child);
		}
		else {
			$child = $response_xml->createElement('Result', 'FAILED');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Status';
			$child->appendChild($attrib);
			$root->appendChild($child);
	
			$child = $response_xml->createElement('Result', 'Could not delete one or more of the selected documents.');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'ErrMsg';
			$child->appendChild($attrib);
			$root->appendChild($child);
		}
		return $response_xml->saveXML();
	}
}