<?php

namespace Docova\DocovaBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * AppViewsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AppViewsRepository extends EntityRepository
{
	/**
	 * Get all application views data array/xml for view
	 *
	 * @param string $app_id
	 * @param string $format
	 * @param string $vname
	 * @return array
	 */
	public function getViewData($app_id, $format = 'array', $vname = null)
	{
		$output = array('@timestamp' => time(), '@toplevelentries' => '0');
		$query = $this->createQueryBuilder('V')
			->join('V.application', 'A')
			->where('V.application = :app')
			->andWhere('A.Trash = false')
			->andWhere("not (V.viewType = 'datatable' ) ")
			->andWhere('A.isApp = true')
			->addOrderBy('V.viewName', 'ASC')
			->addOrderBy('V.viewAlias', 'ASC')
			->setParameter('app', $app_id);
		if (!empty($vname)) {
			$query->andWhere('V.viewName = :vname')
				->setParameter('vname', $vname);
		}
	
		$result = $query->getQuery()->getResult();
	
		if (!empty($result))
		{
			if ($format === 'array')
			{
				$output['@toplevelentries'] = count($result);
				$output['viewentry'] = array();
				foreach ($result as $view) {
					$output['viewentry'][] = array(
							'@unid' => $view->getId(),
							'entrydata' => array(
									array('text' => array($view->getViewName())),
									array('text' => array($view->getViewAlias())),
									array('html' => array('')),
									array('datetime' => array('@dst'=>true, 0 => $view->getDateModified()->format('Ymd his'))),
									array('text' => array($view->getModifiedBy()->getUserNameDnAbbreviated())),
									array('text' => array($view->getPDU() ? 'Yes' : 'No')),
									array('text' => array($view->getViewType()))
							)
					);
				}
			}
			else {
				$xml = '<viewentries timestamp="'.time().'" toplevelentries="'.count($result).'">';
				$x = 1;
				foreach ($result as $view) {
					$xml .= "<viewentry unid='{$view->getId()}' ";
					$xml .= !empty($vname) ? " position='$x' >" : '>';
					$xml .= "<entrydata columnnumber='0' name='ViewName'><text><![CDATA[{$view->getViewName()}]]></text></entrydata>";
					$xml .= "<entrydata columnnumber='1' name='ViewAlias'><text><![CDATA[{$view->getViewAlias()}]]></text></entrydata>";
					$xml .= "<entrydata columnnumber='2'><text></text></entrydata>";
					$xml .= "<entrydata columnnumber='3'><datetime dst='true'>{$view->getDateModified()->format('Ymd his')}</datetime></entrydata>";
					$xml .= "<entrydata columnnumber='4' name='DELastModifiedBy'><text>{$view->getModifiedBy()->getUserNameDnAbbreviated()}</text></entrydata>";
					$xml .= '<entrydata columnnumber="5"><text>'.($view->getPDU() ? 'Yes' : 'No').'</text></entrydata>';
					$xml .= '<entrydata columnnumber="6"><text><![CDATA['.$view->getViewName().'|'.$view->getViewAlias().']]></text></entrydata>';
					$xml .= '<entrydata columnnumber="7" name="ViewType"><text><![CDATA['.$view->getViewType().']]></text></entrydata>';
					$xml .= '</viewentry>';
					$x++;
				}
				$xml .= '</viewentries>';
				$output = $xml;
			}
			$result = $view = null;
		}
		elseif ($format !== 'array') {
			$output = '<viewentries timestamp="'.time().'" toplevelentries="0"></viewentries>';
		}
		return $output;
	}
	
	/**
	 * Return view perspective XML
	 * 
	 * @param string $view_id
	 * @param boolean $xml
	 * @return \DOMDocument|string|null
	 */
	public function getViewPerspective($view_id, $xml = false)
	{
		$query = $this->createQueryBuilder('V')
			->select('V.viewPerspective')
			->where('V.id = :view')
			->setParameter('view', $view_id)
			->getQuery();
		
		try {
			$result = $query->getSingleResult(\Doctrine\ORM\AbstractQuery::HYDRATE_ARRAY);
			if (!empty($result['viewPerspective'])) {
				$result = $result['viewPerspective'];
				if ($xml === true) {
					$xml = new \DOMDocument();
					$xml->loadXML($result);
					$result = $xml;
				}
				return $result;
			}
		}
		catch (\Exception $e) { }
		return null;
	}
	
	/**
	 * Get all application views' Id in array
	 * 
	 * @param string $appid
	 * @return array
	 */
	public function getAllViewIds($appid)
	{
		$query = $this->createQueryBuilder('V')
			->select('V.id')
			->where('V.application = :app')
			->setParameter('app', $appid)
			->getQuery();
		
		$result = $query->getArrayResult();
		if (!empty($result[0])) 
		{
			$output = array();
			foreach ($result as $id) {
				$output[] = $id['id'];
			}
			return $output;
		}
		
		return array();
	}
	
	/**
	 * Find view by view name or alias
	 * 
	 * @param string $name
	 * @param string $appid
	 * @return \Docova\DocovaBundle\Entity\AppViews|null
	 */
	public function findByNameAlias($name, $appid)
	{
		$result = null;
		
		$query = $this->createQueryBuilder('V')
			->where('V.application = :app')
			->andWhere('V.viewName = :vname OR V.viewAlias = :vname')
			->andWhere("not (V.viewType = 'datatable' ) ")
			->setParameter('app', $appid)
			->setParameter('vname', $name)
			->getQuery();
		
		try{
            $result = $query->getSingleResult();
        }catch(\Doctrine\ORM\NoResultException $e){
        }catch(\Doctrine\ORM\NonUniqueResultException $e){
        }
		
		return $result;
	}

	/**
	 * Return data table view info by parent form 
	 * 
	 * @param string $datatable_name
	 * @param string $formpropertiesid (parent form properties id)
	 * @return string[]|NULL
	 */
	public function getDataTableInfo( $datatable_name, $formPropertiesId )
	{
		$query = $this->createQueryBuilder('V')
			->select('V.id, V.viewAlias, V.viewPerspective')
			->where('V.viewName = :dtname')
			->andWhere("V.datatableformproperties = :frmpid")
			->andWhere("V.viewType = 'datatable'")
			->setParameter('dtname', $datatable_name)
			->setParameter('frmpid', $formPropertiesId)
			->getQuery();
		
		$result = $query->getArrayResult();
		return $result;
	}

	/**
	 * Return data table view info by child form
	 * 
	 * @param string $appid
	 * @param string $formname (form name of datatable child form)
	 * @return string[]|NULL
	 */
	public function getDataTableInfoByForm( $appid,$frmid)
	{
		$query = $this->createQueryBuilder('V')
			->select('V.id, V.viewAlias, V.viewPerspective')
			->where('V.viewAlias = :formname')
			->andWhere("V.application = :appid")
			->andWhere("V.viewType = 'datatable'")
			->setParameter('formname', $frmid)
			->setParameter('appid', $appid)
			->getQuery();
		
		$result = $query->getArrayResult();
		return $result;
	}

	/**
	 * Return all data table views for a given form
	 * 
	 * @param string $application
	 * @param string $formpropid (form propterties id)
	 * @return string[]|NULL
	 */
	public function getFormDataTableViews($application, $formpropid)
	{
		$query = $this->createQueryBuilder('V')
			->select(array('V.id', 'V.viewName', "V.viewPerspective", "V.viewAlias"))
			->where('V.application = :app')
			->andWhere('V.datatableformproperties = :formpropid')
			->setParameter('app', $application)
			->setParameter('formpropid', $formpropid)
			->getQuery();
		
		$result = $query->getArrayResult();
		return $result;
	}

	/**
	 * Find all views by app id
	 * 
	 * @param string $appid
	 * @return \Docova\DocovaBundle\Entity\AppViews|null
	 */
	public function getAllAppViews($appid)
	{
		$result = null;
		
		$query = $this->createQueryBuilder('V')
			->where('V.application = :app')
			->andWhere("not (V.viewType = 'datatable' ) ")
			->setParameter('app', $appid)
			->getQuery();
		
		try{
            $result = $query->getResult();
        }catch(\Doctrine\ORM\NoResultException $e){
        }catch(\Doctrine\ORM\NonUniqueResultException $e){
        }
		
		return $result;
	}
}
