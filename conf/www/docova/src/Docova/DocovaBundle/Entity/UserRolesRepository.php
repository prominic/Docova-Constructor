<?php
namespace Docova\DocovaBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserRolesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRolesRepository extends EntityRepository
{
	/**
	 * Return all columns XML Data as string or DOM Document
	 * 
	 * @param string $icon_path
	 * @param array $criteria
	 * @param array $orderBy
	 * @param boolean $return_obj
	 * @return string|\DOMDocument
	 */
	public function getDataXML($criteria = array(), $orderBy = array(), $return_obj = false)
	{
		$query = $this->createQueryBuilder('UR')
			->where('UR.Group_Name IS NOT NULL');
		
		if (!empty($criteria)) 
		{
			foreach ($criteria as $field => $value) {
				$query->andWhere("UR.$field = :v$field")
					->setParameter("v$field", $value);
			}
		}

		if (!empty($orderBy))
		{
			foreach ($orderBy as $key => $value) {
				if (!empty($value))
				{
					if ($this->_class->hasField($key)) {
						$query->addOrderBy('UR.'.$key, strtoupper($value) == 'DESC' ? 'DESC' : 'ASC');
					}
				}
			}
		}
		else {
			$query->addOrderBy('UR.displayName' ,'ASC');
		}

		$groups = $query->getQuery()->getResult();
		$data_xml = ($return_obj === false) ? array() : new \DOMDocument('1.0', 'UTF-8');
		foreach ($groups as $doc)
		{
			if ($return_obj === false)
			{
				$data_xml[] = array(
					'dockey' => $doc->getId(),
					'groupType' => ($doc->getGroupType() ? 'LDAP Directory' : 'DOCOVA (Internal)'),
					'displayName' => $doc->getDisplayName()
				);
/*
				$data_xml .= '<document>';
				$data_xml .= '<dockey>'.$doc->getId().'</dockey>';
				$data_xml .= '<docid>'.$doc->getId().'</docid>';
				$data_xml .= '<rectype>doc</rectype>';
				$data_xml .= ($doc->getGroupType()) ? '<type><![CDATA[LDAP Directory]]></type>' : '<type><![CDATA[DOCOVA (Internal)]]></type>'; 
				$data_xml .= '<groupname><![CDATA['.$doc->getDisplayName().']]></groupname>';
				$data_xml .= '<statno />';
				$data_xml .= '<wfstarted />';
				$data_xml .= '<delflag />';				
				$data_xml .= '</document>';
*/
			}
			else 
			{
				$root = $data_xml->appendChild($data_xml->createElement('document'));
				$root->appendChild($data_xml->createElement('dockey', $doc->getId()));
				$root->appendChild($data_xml->createElement('docid', $doc->getId()));
				$root->appendChild($data_xml->createElement('rectype', 'doc'));
				$cdata = $data_xml->createCDATASection($doc->getGroupType() ? 'LDAP Directory' : 'DOCOVA (Internal)');
				$newnode = $data_xml->createElement('groupType');
				$newnode->appendChild($cdata);
				$root->appendChild($newnode);
				$cdata = $data_xml->createCDATASection($doc->getDisplayName());
				$newnode = $data_xml->createElement('displayName');
				$newnode->appendChild($cdata);
				$root->appendChild($newnode);
			}
		}
		
		return $data_xml;
	}
	
	/**
	* Deletes documents from web admin view
	* @param: xml data with id to delete
	* @return: xml Data response
	*/
	public function deleteSelectedDocuments($post_xml){
	
		$deleted=0;
	
		foreach ($post_xml->getElementsByTagName('Unid') as $doc_id)
		{
			$document = $this->find($doc_id->nodeValue);
			if (!empty($document))
			{
				if ($document->getRoleUsers()->count() > 0) 
				{
					$users = $document->getRoleUsers();
					foreach ($users as $user) {
						$document->removeRoleUsers($user);
					}
				}
				$this->_em->remove($document);
				$deleted++;
				$this->_em->flush(); // commit each delete
			}
	
		}
		// setup return xml
		$response_xml = new \DOMDocument("1.0", "UTF-8");
		$root = $response_xml->appendChild($response_xml->createElement('Results'));
		if ($deleted !== 0)
		{
			$child = $response_xml->createElement('Result', 'OK');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Status';
			$child->appendChild($attrib);
			$root->appendChild($child);
	
			$child = $response_xml->createElement('Result', $deleted);
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Ret1';
			$child->appendChild($attrib);
			$root->appendChild($child);
		}
		else {
			$child = $response_xml->createElement('Result', 'FAILED');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Status';
			$child->appendChild($attrib);
			$root->appendChild($child);
	
			$child = $response_xml->createElement('Result', 'Could not delete one or more of the selected documents.');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'ErrMsg';
			$child->appendChild($attrib);
			$root->appendChild($child);
		}
		return $response_xml->saveXML();
	}
	
	/**
	 * Get all available groups
	 * 
	 * @param integer $limit [optional(25)]
	 * @param integer $offset [optional(0)]
	 * @return mixed
	 */
	public function getAllValidGroups($limit = 25, $offset = 0)
	{
		$query = $this->createQueryBuilder('UR')
			->where('UR.Group_Name IS NOT NULL')
			->addOrderBy('UR.displayName', 'ASC')
			->setMaxResults($limit)
			->setFirstResult($offset)
			->getQuery();
		
		$result = $query->getResult();
		return $result;
	}
	
	/**
	 * Search in groups list
	 * 
	 * @param string $search_txt
	 * @param integer $limit [optional(25)]
	 * @param integer $offset [optional(25)]
	 * @return mixed
	 */
	public function searchForGroup($search_txt, $limit = 25, $offset = 0)
	{
		$query = $this->createQueryBuilder('UR')
			->where('UR.Group_Name IS NOT NULL')
			->setMaxResults($limit)
			->setFirstResult($offset);
		$query->andWhere($query->expr()->like('UR.displayName', $query->expr()->literal("%$search_txt%")));
		
		$result = $query->getQuery()->getResult();
		return $result;
	}
	
	/**
	 * Get appliction roles list which user belongs to it
	 * 
	 * @param string $application
	 * @param string $user
	 * @return array|\Docova\DocovaBundle\Entity\UserRoles[]
	 */
	public function getAppUserGroups($application, $user, $return_obj = false)
	{
		$output = array();
		$query = $this->createQueryBuilder('G')
			->join('G.Role_Users', 'U')
			->where('G.application = :app')
			->andWhere('U.id = :user')
			->setParameter('app', $application)
			->setParameter('user', $user);
		
		if ($return_obj === false) {
			$query->select(array('G.displayName', 'G.Role'));
			$result = $query->getQuery()->getArrayResult();
			if (!empty($result))
			{
				foreach ($result as $role)
				{
					$output[] = array(
						'displayName' => $role['displayName'],
						'role' => $role['Role']
					);
				}
			}
			return $output;
		}
		else {
			$result = $query->getQuery()->getResult();
			if (empty($result))
				return $output;
			return $result;
		}
	}
	
	/**
	 * Get application roles list which the group belongs to it
	 * 
	 * @param string $application
	 * @param string $group
	 * @return array|\Docova\DocovaBundle\Entity\UserRoles[]
	 */
	public function getAppRoles($application, $group = null, $return_obj = false)
	{
		$output = array();
		$query = $this->createQueryBuilder('G');
		$query->where('G.application = :app')
			->setParameter('app', $application);
		if (!empty($group))
		{
			$query->andWhere($query->expr()->like('G.Nested_Groups', $query->expr()->literal('%'.$group.'%')));
		}
		if ($return_obj === false)
		{
			$query->select(array('G.displayName', 'G.Role'));
			$result = $query->getQuery()->getArrayResult();
			if (!empty($result))
			{
				foreach ($result as $role)
				{
					$output[] = array(
						'displayName' => $role['displayName'],
						'role' => $role['Role']
					);
				}
			}
			return $output;
		}
		else {
			$result = $query->getQuery()->getResult();
			if (empty($result))
				return $output;
			return $result;
		}
	}
	
	/**
	 * Find role/group by role name or display name
	 * 
	 * @param string $entry
	 * @return UserRoles|NULL
	 */
	public function findByNameOrRole($entry)
	{
		$query = $this->createQueryBuilder('R')
			->where('R.Role = :rolename')
			->orWhere('R.displayName = :rolename')
			->setParameter('rolename', $entry)
			->getQuery();
		
		$result = $query->getResult();
		if (!empty($result))
		{
			if (count($result) > 1)
			{
				foreach ($result as $role) {
					if ($role->getRole() == $entry) {
						return $role;
					}
				}
				return null;
			}
			else {
				return $result[0];
			}
		}
		return null;
	}

	/**
	 * Check if AD group exists in DB
	 *
	 * @param array $info
	 * @param string $guid
	 * @return UserRoles|boolean
	 */
	public function groupExists($info, $guid = null)
	{
		$found = false;
		if (!empty($guid)) {
			$query = $this->createQueryBuilder('R')
				->where('R.adKey = :guid')
				->andWhere('R.groupType = true')
				->setParameter('guid', $guid)
				->getQuery();
			
			try {
				$result = $query->getSingleResult();
				$found = $result;
			} catch (\Exception $e) {
				$found = false;
			}
		}

		if ($found === false) {
			$role = !empty($info[0]['displayname'][0]) ? $info[0]['displayname'][0] : $info[0]['cn'][0];
			$role = 'ROLE_'.strtoupper(str_replace(' ', '', $role));
			$query = $this->createQueryBuilder('R')
				->where('R.Role = :rolename')
				->andWhere('R.groupType = true')
				->setParameter('rolename', $role)
				->getQuery();
			
			try {
				$result = $query->getSingleResult();
				$found = $result;
			} catch (\Exception $e) {
				$found = false;
			}
		}
	
		return $found;
	}
}