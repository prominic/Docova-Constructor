<?php

namespace Docova\DocovaBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * AppAgentsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AppAgentsRepository extends EntityRepository
{
	/**
	 * Get all application agents data array/xml for view
	 *
	 * @param string $app_id
	 * @param string $format
	 * @return array
	 */
	public function getViewData($app_id, $format = 'array')
	{
		$output = array('@timestamp' => time(), '@toplevelentries' => '0');
		$query = $this->createQueryBuilder('G')
			->join('G.application', 'A')
			->where('G.application = :app')
			->andWhere('A.Trash = false')
			->andWhere('A.isApp = true')
			->addOrderBy('G.agentName', 'ASC')
			->addOrderBy('G.agentAlias', 'ASC')
			->setParameter('app', $app_id)
			->getQuery();
	
		$result = $query->getResult();
	
		if (!empty($result))
		{
			if ($format === 'array')
			{
				$output['@toplevelentries'] = count($result);
				$output['viewentry'] = array();
				foreach ($result as $agent) {
					$output['viewentry'][] = array(
						'@unid' => $agent->getId(),
						'entrydata' => array(
							array('text' => array($agent->getAgentName())),
							array('text' => array($agent->getAgentAlias())),
							array('text' => array('PHP')),
							array('datetime' => array('@dst'=>true, 0 => $agent->getDateModified()->format('Ymd his'))),
							array('text' => array($agent->getModifiedBy()->getUserNameDnAbbreviated())),
							array('text' => array($agent->getPDU() ? 'Yes' : 'No'))
						)
					);
				}
			}
			else {
				$xml = '<viewentries timestamp="'.time().'" toplevelentries="'.count($result).'">';
				foreach ($result as $agent) {
					$xml .= "<viewentry unid='{$agent->getId()}'>";
					$xml .= "<entrydata columnnumber='0'><text>{$agent->getAgentName()}</text></entrydata>";
					$xml .= "<entrydata columnnumber='1'><text>{$agent->getAgentAlias()}</text></entrydata>";
					$xml .= "<entrydata columnnumber='2'><datetime dst='true'>{$agent->getDateModified()->format('Ymd his')}</datetime></entrydata>";
					$xml .= "<entrydata columnnumber='3'><text>{$agent->getModifiedBy()->getUserNameDnAbbreviated()}</text></entrydata>";
					$xml .= '<entrydata columnnumber="4"><text>'.($agent->getPDU() ? 'Yes' : 'No').'</text></entrydata>';
					$xml .= '</viewentry>';
				}
				$xml .= '</viewentries>';
				$output = $xml;
			}
			$result = $agent = null;
		}
		elseif ($format !== 'array') {
			$output = '<viewentries timestamp="'.time().'" toplevelentries="0"></viewentries>';
		}
		return $output;
	}
	
	/**
	 * Get all scheduled agents categorized by application ID
	 * 
	 * @return array
	 */
	public function getScheduledAgents()
	{
		$output = [];
		$agents = $this->createQueryBuilder('A')
			->select(['A.agentName', 'IDENTITY(A.application) AS appid', 'A.lastExecution', 'A.agentSchedule', 'A.runtimeSecurityLevel', 'A.startDayOfMonth', 'A.startWeekDay', 'A.intervalHours', 'A.intervalMinutes', 'A.startHour', 'A.startMinutes', 'A.startHourAmPm'])
			->where('A.agentSchedule != :agtype')
			->setParameter('agtype', '0')
			->orderBy('A.application', 'ASC')
			->getQuery()
			->getArrayResult();
		
		if (!empty($agents))
		{
			foreach ($agents as $ag) {
				if (empty($output[$ag['appid']]) || !is_array($output[$ag['appid']])) {
					$output[$ag['appid']] = [];
				}
				
				$output[$ag['appid']][] = [
					'agentName' => $ag['agentName'],
					'agentSchedule' => $ag['agentSchedule'],
					'lastExecution' => $ag['lastExecution'],
					'runtimeSecurityLevel' => $ag['runtimeSecurityLevel'],
					'startDayOfMonth' => $ag['startDayOfMonth'],
					'startWeekDay' => $ag['startWeekDay'],
					'intervalHours' => $ag['intervalHours'],
					'intervalMinutes' => $ag['intervalMinutes'],
					'startHour' => $ag['startHour'],
					'startMinutes' => $ag['startMinutes'],
					'startHourAmPm' => $ag['startHourAmPm'] === 1 ? 'am' : 'pm'
				];
			}
		}
		
		return $output;
	}
}
