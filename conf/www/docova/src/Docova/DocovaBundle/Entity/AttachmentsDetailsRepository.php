<?php

namespace Docova\DocovaBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * AttachmentsDetailsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AttachmentsDetailsRepository extends EntityRepository
{
	/**
	* Get checked out files based on criteria as string or XML DomDocument
	*  
	* @param array $criteria
	* @param array $orderBy
	* @param boolean $return_obj
	* @return string|\DOMDocument
	*/
	public function getDataXML($criteria = array(), $orderBy = array(), $return_obj = false)
	{
		$query = $this->createQueryBuilder('AD')
			->select('AD', 'D.Doc_Title', 'F.Folder_Name', 'L.Library_Title', 'U.userNameDnAbbreviated')
			->join('AD.Document', 'D')
			->join('D.folder', 'F')
			->join('F.Library', 'L')
			->join('AD.Checked_Out_By', 'U')
			->where('L.Trash = false AND AD.Checked_Out = true AND AD.Date_Checked_Out IS NOT NULL AND AD.Checked_Out_Path IS NOT NULL');

		if (!empty($criteria)) {
			foreach ($criteria as $field => $value) {
				$query->andWhere('AD.' . $field . ' = :v_'.$field);
				$query->setParameter('v_'.$field, $value);
			}
		}

		if (!empty($orderBy))
		{
			foreach ($orderBy as $key => $value) {
				if (!empty($value))
				{
					if ($this->_class->hasField($key)) {
						$query->addOrderBy('AD.'.$key, strtoupper($value) == 'DESC' ? 'DESC' : 'ASC');
					}
					elseif ($key == 'username') {
						$query->addOrderBy('U.userNameDnAbbreviated', strtoupper($value) == 'DESC' ? 'DESC' : 'ASC');
					}
					elseif ($key == 'subject') {
						$query->addOrderBy('D.Doc_Title', strtoupper($value) == 'DESC' ? 'DESC' : 'ASC');
					}
					elseif ($key == 'foldername') {
						$query->addOrderBy('F.Folder_Name', strtoupper($value) == 'DESC' ? 'DESC' : 'ASC');
					}
					elseif ($key == 'libraryname') {
						$query->addOrderBy('L.Library_Title', strtoupper($value) == 'DESC' ? 'DESC' : 'ASC');
					}
				}
			}
		}
		
		$result = $query->getQuery()->getResult();
		
		$data_xml = ($return_obj === false) ? array() : new \DOMDocument('1.0', 'UTF-8');
		if ($return_obj === false)
		{
			if (!empty($result)) 
			{
				foreach ($result as $doc)
				{
					$data_xml[] = array(
						'dockey' => $doc[0]->getId(),
						'username' => $doc['userNameDnAbbreviated'],
						'subject' => $doc['Doc_Title'],
						'foldername' => $doc['Folder_Name'],
						'libraryname' => $doc['Library_Title']
					);
/*
					$doc instanceof \Docova\DocovaBundle\Entity\AttachmentsDetails;
					$data_xml .= '<document>';
					$data_xml .= '<dockey>'.$doc[0]->getId().'</dockey>';
					$data_xml .= '<docid>'.$doc[0]->getId().'</docid>';
					$data_xml .= '<rectype>doc</rectype>';
					$data_xml .= '<username><![CDATA['.$doc[0]->getCheckedOutBy()->getUserNameDnAbbreviated().']]></username>';
					$data_xml .= '<subject><![CDATA['.$doc['Doc_Title'].']]></subject>';
					$data_xml .= '<foldername><![CDATA['.$doc['Folder_Name'].']]></foldername>';
					$data_xml .= '<libraryname>'.$doc['Library_Title'].'</libraryname>';
					$data_xml .= '<statno />';
					$data_xml .= '<verflag />';
					$data_xml .= '<versflag />';
					$data_xml .= '<wfstarted />';
					$data_xml .= '<delflag />';
					$data_xml .= '</document>';
*/
				}
			}
			else {
				
			}
		}
		else {
			if (!empty($result)) 
			{
				foreach ($result as $doc)
				{
					$root = $data_xml->appendChild($data_xml->createElement('document'));
					$root->appendChild($data_xml->createElement('dockey', $doc[0]->getId()));
					$root->appendChild($data_xml->createElement('docid', $doc[0]->getId()));
					$root->appendChild($data_xml->createElement('rectype', 'doc'));
					$cdata = $data_xml->createCDATASection($doc[0]->getCheckedOutBy()->getUserNameDnAbbreviated());
					$newnode = $data_xml->createElement('username');
					$newnode->appendChild($cdata);
					$root->appendChild($newnode);
					$cdata = $data_xml->createCDATASection($doc['Doc_Title']);
					$newnode = $data_xml->createElement('subject');
					$newnode->appendChild($cdata);
					$root->appendChild($newnode);
					$cdata = $data_xml->createCDATASection($doc['Folder_Name']);
					$newnode = $data_xml->createElement('foldername');
					$newnode->appendChild($cdata);
					$root->appendChild($newnode);
					$cdata = $data_xml->createCDATASection($doc['Library_Title']);
					$newnode = $data_xml->createElement('libraryname');
					$newnode->appendChild($cdata);
					$root->appendChild($newnode);
					$newnode = $data_xml->createElement('statno');
					$root->appendChild($newnode);
					$newnode = $data_xml->createElement('verflag');
					$root->appendChild($newnode);
					$newnode = $data_xml->createElement('versflag');
					$root->appendChild($newnode);
					$newnode = $data_xml->createElement('wfstarted');
					$root->appendChild($newnode);
					$newnode = $data_xml->createElement('delflag');
					$root->appendChild($newnode);
				}
			}
			else {
				
			}
		}

		return $data_xml;
	}
	
	/**
	 * Get CIAO logs for the user OR the document
	 * 
	 * @param integer $user
	 * @param integer $document
	 * @return NULL|array
	 */
	public function getUserCheckedOutFiles($user = null, $document = null)
	{
		if (empty($user) && empty($document)) 
		{
			return null;
		}

		$query = $this->createQueryBuilder('AD')
			->where('AD.Checked_Out = true AND AD.Date_Checked_Out IS NOT NULL');
		if (!empty($user)) 
		{
			$query->andWhere('AD.Checked_Out_By = :checker')
			->setParameter('checker', $user);
		}
		
		if (!empty($document)) 
		{
			$query->andWhere('AD.Document = :document')
			->setParameter('document', $document);
		}
		
		$result = $query->getQuery()->getResult();
		if (empty($result)) {
			return null;
		}
		return $result;
	}
	
	/**
	 * Unset the selected checked out file(s)
	 * 
	 * @param \DOMDocument $post_xml
	 * @return string
	 */
	public function deleteSelectedDocuments($post_xml)
	{
		$deleted=0;
		foreach ($post_xml->getElementsByTagName('Unid') as $doc_id)
		{
			$document = $this->findOneBy(array('id' => $doc_id->nodeValue, 'Checked_Out' => true));
			if (!empty($document))
			{
				$document->setCheckedOut(false);
				$document->setCheckedOutPath(null);
				$document->setDateCheckedOut(null);
				$document->setCheckedOutBy(null);
				$this->_em->flush(); // commit each delete
				$deleted++;
			}
		
		}
		// setup return xml
		$response_xml = new \DOMDocument("1.0", "UTF-8");
		$root = $response_xml->appendChild($response_xml->createElement('Results'));
		if ($deleted > 0)
		{
			$child = $response_xml->createElement('Result', 'OK');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Status';
			$child->appendChild($attrib);
			$root->appendChild($child);
		
			$child = $response_xml->createElement('Result', $deleted);
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Ret1';
			$child->appendChild($attrib);
			$root->appendChild($child);
		}
		else {
			$child = $response_xml->createElement('Result', 'FAILED');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Status';
			$child->appendChild($attrib);
			$root->appendChild($child);
		
			$child = $response_xml->createElement('Result', 'Could not delete one or more of the selected documents.');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'ErrMsg';
			$child->appendChild($attrib);
			$root->appendChild($child);
		}
		return $response_xml->saveXML();
	}
	
	/**
	 * Get all document attachments in the folder
	 * 
	 * @param integer $folder
	 * @return mixed
	 */
	public function getFolderAttachments($folder)
	{
		$query = $this->createQueryBuilder('AD')
			->join('AD.Document', 'D')
			->join('D.folder', 'F')
			->leftJoin('D.DocSteps', 'WF')
			->addSelect('D')
			->addSelect('WF')
			->where('F.id = :folder')
			->andWhere('D.Archived = false')
			->andWhere('D.Trash = false')
			->setParameter('folder', $folder)
			->getQuery();
		
		$result = $query->getResult();
		if (!empty($result)) 
		{
			return $result;
		}
		
		return false;
	}
	
	/**
	 * Check if a document contains specific file name(s)
	 * 
	 * @param integer $document
	 * @param array $files
	 * @param boolean $checked_out
	 * @return boolean
	 */
	public function containsFile($document, $files, $checked_out = false)
	{
		$query = $this->createQueryBuilder('AD')
			->select('COUNT(AD.id)')
			->where('AD.Document = :document')
			->andWhere('AD.Checked_Out = :chkout')
			->setParameters(array('document' => $document, 'chkout' => $checked_out));
		if (count($files) > 1) 
		{
			$query->andWhere($query->expr()->in('AD.File_Name', $files));
		}
		else {
			$query->andWhere('AD.File_Name = :filename')
					->setParameter('filename', $files[0]);
		}
		
		$result = $query->getQuery()->getSingleScalarResult();
		if (empty($result)) 
		{
			return false;
		}
		return true;
	}
	
	/**
	 * Export metadata for attachments of listed documents
	 * 
	 * @param array $documents
	 * @param string $include
	 * @param string $exclude
	 * @param integer $append_version
	 * @return mixed
	 */
	public function exportDocAttachments($documents, $include, $exclude)
	{
		$query = $this->createQueryBuilder('AD')
			->join('AD.Document', 'D')
			->addSelect('D');

		if (count($documents) > 1) 
		{
			$query->where($query->expr()->in('AD.Document', $documents));
		}
		else {
			$query->where('AD.Document = :document')
				  ->setParameter('document', $documents[0]);
		}
		
		if (!empty($include)) 
		{
			$include = explode(',', $include);
			$include_query = '';
			foreach ($include as $literal) {
				if (!empty($literal)) 
				{
					$include_query .= $query->expr()->like('AD.File_Name', $query->expr()->literal("%$literal") ).' OR ';
				}
			}
			if (!empty($include_query)) 
			{
				$include_query = substr_replace($include_query, '', -3);
				$query->andWhere($include_query);
			}
		}
		elseif (!empty($exclude)) 
		{
			$exclude = explode(',', $exclude);
			foreach ($exclude as $literal) {
				if (!empty($literal)) 
				{
					$query->andWhere($query->expr()->not($query->expr()->like('AD.File_Name', $query->expr()->literal("%$literal") )));
				}
			}
		}
		
		$result = $query->getQuery()->getResult();
		return $result;
	}
	
	/**
	 * Export attachment meta data for documents in a folder which are released and/or have versioning
	 * 
	 * @param string $folder
	 * @param string $include
	 * @param string $exclude
	 * @param boolean $released [optional(false)]
	 * @param boolean $versions [optional(false)]
	 * @return mixed
	 */
	public function exportAttachmentMetaData($folder, $include, $exclude, $released = false, $versions = false)
	{
		$query = $this->createQueryBuilder('AD')
			->join('AD.Document', 'D')
			->addSelect('D')
			->where('D.folder = :folder')
			->setParameter('folder', $folder);

		if ($released === true) 
		{
			$query->andWhere('D.Status_No = 1');
		}
		if ($versions === true) 
		{
			$query->andWhere('D.Doc_Version IS NOT NULL')
				->andWhere('D.Revision IS NOT NULL');
		}

		if (!empty($include))
		{
			$include = explode(',', $include);
			$include_query = '';
			foreach ($include as $literal) {
				if (!empty($literal))
				{
					$include_query .= $query->expr()->like('AD.File_Name', $query->expr()->literal("%$literal") ).' OR ';
				}
			}
			if (!empty($include_query))
			{
				$include_query = substr_replace($include_query, '', -3);
				$query->andWhere($include_query);
			}
		}
		elseif (!empty($exclude))
		{
			$exclude = explode(',', $exclude);
			foreach ($exclude as $literal) {
				if (!empty($literal))
				{
					$query->andWhere($query->expr()->not($query->expr()->like('AD.File_Name', $query->expr()->literal("%$literal") )));
				}
			}
		}
		
		$result = $query->getQuery()->getResult();
		return $result;
	}
	
	/**
	 * Get document attachments list as array
	 * 
	 * @param string $document
	 * @param boolean $justNames
	 * @return array
	 */
	public function getDocumentAttachmentsArray($document, $justNames = false)
	{
		if (!empty($document)) 
		{
			$query = $this->createQueryBuilder('AD');
			if ($justNames === true) {
				$query->select('AD.File_Name');
			}
			else {
				$query->join('AD.Author', 'A')
				->addSelect('A');
			}
			$query->where('AD.Document = :document');
			$query->setParameter('document', $document);
			
			$result = $query->getQuery()->getArrayResult();
			return $result;
		}
	}

	/**
	 * Find attachments which name start with particular string
	 *
	 * @param string $document
	 * @param string $string
	 * @return object|null
	 */
	public function getFileStartWith($document, $string)
	{
		$query = $this->createQueryBuilder('AD')
		->where('AD.Document = :document');
		$query->andWhere($query->expr()->like('AD.File_Name', $query->expr()->literal($string)));
		$query->setParameter('document', $document);
	
		$result = $query->getQuery()->getResult();
		if (!empty($result)) {
			return $result[0];
		}
	
		return null;
	}

	/**
	 * Get application field values
	 * 
	 * @param string $field
	 * @return array
	 */
	public function getAppFieldValues($field)
	{
		$output = array();
		$query = $this->createQueryBuilder('V')
			->select('V.File_Name AS fvalue, IDENTITY(V.Document) AS docid')
			->where('V.Field = :field')
			->setParameter('field', $field)
			->getQuery();
		
		$result = $query->getArrayResult();
		if (!empty($result)) 
		{
			$temp = array();
			foreach ($result as $att) {
				if (!isset($temp[$att['docid']]) || !is_array($temp[$att['docid']]))
				{
					$temp[$att['docid']] = array($att['fvalue']);
				}
				else {
					array_push($temp[$att['docid']], $att['fvalue']);
				}
			}

			foreach ($temp as $key => $value) {
				$output[] = array(
					'fvalue' => (is_array($value) ? implode(';', $value) : $value),
					'docid' => $key
				);
			}
		}
		return $output;
	}
	
	/**
	 * Get filtered document attachments base on a pattern
	 * 
	 * @param string $document
	 * @param string $pattern
	 */
	public function getFilteredAttachments($document, $pattern)
	{
		$query = $this->createQueryBuilder('A')
			->where('A.Document = :doc')
			->setParameter('doc', $document);
		
		$query->expr()->like('A.File_Name', $pattern);
		
		$result = $query->getQuery()->getResult();
		return $result;
	}
	
	/**
	 * Delete all attachments of a document
	 * 
	 * @param string $docid
	 */
	public function deleteDocAttachments($docid)
	{
		$query = $this->createQueryBuilder('A')
			->delete()
			->where('A.Document = :doc')
			->setParameter('doc', $docid)
			->getQuery();
		
		$query->execute();
	}
	
	/**
	 * Delete specified field attachments
	 * 
	 * @param string $field
	 */
	public function deleteFieldRecords($field)
	{
		$query = $this->createQueryBuilder('V')
			->delete()
			->where('V.Field = :field')
			->setParameter('field', $field)
			->getQuery();
		
		$query->execute();
	}}
