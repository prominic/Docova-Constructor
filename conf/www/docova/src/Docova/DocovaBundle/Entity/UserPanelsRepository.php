<?php
namespace Docova\DocovaBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * @author javad rahimi
 * UserPanelsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserPanelsRepository extends EntityRepository 
{
	/**
	 * Get all valid user panels for current user
	 * 
	 * @param integer $user
	 * @return array|mixed
	 */
	public function getUserAvailablePanels($user)
	{
		$query = $this->createQueryBuilder('UP')
			->where('UP.assignedUser = :user')
			->orWhere("UP.shareWith = 'Everyone' AND UP.shareType = 'Shared' AND UP.parentPanel IS NULL")
			->andWhere('UP.trash = false')
			->andWhere('UP.isWorkspace != true')
			->setParameter('user', $user)
			->orderBy('UP.layoutOrder', 'ASC')
			->getQuery();
		
		$result = $query->getResult();
		
		return $result;
	}
	
	/**
	 * Get shared list panels from a parent panel
	 * 
	 * @param integer $parentPanel
	 * @return array|mixed
	 */
	public function getSharedList($parentPanel)
	{
		$query = $this->createQueryBuilder('UP')
			->where('UP.parentPanel = :parentPanel')
			->andWhere('UP.isWorkspace != true')
			->setParameter('parentPanel', $parentPanel)
			->getQuery();
		
		$result = $query->getResult();
		
		return $result;
	}
	
	/**
	 * Get the last layout order for specific user
	 * 
	 * @param integer $user
	 * @return number
	 */
	public function getUserLastLayoutOrder($user)
	{
		$query = $this->createQueryBuilder('UP')
			->select('MAX(UP.layoutOrder)')
			->where('UP.assignedUser = :user')
			->andWhere('UP.isWorkspace != true')
			->setParameter('user', $user)
			->getQuery();
		
		$result = $query->getSingleScalarResult();

		if (!empty($result)) {
			return $result;
		}
		
		return 0;
	}
	
	/**
	 * Get shared panels with specific user(s) of a parent panel
	 * 
	 * @param array $users_list
	 * @param integer $panel
	 * @return mixed|array
	 */
	public function getUsersChildPanel($users_list, $panel)
	{
		$query = $this->createQueryBuilder('UP')
			->join('UP.assignedUser', 'U')
			->where('UP.parentPanel = :panel')
			->andWhere('UP.isWorkspace != true')
			->setParameter('panel', $panel);
		if (count($users_list) > 1) {
			$query->andWhere($query->expr()->in('U.userNameDnAbbreviated', $users_list));
		}
		else {
			$query->andWhere('U.userNameDnAbbreviated = :user')
				->setParameter('user', $users_list[0]);
		}
		
		$result = $query->getQuery()->getResult();
		
		return $result;
	}
	
	/**
	 * Find the removed panel/subpanel which was assigned to the user
	 * 
	 * @param integer $parentPanel
	 * @param integer $user
	 * @return boolean|mixed
	 */
	public function findRemovedPanel($parentPanel, $user)
	{
		$query = $this->createQueryBuilder('UP')
			->where('UP.parentPanel = :parentPanel AND UP.assignedUser = :user')
			->orWhere('UP.parentPanel IS NULL AND UP.trash = true AND UP.creator = :user')
			->andWhere('UP.isWorkspace != true')
			->setParameters(array('parentPanel' => $parentPanel, 'user' => $user))
			->getQuery();
		
		try {
			$result = $query->getOneOrNullResult();
		}
		catch (\Exception $e) {
			return false;
		}
		
		return $result;
	}
	
	/**
	 * Check if widget exists in user panel
	 * 
	 * @param string $panel
	 * @param string $widget
	 * @return boolean
	 */
	public function widgetExists($panel, $widget)
	{
		$query = $this->createQueryBuilder('UP')
			->select('COUNT(W.id)')
			->join('UP.panelWidgets', 'W')
			->where('W.widget = :widget')
			->andWhere('UP.id = :panel')
			->andWhere('UP.isWorkspace != true')
			->setParameter('widget', $widget)
			->setParameter('panel', $panel)
			->getQuery();

		$result = $query->getSingleScalarResult();
		return $result > 0 ? true : false;
	}
}