<?php
namespace Docova\DocovaBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * DocumentWorkflowStepsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DocumentWorkflowStepsRepository extends EntityRepository
{
	/**
	 * Reset a workflow step to default value
	 * 
	 * @param \Docova\DocovaBundle\Entity\Documents $document
	 * @param integer $order
	 */
	public function resetStep($document, $order, $juststep=false)
	{
		if ( $juststep ){
			$query = $this->getEntityManager()->createQuery(
			"UPDATE DocovaBundle:DocumentWorkflowSteps DWS SET DWS.Status = 'Pending', DWS.Date_Completed = NULL 
			 WHERE DWS.Document = :document AND DWS.Position = :order"
			)->setParameters(array('document' => $document, 'order' => $order));
		
		}else{
			$query = $this->getEntityManager()->createQuery(
			"UPDATE DocovaBundle:DocumentWorkflowSteps DWS SET DWS.Status = 'Pending', DWS.Date_Completed = NULL 
			 WHERE DWS.Document = :document AND DWS.Position >= :order"
			)->setParameters(array('document' => $document, 'order' => $order));
		
		}
		
		$query->execute();
		
		if ( $juststep){
			$query = $this->getEntityManager()->createQuery(
			"DELETE FROM DocovaBundle:WorkflowCompletedBy WC WHERE WC.DocWorkflowStep IN (
				SELECT DWS.id FROM DocovaBundle:DocumentWorkflowSteps DWS WHERE DWS.Document = :document AND DWS.Position = :order
			)"
			)->setParameters(array('document' => $document, 'order' => $order));
		}else{
			$query = $this->getEntityManager()->createQuery(
			"DELETE FROM DocovaBundle:WorkflowCompletedBy WC WHERE WC.DocWorkflowStep IN (
				SELECT DWS.id FROM DocovaBundle:DocumentWorkflowSteps DWS WHERE DWS.Document = :document AND DWS.Position >= :order
			)"
			)->setParameters(array('document' => $document, 'order' => $order));
			
		}
		
		$query->execute();
		
		if ( $juststep ){
			$query = $this->getEntityManager()->createQuery(
			"UPDATE DocovaBundle:DocumentWorkflowSteps DWS SET DWS.Date_Started = NULL,  DWS.IsCurrentStep = false 
			 WHERE DWS.Document = :document AND DWS.Position = :order"
			)->setParameters(array('document' => $document, 'order' => $order));

		}else{
			$query = $this->getEntityManager()->createQuery(
			"UPDATE DocovaBundle:DocumentWorkflowSteps DWS SET DWS.Date_Started = NULL,  DWS.IsCurrentStep = false 
			 WHERE DWS.Document = :document AND DWS.Position > :order"
			)->setParameters(array('document' => $document, 'order' => $order));	
		}
		
/*
		$unset_start_date = ($unset_start_date === true) ? ', DWS.Date_Started=NULL' : '';
		$query = $this->getEntityManager()->createQuery("UPDATE DocovaBundle:DocumentWorkflowSteps DWS SET DWS.Status ='Pending', DWS.Completed_By=NULL, DWS.Date_Completed=NULL, DWS.Completed_By=NULL$unset_start_date WHERE DWS.Document = :document AND DWS.Workflow_Steps = :wfstep")
				->setParameters(array('document' => $document, 'wfstep' => $step_id));
*/		
//		var_dump($query->getParameters());
		$query->execute();
	}
	
	/**
	 * Get single result base on the criteria
	 * 
	 * @param array $criteria
	 * @return mixed
	 */
	public function getOneBy($criteria = array())
	{
		if (!empty($criteria)) 
		{
			$query = $this->createQueryBuilder('DWS')
				->where('DWS.id IS NOT NULL');
			foreach ($criteria as $field => $value) {
				if ($value === null) 
				{
					$query->andWhere("DWS.$field IS NULL");
				}
				elseif ($value == 'NOT NULL') {
					$query->andWhere("DWS.$field IS NOT NULL");
				}
				else {
					$query->andWhere("DWS.$field = :f$field")
						->setParameter("f$field", $value);
				}
			}
			
			try {
				$result = $query->getQuery()->getSingleResult();
				return $result;
			}
			catch (\Exception $e) {
				return null;
			}
		}
	}

	/**
	 * Find set of objects by an array of criteria, which objects can be ordered by an array of fields
	 * @param array $criteria
	 * @param array $orderby
	 * @return array
	 */
	public function findStepsBy($criteria, $orderby = array())
	{
		$where = 'DWS.Step_Type != 1 AND ';
		$parameters = array();
		
		if (is_array($criteria) && !empty($criteria)) 
		{
			$t = 0;
			foreach ($criteria as $field => $value) {
				$where .= "$field= :t$t AND ";
				$parameters["t$t"] = $value;
				$t++;
			}
			
			$where = substr_replace($where, '', -4);
		}
		else {
			return array();
		}
		$query = $this->createQueryBuilder('DWS')
			->addSelect('D')
			->join('DWS.Document', 'D')
			->join('DWS.assignee', 'A')
			->where($where)
			->setParameters($parameters);
		
		if (!empty($orderby) && count($orderby) > 0)
		{
			$query->orderBy(key($orderby), current($orderby));
		}
		
		$result = $query->getQuery()->getResult();

		if (empty($result)) 
		{
			return array();
		}
		return $result;
	}

	/**
	 * Get current active step of the workflow steps of a document
	 * 
	 * @param integer $document_id
	 * @return array|NULL
	 */
	public function getFirstPendingStep($document_id)
	{
		$query = $this->createQueryBuilder('DWS')
			->where("DWS.Document = :doc_id AND DWS.Date_Completed IS NULL AND DWS.Date_Started IS NOT NULL AND DWS.Status = 'Pending'")
			->setParameter('doc_id', $document_id)
			->getQuery();

		try {
			$result = $query->getResult();
			return $result;
		}
		catch (\Exception $e)
		{
			return null;
		}
	}
	
	/**
	 * Get started and pending steps of document
	 * 
	 * @return mixed
	 */
	public function getStartedPendingWfSteps()
	{
		$q = $this->createQueryBuilder('DWS');
		$query = $q->join('DWS.Document', 'D')
			->where("DWS.Status = 'Pending'")
			->andWhere($q->expr()->isNotNull('DWS.Date_Started'))
			->andWhere($q->expr()->isNull('DWS.Date_Completed'))
			->andWhere('D.Trash = false AND D.Archived = false')
			->getQuery();
		
		return $query->getResult();
	}
	
	/**
	* Deletes documents from web admin view
	* @param: xml data with id to delete
	* @return: xml Data response
	*/
	public function deleteSelectedDocuments($post_xml)
	{
		$deleted=0;
	
		foreach ($post_xml->getElementsByTagName('Unid') as $doc_id)
		{
			$document = $this->find($doc_id->nodeValue);
			if (!empty($document))
			{
				$this->_em->remove($document);
				$deleted++;
				$this->_em->flush(); // commit each delete
			}
	
		}
		// setup return xml
		$response_xml = new \DOMDocument("1.0", "UTF-8");
		$root = $response_xml->appendChild($response_xml->createElement('Results'));
		if ($deleted !== 0)
		{
			$child = $response_xml->createElement('Result', 'OK');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Status';
			$child->appendChild($attrib);
			$root->appendChild($child);
	
			$child = $response_xml->createElement('Result', $deleted);
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Ret1';
			$child->appendChild($attrib);
			$root->appendChild($child);
		}
		else {
			$child = $response_xml->createElement('Result', 'FAILED');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Status';
			$child->appendChild($attrib);
			$root->appendChild($child);
	
			$child = $response_xml->createElement('Result', 'Could not delete one or more of the selected documents.');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'ErrMsg';
			$child->appendChild($attrib);
			$root->appendChild($child);
		}
		return $response_xml->saveXML();
	}

	/**
	 * Get all pending workflow review items for the user
	 *
	 * @param integer $user
	 * @return mixed|array
	 */
	public function getMyReviweItems($user)
	{
		$query = $this->createQueryBuilder('DWF')
			->addSelect('D')
			->join('DWF.Document', 'D')
			->distinct('DWF.Document')
			->where("DWF.Status = 'Pending' AND DWF.Step_Type = 2 AND D.Trash = false AND D.Archived = false AND D.Creator = :originator")
			->setParameter('originator', $user)
			->orderBy('DWF.Position')
			->getQuery();
	
		$result = $query->getResult();
	
		return $result;
	}

	/**
	 * Get all pending workflow items for the user
	 *
	 * @param integer $user
	 * @return mixed|array
	 */
	public function getPendingWorkflowItems($user)
	{
		$query = $this->createQueryBuilder('DWF')
			->join('DWF.Document', 'D')
			->join('D.folder', 'F')
			->join('F.Library', 'L')
			->join('DWF.assignee', 'A')
			->distinct('DWF.Document')
			->where('L.Trash = false')
			->andWhere("DWF.Status = 'Pending' OR DWF.Status = 'Paused'")
			->andWhere('D.Trash = false')
			->andWhere('D.Archived = false')
			->andWhere('A.Assignee = :assignee')
			->andWhere('DWF.Date_Started IS NOT NULL')
			->setParameter('assignee', $user)
			->getQuery();
	
		$result = $query->getResult();
	
		return $result;
	}

	/**
	 * Get summery of all workflow items (in all libraries or specific library and/or folder)
	 *  
	 * @param string $library
	 * @param string $folder
	 * @return mixed|array
	 */
	public function getWorkflowsSummary($library = null, $folder = null)
	{
		$query = $this->createQueryBuilder('DWF')
			->addSelect('D')
			->join('DWF.Document', 'D')
			->join('D.folder', 'F')
			->join('F.Library', 'L')
			->where('L.Trash = false')
			->andWhere('DWF.Date_Started IS NOT NULL AND DWF.Date_Completed IS NULL')
			->andWhere('D.Trash = false AND D.Archived = false')
			->andWhere('F.Del = false AND F.Inactive = 0');
		
		if (!empty($library)) {
			$query->andWhere('L.Library_Title = :library')
				->setParameter('library', $library);
			
			if (!empty($folder)) {
				$query->andWhere('F.Folder_Name = :folder')
					->setParameter('folder', $folder);
			}
		}
		
		$result = $query->getQuery()->getResult();
		
		return $result;
	}
	
	/**
	 * Check if workflow has been started
	 * 
	 * @param string $document
	 * @return boolean
	 */
	public function isWorkflowStarted($document)
	{
		$query = $this->createQueryBuilder('DWF')
			->select('COUNT(DWF.id)')
			->where('DWF.Document = :doc')
			->andWhere('DWF.Date_Completed IS NOT NULL')
			->setParameter('doc', $document)
			->getQuery();
		try {
			$result = $query->getSingleScalarResult();
			return !empty($result) ? true :false;
		}
		catch (\Exception $e) {
			var_dump($e->getMessage());
		}
		return false;
	}
	
	/**
	 * Get the user all pending workflow tasks
	 * 
	 * @param string $user
	 * @return array|null
	 */
	public function getWorkflowTasks($user)
	{
		$query = $this->createQueryBuilder('DWF')
			->select(array('DWF', 'A', 'D.id AS document', 'D.Doc_Title', 'D.Date_Created', 'IDENTITY(D.folder) AS folder', 'IDENTITY(D.application) AS app'))
			->join('DWF.Document', 'D')
			->join('DWF.assignee', 'A')
			->where('A.assignee = :assignee')
			->andWhere("DWF.Status = 'Pending'")
			->andWhere("DWF.Date_Started != ''")
			->andWhere('D.Trash = false')
			->addOrderBy('DWF.Position', 'ASC')
			->setParameter('assignee', $user)
//			->setMaxResults(50)
			->getQuery();
		
		$result = $query->getArrayResult();
		if (!empty($result) && !empty($result[0])) 
		{
			foreach ($result as $key => $row) {
				if (!empty($row['folder'])) {
					$folder = $this->_em->createQueryBuilder()
						->select(['F.Folder_Name', 'L.id AS library', 'L.Library_Title', 'L.Trash AS LTrash'])
						->from('DocovaBundle:Folders', 'F')
						->join('F.Library', 'L')
						->where('F.id = :folderid')
						->setParameter('folderid', $row['folder'])
						->getQuery()
						->getSingleResult(\Doctrine\ORM\AbstractQuery::HYDRATE_ARRAY);
					$result[$key]['Folder_Name'] = !empty($folder) ? $folder['Folder_Name'] : '';
					$result[$key]['library'] = !empty($folder) ? $folder['library'] : '';
					$result[$key]['Library_Title'] = !empty($folder) ? $folder['Library_Title'] : '';
					$result[$key]['LTrash'] = !empty($folder) ? $folder['LTrash'] : '';
					$result[$key]['IsAppForm'] = false;
				}
				elseif (!empty($row['app'])) {
					$app = $this->_em->createQueryBuilder()
						->from('DocovaBundle:Libraries', 'A')
						->select(['A.Library_Title', 'A.Trash AS LTrash'])
						->where('A.id = :appid')
						->andWhere('A.isApp = true')
						->setParameter('appid', $row['app'])
						->getQuery()
						->getSingleResult(\Doctrine\ORM\AbstractQuery::HYDRATE_ARRAY);
					
					$result[$key]['Folder_Name'] = '';
					$result[$key]['library'] = $row['app'];
					$result[$key]['Library_Title'] = !empty($app) ? $app['Library_Title'] : '';
					$result[$key]['LTrash'] = !empty($app) ? $app['LTrash'] : '';
					$result[$key]['IsAppForm'] = true;
				}
				else {
					$result[$key]['folder'] = '';
					$result[$key]['Folder_Name'] = '';
					$result[$key]['library'] = '';
					$result[$key]['Library_Title'] = '';
					$result[$key]['LTrash'] = '';
					$result[$key]['IsAppForm'] = false;
				}
			}
			
			return $result;
		}

		return null;
	}
	
	/**
	 * Delete all document workflow steps
	 * 
	 * @param string $docid
	 */
	public function deleteAllDocWorkflows($docid)
	{
		$this->_em->beginTransaction();
		try {
			$conn = $this->_em->getConnection();
			$query = 'DELETE S FROM tb_docstep_action_senders AS S JOIN tb_doc_workflow_step_actions AS A ON (A.id = S.Message_Id) JOIN tb_document_workflow_steps AS W ON (W.id = A.Step_Id) WHERE W.Documnet_Id = ?';
			$stmt = $conn->prepare($$query);
			$stmt->bindValue(1, $docid);
			$stmt->execute();
			
			$query = 'DELETE A FROM tb_doc_workflow_step_actions AS A JOIN tb_document_workflow_steps AS S ON A.Step_Id = S.id WHERE S.Document_Id = ? ';
			$stmt = $conn->prepare($query);
			$stmt->bindValue(1, $docid);
			$stmt->execute();
			
			$query = 'DELETE A FROM tb_document_wrokflow_assignee AS A JOIN tb_document_workflow_steps AS S ON A.Workflow_Step_Id = S.id WHERE S.Document_Id = ?';
			$stmt = $conn->prepare($query);
			$stmt->bindValue(1, $docid);
			$stmt->execute();
			
			$query = 'DELETE C FROM tb_document_wrokflow_completedby AS C JOIN tb_document_workflow_steps AS S ON C.Workflow_Step_Id = S.id WHERE S.Document_Id = ?';
			$stmt = $conn->prepare($query);
			$stmt->bindValue(1, $docid);
			$stmt->execute();

			$query = 'DELETE U FROM tb_docwrokflowsteps_users AS U JOIN tb_document_workflow_steps AS S ON U.Step_Id = S.id WHERE S.Document_Id = ?';
			$stmt = $conn->prepare($query);
			$stmt->bindValue(1, $docid);
			$stmt->execute();

			$query = $this->createQueryBuilder('S')
				->delete()
				->where('S.Document_Id = :doc')
				->setParameter('doc', $docid)
				->getQuery();
			$query->execute();
			$this->_em->commit();
		}
		catch (\Exception $e) {
			$this->_em->rollback();
		}
	}
}