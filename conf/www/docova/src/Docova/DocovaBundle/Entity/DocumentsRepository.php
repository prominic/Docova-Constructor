<?php

namespace Docova\DocovaBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * DocumentsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DocumentsRepository extends EntityRepository
{
	
	public function getAllFolderDocuments($folder, $start, $count, $user, $granted = false, $include_subfolders = false, $current_versions = false, $pending_release = false, $showDisplayName = false)
	{
		$conn = $this->_em->getConnection();
		$driver = $conn->getDriver()->getName();
	    $positions = explode('.', $folder->getPosition());
    	if (count($positions) > 0) 
    	{
    		if (count($positions) == 1) {
    			unset($positions);
    		}
    		else {
	    		$p = '';
		    	$len = count($positions) - 1;
		    	for ($x = 0; $x < $len; $x++) {
		    		$temp = $positions[$x];
		    		$positions[$x] = $p . $positions[$x];
		    		$p = $p . $temp . '.'; 
		    	}
		    	unset($positions[$len]);
    		}
    	}
    	
    	$groups = $user->getRoles();
    	$groups = array_values(array_diff($groups, array('ROLE_USER', 'ROLE_ADMIN')));
    	$groups = !empty($groups[0]) ? "'".implode("','", $groups)."'" : null;

		if ($driver == 'pdo_mysql')
		{
			if ($granted === false) 
			{
				$folder_q = '';
				if (isset($positions) && count($positions) > 0) {
					$positions = implode("','", $positions);
					$folder_q .= " OR `Position` IN ('$positions')";
				}

				$grpQuery = !empty($groups) ? " AND `SI`.`identifier` NOT IN ($groups)" : '';
/*				$query = "SELECT COUNT(DISTINCT(`AE`.`id`)) FROM `acl_entries` AS `AE` INNER JOIN `acl_object_identities` AS `AI` ON (`AE`.`object_identity_id` = `AI`.`id`) INNER JOIN `acl_security_identities` AS `SI` ON (`AE`.`security_identity_id` = `SI`.`id`)
							WHERE `AI`.`object_identifier` IN (SELECT `id` FROM `tb_library_folders` WHERE `id` = ? $folder_q AND `Library_Id` = '{$folder->getLibrary()->getId()}') AND `AE`.`mask` = 1 AND (`SI`.`identifier` != ? AND `SI`.`identifier` != ? $grpQuery)";
*/
				$query = "SELECT COUNT(DISTINCT(`AE`.`id`)) FROM `acl_entries` AS `AE` INNER JOIN `acl_object_identities` AS `AI` ON (`AE`.`object_identity_id` = `AI`.`id`)  INNER JOIN `acl_security_identities` AS `SI` ON (`AE`.`security_identity_id` = `SI`.`id`)
							WHERE (`AI`.`object_identifier` IN (SELECT `id` FROM `tb_library_folders` WHERE `id` = ? $folder_q AND `Library_Id` = '{$folder->getLibrary()->getId()}') AND `AE`.`mask` IN (1,64,128)
							 AND (`AI`.`object_identifier` = ? AND `AE`.`mask` = 2) AND `SI`.`identifier` != ? AND `SI`.`identifier` != ? $grpQuery)";
				$result = $conn->fetchArray($query, array($folder->getId(), $folder->getId(), 'Docova\DocovaBundle\Entity\UserAccounts-' . $user->getUsername(), 'ROLE_USER'));
				if (!empty($result) && $result[0] > 0)
				{
					return array();
				}
				
				$grpQuery = !empty($groups) ? " OR `SI`.`identifier` IN ($groups)" : '';
				$query = "SELECT COUNT(DISTINCT(`AE`.`id`)) FROM `acl_entries` AS `AE` INNER JOIN `acl_object_identities` AS `AI` ON (`AE`.`object_identity_id` = `AI`.`id`)  INNER JOIN `acl_security_identities` AS `SI` ON (`AE`.`security_identity_id` = `SI`.`id`)
							WHERE `AI`.`object_identifier` IN (SELECT `id` FROM `tb_library_folders` WHERE `id` = ? $folder_q AND `Library_Id` = '{$folder->getLibrary()->getId()}') AND `AE`.`mask` >= 64 AND (`SI`.`identifier` = ? $grpQuery)";
				$result = $conn->fetchArray($query, array($folder->getId(), 'Docova\DocovaBundle\Entity\UserAccounts-' . $user->getUsername()));
				if (!empty($result) && $result[0] > 0) 
				{
					$granted = true;
				}
			}

			if ($granted === false) 
			{
				$grpQuery = !empty($groups) ? " OR `SI`.`identifier` IN ($groups)" : '';
				$query = "SELECT COUNT(`AE`.`id`) FROM `acl_entries` AS `AE` INNER JOIN `acl_object_identities` AS `AI` ON (`AE`.`object_identity_id` = `AI`.`id`) INNER JOIN `acl_security_identities` AS `SI` ON (`AE`.`security_identity_id` = `SI`.`id`) 
							WHERE `AE`.`mask` = 1 AND `AI`.`object_identifier` = ? AND (`SI`.`identifier` = ? OR `SI`.`identifier` = 'ROLE_USER' $grpQuery)";
				$is_reader = $conn->fetchArray($query, array($folder->getId(), 'Docova\DocovaBundle\Entity\UserAccounts-'.$user->getUsername()));
				$is_reader = (!empty($is_reader) && $is_reader[0] > 0) ? true : false;
				
				if ($is_reader === true) 
				{
					$query = "SELECT COUNT(`AE`.`id`) FROM `acl_entries` AS `AE` INNER JOIN `acl_object_identities` AS `AI` ON (`AE`.`object_identity_id` = `AI`.`id`) INNER JOIN `acl_security_identities` AS `SI` ON (`AE`.`security_identity_id` = `SI`.`id`)
								WHERE `AE`.`mask` = 2 AND `AI`.`object_identifier` = ? AND (`SI`.`identifier` = ? $grpQuery)";
					$is_author = $conn->fetchArray($query, array($folder->getId(), 'Docova\DocovaBundle\Entity\UserAccounts-'.$user->getUsername()));
					if (!empty($is_author) && $is_author[0] > 0) 
					{
						$is_reader = false;
					}
					else {
						$query = "SELECT COUNT(`AE`.`id`) FROM `acl_entries` AS `AE` INNER JOIN `acl_object_identities` AS `AI` ON (`AE`.`object_identity_id` = `AI`.`id`) INNER JOIN `acl_security_identities` AS `SI` ON (`AE`.`security_identity_id` = `SI`.`id`)
							WHERE `AI`.`object_identifier` = ? AND `AE`.`mask` IN (1,2) AND `SI`.`identifier` = 'ROLE_USER'";
						$result = $conn->fetchArray($query, array($folder->getId()));
						$is_reader = (!empty($result) && $result[0] > 1) ? false : $is_reader;
					}
					$query = $is_author = null;
				}

				$query = "SELECT DISTINCT(`AI`.`object_identifier`) FROM `acl_object_identities` AS `AI` INNER JOIN `acl_entries` AS `AE` ON (`AI`.`id` = `AE`.`object_identity_id`) INNER JOIN `acl_security_identities` AS `SI` ON (`AE`.`security_identity_id` = `SI`.`id`)
							WHERE `AI`.`object_identifier` IN (
								SELECT DISTINCT(`D`.`id`) FROM `tb_folders_documents` AS `D` LEFT JOIN `tb_bookmarks` AS `B` ON (`B`.`Document_Id` = `D`.`id`) WHERE ((`D`.`Folder_Id` = ? OR `B`.`Target_Folder` = ?)";
				if ($include_subfolders === true)
				{
					$grpQuery = !empty($groups) ? " OR (`ISI`.`identifier` IN ($groups) AND `IAE`.`mask` IN (1,2,64,128))" : '';
					$query .= " OR `D`.`Folder_Id` IN (
								SELECT `id` FROM `tb_library_folders` WHERE `Position` LIKE '{$folder->getPosition()}.%' AND `Library_Id` = '{$folder->getLibrary()->getId()}' AND `Del` = 0 AND `Sub_Trash` = 0 AND `id` IN (
									SELECT DISTINCT(`IAI`.`object_identifier`) FROM `acl_object_identities` AS `IAI` INNER JOIN `acl_entries` AS `IAE` ON (`IAI`.`id` = `IAE`.`object_identity_id`) INNER JOIN `acl_security_identities` AS `ISI` ON (`IAE`.`security_identity_id` = `ISI`.`id`)
									WHERE (`ISI`.`identifier` = ? AND `IAE`.`mask` IN (1,2,64,128)) OR (`ISI`.`identifier` = 'ROLE_USER' AND `IAE`.`mask` = 1) $grpQuery
								))";
					$query .= " OR `B`.`Target_Folder` IN (SELECT `id` FROM `tb_library_folders` WHERE `Position` LIKE '{$folder->getPosition()}.%' AND `Library_Id` = '{$folder->getLibrary()->getId()}' AND `Del` = 0 AND `Sub_Trash` = 0)";
				}
				$query .= ')';
				if ($folder->getPrivateDraft())
				{
					$query .= ' AND `D`.`Status_No` != 1';
					$query .= " AND `D`.`id` IN (SELECT DISTINCT(`WFD`.`Document_Id`) FROM `tb_document_workflow_steps` AS `WFD` INNER JOIN `tb_document_workflow_assignee` AS `A` ON (`WFD`.`id` = `A`.`Workflow_Step_Id`) WHERE `WFD`.`Status` = 'Pending' `A`.`Assignee_Id` = '{$user->getId()}')";
					$query .= ')';
				}
				else
				{
					if ($is_reader === true && !$folder->getSetDVA()) 
					{
						$query .= ' AND `D`.`Status_No` != 0';
					}
					$query .= ')';
				}

				$params = array($folder->getId(), $folder->getId(), 'Docova\DocovaBundle\Entity\UserAccounts-'.$user->getUsername(), 'ROLE_USER', 'Docova\DocovaBundle\Entity\UserAccounts-'.$user->getUsername());
				if ($include_subfolders === true) 
				{
					$params = array($folder->getId(), $folder->getId(), 'Docova\DocovaBundle\Entity\UserAccounts-'.$user->getUsername(), 'Docova\DocovaBundle\Entity\UserAccounts-'.$user->getUsername(), 'ROLE_USER', 'Docova\DocovaBundle\Entity\UserAccounts-'.$user->getUsername());
				}
				$grpQuery = !empty($groups) ? " OR `SI`.`identifier` IN ($groups)" : '';
				$query .= " AND ((`AE`.`mask` IN (1,128) AND (`SI`.`identifier` = ? OR `SI`.`identifier` = ? $grpQuery)) OR (`AE`.`mask` = 4 AND (`SI`.`identifier` = ? $grpQuery)))";
				$result = $conn->fetchAll($query, $params);
				if (!empty($result[0]))
				{
					if (!empty($start) && !empty($count)) 
					{
						$query = 'SELECT DISTINCT(`D`.`id`), CAST(`D`.`Doc_Version` AS DECIMAL(10,2)) AS `dVersion`, `D`.`Doc_Title`, `D`.`Doc_Version`, `D`.`Revision`, `D`.`Doc_Status`, `D`.`Status_No`, `D`.`Description`, `D`.`Keywords`, `D`.`Date_Created`, `D`.`Date_Modified`, `D`.`Locked`, `D`.`Released_Date`, `D`.`Last_Review_Date`, `D`.`Next_Review_Date`, `D`.`Has_Pending_Review`, `D`.`Review_Type`, `D`.`Review_Period`, `D`.`Review_Period_Option`, `D`.`Review_Date_Select`, `D`.`Review_Start_Month`, `D`.`Review_Start_Day`, `D`.`Author_Review`, `D`.`Archive_Type`, `D`.`Custom_Archive_Date`, `D`.`Trash`, `D`.`Archived`, `D`.`Date_Archived`, `D`.`Status_No_Archived`, `D`.`Previous_Status`, `D`.`Date_Deleted`, `D`.`Parent_Document`, `D`.`Doc_Owner`, `D`.`Doc_Author`, `D`.`Created_By`, `D`.`Modified_By`, `D`.`Lock_Editor`, `D`.`Released_By`, `D`.`Deleted_By`, `D`.`Folder_Id`, `D`.`Doc_Type_Id`';
						if ($showDisplayName === true) {
							$query .= ', `U1`.`Display_Name` AS `CreatedBy`, `U2`.`Display_Name` AS `Author`, `U3`.`Display_Name` AS `ModifiedBy` ';
						}
						else {
							$query .= ', `U1`.`user_name_dn_abbreviated` AS `CreatedBy`, `U2`.`user_name_dn_abbreviated` AS `Author`, `U3`.`user_name_dn_abbreviated` AS `ModifiedBy` ';
						}
					}
					else {
						$query = 'SELECT COUNT(DISTINCT(`D`.`id`)) AS `Amount` ';
					}

					$query .= ' FROM `tb_folders_documents` AS `D`';
					if ($showDisplayName === true) {
						$query .= ' INNER JOIN `tb_user_profile` AS `U1` ON (`D`.`Created_By` = `U1`.`User_Id`) LEFT JOIN `tb_user_profile` AS `U2` ON (`D`.`Doc_Author` =  `U2`.`User_Id` ) LEFT JOIN `tb_user_profile` AS `U3` ON (`D`.`Modified_By` =  `U3`.`User_Id` )';
					}
					else {
						$query .= ' INNER JOIN `tb_user_accounts` AS `U1` ON (`D`.`Created_By` = `U1`.`id`) LEFT JOIN `tb_user_accounts` AS `U2` ON (`D`.`Doc_Author` =  `U2`.`id` ) LEFT JOIN `tb_user_accounts` AS `U3` ON (`D`.`Modified_By` =  `U3`.`id` )';
					}
					$query .= ' WHERE `D`.`Trash` = 0 AND `D`.`Archived` = 0';
					if ($current_versions === true)
					{
						$query .= ' AND `D`.`Status_No` = 1';
					}
					elseif ($pending_release === true)
					{
						$query .= ' AND `D`.`Status_No` = 0';
					}
					$documents = array();
					$len = count($result);
					for ($x = 0; $x < $len; $x++) {
						$documents[] = $result[$x]['object_identifier'];
					}
					$documents = implode("','", $documents);
					$query .= " AND (`D`.`id` IN ('$documents') OR `D`.`id` IN (SELECT DISTINCT(`DWS`.`Document_Id`) FROM `tb_document_workflow_steps` AS `DWS` INNER JOIN `tb_document_workflow_assignee` AS `A` ON (`DWS`.`id` = `A`.`Workflow_Step_Id`) INNER JOIN `tb_folders_documents` AS `Doc` ON (`DWS`.`Document_Id` = `Doc`.`id`)
					 			WHERE `Doc`.`Folder_Id` = ? AND `DWS`.`Status` = 'Pending' AND `DWS`.`Date_Started` IS NOT NULL AND `DWS`.`Date_Completed` IS NULL AND `A`.`Assignee_Id` = '{$user->getId()}'))";
					$query .= (!empty($start) && !empty($count)) ? ' ORDER BY `D`.`Doc_Title` ASC, `dVersion` DESC, `D`.`Revision` DESC LIMIT '.($start-1).", $count" : '';
					$result = $conn->fetchAll($query, array($folder->getId()));
					if (!empty($result[0]) && !empty($start) && !empty($count)) 
					{
						$len = count($result);
						$query = "SELECT `Document_Id`, `Target_Folder` FROM `tb_bookmarks` WHERE `Document_Id` IN ('$documents')";
						if ($include_subfolders !== true)
						{
							$query .=  "AND `Target_Folder` = '{$folder->getId()}'";
						}
						$bookmarks = $conn->fetchAll($query);
						if (!empty($bookmarks[0])) 
						{
							$blen = count($bookmarks);
							for ($x = 0; $x < $blen; $x++) {
								$index = $this->getDocumentIndex($result, $bookmarks[$x]['Document_Id']);
								if ($index !== false) 
								{
									$result[$index]['Target_Folder'] = $bookmarks[$x]['Target_Folder'];
								}
							}
							$blen = $index = $x = null;
						}
						$bookmarks = null;
						$docTypes = array();
						for ($x = 0; $x < $len; $x++) {
							$docTypes[] = $result[$x]['Doc_Type_Id'];
						}
						$docTypes = array_unique($docTypes);
						$docTypes = implode("','", $docTypes);
						$query = "SELECT `id`, `Key_Type`, `Doc_Name`, `Doc_Icon`, `Disable_Activities`, `Hide_Subject`, `Subject_Label`, `Translate_Subject_To`, `Hide_On_Reading`, `Hide_On_Editing`, `Hide_On_Custom`, `Section_Style`, `Section_Label`, `Enable_For_DLE`, `Enable_Mail_Acquire`, `Enable_Discussion`, `Allow_Forwarding`, `Forward_Save`, `Content_Sections`, `Enable_Lifecycle`, `Initial_Status`, `Final_Status`, `Superseded_Status`, `Discarded_Status`, `Archived_Status`, `Deleted_Status`, `Enable_Versions`, `Restrict_Live_Drafts`, `Show_Headers`, `Strict_Versioning`, `Allow_Retract`, `Restrict_Drafts`, `Update_Bookmarks`, `Hide_Workflow`, `Disable_Delete_In_Workflow`, `Hide_Buttons` FROM `tb_document_types` WHERE `id` IN('$docTypes')";
						$values = $conn->fetchAll($query);
						$query = $docTypes = null;
						$vLen = count($values);
						for ($x = 0; $x < $len; $x++) {
							for ($c = 0; $c < $vLen; $c++)
							{
								if ($result[$x]['Doc_Type_Id'] == $values[$c]['id'])
								{
									foreach ($values[$c] as $key => $v) {
										if ($key == 'id') { continue; }
										$result[$x][$key] = $v;
									}
									$key = $v = null;
									break;
								}
							}
						}
						$vLen = $values = null;
						$query = 'SELECT `V`.`Doc_Id`, `F`.`Field_Name`, `V`.`Summary_Value` FROM `tb_form_text_values` AS `V` JOIN `tb_design_elements` AS `F` ON (`V`.`Field_Id` = `F`.`id`) WHERE `V`.`Doc_Id` IN (';
						for ($x = 0; $x < $len; $x++) {
							$query .= "'{$result[$x]['id']}',";
						}
						$query = substr_replace($query, ") AND `V`.`Summary_Value` <> '' ORDER BY `V`.`Doc_Id`", -1);
						$values = $conn->fetchAll($query);
						$query = null;
						if (!empty($values[0])) 
						{
							$vLen = count($values);
							for ($c = 0; $c < $vLen; $c++)
							{
								$index = $this->getDocumentIndex($result, $values[$c]['Doc_Id']);
								if ($index !== false) 
								{
									if (empty($result[$index][str_replace('[]', '', $values[$c]['Field_Name'])]))
										$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $values[$c]['Summary_Value'];
									else {
										$old_value = $result[$index][str_replace('[]', '', $values[$c]['Field_Name'])];
										$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $old_value . ';' . $values[$c]['Summary_Value'];
										$old_value = null;
									}
								}
							}
							$vLen = $c = $index = null;
						}
						$values = null;

						$query = 'SELECT `V`.`Doc_Id`, `F`.`Field_Name`, `V`.`Field_Value` FROM `tb_form_datetime_values` AS `V` JOIN `tb_design_elements` AS `F` ON (`V`.`Field_Id` = `F`.`id`) WHERE `V`.`Doc_Id` IN (';
						for ($x = 0; $x < $len; $x++) {
							$query .= "'{$result[$x]['id']}',";
						}
						$query = substr_replace($query, ") AND `V`.`Field_Value` IS NOT NULL ORDER BY `V`.`Doc_Id`", -1);
						$values = $conn->fetchAll($query);
						$query = null;
						if (!empty($values[0])) 
						{
							$vLen = count($values);
							for ($c = 0; $c < $vLen; $c++)
							{
								$index = $this->getDocumentIndex($result, $values[$c]['Doc_Id']);
								if ($index !== false) 
								{
									if (empty($result[$index][str_replace('[]', '', $values[$c]['Field_Name'])]))
										$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $values[$c]['Field_Value'];
									else {
										$old_value = $result[$index][str_replace('[]', '', $values[$c]['Field_Name'])];
										$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $old_value . ';' . $values[$c]['Field_Value'];
										$old_value = null;
									}
								}
							}
							$vLen = $c = $index = null;
						}
						$values = null;

						$query = 'SELECT `V`.`Doc_Id`, `F`.`Field_Name`, `V`.`Field_Value` FROM `tb_form_numeric_values` AS `V` JOIN `tb_design_elements` AS `F` ON (`V`.`Field_Id` = `F`.`id`) WHERE `V`.`Doc_Id` IN (';
						for ($x = 0; $x < $len; $x++) {
							$query .= "'{$result[$x]['id']}',";
						}
						$query = substr_replace($query, ") AND `V`.`Field_Value` <> '' ORDER BY `V`.`Doc_Id`", -1);
						$values = $conn->fetchAll($query);
						$query = null;
						if (!empty($values[0])) 
						{
							$vLen = count($values);
							for ($c = 0; $c < $vLen; $c++)
							{
								$index = $this->getDocumentIndex($result, $values[$c]['Doc_Id']);
								if ($index !== false) 
								{
									if (empty($result[$index][str_replace('[]', '', $values[$c]['Field_Name'])]))
										$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $values[$c]['Field_Value'];
									else {
										$old_value = $result[$index][str_replace('[]', '', $values[$c]['Field_Name'])];
										$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $old_value . ';' . strval($values[$c]['Field_Value']);
										$old_value = null;
									}
								}
							}
							$vLen = $c = $index = null;
						}
						$values = null;

						$query = 'SELECT `V`.`Doc_Id`, `F`.`Field_Name`, `U`.`user_name_dn_abbreviated` AS `Field_Value` FROM `tb_form_name_values` AS `V` JOIN `tb_design_elements` AS `F` ON (`V`.`Field_Id` = `F`.`id`) JOIN `tb_user_accounts` AS `U` ON (`V`.`Field_Value` = `U`.`id`) WHERE `V`.`Doc_Id` IN (';
						for ($x = 0; $x < $len; $x++) {
							$query .= "'{$result[$x]['id']}',";
						}
						$query = substr_replace($query, ") ORDER BY `V`.`Doc_Id`", -1);
						$values = $conn->fetchAll($query);
						$query = 'SELECT `V`.`Doc_Id`, `F`.`Field_Name`, `G`.`Display_Name` AS `Field_Value` FROM `tb_form_group_values` AS `V` JOIN `tb_design_elements` AS `F` ON (`V`.`Field_Id` = `F`.`id`) JOIN `tb_user_roles` AS `G` ON (`V`.`Field_Value` = `G`.`id`) WHERE `V`.`Doc_Id` IN (';
						for ($x = 0; $x < $len; $x++) {
							$query .= "'{$result[$x]['id']}',";
						}
						$query = substr_replace($query, ") ORDER BY `V`.`Doc_Id`", -1);
						$gvalues = $conn->fetchAll($query);
						$query = null;
						if (!empty($gvalues[0]))
						{
							foreach ($gvalues as $group) {
								$values[] = $group;
							}
						}
						$gvalues = $group = null;
						if (!empty($values[0])) 
						{
							$vLen = count($values);
							for ($c = 0; $c < $vLen; $c++)
							{
								$index = $this->getDocumentIndex($result, $values[$c]['Doc_Id']);
								if ($index !== false) 
								{
									$v = $showDisplayName === true && strstr($values[$c]['Field_Value'], '/') !== false ? strstr($values[$c]['Field_Value'], '/', true) : $values[$c]['Field_Value'];
									if (empty($result[$index][str_replace('[]', '', $values[$c]['Field_Name'])]))
										$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $v;
									else {
										$old_value = $result[$index][str_replace('[]', '', $values[$c]['Field_Name'])];
										$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $old_value . ';' . $v;
										$old_value = null;
									}
								}
							}
							$vLen = $c = $index = null;
						}
						$values = null;
					}
					return $result;
				}
				else {
					return array();
				}
			}
			else {
				$query = 'SELECT `Document_Id`, `Target_Folder` FROM `tb_bookmarks` WHERE `Target_Folder` = ?';
				if ($include_subfolders === true) 
				{
					$query .= " OR `Target_Folder` IN (SELECT `id` FROM `tb_library_folders` WHERE `Position` LIKE '{$folder->getPosition()}.%' AND `Library_Id` = '{$folder->getLibrary()->getId()}')";
				}
				$bookmarks = $conn->fetchAll($query, array($folder->getId()));
				if (empty($bookmarks[0])) { $bookmarks = array(); }
				if (!empty($start) && !empty($count)) 
				{
					$query = 'SELECT DISTINCT(`D`.`id`), CAST(`D`.`Doc_Version` AS DECIMAL(10,2)) AS `dVersion`, `D`.`Doc_Title`, `D`.`Doc_Version`, `D`.`Revision`, `D`.`Doc_Status`, `D`.`Status_No`, `D`.`Description`, `D`.`Keywords`, `D`.`Date_Created`, `D`.`Date_Modified`, `D`.`Locked`, `D`.`Released_Date`, `D`.`Last_Review_Date`, `D`.`Next_Review_Date`, `D`.`Has_Pending_Review`, `D`.`Review_Type`, `D`.`Review_Period`, `D`.`Review_Period_Option`, `D`.`Review_Date_Select`, `D`.`Review_Start_Month`, `D`.`Review_Start_Day`, `D`.`Author_Review`, `D`.`Archive_Type`, `D`.`Custom_Archive_Date`, `D`.`Trash`, `D`.`Archived`, `D`.`Date_Archived`, `D`.`Status_No_Archived`, `D`.`Previous_Status`, `D`.`Date_Deleted`, `D`.`Parent_Document`, `D`.`Doc_Owner`, `D`.`Doc_Author`, `D`.`Created_By`, `D`.`Modified_By`, `D`.`Lock_Editor`, `D`.`Released_By`, `D`.`Deleted_By`, `D`.`Folder_Id`, `D`.`Doc_Type_Id`';
					if ($showDisplayName === true) {
						$query .= ', `U1`.`Display_Name` AS `CreatedBy`, `U2`.`Display_Name` AS `Author`, `U3`.`Display_Name` AS `ModifiedBy` ';
					}
					else {
						$query .= ', `U1`.`user_name_dn_abbreviated` AS `CreatedBy`, `U2`.`user_name_dn_abbreviated` AS `Author`, `U3`.`user_name_dn_abbreviated` AS `ModifiedBy` ';
					}
				}
				else {
					$query = 'SELECT COUNT(DISTINCT(`D`.`id`)) AS `Amount` ';
				}

				$query .= ' FROM `tb_folders_documents` AS `D`';
				if ($showDisplayName === true) {
					$query .= ' INNER JOIN `tb_user_profile` AS `U1` ON (`D`.`Created_By` = `U1`.`User_Id`) LEFT JOIN `tb_user_profile` AS `U2` ON (`D`.`Doc_Author` =  `U2`.`User_Id` ) LEFT JOIN `tb_user_profile` AS `U3` ON (`D`.`Modified_By` =  `U3`.`User_Id` )';
				}
				else {
					$query .= ' INNER JOIN `tb_user_accounts` AS `U1` ON (`D`.`Created_By` = `U1`.`id`) LEFT JOIN `tb_user_accounts` AS `U2` ON (`D`.`Doc_Author` =  `U2`.`id` ) LEFT JOIN `tb_user_accounts` AS `U3` ON (`D`.`Modified_By` =  `U3`.`id` )';
				}
				$query .= ' WHERE `D`.`Trash` = 0 AND `D`.`Archived` = 0';
				if ($current_versions === true)
				{
					$query .= ' AND `D`.`Status_No` = 1';
				}
				elseif ($pending_release === true)
				{
					$query .= ' AND `D`.`Status_No` = 0';
				}
				$query .= ' AND (`D`.`Folder_Id` = ? ';
				if ($include_subfolders !== false)
				{
					$query .= " OR `D`.`Folder_Id` IN (SELECT `id` FROM `tb_library_folders` WHERE `Position` LIKE '{$folder->getPosition()}.%' AND `Library_Id` = '{$folder->getLibrary()->getId()}' AND `Del` = 0 AND `Sub_Trash` = 0)";
				}
				$query .= ')';
				if (!empty($bookmarks)) 
				{
					$bQuery = '';
					foreach ($bookmarks as $b) {
						$bQuery .= "'".$b['Document_Id']."',";
					}
					$bQuery = substr_replace($bQuery, '', -1);
					$query .= " OR `D`.`id` IN ($bQuery)";
					$bQuery = $b = null;
				}
				$query .= (!empty($start) && !empty($count)) ? ' ORDER BY `D`.`Doc_Title` ASC, `dVersion` DESC, `D`.`Revision` DESC LIMIT '.($start-1).", $count" : '';
				$result = $conn->fetchAll($query, array($folder->getId()));
				if (!empty($result[0]) && !empty($start) && !empty($count)) 
				{
					$len = count($result);
					if (!empty($bookmarks))
					{
						foreach ($bookmarks as $b) {
							$index = $this->getDocumentIndex($result, $b['Document_Id']);
							if ($index !== false) 
							{
								$result[$index]['Target_Folder'] = $b['Target_Folder'];
							}
						}
						$b = $index = null;
					}
					$bookmarks = null;
					$docTypes = array();
					for ($x = 0; $x < $len; $x++) {
						$docTypes[] = $result[$x]['Doc_Type_Id'];
					}
					$docTypes = array_unique($docTypes);
					$docTypes = implode("','", $docTypes);
					$query = "SELECT `id`, `Key_Type`, `Doc_Name`, `Doc_Icon`, `Disable_Activities`, `Hide_Subject`, `Subject_Label`, `Translate_Subject_To`, `Hide_On_Reading`, `Hide_On_Editing`, `Hide_On_Custom`, `Section_Style`, `Section_Label`, `Enable_For_DLE`, `Enable_Mail_Acquire`, `Enable_Discussion`, `Allow_Forwarding`, `Forward_Save`, `Content_Sections`, `Enable_Lifecycle`, `Initial_Status`, `Final_Status`, `Superseded_Status`, `Discarded_Status`, `Archived_Status`, `Deleted_Status`, `Enable_Versions`, `Restrict_Live_Drafts`, `Show_Headers`, `Strict_Versioning`, `Allow_Retract`, `Restrict_Drafts`, `Update_Bookmarks`, `Hide_Workflow`, `Disable_Delete_In_Workflow`, `Hide_Buttons` FROM `tb_document_types` WHERE `id` IN('$docTypes')";
					$values = $conn->fetchAll($query);
					$query = $docTypes = null;
					$vLen = count($values);
					for ($x = 0; $x < $len; $x++) {
						for ($c = 0; $c < $vLen; $c++)
						{
							if ($result[$x]['Doc_Type_Id'] == $values[$c]['id'])
							{
								foreach ($values[$c] as $key => $v) {
									if ($key == 'id') { continue; }
									$result[$x][$key] = $v;
								}
								$key = $v = null;
								break;
							}
						}
					}
					$vLen = $values = null;
					$query = 'SELECT `V`.`Doc_Id`, `F`.`Field_Name`, `V`.`Summary_Value` FROM `tb_form_text_values` AS `V` JOIN `tb_design_elements` AS `F` ON (`V`.`Field_Id` = `F`.`id`) WHERE `V`.`Doc_Id` IN (';
					for ($x = 0; $x < $len; $x++) {
						$query .= "'{$result[$x]['id']}',";
					}
					$query = substr_replace($query, ") AND `V`.`Summary_Value` <> '' ORDER BY `V`.`Doc_Id`", -1);
					$values = $conn->fetchAll($query);
					$query = null;
					if (!empty($values[0]))
					{
						$vLen = count($values);
						for ($c = 0; $c < $vLen; $c++)
						{
							$index = $this->getDocumentIndex($result, $values[$c]['Doc_Id']);
							if ($index !== false)
							{
								if (empty($result[$index][str_replace('[]', '', $values[$c]['Field_Name'])]))
									$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $values[$c]['Summary_Value'];
								else {
									$old_value = $result[$index][str_replace('[]', '', $values[$c]['Field_Name'])];
									$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $old_value . ';' . $values[$c]['Summary_Value'];
									$old_value = null;
								}
							}
						}
						$vLen = $c = $index = null;
					}
					$query = 'SELECT `V`.`Doc_Id`, `F`.`Field_Name`, `V`.`Field_Value` FROM `tb_form_datetime_values` AS `V` JOIN `tb_design_elements` AS `F` ON (`V`.`Field_Id` = `F`.`id`) WHERE `V`.`Doc_Id` IN (';
					for ($x = 0; $x < $len; $x++) {
						$query .= "'{$result[$x]['id']}',";
					}
					$query = substr_replace($query, ") AND `V`.`Field_Value` IS NOT NULL ORDER BY `V`.`Doc_Id`", -1);
					$values = $conn->fetchAll($query);
					$query = null;
					if (!empty($values[0]))
					{
						$vLen = count($values);
						for ($c = 0; $c < $vLen; $c++)
						{
							$index = $this->getDocumentIndex($result, $values[$c]['Doc_Id']);
							if ($index !== false)
							{
								if (empty($result[$index][str_replace('[]', '', $values[$c]['Field_Name'])]))
									$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $values[$c]['Field_Value'];
								else {
									$old_value = $result[$index][str_replace('[]', '', $values[$c]['Field_Name'])];
									$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $old_value . ';' . $values[$c]['Field_Value'];
									$old_value = null;
								}
							}
						}
						$vLen = $c = $index = null;
					}
					$values = null;
					
					$query = 'SELECT `V`.`Doc_Id`, `F`.`Field_Name`, `V`.`Field_Value` FROM `tb_form_numeric_values` AS `V` JOIN `tb_design_elements` AS `F` ON (`V`.`Field_Id` = `F`.`id`) WHERE `V`.`Doc_Id` IN (';
					for ($x = 0; $x < $len; $x++) {
						$query .= "'{$result[$x]['id']}',";
					}
					$query = substr_replace($query, ") AND `V`.`Field_Value` <> '' ORDER BY `V`.`Doc_Id`", -1);
					$values = $conn->fetchAll($query);
					$query = null;
					if (!empty($values[0]))
					{
						$vLen = count($values);
						for ($c = 0; $c < $vLen; $c++)
						{
							$index = $this->getDocumentIndex($result, $values[$c]['Doc_Id']);
							if ($index !== false)
							{
								if (empty($result[$index][str_replace('[]', '', $values[$c]['Field_Name'])]))
									$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $values[$c]['Field_Value'];
								else {
									$old_value = $result[$index][str_replace('[]', '', $values[$c]['Field_Name'])];
									$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $old_value . ';' . strval($values[$c]['Field_Value']);
									$old_value = null;
								}
							}
						}
						$vLen = $c = $index = null;
					}
					$values = null;
					
					$query = 'SELECT `V`.`Doc_Id`, `F`.`Field_Name`, `U`.`user_name_dn_abbreviated` AS `Field_Value` FROM `tb_form_name_values` AS `V` JOIN `tb_design_elements` AS `F` ON (`V`.`Field_Id` = `F`.`id`) JOIN `tb_user_accounts` AS `U` ON (`V`.`Field_Value` = `U`.`id`) WHERE `V`.`Doc_Id` IN (';
					for ($x = 0; $x < $len; $x++) {
						$query .= "'{$result[$x]['id']}',";
					}
					$query = substr_replace($query, ") ORDER BY `V`.`Doc_Id`", -1);
					$values = $conn->fetchAll($query);
					$query = 'SELECT `V`.`Doc_Id`, `F`.`Field_Name`, `G`.`Display_Name` AS `Field_Value` FROM `tb_form_group_values` AS `V` JOIN `tb_design_elements` AS `F` ON (`V`.`Field_Id` = `F`.`id`) JOIN `tb_user_roles` AS `G` ON (`V`.`Field_Value` = `G`.`id`) WHERE `V`.`Doc_Id` IN (';
					for ($x = 0; $x < $len; $x++) {
						$query .= "'{$result[$x]['id']}',";
					}
					$query = substr_replace($query, ") ORDER BY `V`.`Doc_Id`", -1);
					$gvalues = $conn->fetchAll($query);
					$query = null;
					if (!empty($gvalues[0]))
					{
						foreach ($gvalues as $group) {
							$values[] = $group;
						}
					}
					$gvalues = $group = null;
					if (!empty($values[0]))
					{
						$vLen = count($values);
						for ($c = 0; $c < $vLen; $c++)
						{
							$index = $this->getDocumentIndex($result, $values[$c]['Doc_Id']);
							if ($index !== false)
							{
								$v = $showDisplayName === true && strstr($values[$c]['Field_Value'], '/') !== false ? strstr($values[$c]['Field_Value'], '/', true) : $values[$c]['Field_Value'];
								if (empty($result[$index][str_replace('[]', '', $values[$c]['Field_Name'])]))
									$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $v;
								else {
									$old_value = $result[$index][str_replace('[]', '', $values[$c]['Field_Name'])];
									$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $old_value . ';' . $v;
									$old_value = null;
								}
							}
						}
						$vLen = $c = $index = null;
					}
					$values = null;
				}
				return $result;
			}
		}
		elseif ($driver == 'pdo_sqlsrv')
		{
			if ($granted === false)
			{
				$folder_q = '';
				if (!empty($positions) && count($positions) > 1) {
					$positions = implode("','", $positions);
					$folder_q .= " OR [Position] IN ('$positions')";
				}
				elseif (!empty($positions) && count($positions) == 1) {
					$positions = array_values($positions);
					$folder_q .= " OR [Position] = '$positions[0]'";
				}
			
				$grpQuery = !empty($groups) ? " AND [SI].[identifier] NOT IN ($groups)" : '';
				$query = "SELECT COUNT(DISTINCT([AE].[id])) FROM [acl_entries] AS [AE] INNER JOIN [acl_object_identities] AS [AI] ON ([AE].[object_identity_id] = [AI].[id]) INNER JOIN [acl_security_identities] AS [SI] ON ([AE].[security_identity_id] = [SI].[id])
							WHERE ([AI].[object_identifier] IN (SELECT [id] FROM [tb_library_folders] WHERE [id] = ? $folder_q AND [Library_Id] = '{$folder->getLibrary()->getId()}') AND [AE].[mask] IN (1,64,128)
							 AND ([AI].[object_identifier] = ? AND [AE].[mask] = 2) AND [SI].[identifier] != ? AND [SI].[identifier] != ? $grpQuery)";
				$result = $conn->fetchArray($query, array($folder->getId(), $folder->getId(), 'Docova\DocovaBundle\Entity\UserAccounts-' . $user->getUsername(), 'ROLE_USER'));
				
				if (!empty($result) && $result[0] > 0)
				{
					return array();
				}
			
				$grpQuery = !empty($groups) ? " OR [SI].[identifier] IN ($groups)" : '';
				$query = "SELECT COUNT(DISTINCT([AE].[id])) FROM [acl_entries] AS [AE] INNER JOIN [acl_object_identities] AS [AI] ON ([AE].[object_identity_id] = [AI].[id])  INNER JOIN [acl_security_identities] AS [SI] ON ([AE].[security_identity_id] = [SI].[id])
							WHERE [AI].[object_identifier] IN (SELECT [id] FROM [tb_library_folders] WHERE [id] = ? $folder_q AND [Library_Id] = '{$folder->getLibrary()->getId()}') AND [AE].[mask] >= 64 AND ([SI].[identifier] = ? $grpQuery)";
				$result = $conn->fetchArray($query, array($folder->getId(), 'Docova\DocovaBundle\Entity\UserAccounts-' . $user->getUsername()));
				if (!empty($result) && $result[0] > 0)
				{
					$granted = true;
				}
			}
			
			if ($granted === false)
			{
				$grpQuery = !empty($groups) ? " OR [SI].[identifier] IN ($groups)" : '';
				$query = "SELECT COUNT([AE].[id]) FROM [acl_entries] AS [AE] INNER JOIN [acl_object_identities] AS [AI] ON ([AE].[object_identity_id] = [AI].[id]) INNER JOIN [acl_security_identities] AS [SI] ON ([AE].[security_identity_id] = [SI].[id])
							WHERE [AE].[mask] = 1 AND [AI].[object_identifier] = ? AND ([SI].[identifier] = ? OR [SI].[identifier] = 'ROLE_USER' $grpQuery)";
				$is_reader = $conn->fetchArray($query, array($folder->getId(), 'Docova\DocovaBundle\Entity\UserAccounts-'.$user->getUsername()));
				$is_reader = (!empty($is_reader) && $is_reader[0] > 0) ? true : false;

				if ($is_reader === true)
				{
					$query = "SELECT COUNT([AE].[id]) FROM [acl_entries] AS [AE] INNER JOIN [acl_object_identities] AS [AI] ON ([AE].[object_identity_id] = [AI].[id]) INNER JOIN [acl_security_identities] AS [SI] ON ([AE].[security_identity_id] = [SI].[id])
								WHERE [AE].[mask] = 2 AND [AI].[object_identifier] = ? AND ([SI].[identifier] = ? $grpQuery)";
					$is_author = $conn->fetchArray($query, array($folder->getId(), 'Docova\DocovaBundle\Entity\UserAccounts-'.$user->getUsername()));
					if (!empty($is_author) && $is_author[0] > 0)
					{
						$is_reader = false;
					}
					else {
						$query = "SELECT COUNT([AE].[id]) FROM [acl_entries] AS [AE] INNER JOIN [acl_object_identities] AS [AI] ON ([AE].[object_identity_id] = [AI].[id]) INNER JOIN [acl_security_identities] AS [SI] ON ([AE].[security_identity_id] = [SI].[id])
									WHERE [AI].[object_identifier] = ? AND [AE].[mask] IN (1,2) AND [SI].[identifier] = 'ROLE_USER'";
						$result = $conn->fetchArray($query, array($folder->getId()));
						$is_reader = (!empty($result) && $result[0] > 1) ? false : $is_reader;
					}
					$query = $is_author = null;
				}
				
				$query = "SELECT DISTINCT([AI].[object_identifier]) FROM [acl_object_identities] AS [AI] INNER JOIN [acl_entries] AS [AE] ON ([AI].[id] = [AE].[object_identity_id]) INNER JOIN [acl_security_identities] AS [SI] ON ([AE].[security_identity_id] = [SI].[id])
							WHERE [AI].[object_identifier] IN (
								SELECT DISTINCT([D].[id]) FROM [tb_folders_documents] AS [D] LEFT JOIN [tb_bookmarks] AS [B] ON ([B].[Document_Id] = [D].[id]) WHERE (([D].[Folder_Id] = ? OR [B].[Target_Folder] = ?)";
				if ($include_subfolders !== false)
				{
					$grpQuery = !empty($groups) ? " OR ([ISI].[identifier] IN ($groups) AND [IAE].[mask] IN (1,2,64,128))" : '';
					$query .= " OR [D].[Folder_Id] IN (
								SELECT [id] FROM [tb_library_folders] WHERE [Position] LIKE '{$folder->getPosition()}.%' AND [Library_Id] = '{$folder->getLibrary()->getId()}' AND [Del] = 0 AND [Sub_Trash] = 0 AND [id] IN (
									SELECT DISTINCT([IAI].[object_identifier]) FROM [acl_object_identities] AS [IAI] INNER JOIN [acl_entries] AS [IAE] ON ([IAI].[id] = [IAE].[object_identity_id]) INNER JOIN [acl_security_identities] AS [ISI] ON ([IAE].[security_identity_id] = [ISI].[id])
									WHERE ([ISI].[identifier] = ? AND [IAE].[mask] IN (1,2,64,128)) OR ([ISI].[identifier] = 'ROLE_USER' AND [IAE].[mask] = 1) $grpQuery
								))";
					$query .= " OR [B].[Target_Folder] IN (SELECT [id] FROM [tb_library_folders] WHERE [Position] LIKE '{$folder->getPosition()}.%' AND [Library_Id] = '{$folder->getLibrary()->getId()}' AND [Del] = 0 AND [Sub_Trash] = 0)";
				}
				$query .= ')';
				if ($folder->getPrivateDraft())
				{
					$query .= ' AND [D].[Status_No] != 1';
					$query .= " AND [D].[id] IN (SELECT DISTINCT([WFD].[Document_Id]) FROM [tb_document_workflow_steps] AS [WFD] INNER JOIN [tb_document_workflow_assignee] AS [A] ON ([WFD].[id] = [A].[Workflow_Step_Id]) WHERE [WFD].[Status] = 'Pending' [A].[Assignee_Id] = '{$user->getId()}')";
					$query .= ')';
				}
				else
				{
					if ($is_reader === true && !$folder->getSetDVA())
					{
						$query .= ' AND [D].[Status_No] != 0';
					}
					$query .= ')';
				}
			
				$params = array($folder->getId(), $folder->getId(), 'Docova\DocovaBundle\Entity\UserAccounts-'.$user->getUsername(), 'ROLE_USER', 'Docova\DocovaBundle\Entity\UserAccounts-'.$user->getUsername());
				if ($include_subfolders === true)
				{
					$params = array($folder->getId(), $folder->getId(), 'Docova\DocovaBundle\Entity\UserAccounts-'.$user->getUsername(), 'Docova\DocovaBundle\Entity\UserAccounts-'.$user->getUsername(), 'ROLE_USER', 'Docova\DocovaBundle\Entity\UserAccounts-'.$user->getUsername());
				}
				$grpQuery = !empty($groups) ? " OR [SI].[identifier] IN ($groups)" : '';
				$query .= " AND (([AE].[mask] IN (1,128) AND ([SI].[identifier] = ? OR [SI].[identifier] = ? $grpQuery)) OR ([AE].[mask] = 4 AND ([SI].[identifier] = ? $grpQuery)))";
				$result = $conn->fetchAll($query, $params);
				if (!empty($result[0]))
				{
					if (!empty($start) && !empty($count))
					{
						$query = 'SELECT DISTINCT([D].[id]), CAST([D].[Doc_Version] AS DECIMAL(10,2)) AS [dVersion], [D].[Doc_Title], [D].[Doc_Version], [D].[Revision], [D].[Doc_Status], [D].[Status_No], [D].[Description], [D].[Keywords], [D].[Date_Created], [D].[Date_Modified], [D].[Locked], [D].[Released_Date], [D].[Last_Review_Date], [D].[Next_Review_Date], [D].[Has_Pending_Review], [D].[Review_Type], [D].[Review_Period], [D].[Review_Period_Option], [D].[Review_Date_Select], [D].[Review_Start_Month], [D].[Review_Start_Day], [D].[Author_Review], [D].[Archive_Type], [D].[Custom_Archive_Date], [D].[Trash], [D].[Archived], [D].[Date_Archived], [D].[Status_No_Archived], [D].[Previous_Status], [D].[Date_Deleted], [D].[Parent_Document], [D].[Doc_Owner], [D].[Doc_Author], [D].[Created_By], [D].[Modified_By], [D].[Lock_Editor], [D].[Released_By], [D].[Deleted_By], [D].[Folder_Id], [D].[Doc_Type_Id]';
						if ($showDisplayName === true) {
							$query .= ', [U1].[Display_Name] AS [CreatedBy], [U2].[Display_Name] AS [Author], [U3].[Display_Name] AS [ModifiedBy] ';
						}
						else {
							$query .= ', [U1].[user_name_dn_abbreviated] AS [CreatedBy], [U2].[user_name_dn_abbreviated] AS [Author], [U3].[user_name_dn_abbreviated] AS [ModifiedBy] ';
						}
					}
					else {
						$query = 'SELECT COUNT(DISTINCT([D].[id])) AS [Amount] ';
					}
			
					$query .= ' FROM [tb_folders_documents] AS [D]';
					if ($showDisplayName === true) {
						$query .= ' INNER JOIN [tb_user_profile] AS [U1] ON ([D].[Created_By] = [U1].[User_Id]) LEFT JOIN [tb_user_profile] AS [U2] ON ([D].[Doc_Author] = [U2].[User_Id] ) LEFT JOIN [tb_user_profile] AS [U3] ON ([D].[Modified_By] =  [U3].[User_Id] )';
					}
					else {
						$query .= ' INNER JOIN [tb_user_accounts] AS [U1] ON ([D].[Created_By] = [U1].[id]) LEFT JOIN [tb_user_accounts] AS [U2] ON ([D].[Doc_Author] = [U2].[id] ) LEFT JOIN [tb_user_accounts] AS [U3] ON ([D].[Modified_By] =  [U3].[id] )';
					}
					$query .= ' WHERE [D].[Trash] = 0 AND [D].[Archived] = 0';
					if ($current_versions === true)
					{
						$query .= ' AND [D].[Status_No] = 1';
					}
					elseif ($pending_release === true)
					{
						$query .= ' AND [D].[Status_No] = 0';
					}
					$documents = array();
					$len = count($result);
					for ($x = 0; $x < $len; $x++) {
						$documents[] = $result[$x]['object_identifier'];
					}
					$documents = implode("','", $documents);
					$query .= " AND ([D].[id] IN ('$documents') OR [D].[id] IN (SELECT DISTINCT([DWS].[Document_Id]) FROM [tb_document_workflow_steps] AS [DWS] INNER JOIN [tb_document_workflow_assignee] AS [A] ON ([DWS].[id] = [A].[Workflow_Step_Id]) INNER JOIN [tb_folders_documents] AS [Doc] ON ([DWS].[Document_Id] = [Doc].[id])
					 			WHERE [Doc].[Folder_Id] = ? AND [DWS].[Status] = 'Pending' AND [DWS].[Date_Started] IS NOT NULL AND [DWS].[Date_Completed] IS NULL AND [A].[Assignee_Id] = '{$user->getId()}'))";
					$query .= (!empty($start) && !empty($count)) ? " ORDER BY [D].[Doc_Title] ASC, [dVersion] DESC, [D].[Revision] DESC OFFSET ".($start-1)." ROWS FETCH NEXT $count ROWS ONLY" : '';
					$result = $conn->fetchAll($query, array($folder->getId()));
					if (!empty($result[0]) && !empty($start) && !empty($count)) 
					{
						$len = count($result);
						$query = "SELECT [Document_Id], [Target_Folder] FROM [tb_bookmarks] WHERE [Document_Id] IN ('$documents')";
						if ($include_subfolders !== true)
						{
							$query .=  "AND [Target_Folder] = '{$folder->getId()}'";
						}
						$bookmarks = $conn->fetchAll($query);
						if (!empty($bookmarks[0]))
						{
							$blen = count($bookmarks);
							for ($x = 0; $x < $blen; $x++) {
								$index = $this->getDocumentIndex($result, $bookmarks[$x]['Document_Id']);
								if ($index !== false)
								{
									$result[$index]['Target_Folder'] = $bookmarks[$x]['Target_Folder'];
								}
							}
							$blen = $index = $x = null;
						}
						$bookmarks = null;
						$docTypes = array();
						for ($x = 0; $x < $len; $x++) {
							$docTypes[] = $result[$x]['Doc_Type_Id'];
						}
						$docTypes = array_unique($docTypes);
						$docTypes = implode("','", $docTypes);
						$query = "SELECT [id] ,[Key_Type], [Doc_Name], [Doc_Icon], [Disable_Activities], [Hide_Subject], [Subject_Label], [Translate_Subject_To], [Hide_On_Reading], [Hide_On_Editing], [Hide_On_Custom], [Section_Style], [Section_Label], [Enable_For_DLE], [Enable_Mail_Acquire], [Enable_Discussion], [Allow_Forwarding], [Forward_Save], [Content_Sections], [Enable_Lifecycle], [Initial_Status], [Final_Status], [Superseded_Status], [Discarded_Status], [Archived_Status], [Deleted_Status], [Enable_Versions], [Restrict_Live_Drafts], [Show_Headers], [Strict_Versioning], [Allow_Retract], [Restrict_Drafts], [Update_Bookmarks], [Hide_Workflow], [Disable_Delete_In_Workflow], [Hide_Buttons] FROM [tb_document_types] WHERE [id] IN('$docTypes')";
						$values = $conn->fetchAll($query);
						$query = $docTypes = null;
						$vLen = count($values);
						for ($x = 0; $x < $len; $x++) {
							for ($c = 0; $c < $vLen; $c++)
							{
								if ($result[$x]['Doc_Type_Id'] == $values[$c]['id'])
								{
									foreach ($values[$c] as $key => $v) {
										if ($key == 'id') { continue; }
										$result[$x][$key] = $v;
									}
									$key = $v = null;
									break;
								}
							}
						}
						$vLen = $values = null;
						$query = 'SELECT [V].[Doc_Id], [F].[Field_Name], [V].[Summary_Value] FROM [tb_form_text_values] AS [V] JOIN [tb_design_elements] AS [F] ON ([V].[Field_Id] = [F].[id]) WHERE [V].[Doc_Id] IN (';
						for ($x = 0; $x < $len; $x++) {
							$query .= "'{$result[$x]['id']}',";
						}
						$query = substr_replace($query, ") AND [V].[Summary_Value] <> '' ORDER BY [V].[Doc_Id]", -1);
						$values = $conn->fetchAll($query);
						$query = null;
						if (!empty($values[0]))
						{
							$vLen = count($values);
							for ($c = 0; $c < $vLen; $c++)
							{
								$index = $this->getDocumentIndex($result, $values[$c]['Doc_Id']);
								if ($index !== false)
								{
									if (empty($result[$index][str_replace('[]', '', $values[$c]['Field_Name'])]))
										$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $values[$c]['Summary_Value'];
									else {
										$old_value = $result[$index][str_replace('[]', '', $values[$c]['Field_Name'])];
										$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $old_value . ';' . $values[$c]['Summary_Value'];
										$old_value = null;
									}
								}
							}
							$vLen = $c = $index = null;
						}
						$query = 'SELECT [V].[Doc_Id], [F].[Field_Name], [V].[Field_Value] FROM [tb_form_datetime_values] AS [V] JOIN [tb_design_elements] AS [F] ON ([V].[Field_Id] = [F].[id]) WHERE [V].[Doc_Id] IN (';
						for ($x = 0; $x < $len; $x++) {
							$query .= "'{$result[$x]['id']}',";
						}
						$query = substr_replace($query, ") AND [V].[Field_Value] IS NOT NULL ORDER BY [V].[Doc_Id]", -1);
						$values = $conn->fetchAll($query);
						$query = null;
						if (!empty($values[0]))
						{
							$vLen = count($values);
							for ($c = 0; $c < $vLen; $c++)
							{
								$index = $this->getDocumentIndex($result, $values[$c]['Doc_Id']);
								if ($index !== false)
								{
									if (empty($result[$index][str_replace('[]', '', $values[$c]['Field_Name'])]))
										$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $values[$c]['Field_Value'];
									else {
										$old_value = $result[$index][str_replace('[]', '', $values[$c]['Field_Name'])];
										$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $old_value . ';' . $values[$c]['Field_Value'];
										$old_value = null;
									}
								}
							}
							$vLen = $c = $index = null;
						}
						$values = null;
						
						$query = 'SELECT [V].[Doc_Id], [F].[Field_Name], [V].[Field_Value] FROM [tb_form_numeric_values] AS [V] JOIN [tb_design_elements] AS [F] ON ([V].[Field_Id] = [F].[id]) WHERE [V].[Doc_Id] IN (';
						for ($x = 0; $x < $len; $x++) {
							$query .= "'{$result[$x]['id']}',";
						}
						$query = substr_replace($query, ") AND [V].[Field_Value] <> '' ORDER BY [V].[Doc_Id]", -1);
						$values = $conn->fetchAll($query);
						$query = null;
						if (!empty($values[0]))
						{
							$vLen = count($values);
							for ($c = 0; $c < $vLen; $c++)
							{
								$index = $this->getDocumentIndex($result, $values[$c]['Doc_Id']);
								if ($index !== false)
								{
									if (empty($result[$index][str_replace('[]', '', $values[$c]['Field_Name'])]))
										$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $values[$c]['Field_Value'];
									else {
										$old_value = $result[$index][str_replace('[]', '', $values[$c]['Field_Name'])];
										$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $old_value . ';' . strval($values[$c]['Field_Value']);
										$old_value = null;
									}
								}
							}
							$vLen = $c = $index = null;
						}
						$values = null;
						
						$query = 'SELECT [V].[Doc_Id], [F].[Field_Name], [U].[user_name_dn_abbreviated] AS [Field_Value] FROM [tb_form_name_values] AS [V] JOIN [tb_design_elements] AS [F] ON ([V].[Field_Id] = [F].[id]) JOIN [tb_user_accounts] AS [U] ON ([V].[Field_Value] = [U].[id]) WHERE [V].[Doc_Id] IN (';
						for ($x = 0; $x < $len; $x++) {
							$query .= "'{$result[$x]['id']}',";
						}
						$query = substr_replace($query, ") ORDER BY [V].[Doc_Id]", -1);
						$values = $conn->fetchAll($query);
						$query = 'SELECT [V].[Doc_Id], [F].[Field_Name], [G].[Display_Name] AS [Field_Value] FROM [tb_form_group_values] AS [V] JOIN [tb_design_elements] AS [F] ON ([V].[Field_Id] = [F].[id]) JOIN [tb_user_roles] AS [G] ON ([V].[Field_Value] = [G].[id]) WHERE [V].[Doc_Id] IN (';
						for ($x = 0; $x < $len; $x++) {
							$query .= "'{$result[$x]['id']}',";
						}
						$query = substr_replace($query, ") ORDER BY [V].[Doc_Id]", -1);
						$gvalues = $conn->fetchAll($query);
						$query = null;
						if (!empty($gvalues[0]))
						{
							foreach ($gvalues as $group) {
								$values[] = $group;
							}
						}
						$gvalues = $group = null;
						if (!empty($values[0]))
						{
							$vLen = count($values);
							for ($c = 0; $c < $vLen; $c++)
							{
								$index = $this->getDocumentIndex($result, $values[$c]['Doc_Id']);
								if ($index !== false)
								{
									$v = $showDisplayName === true && strstr($values[$c]['Field_Value'], '/') !== false ? strstr($values[$c]['Field_Value'], '/', true) : $values[$c]['Field_Value'];
									if (empty($result[$index][str_replace('[]', '', $values[$c]['Field_Name'])]))
										$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $v;
									else {
										$old_value = $result[$index][str_replace('[]', '', $values[$c]['Field_Name'])];
										$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $old_value . ';' . $v;
										$old_value = null;
									}
								}
							}
							$vLen = $c = $index = null;
						}
						$values = null;
					}
					return $result;
				}
				else {
					return array();
				}
			}
			else {
				$query = 'SELECT [Document_Id], [Target_Folder] FROM [tb_bookmarks] WHERE [Target_Folder] = ?';
				if ($include_subfolders === true) 
				{
					$query .= " OR [Target_Folder] IN (SELECT [id] FROM [tb_library_folders] WHERE [Position] LIKE '{$folder->getPosition()}.%' AND [Library_Id] = '{$folder->getLibrary()->getId()}')";
				}
				$bookmarks = $conn->fetchAll($query, array($folder->getId()));
				if (empty($bookmarks[0])) { $bookmarks = array(); }
				if (!empty($start) && !empty($count))
				{
					$query = 'SELECT DISTINCT([D].[id]), CAST([D].[Doc_Version] AS DECIMAL(10,2)) AS [dVersion], [D].[Doc_Title], [D].[Doc_Version], [D].[Revision], [D].[Doc_Status], [D].[Status_No], [D].[Description], [D].[Keywords], [D].[Date_Created], [D].[Date_Modified], [D].[Locked], [D].[Released_Date], [D].[Last_Review_Date], [D].[Next_Review_Date], [D].[Has_Pending_Review], [D].[Review_Type], [D].[Review_Period], [D].[Review_Period_Option], [D].[Review_Date_Select], [D].[Review_Start_Month], [D].[Review_Start_Day], [D].[Author_Review], [D].[Archive_Type], [D].[Custom_Archive_Date], [D].[Trash], [D].[Archived], [D].[Date_Archived], [D].[Status_No_Archived], [D].[Previous_Status], [D].[Date_Deleted], [D].[Parent_Document], [D].[Doc_Owner], [D].[Doc_Author], [D].[Created_By], [D].[Modified_By], [D].[Lock_Editor], [D].[Released_By], [D].[Deleted_By], [D].[Folder_Id], [D].[Doc_Type_Id]';
					if ($showDisplayName === true) {
						$query .= ', [U1].[Display_Name] AS [CreatedBy], [U2].[Display_Name] AS [Author], [U3].[Display_Name] AS [ModifiedBy] ';
					}
					else {
						$query .= ', [U1].[user_name_dn_abbreviated] AS [CreatedBy], [U2].[user_name_dn_abbreviated] AS [Author], [U3].[user_name_dn_abbreviated] AS [ModifiedBy] ';
					}
				}
				else {
					$query = 'SELECT COUNT(DISTINCT([D].[id])) AS [Amount] ';
				}
			
				$query .= " FROM [tb_folders_documents] AS [D]";
				if ($showDisplayName === true) {
					$query .= ' INNER JOIN [tb_user_profile] AS [U1] ON ([D].[Created_By] = [U1].[User_Id]) LEFT JOIN [tb_user_profile] AS [U2] ON ([D].[Doc_Author] = [U2].[User_Id] ) LEFT JOIN [tb_user_profile] AS [U3] ON ([D].[Modified_By] =  [U3].[User_Id] )';
				}
				else {
					$query .= ' INNER JOIN [tb_user_accounts] AS [U1] ON ([D].[Created_By] = [U1].[id]) LEFT JOIN [tb_user_accounts] AS [U2] ON ([D].[Doc_Author] = [U2].[id] ) LEFT JOIN [tb_user_accounts] AS [U3] ON ([D].[Modified_By] =  [U3].[id] )';
				}
				$query .= ' WHERE [D].[Trash] = 0 AND [D].[Archived] = 0';
				if ($current_versions === true)
				{
					$query .= ' AND [D].[Status_No] = 1';
				}
				elseif ($pending_release === true)
				{
					$query .= ' AND [D].[Status_No] = 0';
				}
				$query .= ' AND ([D].[Folder_Id] = ?';
				if ($include_subfolders !== false)
				{
					$query .= " OR [D].[Folder_Id] IN (SELECT [id] FROM [tb_library_folders] WHERE [Position] LIKE '{$folder->getPosition()}.%' AND [Library_Id] = '{$folder->getLibrary()->getId()}' AND [Del] = 0 AND [Sub_Trash] = 0)";
				}
				$query .= ')';
				if (!empty($bookmarks)) 
				{
					$bQuery = '';
					foreach ($bookmarks as $b) {
						$bQuery .= "'".$b['Document_Id']."',";
					}
					$bQuery = substr_replace($bQuery, '', -1);
					$query .= " OR [D].[id] IN ($bQuery)";
					$bQuery = $b = null;
				}
				$query .= (!empty($start) && !empty($count)) ? " ORDER BY [D].[Doc_Title] ASC, [dVersion] DESC, [D].[Revision] DESC OFFSET ".($start-1)." ROWS FETCH NEXT $count ROWS ONLY" : '';
				$result = $conn->fetchAll($query, array($folder->getId()));
				if (!empty($result[0]) && !empty($start) && !empty($count)) 
				{
					$len = count($result);
					if (!empty($bookmarks))
					{
						foreach ($bookmarks as $b) {
							$index = $this->getDocumentIndex($result, $b['Document_Id']);
							if ($index !== false) 
							{
								$result[$index]['Target_Folder'] = $b['Target_Folder'];
							}
						}
						$b = $index = null;
					}
					$bookmarks = null;
					$docTypes = array();
					for ($x = 0; $x < $len; $x++) {
						$docTypes[] = $result[$x]['Doc_Type_Id'];
					}
					$docTypes = array_unique($docTypes);
					$docTypes = implode("','", $docTypes);
					$query = "SELECT [id] ,[Key_Type], [Doc_Name], [Doc_Icon], [Disable_Activities], [Hide_Subject], [Subject_Label], [Translate_Subject_To], [Hide_On_Reading], [Hide_On_Editing], [Hide_On_Custom], [Section_Style], [Section_Label], [Enable_For_DLE], [Enable_Mail_Acquire], [Enable_Discussion], [Allow_Forwarding], [Forward_Save], [Content_Sections], [Enable_Lifecycle], [Initial_Status], [Final_Status], [Superseded_Status], [Discarded_Status], [Archived_Status], [Deleted_Status], [Enable_Versions], [Restrict_Live_Drafts], [Show_Headers], [Strict_Versioning], [Allow_Retract], [Restrict_Drafts], [Update_Bookmarks], [Hide_Workflow], [Disable_Delete_In_Workflow], [Hide_Buttons] FROM [tb_document_types] WHERE [id] IN('$docTypes')";
					$values = $conn->fetchAll($query);
					$query = $docTypes = null;
					$vLen = count($values);
					for ($x = 0; $x < $len; $x++) {
						for ($c = 0; $c < $vLen; $c++)
						{
							if ($result[$x]['Doc_Type_Id'] == $values[$c]['id'])
							{
								foreach ($values[$c] as $key => $v) {
									if ($key == 'id') { continue; }
									$result[$x][$key] = $v;
								}
								$key = $v = null;
								break;
							}
						}
					}
					$vLen = $values = null;
					$query = 'SELECT [V].[Doc_Id], [F].[Field_Name], [V].[Summary_Value] FROM [tb_form_text_values] AS [V] JOIN [tb_design_elements] AS [F] ON ([V].[Field_Id] = [F].[id]) WHERE [V].[Doc_Id] IN (';
					for ($x = 0; $x < $len; $x++) {
						$query .= "'{$result[$x]['id']}',";
					}
					$query = substr_replace($query, ") AND [V].[Summary_Value] <> '' ORDER BY [V].[Doc_Id]", -1);
					$values = $conn->fetchAll($query);
					$query = null;
					if (!empty($values[0]))
					{
						$vLen = count($values);
						for ($c = 0; $c < $vLen; $c++)
						{
							$index = $this->getDocumentIndex($result, $values[$c]['Doc_Id']);
							if ($index !== false)
							{
								if (empty($result[$index][str_replace('[]', '', $values[$c]['Field_Name'])]))
									$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $values[$c]['Summary_Value'];
								else {
									$old_value = $result[$index][str_replace('[]', '', $values[$c]['Field_Name'])];
									$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $old_value . ';' . $values[$c]['Summary_Value'];
									$old_value = null;
								}
							}
						}
						$vLen = $c = $index = null;
					}
					$query = 'SELECT [V].[Doc_Id], [F].[Field_Name], [V].[Field_Value] FROM [tb_form_datetime_values] AS [V] JOIN [tb_design_elements] AS [F] ON ([V].[Field_Id] = [F].[id]) WHERE [V].[Doc_Id] IN (';
					for ($x = 0; $x < $len; $x++) {
						$query .= "'{$result[$x]['id']}',";
					}
					$query = substr_replace($query, ") AND [V].[Field_Value] IS NOT NULL ORDER BY [V].[Doc_Id]", -1);
					$values = $conn->fetchAll($query);
					$query = null;
					if (!empty($values[0]))
					{
						$vLen = count($values);
						for ($c = 0; $c < $vLen; $c++)
						{
							$index = $this->getDocumentIndex($result, $values[$c]['Doc_Id']);
							if ($index !== false)
							{
								if (empty($result[$index][str_replace('[]', '', $values[$c]['Field_Name'])]))
									$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $values[$c]['Field_Value'];
								else {
									$old_value = $result[$index][str_replace('[]', '', $values[$c]['Field_Name'])];
									$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $old_value . ';' . $values[$c]['Field_Value'];
									$old_value = null;
								}
							}
						}
						$vLen = $c = $index = null;
					}
					$values = null;
					
					$query = 'SELECT [V].[Doc_Id], [F].[Field_Name], [V].[Field_Value] FROM [tb_form_numeric_values] AS [V] JOIN [tb_design_elements] AS [F] ON ([V].[Field_Id] = [F].[id]) WHERE [V].[Doc_Id] IN (';
					for ($x = 0; $x < $len; $x++) {
						$query .= "'{$result[$x]['id']}',";
					}
					$query = substr_replace($query, ") AND [V].[Field_Value] <> '' ORDER BY [V].[Doc_Id]", -1);
					$values = $conn->fetchAll($query);
					$query = null;
					if (!empty($values[0]))
					{
						$vLen = count($values);
						for ($c = 0; $c < $vLen; $c++)
						{
							$index = $this->getDocumentIndex($result, $values[$c]['Doc_Id']);
							if ($index !== false)
							{
								if (empty($result[$index][str_replace('[]', '', $values[$c]['Field_Name'])]))
									$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $values[$c]['Field_Value'];
								else {
									$old_value = $result[$index][str_replace('[]', '', $values[$c]['Field_Name'])];
									$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $old_value . ';' . strval($values[$c]['Field_Value']);
									$old_value = null;
								}
							}
						}
						$vLen = $c = $index = null;
					}
					$values = null;
					
					$query = 'SELECT [V].[Doc_Id], [F].[Field_Name], [U].[user_name_dn_abbreviated] AS [Field_Value] FROM [tb_form_name_values] AS [V] JOIN [tb_design_elements] AS [F] ON ([V].[Field_Id] = [F].[id]) JOIN [tb_user_accounts] AS [U] ON ([V].[Field_Value] = [U].[id]) WHERE [V].[Doc_Id] IN (';
					for ($x = 0; $x < $len; $x++) {
						$query .= "'{$result[$x]['id']}',";
					}
					$query = substr_replace($query, ") ORDER BY [V].[Doc_Id]", -1);
					$values = $conn->fetchAll($query);
					$query = 'SELECT [V].[Doc_Id], [F].[Field_Name], [G].[Display_Name] AS [Field_Value] FROM [tb_form_group_values] AS [V] JOIN [tb_design_elements] AS [F] ON ([V].[Field_Id] = [F].[id]) JOIN [tb_user_roles] AS [G] ON ([V].[Field_Value] = [G].[id]) WHERE [V].[Doc_Id] IN (';
					for ($x = 0; $x < $len; $x++) {
						$query .= "'{$result[$x]['id']}',";
					}
					$query = substr_replace($query, ") ORDER BY [V].[Doc_Id]", -1);
					$gvalues = $conn->fetchAll($query);
					$query = null;
					if (!empty($gvalues[0]))
					{
						foreach ($gvalues as $group) {
							$values[] = $group;
						}
					}
					$gvalues = $group = null;
					if (!empty($values[0]))
					{
						$vLen = count($values);
						for ($c = 0; $c < $vLen; $c++)
						{
							$index = $this->getDocumentIndex($result, $values[$c]['Doc_Id']);
							if ($index !== false)
							{
								$v = $showDisplayName === true && strstr($values[$c]['Field_Value'], '/') !== false ? strstr($values[$c]['Field_Value'], '/', true) : $values[$c]['Field_Value'];
								if (empty($result[$index][str_replace('[]', '', $values[$c]['Field_Name'])]))
									$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $v;
								else {
									$old_value = $result[$index][str_replace('[]', '', $values[$c]['Field_Name'])];
									$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $old_value . ';' . $v;
									$old_value = null;
								}
							}
						}
						$vLen = $c = $index = null;
					}
					$values = null;
				}
				return $result;
			}
		}
	}
		
	
	/**
	 * find all documents in a folder
	 * 
	 * @param string $folder
	 * @return array
	 */
	public function getFolderDocuments($folder)
	{
		$query = $this->createQueryBuilder('D')
				->where('D.folder = :folder')
				->andWhere('D.Trash = false')
				->andWhere('D.Archived = false')
				->setParameter('folder', $folder)
				->getQuery();
		
		$result = $query->getResult();

		return $result;
	}

	/**
	 * Get the lates version of a document which has versioning
	 * 
	 * @param integer $document
	 * @return Documents|null
	 */
	public function getLatestVersion($document)
	{
		$query = $this->createQueryBuilder('D')
			->addSelect("ABS(SUBSTRING(D.Doc_Version, 1, LOCATE('.', D.Doc_Version)) AS HIDDEN mainV")
			->addSelect("ABS(SUBSTRING(D.Doc_Version, LOCATE('.', D.Doc_Version) + 1) AS HIDDEN subV")
			->where('D.Parent_Document IS NOT NULL AND D.Parent_Document = :document AND D.Archived = false')
			->orWhere('D.id = :document AND D.Parent_Document IS NULL AND D.Doc_Version IS NOT NULL AND D.Revision IS NOT NULL AND D.Archived = false')
			->addOrderBy('mainV', 'DESC')
			->addOrderBy('subV', 'DESC')
			->addOrderBy('D.Revision', 'DESC')
			->setParameter('document', $document)
			->getQuery();
		
		$result = $query->getResult();
		if (!empty($result)) 
		{
			return $result[0];
		}
		
		return null;
	}
	
	/**
	 * Get array of previous versions of a document
	 * 
	 * @param integer $latest_version
	 * @param integer $parent_id
	 * @return array
	 */
	public function getPreviousVersions($latest_version, $parent_id)
	{
		$query = $this->createQueryBuilder('D')
			->addSelect("ABS(SUBSTRING(D.Doc_Version, 1, LOCATE('.', D.Doc_Version)) AS HIDDEN mainV")
			->addSelect("ABS(SUBSTRING(D.Doc_Version, LOCATE('.', D.Doc_Version) + 1) AS HIDDEN subV")
			->where('D.id != :latest_version AND D.Parent_Document = :Parent_Id AND D.Archived = false')
			->orWhere('D.Parent_Document IS NULL AND D.id = :Parent_Id AND D.Archived = false')
			->addOrderBy('mainV', 'DESC')
			->addOrderBy('subV', 'DESC')
			->addOrderBy('D.Revision', 'DESC')
			->setParameters(array('latest_version' => $latest_version, 'Parent_Id' => $parent_id))
			->getQuery();
		
		$result = $query->getResult();
		
		return $result;
	}

	/**
	 * Get the lates released document
	 *
	 * @param integer $document
	 * @return Documents|null
	 */
	public function getLatestReleased($document)
	{
		$query = $this->createQueryBuilder('D')
			->addSelect("ABS(SUBSTRING(D.Doc_Version, 1, LOCATE('.', D.Doc_Version)) AS HIDDEN mainV")
			->addSelect("ABS(SUBSTRING(D.Doc_Version, LOCATE('.', D.Doc_Version) + 1) AS HIDDEN subV")
			->where('D.Parent_Document IS NOT NULL AND D.Parent_Document = :document AND D.Archived = false AND D.Status_No = 1')
			->orWhere('D.id = :document AND D.Parent_Document IS NULL AND D.Doc_Version IS NOT NULL AND D.Revision IS NOT NULL AND D.Archived = false AND D.Status_No = 1')
			->addOrderBy('mainV', 'DESC')
			->addOrderBy('subV', 'DESC')
			->addOrderBy('D.Revision', 'DESC')
			->setParameter('document', $document)
			->getQuery();
	
		$result = $query->getResult();
		if (!empty($result))
		{
			return $result[0];
		}
	
		return null;
	}

	/**
	 * Get all versions of a document
	 * 
	 * @param mixed $document
	 * @return array
	 */
	public function getAllDocVersions($document)
	{
	    $result = null;
	    
	    if(empty($document)){
	        return $result;
	    }
	    $dockey = null;
	    if (gettype($document) == "string"){
	        $dockey = $document;
	        
	        $query = $this->createQueryBuilder('D')
	        ->select('D.id,IDENTITY(D.Parent_Document) as Parent_Document')
	        ->where('D.id = :document')
	        ->setParameter('document', $dockey)
	        ->setMaxResults(1);
	        $query = $query->getQuery();
	        $tempresult = $query->getArrayResult();
	        if(!empty($tempresult) && count($tempresult) > 0){
	            if(!empty($tempresult[0]['Parent_Document'])){
	               $dockey = $tempresult[0]['Parent_Document']; 
	            }
	        }
	        unset($query,$tempresult);
	    }else if(gettype($document) == "object"){
	       $parentdoc = $document->getParentDocument();
	       $dockey = (empty($parentdoc) ? $document->getId() : $parentdoc->getId());
	    }
	    
	    if(!empty($dockey)){
    	    $result = $this->getAllDocVersionsFromParent($dockey);
	    }
	    
		return $result;
	}
	

	/**
	 * Get all versions of a document
	 *
	 * @param mixed $document
	 * @return array
	 */
	public function getAllDocVersionsFromParent($document)
	{
	    $result = null;
	    
	    if(empty($document)){
	        return $result;
	    }
	    
	    $dockey = null;
	    if (gettype($document) == "string"){
	        $dockey = $document;
	        
	    }else if(gettype($document) == "object"){
	        $parentdoc = $document->getParentDocument();
	        $dockey = (empty($parentdoc) ? $document->getId() : $parentdoc->getId());
	    }
	    
	    $query = $this->createQueryBuilder('D')
	    ->addSelect("ABS(SUBSTRING(D.Doc_Version, 1, LOCATE('.', D.Doc_Version)) AS HIDDEN mainV")
	    ->addSelect("ABS(SUBSTRING(D.Doc_Version, LOCATE('.', D.Doc_Version) + 1) AS HIDDEN subV")
	    ->where('D.id = :document')
	    ->orWhere('D.Parent_Document = :document')
	    ->setParameter('document', $dockey)
	    ->orderBy('mainV', 'DESC')
	    ->addOrderBy('subV', 'DESC')
	    ->addOrderBy('D.Revision', 'DESC');
	    $query = $query->getQuery();
	    
	    $result = $query->getResult();
	    
	    return $result;
	} 
	
	
	/**
	 * Get the previous version of a document
	 * 
	 * @param Documents $document
	 * @return Documents|null
	 */
	public function getPreviousVersion($document)
	{
		$qBuilder = $this->createQueryBuilder('D');
		$query = $qBuilder
			->addSelect('StrToNumeric(D.Doc_Version AS DECIMAL) AS HIDDEN dVersion')
			->where('D.Parent_Document = :parent_doc OR (D.Parent_Document IS NULL AND D.id = :parent_doc)')
			->andWhere($qBuilder->expr()->lt('StrToNumeric(D.Doc_Version AS DECIMAL)', ':current_version'))
			->orWhere('D.Doc_Version = :current_version AND D.Revision < :current_revision')
			->andWhere('D.Archived = false')
			->andWhere('D.Status_No = 1 OR D.Status_No = 2')
			->addOrderBy('dVersion', 'DESC')
			->addOrderBy('D.Revision', 'DESC')
//			->setMaxResults(1)
			->setParameters(array('parent_doc' => $document->getParentDocument()->getId(), 'current_version' => $document->getDocVersion(), 'current_revision' => $document->getRevision()))
			->getQuery();
		
		$result = $query->getResult();
		if (!empty($result[0])) 
		{
			return $result[0];
		}
		
		return null;
	}

	/**
	 * Check if the document is parent document for others, returns
	 *  the first child docuemnt if exists; otherwise returns false
	 *
	 * @param string $document
	 * @return boolean|Documents
	 */
	public function isParentDocument($document)
	{
		$output = false;
		$query = $this->createQueryBuilder('D')
			->select('COUNT(D.id)')
			->where('D.Parent_Document = :document')
			->setParameter('document', $document)
			->getQuery();
		
		$exists = $query->getSingleScalarResult();
		if (!empty($exists)) 
		{
			$result = $this->getAllDocVersions($document);
			$count = count($result);
			for ($x = $count; $x >= 0; $x--) {
				if (!empty($result[$x]) && $result[$x]->getId() !== $document) 
				{
					$output = $result[$x];
					break;
				}
			}
			$result = null;
		}
	
		return $output;
	}
	
	/**
	 * Dispatch old parent document and update all children to new parent document
	 *
	 * @param string $newParent
	 * @param string $oldParent
	 */
	public function updateParentDocument($newParent, $oldParent)
	{
		$query = $this->createQueryBuilder('D')
			->update()
			->set('D.Parent_Document', ':newParent')
			->where('D.Parent_Document = :oldParent')
			->setParameter('newParent', $newParent)
			->setParameter('oldParent', $oldParent)
			->getQuery();
	
		$query->execute();
	}

	/**
	 * Custom search in document field based on the entered operand
	 * 
	 * @param string $field_name
	 * @param string $operand
	 * @param string $value
	 * @param array $filters
	 * @param array $doctypes
	 * @param string $defaultFormat
	 * @return array
	 */
	public function customSearch($field_name, $operand, $value, $filters, $doctypes = array(), $defaultFormat)
	{
		if (empty($field_name) || empty($operand) || empty($value) || empty($filters)) { return array(); }
		//$folder_filter = 'D.folder = :folder';
		if (!empty($filters['folder'])) 
		{
			$folders = array($filters['folder']->getId());
			if (!empty($filters['include_subfolders']) && $filters['include_subfolders'] === true)
			{
				$subfolders = $this->_em->getRepository('DocovaBundle:Folders')->getDescendants($filters['folder']->getPosition(), $filters['folder']->getLibrary()->getId(), null, true);
				foreach ($subfolders as $f)
				{
					$folders[] = $f['id'];
				}
				unset($subfolders, $f);
			}
		}
		elseif (!empty($filters['libraries']))
		{
			$libraries = explode(',', $filters['libraries']);
		}
		else {
			return array();
		}

		if ($this->_class->hasField($field_name) || $this->_class->hasAssociation($field_name)) 
		{
			$query = $this->createQueryBuilder('D')
				->select('DISTINCT(D.id) AS id')
				->leftJoin('D.Bookmarks', 'B')
				->where('D.Trash = false');
			
			if (empty($filters['search_archive']) || $filters['search_archive'] === false)
			{
				$query->andWhere('D.Archived = false');
			}
			if (!empty($filters['current_version']) && $filters['current_version'] === true) 
			{
				$query->andWhere('D.Status_No = 1');
			}
			elseif (!empty($filters['pending_release']) && $filters['pending_release'] === true) {
				$query->andWhere('D.Status_No = 0');
			}
			if (!empty($folders)) 
			{
				$query->join('D.folder', 'DF');
				if (count($folders) > 1) 
				{
					$query->andWhere($query->expr()->in('D.folder', $folders). ' OR '.$query->expr()->in('B.Target_Folder', $folders));
				}
				else {
					$query->andWhere('D.folder = :folder OR B.Target_Folder = :folder');
					$query->setParameter('folder', $folders[0]);
				}
				$query->andWhere('DF.Del = false')
					->andWhere('DF.Inactive = false');
			}
			elseif (!empty($libraries))
			{
				$query->join('D.folder', 'DF')
					->join('DF.Library', 'L')
					->andWhere('L.Trash = false')
					->andWhere('DF.Del = false')
					->andWhere('DF.Inactive = false');
				if (count($libraries) > 1) 
				{
					$query->andWhere($query->expr()->in('DF.Library', $libraries));
				}
				else {
					$query->andWhere('DF.Library = :lib_id');
					$query->setParameter('lib_id', $libraries[0]);
				}
			}

			if (!empty($doctypes) && count($doctypes) > 0)
			{
				$query->join('D.DocType', 'DT');
				if (count($doctypes) > 1) {
					$query->andWhere($query->expr()->in('DT.id', $doctypes));
				}
				else {
					$query->andWhere('DT.id = :doctype');
					$query->setParameter('doctype', $doctypes[0]);
				}
			}

			if ($this->getClassMetadata()->hasAssociation($field_name)) {
				$assiociation = $this->getClassMetadata()->getAssociationMapping($field_name);
			}
			if (!empty($assiociation) && false !== strpos($assiociation['targetEntity'], 'Docova\DocovaBundle\Entity\UserAccounts')) 
			{
				$query->join('D.'.$field_name, 'U'.$field_name);
				$value = is_array($value) ? $value[0] : $value;
				if ($operand == 'NOT CONTAINS') 
				{
					$query->andWhere($query->expr()->not($query->expr()->like("U$field_name.userNameDnAbbreviated", $query->expr()->literal('%'.$value.'%'))));
				}
				elseif ($operand == 'CONTAINS') {
					$query->andWhere($query->expr()->like("U$field_name.userNameDnAbbreviated", $query->expr()->literal($value)));
				}
				else {
					$query->andWhere("U$field_name.userNameDnAbbreviated = :value");
					$query->setParameter('value', $value);
				}
			}
			elseif ($this->getClassMetadata()->getTypeOfField($field_name) == 'datetime') {
				if (!($value instanceof \DateTime)) {
					$temp = date_create_from_format($defaultFormat, $value);
					if ($temp === false) {
						try {
							$temp = new \DateTime($value);
						}
						catch (\Exception $e) {
							$value = str_replace('/', '-', $value);
							try {
								$temp = new \DateTime($value);
							} catch (\Exception $e) {
								return array();
							}
						}
					}
				} else 
					$temp = $value;
				$value = new \DateTime();
				$value->setTimestamp(strtotime($temp->format('m/d/Y')));
				unset($temp);
				if ($operand == '='){
					$query->andWhere("D.$field_name BETWEEN :value AND :nextDay");

					$value->setTime(0, 0, 0);
					$startTime = $value->format('Y-m-d H:i:s');
					$query->setParameter('value', $startTime);
						
					$value->add(new \DateInterval('P1D'));
					
					$endTime = $value->format('Y-m-d H:i:s');
					$query->setParameter('nextDay', $endTime);
					
				}
				else if ($operand == '>='){
					$value->setTime(0, 0, 0);
					$query->andWhere("D.$field_name >=".' :value');
					$query->setParameter('value', $value->format('Y-m-d H:i:s'));
				}
				else if ($operand == '<='){
					$value->setTime(0, 0, 0);
					$value->add(new \DateInterval('P1D'));
					$query->andWhere("D.$field_name <".' :value');
					$query->setParameter('value', $value->format('Y-m-d H:i:s'));
				}
				else if ($operand == '<'){
					$value->setTime(0, 0, 0);
					$query->andWhere("D.$field_name <".' :value');
					$query->setParameter('value', $value->format('Y-m-d H:i:s'));
				}
				else if ($operand == '>'){
					$value->setTime(0, 0, 0);
					$value->add(new \DateInterval('P1D'));
					$query->andWhere("D.$field_name >=".' :value');
					$query->setParameter('value', $value->format('Y-m-d H:i:s'));
				}

			}
			else {
				if ($operand == 'CONTAINS')
				{
					$query->andWhere($query->expr()->like("D.$field_name", $query->expr()->literal($value)));
				}
				elseif ($operand == 'NOT CONTAINS')
				{
					$query->andWhere($query->expr()->not($query->expr()->like("D.$field_name", $query->expr()->literal($value))));
				}
				else {
					$query->andWhere("D.$field_name ".$operand.' :value');
					$query->setParameter('value', $value);
				}
			}
			
			$output = array();
			$result = $query->getQuery()->getArrayResult();
			$len = count($result);
			if (!empty($result) && !empty($result[0])) {
				for ($x = 0; $x < $len; $x++) {
					$output[] = $result[$x]['id']; 
				}
			}
			return $output;
		}
		elseif ($field_name == 'File_Name') 
		{
			$query = $this->createQueryBuilder('D')
				->select('DISTINCT(D.id) AS id')
				->leftJoin('D.Bookmarks', 'B')
				->join('D.Attachments', 'A')
				->where('D.Trash = false');

			if (empty($filters['search_archive']) || $filters['search_archive'] === false)
			{
				$query->andWhere('D.Archived = false');
			}
			if ($filters['current_version'] === true) 
			{
				$query->andWhere('D.Status_No = 1');
			}
			elseif ($filters['pending_release'] === true) {
				$query->andWhere('D.Status_No = 0');
			}

			if (!empty($folders)) 
			{
				$query->join('D.folder', 'DF')
					->andWhere('DF.Del = false')
					->andWhere('DF.Inactive = false');
				if (count($folders) > 1) 
				{
					$query->where($query->expr()->in('D.folder', $folders). ' OR '.$query->expr()->in('B.Target_Folder', $folders));
				}
				else {
					$query->where('D.folder = :folder OR B.Target_Folder = :folder');
					$query->setParameter('folder', $folders[0]);
				}
			}
			elseif (!empty($libraries))
			{
				$query->join('D.folder', 'DF')
					->join('DF.Library', 'L')
					->andWhere('L.Trash = false')
					->andWhere('DF.Del = false')
					->andWhere('DF.Inactive = false');
				if (count($libraries) > 1)
				{
					$query->andWhere($query->expr()->in('DF.Library', $libraries));
				}
				else {
					$query->andWhere('DF.Library = :lib_id');
					$query->setParameter('lib_id', $libraries[0]);
				}
			}
				

			if (!empty($doctypes) && count($doctypes) > 0)
			{
				$query->join('D.DocType', 'DT');
				if (count($doctypes) > 1) {
					$query->andWhere($query->expr()->in('DT.id', $doctypes));
				}
				else {
					$query->andWhere('DT.id = :doctype');
					$query->setParameter('doctype', $doctypes[0]);
				}
			}

			if ($operand == 'CONTAINS')
			{
				$query->andWhere($query->expr()->like("A.$field_name", $query->expr()->literal($value)));
			}
			elseif ($operand == 'NOT CONTAINS')
			{
				$query->andWhere($query->expr()->not($query->expr()->like("A.$field_name", $query->expr()->literal($value))));
			}
			else {
				$query->andWhere("A.$field_name ".$operand.' :value');
				$query->setParameter('value', $value);
			}

			$output = array();
			$result = $query->getQuery()->getArrayResult();
			$len = count($result);
			if (!empty($result) && !empty($result[0])) {
				for ($x = 0; $x < $len; $x++) {
					$output[] = $result[$x]['id']; 
				}
			}
			return $output;
		}
		
		return array();
	}
	
	/**
	 * Get object array collection of documents
	 * 
	 * @param array $documents
	 * @param array $filter
	 * @param boolean $showDisplayName
	 * @param boolean $include_apps
	 * @return array
	 */
	public function getDocumentsObject($documents, $filter = array(), $showDisplayName = false, $search_archive = false, $include_apps = false)
	{
		$result = array();
		
		if (!empty($documents[0]))
		{
			$query = 'SELECT D.id, D.Doc_Title, D.Doc_Version, D.Revision, D.Doc_Status, D.Status_No, D.Description, D.Keywords, D.Date_Created, D.Date_Modified, D.Locked, D.Released_Date, D.Last_Review_Date, D.Next_Review_Date, D.Has_Pending_Review, D.Review_Type, D.Review_Period, D.Review_Period_Option, D.Review_Date_Select, D.Review_Start_Month, D.Review_Start_Day, D.Author_Review, D.Archive_Type, D.Custom_Archive_Date, D.Trash, D.Archived, D.Date_Archived, D.Status_No_Archived, D.Previous_Status, D.Date_Deleted, D.Parent_Document, D.Doc_Owner, D.Doc_Author, D.Created_By, D.Modified_By, D.Lock_Editor, D.Released_By, D.Deleted_By, D.Folder_Id, D.Doc_Type_Id';
			if ($include_apps === true) {
				$query .= ', NULL AS Folder_Name, D.App_Id AS Library_Id, A.Library_Title, A.Is_App';
			}
			else {
				$query .= ', F.Folder_Name, F.Library_Id, L.Library_Title';
			}
			if ($showDisplayName === true) {
				$query .= ', U1.Display_Name AS CreatedBy, U2.Display_Name AS Author, U3.Display_Name AS ModifiedBy ';
			}
			else {
				$query .= ', U1.user_name_dn_abbreviated AS CreatedBy, U2.user_name_dn_abbreviated AS Author, U3.user_name_dn_abbreviated AS ModifiedBy ';
			}
	
			if ($include_apps === true) {
				$query .= ' FROM tb_folders_documents AS D INNER JOIN tb_libraries AS A ON (D.App_Id = A.id)';
			}
			else {
				$query .= ' FROM tb_folders_documents AS D INNER JOIN tb_library_folders AS F ON (D.Folder_Id = F.id) INNER JOIN tb_libraries AS L ON (F.Library_Id = L.id)';
			}
			if ($showDisplayName === true) {
				$query .= ' INNER JOIN tb_user_profile AS U1 ON (D.Created_By = U1.User_Id) LEFT JOIN tb_user_profile AS U2 ON (D.Doc_Author =  U2.User_Id ) LEFT JOIN tb_user_profile AS U3 ON (D.Modified_By =  U3.User_Id )';
			}
			else {
				$query .= ' INNER JOIN tb_user_accounts AS U1 ON (D.Created_By = U1.id) LEFT JOIN tb_user_accounts AS U2 ON (D.Doc_Author =  U2.id ) LEFT JOIN tb_user_accounts AS U3 ON (D.Modified_By =  U3.id )';
			}
			$query .= ' WHERE D.Trash = 0 AND '.($search_archive === false ? 'D.Archived = 0 AND ' : '');
			if ($include_apps === true) {
				$query .= 'A.Trash = 0';
			}
			else {
				$query .= 'F.Del = 0 AND F.Sub_Trash = 0';
			}
			if ($include_apps === false && !empty($filter['folder']))
			{
				$query .= " AND D.Folder_Id = '{$filter['folder']->getId()}'";
			}
			if (!empty($filter) && !empty($filter['current_version']) && $filter['current_version'] === true)
			{
				$query .= ' AND D.Status_No = 1';
			}
			elseif (!empty($filter) && !empty($filter['pending_release']) && $filter['pending_release'] === true)
			{
				$query .= ' AND D.Status_No = 0';
			}
			
			if (count($documents) == 1) 
			{
				$query .= " AND D.id = '$documents[0]'";
			}
			else {
				$documents = implode("','", $documents);
				$query .= " AND D.id IN ('$documents')";
			}

			$conn = $this->_em->getConnection();
			$result = $conn->fetchAll($query);
			if (!empty($result[0]))
			{
				$len = count($result);
				$docTypes = array();
				for ($x = 0; $x < $len; $x++) {
					$docTypes[] = $result[$x]['Doc_Type_Id'];
				}
				$docTypes = array_unique($docTypes);
				$docTypes = implode("','", $docTypes);
				if (!empty($docTypes))
				{
					$query = "SELECT id, Key_Type, Doc_Name, Doc_Icon, Disable_Activities, Hide_Subject, Subject_Label, Translate_Subject_To, Hide_On_Reading, Hide_On_Editing, Hide_On_Custom, Section_Style, Section_Label, Enable_For_DLE, Enable_Mail_Acquire, Enable_Discussion, Allow_Forwarding, Forward_Save, Content_Sections, Enable_Lifecycle, Initial_Status, Final_Status, Superseded_Status, Discarded_Status, Archived_Status, Deleted_Status, Enable_Versions, Restrict_Live_Drafts, Show_Headers, Strict_Versioning, Allow_Retract, Restrict_Drafts, Update_Bookmarks, Hide_Workflow, Disable_Delete_In_Workflow, Hide_Buttons FROM tb_document_types WHERE id IN('$docTypes')";
					$values = $conn->fetchAll($query);
					$query = $docTypes = null;
					$vLen = count($values);
					for ($x = 0; $x < $len; $x++) {
						for ($c = 0; $c < $vLen; $c++)
						{
							if ($result[$x]['Doc_Type_Id'] == $values[$c]['id'])
							{
								foreach ($values[$c] as $key => $v) {
									if ($key == 'id') { continue; }
									$result[$x][$key] = $v;
								}
								$key = $v = null;
								break;
							}
						}
					}
					$vLen = $values = null;
				}
				$query = 'SELECT V.Doc_Id, F.Field_Name, V.Field_Value FROM tb_form_text_values AS V JOIN tb_design_elements AS F ON (V.Field_Id = F.id) WHERE V.Doc_Id IN (';
				for ($x = 0; $x < $len; $x++) {
					$query .= "'{$result[$x]['id']}',";
				}
				$query = substr_replace($query, ") AND V.Field_Value <> '' ORDER BY V.Doc_Id", -1);
				$values = $conn->fetchAll($query);
				$query = null;
				if (!empty($values[0]))
				{
					$vLen = count($values);
					for ($c = 0; $c < $vLen; $c++)
					{
						$index = $this->getDocumentIndex($result, $values[$c]['Doc_Id']);
						if ($index !== false)
						{
							if (empty($result[$index][str_replace('[]', '', $values[$c]['Field_Name'])]))
								$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $values[$c]['Field_Value'];
							else {
								$old_value = $result[$index][str_replace('[]', '', $values[$c]['Field_Name'])];
								$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $old_value . ';' . $values[$c]['Field_Value'];
								$old_value = null;
							}
						}
					}
					$vLen = $c = $index = null;
				}
				$query = 'SELECT V.Doc_Id, F.Field_Name, V.Field_Value FROM tb_form_numeric_values AS V JOIN tb_design_elements AS F ON (V.Field_Id = F.id) WHERE V.Doc_Id IN (';
				for ($x = 0; $x < $len; $x++) {
					$query .= "'{$result[$x]['id']}',";
				}
				$query = substr_replace($query, ") AND V.Field_Value <> '' ORDER BY V.Doc_Id", -1);
				$values = $conn->fetchAll($query);
				$query = null;
				if (!empty($values[0]))
				{
					$vLen = count($values);
					for ($c = 0; $c < $vLen; $c++)
					{
						$index = $this->getDocumentIndex($result, $values[$c]['Doc_Id']);
						if ($index !== false)
						{
							if (empty($result[$index][str_replace('[]', '', $values[$c]['Field_Name'])]))
								$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $values[$c]['Field_Value'];
							else {
								$old_value = $result[$index][str_replace('[]', '', $values[$c]['Field_Name'])];
								$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $old_value . ';' . $values[$c]['Field_Value'];
								$old_value = null;
							}
						}
					}
					$vLen = $c = $index = null;
				}
				$query = 'SELECT V.Doc_Id, F.Field_Name, V.Field_Value FROM tb_form_datetime_values AS V JOIN tb_design_elements AS F ON (V.Field_Id = F.id) WHERE V.Doc_Id IN (';
				for ($x = 0; $x < $len; $x++) {
					$query .= "'{$result[$x]['id']}',";
				}
				$query = substr_replace($query, ") AND V.Field_Value IS NOT NULL ORDER BY V.Doc_Id", -1);
				$values = $conn->fetchAll($query);
				$query = null;
				if (!empty($values[0]))
				{
					$vLen = count($values);
					for ($c = 0; $c < $vLen; $c++)
					{
						$index = $this->getDocumentIndex($result, $values[$c]['Doc_Id']);
						if ($index !== false)
						{
							if (empty($result[$index][str_replace('[]', '', $values[$c]['Field_Name'])]))
								$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $values[$c]['Field_Value'];
							else {
								$old_value = $result[$index][str_replace('[]', '', $values[$c]['Field_Name'])];
								$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $old_value . ';' . $values[$c]['Field_Value'];
								$old_value = null;
							}
						}
					}
					$vLen = $c = $index = null;
				}
				$query = 'SELECT V.Doc_Id, F.Field_Name, U.user_name_dn_abbreviated AS Field_Value FROM tb_form_name_values AS V JOIN tb_design_elements AS F ON (V.Field_Id = F.id) JOIN tb_user_accounts AS U ON (V.Field_Value = U.id) WHERE V.Doc_Id IN (';
				for ($x = 0; $x < $len; $x++) {
					$query .= "'{$result[$x]['id']}',";
				}
				$query = substr_replace($query, ") ORDER BY V.Doc_Id", -1);
				$values = $conn->fetchAll($query);
				$query = 'SELECT V.Doc_Id, F.Field_Name, G.Display_Name AS Field_Value FROM tb_form_name_values AS V JOIN tb_design_elements AS F ON (V.Field_Id = F.id) JOIN tb_user_roles AS G ON (V.Field_Value = G.id) WHERE V.Doc_Id IN (';
				for ($x = 0; $x < $len; $x++) {
					$query .= "'{$result[$x]['id']}',";
				}
				$query = substr_replace($query, ") ORDER BY V.Doc_Id", -1);
				$gvalues = $conn->fetchAll($query);
				$query = null;
				if (!empty($gvalues[0]))
				{
					foreach ($gvalues as $group) {
						$values[] = $group;
					}
				}
				$gvalues = $group = null;
				if (!empty($values[0]))
				{
					$vLen = count($values);
					for ($c = 0; $c < $vLen; $c++)
					{
						$index = $this->getDocumentIndex($result, $values[$c]['Doc_Id']);
						if ($index !== false)
						{
							$v = $showDisplayName === true && strstr($values[$c]['Field_Value'], '/') !== false ? strstr($values[$c]['Field_Value'], '/', true) : $values[$c]['Field_Value'];
							if (empty($result[$index][str_replace('[]', '', $values[$c]['Field_Name'])]))
								$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $v;
							else {
								$old_value = $result[$index][str_replace('[]', '', $values[$c]['Field_Name'])];
								$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $old_value . ';' . $v;
								$old_value = null;
							}
						}
					}
					$vLen = $c = $index = null;
				}
				$values = null;
			}
		}
		return $result;
	}
	
	/**
	 * Gets the list of documents are valid for current review policy
	 * 
	 * @param array $doc_status [optional()]
	 * @param array $libraries [optional()]
	 * @param array $doctypes [optional()]
	 * @param string $custom_query [optional('')]
	 * @return mixed|array
	 */
	public function getDocumentsForReview($doc_status = array(), $libraries= array(), $doctypes = array(), $custom_query = '')
	{
		$query = $this->createQueryBuilder('D');
		if (!empty($custom_query) && false === stripos($custom_query, 'delete') && false === stripos($custom_query, 'update') && false === stripos($custom_query, 'create ')) 
		{
			$query->join('D.Creator', 'CU')
				->join('D.Author', 'DA');
		}
		if (!empty($libraries) && count($libraries) > 0) 
		{
			$query->join('D.folder', 'F')
				->join('F.Library', 'L');
		}
		
		if (!empty($doctypes) && count($doctypes) > 0) 
		{
			$query->join('D.DocType', 'DT');
		}
		
		$query->where("(D.Trash = false AND D.Archived = false AND D.Review_Type ='P' AND D.Has_Pending_Review = false)");
		if (!empty($custom_query) && false === stripos($custom_query, 'delete') && false === stripos($custom_query, 'update') && false === stripos($custom_query, 'create ')) 
		{
			$query->andWhere("($custom_query)");
		}
		
		if (!empty($doc_status)) 
		{
			if (count($doc_status) == 1) {
				$query->andWhere('D.Status_No = '. $doc_status[0]);
			}
			else {
				$query->andWhere($query->expr()->in('D.Status_No', $doc_status));
			}
		}

		if (!empty($libraries) && count($libraries) > 0) 
		{
			if (count($libraries) == 1) {
				$query->andWhere("L.id = '$libraries[0]'");
			}
			else {
				$query->andWhere($query->expr()->in('L.id', $libraries));
			}
			$query->andWhere('L.Trash = false');
		}

		if (!empty($doctypes) && count($doctypes) > 0) 
		{
			if (count($doctypes) == 1) {
				$query->andWhere("DT.id = '$doctypes[0]'");
			}
			else {
				$query->andWhere($query->expr()->in('DT.id', $doctypes));
			}
		}
		
		$result = $query->getQuery()->getResult();
		return $result;
	}
	
	/**
	 * Gets the list of documents are valid to be archived base on the archive policy
	 *  
	 * @param string $library
	 * @param array $filters [optional()]
	 * @param array $doctypes [optional()]
	 * @param string $custom_query [optional('')]
	 * @return mixed|array
	 */
	public function getDocumentsForArchiving($library, $filters = array(), $doctypes = array(), $custom_query = '')
	{
		$query = $this->createQueryBuilder('D')
			->join('D.folder', 'F')
			->join('D.DocType', 'DT')
			->select(array('D.id', 'D.Status_No', 'D.Doc_Status', 'DT.Enable_Versions', 'IDENTITY(D.Parent_Document) as Parent_Document'));
		if (!empty($custom_query) && false === stripos($custom_query, 'delete') && false === stripos($custom_query, 'update') && false === stripos($custom_query, 'create ')) 
		{
			$query->join('D.Creator', 'CU')
				->join('D.Author', 'DA');
		}
		
		$query->where("D.Trash = false AND D.Archive_Type ='P' AND D.Archived = false AND F.Library = :libid")
			->setParameter('libid', $library);

		if (!empty($custom_query) && false === stripos($custom_query, 'delete') && false === stripos($custom_query, 'update') && false === stripos($custom_query, 'create '))
		{
			$query->andWhere("($custom_query)");
		}

		if (!empty($filters) && count($filters) > 0) 
		{
			if (!empty($filters['SkipWorkflow'])) 
			{
				$wfQuery = $this->_em->createQueryBuilder()
					->select('IDENTITY(DWF.Document)')
					->from('Docova\DocovaBundle\Entity\DocumentWorkflowSteps', 'DWF')
					->where('DWF.Date_Started IS NOT NULL');
				$query->andWhere($query->expr()->notIn('D.id', $wfQuery->getDQL()));
			}
			
			if (!empty($filters['SkipReleased'])) 
			{
				$query->andWhere('D.Status_No != 1');
			}
			
			if (!empty($filters['SkipDrafts'])) 
			{
				$query->andWhere('D.Status_No != 0');
			}
			
			if (!empty($filters['ArchiveDateField']) && !empty($filters['ArchiveDelay'])) 
			{
				switch ($filters['ArchiveDateField']) {
					case 'DateCreated':
						$query_string = 'D.Date_Created';
						break;
					case 'DateModified':
						$query_string = 'D.Date_Modified';
						break; 
					case 'ReleasedDate':
						$query_string = 'D.Released_Date';
						break;
				}
				
				$query->andWhere("DATE_ADD($query_string, {$filters['ArchiveDelay']}, 'DAY') <= CURRENT_TIMESTAMP()");
			}
		}
		
		if (!empty($doctypes) && count($doctypes) > 0)
		{
			if (count($doctypes) == 1) {
				$query->andWhere("DT.id = '$doctypes[0]'");
			}
			else {
				$query->andWhere($query->expr()->in('DT.id', $doctypes));
			}
		}
		
		$result = $query->getQuery()->getArrayResult();
		return $result;
	}
	
	/**
	 * Get all deleted documents in specified library
	 * 
	 * @param integer $library
	 * @return mixed|array
	 */
	public function getAllDeletedDocsInLibrary($library)
	{
		$conn = $this->_em->getConnection();
		$result = array();
		$query = 'SELECT DISTINCT D.id, D.Doc_Title, D.Doc_Version, D.Revision, D.Doc_Status, D.Status_No, D.Description, D.Keywords, D.Date_Created, D.Date_Modified, D.Locked, D.Released_Date, D.Last_Review_Date, D.Next_Review_Date, D.Has_Pending_Review, D.Review_Type, D.Review_Period, D.Review_Period_Option, D.Review_Date_Select, D.Review_Start_Month, D.Review_Start_Day, D.Author_Review, D.Archive_Type, D.Custom_Archive_Date, D.Trash, D.Archived, D.Date_Archived, D.Status_No_Archived, D.Previous_Status, D.Date_Deleted, D.Parent_Document, D.Doc_Owner, D.Doc_Author, D.Created_By, D.Modified_By, D.Lock_Editor, D.Released_By, D.Deleted_By, D.Folder_Id, D.Doc_Type_Id, U1.user_name_dn_abbreviated AS CreatedBy, U2.user_name_dn_abbreviated AS Author, U3.user_name_dn_abbreviated AS ModifiedBy,
				  DT.Key_Type, DT.Doc_Name, DT.Doc_Icon, DT.Disable_Activities, DT.Hide_Subject, DT.Subject_Label, DT.Translate_Subject_To, DT.Hide_On_Reading, DT.Hide_On_Editing, DT.Hide_On_Custom, DT.Section_Style, DT.Section_Label, DT.Enable_For_DLE, DT.Enable_Mail_Acquire, DT.Enable_Discussion, DT.Allow_Forwarding, DT.Forward_Save, DT.Content_Sections, DT.Enable_Lifecycle, DT.Initial_Status, DT.Final_Status, DT.Superseded_Status, DT.Discarded_Status, DT.Archived_Status, DT.Deleted_Status, DT.Enable_Versions, DT.Restrict_Live_Drafts, DT.Show_Headers, DT.Strict_Versioning, DT.Allow_Retract, DT.Restrict_Drafts, DT.Update_Bookmarks, DT.Hide_Workflow, DT.Disable_Delete_In_Workflow, DT.Hide_Buttons
					FROM tb_folders_documents AS D INNER JOIN tb_library_folders AS F ON (D.Folder_Id = F.id) INNER JOIN tb_document_types AS DT ON (D.Doc_Type_Id =  DT.id) INNER JOIN tb_user_accounts AS U1 ON (D.Created_By = U1.id) LEFT JOIN tb_user_accounts AS U2 ON (D.Doc_Author = U2.id) LEFT JOIN tb_user_accounts AS U3 ON (D.Modified_By =  U3.id)
					WHERE D.Trash = 1 AND D.Archived = 0 AND F.Library_Id = ?';
		$result = $conn->fetchAll($query, array($library));
		if (!empty($result[0]))
		{
			$len = count($result);
			$query = 'SELECT V.Doc_Id, F.Field_Name, V.Summary_Value FROM tb_form_text_values AS V JOIN tb_design_elements AS F ON (V.Field_Id = F.id) WHERE V.Doc_Id IN (';
			for ($x = 0; $x < $len; $x++) {
				$query .= "'{$result[$x]['id']}',";
			}
			$query = substr_replace($query, ") AND V.Summary_Value <> '' ORDER BY V.Doc_Id", -1);
			$values = $conn->fetchAll($query);
			$query = null;
			if (!empty($values[0]))
			{
				$vLen = count($values);
				for ($c = 0; $c < $vLen; $c++)
				{
					$index = $this->getDocumentIndex($result, $values[$c]['Doc_Id']);
					if ($index !== false)
					{
						if (empty($result[$index][str_replace('[]', '', $values[$c]['Field_Name'])]))
							$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $values[$c]['Summary_Value'];
						else {
							$old_value = $result[$index][str_replace('[]', '', $values[$c]['Field_Name'])];
							$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $old_value . ';' . $values[$c]['Summary_Value'];
							$old_value = null;
						}
					}
				}
				$vLen = $c = $index = null;
			}
			$query = 'SELECT V.Doc_Id, F.Field_Name, V.Field_Value FROM tb_form_numeric_values AS V JOIN tb_design_elements AS F ON (V.Field_Id = F.id) WHERE V.Doc_Id IN (';
			for ($x = 0; $x < $len; $x++) {
				$query .= "'{$result[$x]['id']}',";
			}
			$query = substr_replace($query, ") AND V.Field_Value <> '' ORDER BY V.Doc_Id", -1);
			$values = $conn->fetchAll($query);
			$query = null;
			if (!empty($values[0]))
			{
				$vLen = count($values);
				for ($c = 0; $c < $vLen; $c++)
				{
					$index = $this->getDocumentIndex($result, $values[$c]['Doc_Id']);
					if ($index !== false)
					{
						if (empty($result[$index][str_replace('[]', '', $values[$c]['Field_Name'])]))
							$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $values[$c]['Field_Value'];
						else {
							$old_value = $result[$index][str_replace('[]', '', $values[$c]['Field_Name'])];
							$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $old_value . ';' . $values[$c]['Field_Value'];
							$old_value = null;
						}
					}
				}
				$vLen = $c = $index = null;
			}
			$query = 'SELECT V.Doc_Id, F.Field_Name, V.Field_Value FROM tb_form_datetime_values AS V JOIN tb_design_elements AS F ON (V.Field_Id = F.id) WHERE V.Doc_Id IN (';
			for ($x = 0; $x < $len; $x++) {
				$query .= "'{$result[$x]['id']}',";
			}
			$query = substr_replace($query, ") AND V.Field_Value IS NOT NULL ORDER BY V.Doc_Id", -1);
			$values = $conn->fetchAll($query);
			$query = null;
			if (!empty($values[0]))
			{
				$vLen = count($values);
				for ($c = 0; $c < $vLen; $c++)
				{
					$index = $this->getDocumentIndex($result, $values[$c]['Doc_Id']);
					if ($index !== false)
					{
						if (empty($result[$index][str_replace('[]', '', $values[$c]['Field_Name'])]))
							$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $values[$c]['Field_Value'];
						else {
							$old_value = $result[$index][str_replace('[]', '', $values[$c]['Field_Name'])];
							$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $old_value . ';' . $values[$c]['Field_Value'];
							$old_value = null;
						}
					}
				}
				$vLen = $c = $index = null;
			}
			$query = 'SELECT V.Doc_Id, F.Field_Name, U.user_name_dn_abbreviated AS Field_Value FROM tb_form_name_values AS V JOIN tb_design_elements AS F ON (V.Field_Id = F.id) JOIN tb_user_accounts AS U ON (V.Field_Value = U.id) WHERE V.Doc_Id IN (';
			for ($x = 0; $x < $len; $x++) {
				$query .= "'{$result[$x]['id']}',";
			}
			$query = substr_replace($query, ") ORDER BY V.Doc_Id", -1);
			$values = $conn->fetchAll($query);
			$query = 'SELECT V.Doc_Id, F.Field_Name, G.Display_Name AS Field_Value FROM tb_form_name_values AS V JOIN tb_design_elements AS F ON (V.Field_Id = F.id) JOIN tb_user_roles AS G ON (V.Field_Value = G.id) WHERE V.Doc_Id IN (';
			for ($x = 0; $x < $len; $x++) {
				$query .= "'{$result[$x]['id']}',";
			}
			$query = substr_replace($query, ") ORDER BY V.Doc_Id", -1);
			$gvalues = $conn->fetchAll($query);
			$query = null;
			if (!empty($gvalues[0]))
			{
				foreach ($gvalues as $group) {
					$values[] = $group;
				}
			}
			$gvalues = $group = null;
			if (!empty($values[0]))
			{
				$vLen = count($values);
				for ($c = 0; $c < $vLen; $c++)
				{
					$index = $this->getDocumentIndex($result, $values[$c]['Doc_Id']);
					if ($index !== false)
					{
						$v = strstr($values[$c]['Field_Value'], '/') !== false ? strstr($values[$c]['Field_Value'], '/', true) : $values[$c]['Field_Value'];
						if (empty($result[$index][str_replace('[]', '', $values[$c]['Field_Name'])]))
							$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $v;
						else {
							$old_value = $result[$index][str_replace('[]', '', $values[$c]['Field_Name'])];
							$result[$index][str_replace('[]', '', $values[$c]['Field_Name'])] = $old_value . ';' . $v;
							$old_value = null;
						}
					}
				}
				$vLen = $c = $index = null;
			}
			$values = null;
		}
		
		return $result;
	}
	
	/**
	 * Get custom fields and values of a document in array format
	 * 
	 * @param string $document
	 * @param boolean $displayShortName
	 * @return array
	 */
	public function getFieldAndValues($document, $displayShortName = false)
	{
		$conn = $this->_em->getConnection();
		$output = array();
		$query = 'SELECT F.Field_Name, V.Field_Value FROM tb_form_text_values AS V INNER JOIN tb_design_elements AS F ON (V.Field_Id = F.id) WHERE Doc_Id = ? ORDER BY V.Field_Id';
		$result = $conn->fetchAll($query, array($document));
		if (!empty($result[0]))
		{
			$vLen = count($result);
			for ($c = 0; $c < $vLen; $c++) {
				if (empty($output[str_replace('[]', '', $result[$c]['Field_Name'])]))
					$output[str_replace('[]', '', $result[$c]['Field_Name'])] = $result[$c]['Field_Value'];
				else {
					$old_value = $output[str_replace('[]', '', $result[$c]['Field_Name'])];
					$output[str_replace('[]', '', $result[$c]['Field_Name'])] = $old_value . ';' . $result[$c]['Field_Value'];
					$old_value = null;
				}
			}
			$vLen = $c = null;
		}
		$query = 'SELECT F.Field_Name, V.Field_Value FROM tb_form_numeric_values AS V INNER JOIN tb_design_elements AS F ON (V.Field_Id = F.id) WHERE Doc_Id = ? ORDER BY V.Field_Id';
		$result = $conn->fetchAll($query, array($document));
		if (!empty($result[0]))
		{
			$vLen = count($result);
			for ($c = 0; $c < $vLen; $c++) {
				if (empty($output[str_replace('[]', '', $result[$c]['Field_Name'])]))
					$output[str_replace('[]', '', $result[$c]['Field_Name'])] = strval($result[$c]['Field_Value']);
				else {
					$old_value = $output[str_replace('[]', '', $result[$c]['Field_Name'])];
					$output[str_replace('[]', '', $result[$c]['Field_Name'])] = $old_value . ';' . strval($result[$c]['Field_Value']);
					$old_value = null;
				}
			}
			$vLen = $c = null;
		}
		$query = 'SELECT F.Field_Name, V.Field_Value FROM tb_form_datetime_values AS V INNER JOIN tb_design_elements AS F ON (V.Field_Id = F.id) WHERE Doc_Id = ? ORDER BY V.Field_Id';
		$result = $conn->fetchAll($query, array($document));
		if (!empty($result[0]))
		{
			$vLen = count($result);
			for ($c = 0; $c < $vLen; $c++) {
				if (empty($output[str_replace('[]', '', $result[$c]['Field_Name'])]))
					$output[str_replace('[]', '', $result[$c]['Field_Name'])] = $result[$c]['Field_Value'];
				else {
					$old_value = $output[str_replace('[]', '', $result[$c]['Field_Name'])];
					$output[str_replace('[]', '', $result[$c]['Field_Name'])] = $old_value . ';' . $result[$c]['Field_Value'];
					$old_value = null;
				}
			}
			$vLen = $c = null;
		}
		$query = 'SELECT F.Field_Name, U.user_name_dn_abbreviated AS Field_Value FROM tb_form_name_values AS V INNER JOIN tb_design_elements AS F ON (V.Field_Id = F.id) INNER JOIN tb_user_accounts AS U ON (V.Field_Value = U.id) WHERE Doc_Id = ? ORDER BY V.Field_Id';
		$result = $conn->fetchAll($query, array($document));
		$query = 'SELECT F.Field_Name, G.Display_Name AS Field_Value FROM tb_form_group_values AS V INNER JOIN tb_design_elements AS F ON (V.Field_Id = F.id) INNER JOIN tb_user_roles AS G ON (V.Field_Value = G.id) WHERE Doc_Id = ? ORDER BY V.Field_Id';
		$gresult = $conn->fetchAll($query, array($document));
		if (!empty($gresult[0]))
		{
			$result = !empty($result) ? $result : array();
			foreach ($gresult as $group) {
				$result[] = $group;
			}
			$gresult = $group = null;
		}
		if (!empty($result[0]))
		{
			$vLen = count($result);
			for ($c = 0; $c < $vLen; $c++) {
				$v = $displayShortName === true && strstr($result[$c]['Field_Value'], '/') !== false ? strstr($result[$c]['Field_Value'], '/', true) : $result[$c]['Field_Value'];
				if (empty($output[str_replace('[]', '', $result[$c]['Field_Name'])]))
					$output[str_replace('[]', '', $result[$c]['Field_Name'])] = $v;
				else {
					$old_value = $output[str_replace('[]', '', $result[$c]['Field_Name'])];
					$output[str_replace('[]', '', $result[$c]['Field_Name'])] = $old_value . ';' . $v;
					$old_value = null;
				}
			}
			$vLen = $c = null;
		}
		$result = $query = null;
		return $output;
	}
	
	/**
	 * Full search on document title and any other custom fields
	 * 
	 * @param string $search
	 * @param array $filters
	 * @param array $doctypes
	 * @return array
	 */
	public function fullSearchOn($search, $filters = array(), $doctypes = array(), $max = 500)
	{
		$output = array();
		$search = str_replace(array('"', '\\'), '', $search);
		if (!empty($search)) 
		{
			$query = 'SELECT D.id FROM tb_folders_documents AS D ';
			if (!empty($filters['libraries'])) 
			{
				if (!empty($filters['view'])) {
					$query .= 'JOIN tb_libraries AS A ON (D.App_Id = A.id)';
				}
				else {
					$query .= 'LEFT JOIN tb_library_folders AS F ON (D.Folder_Id = F.id) LEFT JOIN tb_libraries AS A ON (D.App_Id = A.id)';
				}
			}
			
			$query .= " WHERE D.Trash = 0 AND D.Archived = 0 ";
			if ($search !== '*') 
			{
				$query .= " AND (D.Doc_Title LIKE '%$search%' ";
				if (!empty($filters['custom_fields'])) 
				{
					$query .= " OR D.id IN ( SELECT V.Doc_Id FROM tb_form_text_values AS V INNER JOIN tb_design_elements AS E ON V.Field_Id = E.id WHERE V.Field_Value LIKE '%$search%' AND (";
					foreach ($filters['custom_fields'] as $field) {
						$query .= "E.Field_Name = '$field' OR ";
					}
					$query = substr_replace($query, '))', -3);
					$field = null;
				}
				if (!empty($filters['libraries']))
				{
					$query .= " OR D.id IN (SELECT V.Doc_Id FROM tb_form_text_values AS V WHERE V.Field_Value LIKE '%$search%')";
					$query .= " OR D.id IN (SELECT V.Doc_Id FROM tb_form_numeric_values AS V WHERE V.Field_Value LIKE '%$search%')";
					$query .= " OR D.id IN (SELECT V.Doc_Id FROM tb_form_name_values AS V JOIN tb_user_accounts AS N ON (V.Field_Value = N.id) WHERE N.user_name_dn_abbreviated LIKE '%$search%')";
					$query .= " OR D.id IN (SELECT V.Doc_Id FROM tb_form_group_values AS V JOIN tb_user_roles AS G ON (V.Field_Value = G.id) WHERE G.Display_Name LIKE '%$search%')";
				}
				$query .= ') ';
			}
			
			if (!empty($filters['current_version']) && $filters['current_version'] === true)
			{
				$query .= 'AND D.Status_No = 1 ';
			}
			elseif (!empty($filters['current_version']) && $filters['pending_release'] === true)
			{
				$query .= 'AND D.Status_No = 0 ';
			}
			
			if (!empty($filters['folder']) && is_object($filters['folder'])) 
			{
				$query .= "AND (D.Folder_Id = '{$filters['folder']->getId()}' ";
				if (!empty($filters['include_subfolders'])) 
				{
					$query .= " OR D.Folder_ID IN( SELECT id FROM tb_library_folders WHERE Position LIKE '{$filters['folder']->getPosition()}.%' AND Library_Id = '{$filters['folder']->getLibrary()->getId()}' ) ";
				}
				$query .= ') ';
			}
			if (!empty($filters['libraries'])) 
			{
				if (!is_array($filters['libraries'])) {
					$filters['libraries'] = explode(',', $filters['libraries']);
				}
				$libraries = implode("','", $filters['libraries']);
				if (!empty($filters['view'])) {
					$query .= "AND D.App_Id IN ('$libraries') ";
				}
				else {
					$query .= "AND (F.Library_Id IN ('$libraries') OR D.App_Id IN ('$libraries')) ";
				}
				$libraries = null;
			}
			
			if (!empty($doctypes)) 
			{
				$doctypes = implode("','", $doctypes);
				$query .= "AND D.Doc_Type_Id IN ('$doctypes')";
				$doctypes = null;
			}
			
			$conn = $this->_em->getConnection();
			if (!empty($max))
			{
				if ($conn->getDriver()->getName() == 'pdo_mysql') 
				{
					$query .= " LIMIT $max";
				}
				elseif ($conn->getDriver()->getName() == 'pdo_sqlsrv') {
					$query .= " ORDER BY D.id OFFSET 0 ROWS FETCH NEXT $max ROWS ONLY";
				}
			}
			$result = $conn->fetchAll($query);
			if (!empty($result[0])) 
			{
				foreach ($result as $doc) {
					$output[] = $doc['id'];
				}
				$doc = null;
			}
			$conn = $result = null;
		}

		return $output;
	}
	
	/**
	 * Get latest updated documents in particular library base on type filter
	 * 
	 * @param string $library
	 * @param string $type
	 * @return array
	 */
	public function getUpdatedDocuments($library, $type)
	{
		$query = $this->createQueryBuilder('D')
			->join('D.folder', 'F')
			->addSelect('F')
			->where('D.Trash = false AND D.Archived = false')
			->andWhere('F.Library = :library')
			->andWhere('D.Date_Modified BETWEEN :start AND :end')
			->setParameter('library', $library);
		
		$date = new \DateTime();
		switch ($type) {
			case 'weekly':
				$query->setParameter('end', $date->format('Y-m-d H:i:s'));
				$date->sub(new \DateInterval('P1W'));
				$date->setTime(0,0,0);
				$query->setParameter('start', $date->format('Y-m-d H:i:s'));
				break;
			case 'monthly':
				$query->setParameter('end', $date->format('Y-m-d H:i:s'));
				$date->sub(new \DateInterval('P1M'));
				$date->setTime(0,0,0);
				$query->setParameter('start', $date->format('Y-m-d H:i:s'));
				break;
			default:
				$date->setTime(0,0,0);
				$query->setParameter('start', $date->format('Y-m-d H:i:s'));
				$date->add(new \DateInterval('P1D'));
				$query->setParameter('end', $date->format('Y-m-d H:i:s'));
				break;
		}
		$result = $query->getQuery()->getResult();
		if (!empty($result)) {
			return $result;
		}
		
		return array();
	}

	/**
	 * Check if the field is a Docova Core Field
	 *
	 * @param string $fieldname
	 * @return boolean
	*/

	private function isCoreField($fieldname){
		$coreFields = array(
			"id", 
			"doc_title", 
			"doc_version", 
			"doc_version",
			"revision",
			"doc_status",
			"status_no",
			"description",
			"keywords",
			"date_created",
			"date_modified",	    
			"locked",
			"released_date",
			"last_review_date",
			"next_review_date",
			"has_pending_review",
			"review_type",
			"review_period",
			"review_period_option",
			"review_date_select",
			"review_start_month",
			"review_start_day",
			"author_review",
			"archive_type",
			"custom_archive_date",
			"trash",
			"archived",
			"indexed",
			"index_date",
			"profile_name",
			"profile_key",
			"date_archived",
			"status_no_archived",
			"previous_status",
			"date_deleted",
			"parent_document",
			"doc_owner",
			"doc_author", 
			"created_by",
			"modified_by",
			"lock_editor",
			"released_by",
			"deleted_by",
			"folder_id",
			"app_id",
			"doc_type_id",
			"app_form_id");

		if (in_array($fieldname, $coreFields))
    		return true;
		else
			return false;
	}

	private function _getSeparator($insep)
	{
		//if new line then use that ..else use the first one
		//in the future we will chage this to use a new property on the field
		// displayseparator to match what domino does.
		$separr = explode(" ", $insep);
		if ( count($separr) > 0 )
		{
			$separator = $separr[0];
		}else{
			$separator = $insep;
		}
		//$separator = false !== strpos($insep, ' ') ? substr($insep, strrpos($insep, ' ') + 1) : $insep;
		

		return $separator;
	}
	
	/**
	 * Get all field and values of a document in array
	 * 
	 * @param string $document
	 * @param string $dateformat
	 * @param boolean $show_short_name
	 * @param boolean $is_read
	 * @return array
	 */
	public function getDocFieldValues($document, $dateformat, $show_short_name, $ret_obj = false, $app_id = null)
	{
		$output = array();
		$is_array = is_array($document);
		
		/*
		if (!$is_array) {
			$output[0] = array(
				'__id' => $document,
				'__form' => null,
				'__created' => null,
				'__modified' => null,
				'__attachments' => array()
			);
		}
		else {
			if (!empty($document)) {
				foreach ($document as $docid) {
					$output[$docid] = array(
						'__id' => $docid,
						'__form' => null,
						'__created' => null,
						'__modified' => null,
						'__attachments' => array(),
					);
				}
			}
		}
		*/
		
		$dateformat = str_ireplace(array('mm', 'dd', 'yyyy'), array('m', 'd', 'Y'), $dateformat);
		$conn = $this->_em->getConnection();
		
		//-- retrieve text values
		$query = 'SELECT V.Doc_Id AS Document, F.Field_Name AS fieldName, F.Multi_Value_Separator AS multiSeparator, F.Field_Type as fieldType, V.Field_Value AS fieldValue, V.Summary_Value AS summaryValue ';
		$query .= 'FROM tb_form_text_values AS V JOIN tb_design_elements AS F ON (V.Field_Id = F.id) WHERE ';
		if (!$is_array) {
			$query .= 'V.Doc_Id = ? ';
			$query .= ' ORDER BY fieldName ASC, V.Value_Order ASC';
			$text_values = $conn->fetchAll($query, array($document));
		}
		else {
			if (!empty($document)) {
				$query .= "V.Doc_Id IN ('".implode("','", $document)."') ";
				$query .= ' ORDER BY Document ASC, fieldName ASC, V.Value_Order ASC';
				$text_values = $conn->fetchAll($query);
			}
			else {
				$query .= 'V.Doc_Id IN (SELECT id from tb_folders_documents WHERE App_Id = ? AND Trash = 0 AND Archived = 0)';
				$query .= ' ORDER BY Document ASC, fieldName ASC, V.Value_Order ASC';
				$text_values = $conn->fetchAll($query, array($app_id));
			}
		}

		//-- retrieve date values
		$query = 'SELECT V.Doc_Id AS Document, F.Field_Name AS fieldName, F.Multi_Value_Separator AS multiSeparator, V.Field_Value AS fieldValue ';
		$query .= 'FROM tb_form_datetime_values AS V JOIN tb_design_elements AS F ON (V.Field_Id = F.id) WHERE ';
		if (!$is_array) {
			$query .= 'V.Doc_Id = ? ';
			$query .= ' ORDER BY fieldName ASC, V.Value_Order ASC';
			$date_values = $conn->fetchAll($query, array($document));
		}
		else {
			if (!empty($document)) {
				$query .= "V.Doc_Id IN ('".implode("','", $document)."') ";
				$query .= ' ORDER BY Document ASC, fieldName ASC, V.Value_Order ASC';
				$date_values = $conn->fetchAll($query);
			}
			else {
				$query .= 'V.Doc_Id IN (SELECT id from tb_folders_documents WHERE App_Id = ? AND Trash = 0 AND Archived = 0)';
				$query .= ' ORDER BY Document ASC, fieldName ASC, V.Value_Order ASC';
				$date_values = $conn->fetchAll($query, array($app_id));
			}
		}
		if (!empty($date_values)) {
			$count = count($date_values);
			for ($x = 0; $x < $count; $x++) {
				try {
					$dt = new \DateTime($date_values[$x]['fieldValue']);
					$date_values[$x]['fieldValue'] = $dt;
				}
				catch (\Exception $e) {
					try {
						str_replace('/', '-', $date_values[$x]['fieldValue']);
						$dt = new \DateTime($date_values[$x]['fieldValue']);
						$date_values[$x]['fieldValue'] = $dt;
					}
					catch (\Exception $ne) {
						$time = strtotime($date_values[$x]['fieldValue']);
						$dt = new \DateTime($time);
						$date_values[$x]['fieldValue'] = $dt;
					}
				}
			}
		}

		//-- retrieve numeric values
		$query = 'SELECT V.Doc_Id AS Document, F.Field_Name AS fieldName, F.Multi_Value_Separator AS multiSeparator, V.Field_Value AS fieldValue ';
		$query .= 'FROM tb_form_numeric_values AS V JOIN tb_design_elements AS F ON (V.Field_Id = F.id) WHERE ';
		if (!$is_array) {
			$query .= 'V.Doc_Id = ? ';
			$query .= ' ORDER BY fieldName ASC, V.Value_Order ASC';
			$numeric_values = $conn->fetchAll($query, array($document));
		}
		else {
			if (!empty($document)) {
				$query .= "V.Doc_Id IN ('".implode("','", $document)."') ";
				$query .= ' ORDER BY Document ASC, fieldName ASC, V.Value_Order ASC';
				$numeric_values = $conn->fetchAll($query);
			}
			else {
				$query .= 'V.Doc_Id IN (SELECT id from tb_folders_documents WHERE App_Id = ? AND Trash = 0 AND Archived = 0)';
				$query .= ' ORDER BY Document ASC, fieldName ASC, V.Value_Order ASC';
				$numeric_values = $conn->fetchAll($query, array($app_id));
			}
		}

		//-- retrieve name values
		$query = 'SELECT V.Doc_Id AS Document, F.Field_Name AS fieldName, F.Multi_Value_Separator AS multiSeparator, N.user_name_dn_abbreviated AS userNameDnAbbreviated, N.user_name_dn AS userNameDn ';
		$query .= 'FROM tb_form_name_values AS V JOIN tb_design_elements AS F ON (V.Field_Id = F.id) JOIN tb_user_accounts AS N ON (V.Field_Value = N.id) WHERE ';
		if (!$is_array) {
			$query .= 'V.Doc_Id = ? ';
			$query .= ' ORDER BY fieldName ASC, V.Value_Order ASC';
			$name_values = $conn->fetchAll($query, array($document));
		}
		else {
			if (!empty($document)) {
				$query .= "V.Doc_Id IN ('".implode("','", $document)."') ";
				$query .= ' ORDER BY Document ASC, fieldName ASC, V.Value_Order ASC';
				$name_values = $conn->fetchAll($query);
			}
			else {
				$query .= 'V.Doc_Id IN (SELECT id from tb_folders_documents WHERE App_Id = ? AND Trash = 0 AND Archived = 0)';
				$query .= ' ORDER BY Document ASC, fieldName ASC, V.Value_Order ASC';
				$name_values = $conn->fetchAll($query, array($app_id));
			}
		}

		//-- retrieve group names
		$query = 'SELECT V.Doc_Id AS Document, F.Field_Name AS fieldName, F.Multi_Value_Separator AS multiSeparator, G.Display_Name AS displayName ';
		$query .= 'FROM tb_form_group_values AS V JOIN tb_design_elements AS F ON (V.Field_Id = F.id) JOIN tb_user_roles AS G ON (V.Field_Value = G.id) WHERE ';
		if (!$is_array) {
			$query .= 'V.Doc_Id = ? ';
			$query .= ' ORDER BY fieldName ASC, V.Value_Order ASC';
			$group_values = $conn->fetchAll($query, array($document));
		}
		else {
			if (!empty($document)) {
				$query .= "V.Doc_Id IN ('".implode("','", $document)."') ";
				$query .= ' ORDER BY Document ASC, fieldName ASC, V.Value_Order ASC';
				$group_values = $conn->fetchAll($query);
			}
			else {
				$query .= 'V.Doc_Id IN (SELECT id from tb_folders_documents WHERE App_Id = ? AND Trash = 0 AND Archived = 0)';
				$query .= ' ORDER BY Document ASC, fieldName ASC, V.Value_Order ASC';
				$group_values = $conn->fetchAll($query, array($app_id));
			}
		}
		
		//-- retrieve document meta data
		$query = 'SELECT D.id, F.Form_Name AS formName, F.Form_Alias AS formAlias, D.Date_Created, D.Date_Modified, D.Doc_Version, D.Revision, D.Doc_Status, D.Status_No, R.Parent_Document_Id AS Parent_Document FROM tb_folders_documents AS D JOIN tb_app_forms AS F ON (D.App_Form_Id = F.id) LEFT JOIN tb_related_documents AS R ON (D.id = R.Related_Document_Id) ';
		if (!$is_array) {
			$query .= ' WHERE D.id = ?';
			$document_metadata = $conn->fetchAll($query, array($document));
			if (empty($document_metadata[0])) {
				$query = 'SELECT D.id, D.Date_Created, D.Date_Modified FROM tb_folders_documents AS D WHERE D.id = ?';
				$document_metadata = $conn->fetchAll($query, array($document));
			}
			$document_metadata = $document_metadata[0];
		}
		else {
			if (!empty($document)) {
				$query .= "WHERE D.id IN ('".implode("','", $document)."')";
				$document_metadata = $conn->fetchAll($query);
				if (empty($document_metadata[0])) {
					$query = "SELECT D.id, D.Date_Created, D.Date_Modified FROM tb_folders_documents AS D WHERE D.id IN ('".implode("','", $document)."')";
					$document_metadata = $conn->fetchAll($query);
				}
			}
			else {
				$query .= 'WHERE D.id IN (SELECT id from tb_folders_documents WHERE App_Id = ? AND Trash = 0 AND Archived = 0)';
				$document_metadata = $conn->fetchAll($query, array($app_id));
			}
		}
		
		//-- retrieve attachment details
		$query = 'SELECT A.Doc_Id AS Document, A.File_Name AS File_Name, A.File_Date AS File_Date, A.File_Size as File_Size ';
		$query .= 'FROM tb_attachments_details AS A WHERE ';
		if (!$is_array) {
			$query .= 'A.Doc_Id = ? ';
			$query .= ' ORDER BY File_Name ASC';
			$attachment_values = $conn->fetchAll($query, array($document));
		}
		else {
			if (!empty($document)) {
				$query .= "A.Doc_Id IN ('".implode("','", $document)."') ";
				$query .= ' ORDER BY Document ASC, File_Name ASC';
				$attachment_values = $conn->fetchAll($query);
			}
			else {
				$query .= 'A.Doc_Id IN (SELECT id from tb_folders_documents WHERE App_Id = ? AND Trash = 0 AND Archived = 0)';
				$query .= ' ORDER BY Document ASC, A.File_Name ASC';
				$attachment_values = $conn->fetchAll($query, array($app_id));
			}
		}		
		

		if (!empty($text_values))
		{
			foreach ($text_values as $value) {
				if (!$is_array) {
					$this->generateStringOutput($output, $ret_obj, $value, 0);
				}
				else {
					$this->generateStringOutput($output, $ret_obj, $value, $value['Document']);
				}
			}
		}
			
		if (!empty($date_values))
		{
			foreach ($date_values as $value) 
			{
				if (!$is_array) {
					$this->generateDateOutput($output, $ret_obj, $value, 0, $dateformat);
				}
				else {
					$this->generateDateOutput($output, $ret_obj, $value, $value['Document'], $dateformat);
				}
			}
		}
		
		if (!empty($numeric_values))
		{
			foreach ($numeric_values as $value) {
				if (!$is_array) {
					$this->generateNumericOutput($output, $ret_obj, $value, 0);
				}
				else {
					$this->generateNumericOutput($output, $ret_obj, $value, $value['Document']);
				}
			}
		}
		
		if (!empty($name_values))
		{
			foreach ($name_values as $value) {
				if (!$is_array) {
					$this->generateNameOutput($output, $ret_obj, $value, 0, $show_short_name);
				}
				else {
					$this->generateNameOutput($output, $ret_obj, $value, $value['Document'], $show_short_name);
				}
			}
		}
		
		if (!empty($group_values))
		{
			foreach ($group_values as $value) {
				if (!$is_array) {
					$this->generateGroupOutput($output, $ret_obj, $value, 0);
				}
				else {
					$this->generateGroupOutput($output, $ret_obj, $value, $value['Document']);
				}
			}
		}
		
		if (!empty($document_metadata))
		{
			if (!$is_array) {
				$output[0]['__id'] = !empty($document_metadata['id']) ? $document_metadata['id'] : (!empty($document_metadata['id']) ? $document_metadata['id'] : null);
				$output[0]['__form'] = !empty($document_metadata['formAlias']) ? $document_metadata['formAlias'] : (!empty($document_metadata['formName']) ? $document_metadata['formName'] : null);
				$output[0]['__created'] = !empty($document_metadata['Date_Created']) ? $document_metadata['Date_Created'] : null;
				$output[0]['__modified'] = !empty($document_metadata['Date_Modified']) ? $document_metadata['Date_Modified'] : null;
				$output[0]['__parentdoc'] = !empty($document_metadata['Parent_Document']) ? $document_metadata['Parent_Document'] : null;
				$output[0]['__version'] = !empty($document_metadata['Doc_Version']) ? $document_metadata['Doc_Version'].'.'.strval($document_metadata['Revision']) : null;
				$output[0]['__status'] = !empty($document_metadata['Doc_Status']) ? $document_metadata['Doc_Status'] : null;
				$output[0]['__statusno'] = !empty($document_metadata['Status_No']) ? $document_metadata['Status_No'] : null;
				$output[0]['__attachments'] = array();				
			}
			else {
				foreach ($document_metadata as $dm) {
					if (!array_key_exists($dm['id'], $output)) {
						$output[$dm['id']] = array('id' => $dm['id']);
					}
					$output[$dm['id']]['__id'] = !empty($dm['id']) ? $dm['id'] : (!empty($dm['id']) ? $dm['id'] : null);
					$output[$dm['id']]['__form'] = !empty($dm['formAlias']) ? $dm['formAlias'] : (!empty($dm['formName']) ? $dm['formName'] : null);
					$output[$dm['id']]['__created'] = !empty($dm['Date_Created']) ? $dm['Date_Created'] : null;
					$output[$dm['id']]['__modified'] = !empty($dm['Date_Modified']) ? $dm['Date_Modified'] : null;
					$output[$dm['id']]['__parentdoc'] = !empty($dm['Parent_Document']) ? $dm['Parent_Document'] : null;
					$output[$dm['id']]['__version'] = !empty($dm['Doc_Version']) ? $dm['Doc_Version'].'.'.strval($dm['Revision']) : null;
					$output[$dm['id']]['__status'] = !empty($dm['Doc_Status']) ? $dm['Doc_Status'] : null;
					$output[$dm['id']]['__statusno'] = !empty($dm['Status_No']) ? $dm['Status_No'] : null;
					$output[$dm['id']]['__attachments'] = array();					
				}
			}
		}
		
		
		if (!empty($attachment_values))
		{
			if (!$is_array) {
				$output[0]['__attachments'] = array();
				foreach ($attachment_values as $av) {			
					array_push($output[0]['__attachments'],  array(
							'fileName' => $av['File_Name'],
							'fileDate' => $av['File_Date'],
							'fileSize' => $av['File_Size']
						)
					);
				}				
			}
			else {
				foreach ($attachment_values as $av) {
					if (!array_key_exists($av['Document'], $output)) {
						$output[$av['Document']] = array('id' => $av['Document']);
					}
					if(! array_key_exists("__attachments", $output[$av['Document']])){
						$output[$av['Document']]['__attachments'] = array();
					}

					array_push($output[$av['Document']]['__attachments'],  array(
							'fileName' => $av['File_Name'],
							'fileDate' => $av['File_Date'],
							'fileSize' => $av['File_Size']
						)
					);
				}
			}
		}		
		
		if (!$is_array && !empty($output) && !array_key_exists("__id", $output[0]) && !empty($document)) {
		    $output[0]['__id'] = $document;
		}
		
		return $output;
	}
	
	/**
	 * Get all doc field values for a document to prepare the DocovaDocument object
	 * 
	 * @param string $document
	 * @return array
	 */
	public function getDocovaFieldValues($document, $require_metadata = false)
	{
		$output = array();
		$conn = $this->_em->getConnection();
		$query = 'SELECT V.Doc_Id AS Document, F.Field_Name AS fieldName, F.Multi_Value_Separator AS multiSeparator, V.Field_Value AS fieldValue ';
		$query .= 'FROM tb_form_text_values AS V JOIN tb_design_elements AS F ON (V.Field_Id = F.id) WHERE V.Doc_Id = ? ';
		$query .= ' ORDER BY fieldName ASC, V.Value_Order ASC';
		$text_values = $conn->fetchAll($query, array($document));
		
		$query = 'SELECT V.Doc_Id AS Document, F.Field_Name AS fieldName, F.Multi_Value_Separator AS multiSeparator, V.Field_Value AS fieldValue ';
		$query .= 'FROM tb_form_datetime_values AS V JOIN tb_design_elements AS F ON (V.Field_Id = F.id) WHERE V.Doc_Id = ? ';
		$query .= ' ORDER BY fieldName ASC, V.Value_Order ASC';
		$date_values = $conn->fetchAll($query, array($document));
		if (!empty($date_values)) {
			$count = count($date_values);
			for ($x = 0; $x < $count; $x++) {
				try {
					$dt = new \DateTime($date_values[$x]['fieldValue']);
					$date_values[$x]['fieldValue'] = $dt;
				}
				catch (\Exception $e) {
					try {
						str_replace('/', '-', $date_values[$x]['fieldValue']);
						$dt = new \DateTime($date_values[$x]['fieldValue']);
						$date_values[$x]['fieldValue'] = $dt;
					}
					catch (\Exception $ne) {
						$time = strtotime($date_values[$x]['fieldValue']);
						$dt = new \DateTime($time);
						$date_values[$x]['fieldValue'] = $dt;
					}
				}
				$dt = null;
			}
		}
		
		$query = 'SELECT V.Doc_Id AS Document, F.Field_Name AS fieldName, F.Multi_Value_Separator AS multiSeparator, V.Field_Value AS fieldValue ';
		$query .= 'FROM tb_form_numeric_values AS V JOIN tb_design_elements AS F ON (V.Field_Id = F.id) WHERE V.Doc_Id = ? ';
		$query .= ' ORDER BY fieldName ASC, V.Value_Order ASC';
		$numeric_values = $conn->fetchAll($query, array($document));
		
		$query = 'SELECT V.Doc_Id AS Document, F.Field_Name AS fieldName, F.Multi_Value_Separator AS multiSeparator, N.user_name_dn_abbreviated AS fieldValue ';
		$query .= 'FROM tb_form_name_values AS V JOIN tb_design_elements AS F ON (V.Field_Id = F.id) JOIN tb_user_accounts AS N ON (V.Field_Value = N.id) WHERE V.Doc_Id = ? ';
		$query .= ' ORDER BY fieldName ASC, V.Value_Order ASC';
		$name_values = $conn->fetchAll($query, array($document));
		
		$query = 'SELECT V.Doc_Id AS Document, F.Field_Name AS fieldName, F.Multi_Value_Separator AS multiSeparator, G.Display_Name AS fieldValue ';
		$query .= 'FROM tb_form_group_values AS V JOIN tb_design_elements AS F ON (V.Field_Id = F.id) JOIN tb_user_roles AS G ON (V.Field_Value = G.id) WHERE V.Doc_Id = ? ';
		$query .= ' ORDER BY fieldName ASC, V.Value_Order ASC';
		$group_values = $conn->fetchAll($query, array($document));
		
		if (false !== $require_metadata)
		{
			$query = 'SELECT D.id, F.Form_Name AS formName, F.Form_Alias AS formAlias, D.Date_Created, D.Date_Modified FROM tb_folders_documents AS D JOIN tb_app_forms AS F ON (D.App_Form_Id = F.id) WHERE D.id = ?';
			$document_metadata = $conn->fetchAll($query, array($document));
			if (empty($document_metadata[0])) {
				$query = 'SELECT D.id, D.Date_Created, D.Date_Modified FROM tb_folders_documents AS D WHERE D.id = ?';
				$document_metadata = $conn->fetchAll($query, array($document));
			}
			if(!empty($document_metadata[0])){
				$document_metadata = $document_metadata[0];
			}			
		}
		
		if (!empty($text_values)) {
			foreach ($text_values as $value) {
				if (!key_exists($value['fieldName'], $output)) {
					$output[$value['fieldName']] = [
						'type' => 0,
						'separator' => $value['multiSeparator'],
						'value' => !is_null($value['multiSeparator']) ? [htmlspecialchars_decode($value['fieldValue'])] : $value['fieldValue']
					];
				}
				elseif (is_array($output[$value['fieldName']]['value'])) {
					$output[$value['fieldName']]['value'][] = htmlspecialchars_decode($value['fieldValue']);
				}
				else {
					$output[$value['fieldName']]['value'] = [$output[$value['fieldName']]['value']];
					$output[$value['fieldName']]['value'][] = htmlspecialchars_decode($value['fieldValue']);
				}
			}
		}

		if (!empty($date_values)) {
			foreach ($date_values as $value) {
				if (!key_exists($value['fieldName'], $output)) {
					$output[$value['fieldName']] = [
						'type' => 1,
						'separator' => $value['multiSeparator'],
						'value' => !is_null($value['multiSeparator']) ? [$value['fieldValue']] : $value['fieldValue']
					];
				}
				elseif (is_array($output[$value['fieldName']]['value'])) {
					$output[$value['fieldName']]['value'][] = $value['fieldValue'];
				}
				else {
					$output[$value['fieldName']]['value'] = [$output[$value['fieldName']]['value']];
					$output[$value['fieldName']]['value'][] = $value['fieldValue'];
				}
			}
		}

		if (!empty($numeric_values)) {
			foreach ($numeric_values as $value) {
				if (!key_exists($value['fieldName'], $output)) {
					$output[$value['fieldName']] = [
						'type' => 4,
						'separator' => $value['multiSeparator'],
						'value' => !is_null($value['multiSeparator']) ? [$value['fieldValue']] : $value['fieldValue']
					];
				}
				elseif (is_array($output[$value['fieldName']]['value'])) {
					$output[$value['fieldName']]['value'][] = $value['fieldValue'];
				}
				else {
					$output[$value['fieldName']]['value'] = [$output[$value['fieldName']]['value']];
					$output[$value['fieldName']]['value'][] = $value['fieldValue'];
				}
			}
		}

		if (!empty($name_values)) {
			foreach ($name_values as $value) {
			    
			   $nameparts = preg_split('~\\\\.(*SKIP)(*FAIL)|,~s', $value['fieldValue']);
			   $tempname = implode('/', $nameparts);			        
			    
				if (!key_exists($value['fieldName'], $output)) {
					$output[$value['fieldName']] = [
						'type' => 3,
						'separator' => $value['multiSeparator'],
						'value' => !is_null($value['multiSeparator']) ? [$tempname] : $tempname
					];
				}
				elseif (is_array($output[$value['fieldName']]['value'])) {
					$output[$value['fieldName']]['value'][] = $tempname;
				}
				else {
				    $output[$value['fieldName']]['value'] = [$output[$value['fieldName']]['value']];
					$output[$value['fieldName']]['value'][] = $tempname;
				}
			}
		}
	
		if (!empty($group_values)) {
			foreach ($group_values as $value) {
				if (!key_exists($value['fieldName'], $output)) {
					$output[$value['fieldName']] = [
						'type' => 3,
						'separator' => $value['multiSeparator'],
						'value' => !is_null($value['multiSeparator']) ? [$value['fieldValue']] : $value['fieldValue']
					];
				}
				elseif (is_array($output[$value['fieldName']]['value'])) {
					$output[$value['fieldName']]['value'][] = $value['fieldValue'];
				}
				else {
					$output[$value['fieldName']]['value'] = [$output[$value['fieldName']]['value']];
					$output[$value['fieldName']]['value'][] = $value['fieldValue'];
				}
			}
		}
		
		if ($require_metadata !== false && !empty($document_metadata)) {
			//Since this is used by DocovaDocument I'm not sure to rename the core fields meta data to "__form" and etc or not!
			$output['form'] = ['type' => 0, 'separator' => null, 'value' => !empty($document_metadata['formAlias']) ? $document_metadata['formAlias'] : $document_metadata['formName']];
			$output['created'] = ['type' => 1, 'separator' => null, 'value' => !empty($document_metadata['Date_Created']) ? $document_metadata['Date_Created'] : null];
			$output['modified'] = ['type' => 1, 'separator' => null, 'value' => !empty($document_metadata['Date_Modified']) ? $document_metadata['Date_Modified'] : $document_metadata['formName']];
		}
		
		return $output;
	}

	/**
	 * Get document which is in a folder (not an app type document)
	 * 
	 * @param string $docid
	 * @return NULL|object
	 */
	public function getFolderDocument($docid)
	{
		$query =  $this->createQueryBuilder('D')
			->where('D.id = :docid')
			->andWhere('D.Archived = false')
			->andWhere('D.folder IS NOT NULL')
			->setParameter('docid', $docid)
			->getQuery();
		
		$result = $query->getOneOrNullResult();
		return $result;
	}
	
	/**
	 * Get all document IDs in the application
	 * 
	 * @param string $appid
	 * @return array
	 */
	public function getAllAppDocuments($appid)
	{
		$query = $this->createQueryBuilder('D')
			->select('D.id')
			->where('D.application = :app')
			->andWhere('D.Trash = false')
			->andWhere('D.Archived = false')
			->setParameter('app', $appid)
			->getQuery();
		
		$result = $query->getArrayResult();
		if (!empty($result)) 
		{
			$output = array();
			foreach ($result as $doc)
			{
				$output[] = $doc['id'];
			}
			return $output;
		}
		
		return array();
	}
	
	/**
	 * Get all profile documents
	 * 
	 * @param string $profile
	 * @return array
	 */
	public function getProfileDocuments($profile)
	{
		$query = $this->createQueryBuilder('D')
			->where('D.profileName IS NOT NULL');
		if (!empty($profile))
		{
			$query->andWhere('D.profileName = :profile')
				->setParameter('profile', $profile);
		}
		
		$result = $query->getQuery()->getResult();
		return $result;
	}



	/**
	 * Get profile document id
	 *
	 * @param string $profile
	 * @param string $application
	 * @param string $key
	 * @return string
	 */
	public function getProfileId($profile, $application, $key = null)
	{
		$query = $this->createQueryBuilder('P')
			->select('P.id')
			->where('P.profileName = :profile')
			->andWhere('P.application = :app')
			->andWhere('P.Trash = 0')
			->setParameter('profile', $profile)
			->setParameter('app', $application);
	
		if (empty($key)) {
			$query->andWhere("P.profileKey IS NULL OR P.profileKey = ''");
		}
		else {
			$query->andWhere('P.profileKey = :key')
			->setParameter('key', $key);
		}
	
		$result = $query->getQuery()->getArrayResult();
		if ( isset($result[0]['id']))
			return $result[0]['id'];
		else
			return "";
	}

	/**
	 * Get profile document
	 *
	 * @param string $profile
	 * @param string $application
	 * @param string $key
	 * @return array
	 */
	public function getProfile($profile, $application, $key = null)
	{
		$query = $this->createQueryBuilder('P')
			->where('P.profileName = :profile')
			->andWhere('P.application = :app')
			->andWhere('P.Trash = 0')
			->setParameter('profile', $profile)
			->setParameter('app', $application);
	
		if (empty($key)) {
			$query->andWhere("P.profileKey IS NULL OR P.profileKey = ''");
		}
		else {
			$query->andWhere('P.profileKey = :key')
			->setParameter('key', $key);
		}
	
		$result = $query->getQuery()->getResult();
		return $result;
	}
	
	/**
	 * Get index of document ID in array of documents
	 * @param array $documents
	 * @param string $id
	 * @return number|boolean
	 */
	private function getDocumentIndex($documents, $id)
	{
		$len = count($documents);
		for ($x = 0; $x < $len; $x++)
		{
			if ($documents[$x]['id'] === $id) {
				return $x;
			}
		}
		return false;
	}
	
	/**
	 * Generate output for string values
	 * 
	 * @param array $output
	 * @param boolean $type
	 * @param array $value
	 * @param string|integer $key
	 */
	private function generateStringOutput(&$output, $type, $value, $key)
	{
		if (!array_key_exists($key, $output)) {
			$output[$key] = array(
				'__id' => $key,
				'__form' => null,
				'__created' => null,
				'__modified' => null,
				'__attachments' => array()
			);
		}
		if (array_key_exists($value['fieldName'], $output[$key])) {
			if ($type === true) {
				if (is_array($output[$key][strtolower($value['fieldName'])])) {
					$output[$key][strtolower($value['fieldName'])][] = $value['fieldValue'];
				}
				else {
					$output[$key][strtolower($value['fieldName'])] .= $value['fieldValue'];
				}
			}
			else {
				$separator = $this->_getSeparator($value['multiSeparator']);
				$output[$key][strtolower($value['fieldName'])] .= $separator . $value['fieldValue'];
			}
		}
		else {
			$output[$key][strtolower($value['fieldName'])] = ($type === true && (!is_null($value['multiSeparator']) or $value['fieldType'] === "2")) ? [$value['fieldValue']] : $value['fieldValue'];
		}
	}
	
	/**
	 * Generate output for datetime values
	 * 
	 * @param array $output
	 * @param boolean $type
	 * @param array $value
	 * @param string|integer $key
	 * @param string $dateformat
	 */
	private function generateDateOutput(&$output, $type, $value, $key, $dateformat)
	{
		if (!array_key_exists($key, $output)) {
			$output[$key] = array(
				'__id' => $key,
				'__form' => null,
				'__created' => null,
				'__modified' => null,
				'__attachments' => array()					
			);
		}
		if (array_key_exists(strtolower($value['fieldName']), $output[$key])) {
			if ($type === true && is_array($output[$key][strtolower($value['fieldName'])])) {
				$output[$key][$value['fieldName']][] = $value['fieldValue'];
			}
			elseif ($type !== true && is_string($output[$key][strtolower($value['fieldName'])])) {
				$separator = $this->_getSeparator($value['multiSeparator']);
				$output[$key][$value['fieldName']] .= $separator . $value['fieldValue']->format($dateformat);
			}
		}
		else {
			if ($type === true && !is_null($value['multiSeparator']))
				$tmpval = [$value['fieldValue']];
			elseif ($type === true)
				$tmpval = $value['fieldValue'];
			else
				$tmpval = $value['fieldValue']->format($dateformat);
		
			$output[$key][$value['fieldName']] = $tmpval;
		}
	}
	
	/**
	 * Generate output for numeric values
	 * 
	 * @param array $output
	 * @param boolean $type
	 * @param array $value
	 * @param string|integer $key
	 */
	private function generateNumericOutput(&$output, $type, $value, $key)
	{
		if (!array_key_exists($key, $output)) {
			$output[$key] = array(
				'__id' => $key,
				'__form' => null,
				'__created' => null,
				'__modified' => null,
				'__attachments' => array()					
			);
		}
		if (array_key_exists($value['fieldName'], $output[$key])) {
			if ($type === true) {
				$tempval = $output[$key][$value['fieldName']];
				if(is_array($tempval) && count($tempval) > 1 ){
					$tempval[] = (double)$value['fieldValue'];
				}else if(is_array($tempval) && count($tempval) == 1 && ($tempval[0] === "" || $tempval[0] === null)){
					$tempval = [(double)$value['fieldValue']];
				}else if(is_array($tempval) && count($tempval) == 1){
					$tempval = [$tempval[0], (double)$value['fieldValue']];							
				}else{
					$tempval = [$tempval, (double)$value['fieldValue']];
				}
				$output[$key][$value['fieldName']] = $tempval;
			}
			else {
				$separator = $this->_getSeparator($value['multiSeparator']);
				$output[$key][$value['fieldName']] .= $separator . strval((double)$value['fieldValue']);
			}
		}
		else {
			$output[$key][$value['fieldName']] = ( $type === true && !is_null($value['multiSeparator'] ) ) ? [(double)$value['fieldValue']] : (double)$value['fieldValue'];
		}		
	}
	
	/**
	 * Generate output for name values
	 * 
	 * @param array $output
	 * @param boolean $type
	 * @param array $value
	 * @param string|integer $key
	 * @param boolean $show_short_name
	 */
	private function generateNameOutput(&$output, $type, $value, $key, $show_short_name)
	{
	    if (!array_key_exists($key, $output)) {
	        $output[$key] = array(
	            '__id' => $key,
	            '__form' => null,
	            '__created' => null,
	            '__modified' => null,
	            '__attachments' => array()
	        );
	    }
	    
	    $userNameAbVal = $value['userNameDnAbbreviated'];
	    $userNameDnVal = $value['userNameDn'];
	    $nameparts = preg_split('~\\\\.(*SKIP)(*FAIL)|,~s', $userNameAbVal);
	    if(count($nameparts) < 2){
	        $nameparts = preg_split('~\\\\.(*SKIP)(*FAIL)|\/~s', $userNameAbVal);
	    }
	    
	    if (array_key_exists($value['fieldName'], $output[$key])) {
	        if ($type === true && is_array($output[$key][$value['fieldName']])) {
	            $output[$key][$value['fieldName']][] = ($show_short_name === true ? $nameparts[0] : implode('/',$nameparts));
	        }
	        else {
	            $separator = $this->_getSeparator ( $value['multiSeparator'] );
	            $output[$key][$value['fieldName']] .= $separator . ($show_short_name === true ? $nameparts[0] : implode('/', $nameparts));
	        }
	    }
	    else {
	        if($type === true && !is_null($value['multiSeparator'])){
	            $output[$key][$value['fieldName']] = [($show_short_name === true ? $nameparts[0] : implode('/', $nameparts))];	            
	        }else{
	            $output[$key][$value['fieldName']] = ($show_short_name === true ? $nameparts[0] : implode('/', $nameparts));
	            
	        }
	    }
	}
	
	
	/**
	 * Generate output for group values
	 * 
	 * @param array $output
	 * @param boolean $type
	 * @param array $value
	 * @param string|integer $key
	 */
	private function generateGroupOutput(&$output, $type, $value, $key)
	{
		if (!array_key_exists($key, $output)) {
			$output[$key] = array(
					'__id' => $key,
					'__form' => null,
					'__created' => null,
					'__modified' => null,
					'__attachments' => array()
			);
		}
		if (array_key_exists($value['fieldName'], $output[$key])) {
			if ($type === true && is_array($output[$key][$value['fieldName']])) {
				$output[$key][$value['fieldName']][] = $value['displayName'];
			}
			else {
				$separator = $this->_getSeparator($value['multiSeparator']);
				$output[$key][$value['fieldName']] .= $separator . $value['displayName'];
			}
		}
		else {
			$output[$key][$value['fieldName']] = ($type === true && !is_null($value['multiSeparator'])) ? [$value['displayName']] : $value['displayName'];
		}
	}

	/**
	 * checks for doc existing
	 * 
	 * @param string $docid
	 * 
	 */
	 public function docExists ( $docid , $appid)
	 {
	 	$query = $this->createQueryBuilder('D')
			->select('D.id')
			->where('D.id = :document')
			->andWhere('D.application = :app')
			->andWhere('D.Trash = false')
			->andWhere('D.Archived = false')
			->setParameter('app', $appid)
			->setParameter('document', $docid)
			->getQuery();
		
		$result = $query->getArrayResult();
		if (!empty($result)) 
		{
			return true;
		}else{
			return false;
		}
	 }


	/**
	 * Generate xml document for all workflow steps associated with this document
	 * 
	 * @param DocumentEntity $document
	 */
	public function getWorkflowStepsXML ($document, $user, $gs, $changeable)
	{
		$xml_res = new \DOMDocument('1.0', 'UTF-8');
		$root = $xml_res->appendChild($xml_res->createElement('Documents'));
		$docwf_step = $document->getDocSteps();
		if ($docwf_step->count() < 1) {
			throw $this->createNotFoundException('Workflow is not created for this document.');
		}

		
		$found = $set = $stepcompleted = false;
		foreach ($docwf_step as $step)
		{
			$pformula = '';

			if ($step->getStepType() === 1)
			{
				$jsonattr = $xml_res->createAttribute('runtimejsonstr');
				$jsonattr->value = $step->getRuntimeJSON();

				$root->appendChild($jsonattr);
			}

			$element = $root->appendChild($xml_res->createElement('Document'));
			$element->appendChild($xml_res->createElement('wfItemKey', $step->getId()));
			$element->appendChild($xml_res->createElement('Unid', $step->getId()));
			$element->appendChild($xml_res->createElement('wfOrder', $step->getPosition()));
		
			$step_name = $step->getStepName();
			
			$CData = $xml_res->createCDATASection($step_name);
			$child = $xml_res->createElement('wfTitle');
			$child->appendChild($CData);
			$element->appendChild($child);
			$element->appendChild($xml_res->createElement('wfAction', $step->getStepType(true)));
			$element->appendChild($xml_res->createElement('wfType', ($step->getDistribution() == 2) ? 'Parallel' : 'Serial'));
			$element->appendChild($xml_res->createElement('wfOptionalComments', ($step->getOptionalComments() ? '1' : '')));
			$pformula = ($step->getParticipantFormula() ? $step->getParticipantFormula() : '' );
			$element->appendChild($xml_res->createElement('wfParticipantFormula',  $pformula ) );
			$CData = $xml_res->createCDATASection(($step->getStepType() === 5 ? '' : $step->getStatus()) );
			$child = $xml_res->createElement('wfStatus');
			$child->appendChild($CData);
			$element->appendChild($child);
			
			$element->appendChild($xml_res->createElement('wfCompleteAny', $step->getCompleteOn() > 1 ? 2 : $step->getCompleteOn()));
			$element->appendChild($xml_res->createElement('wfCompleteCount', $step->getCompleteOn() > 1 ? $step->getCompleteOn() - 2 : $step->getCompleteOn()));
			$format = str_replace(array('MM', 'DD', 'YYYY'), array('m', 'd', 'Y'), $gs->getDefaultDateFormat());
			$element->appendChild($xml_res->createElement('wfDateStarted', $step->getDateStarted() ? $step->getDateStarted()->format($format) : null));
			$element->appendChild($xml_res->createElement('wfDateCompleted', in_array($step->getStatus(), array('Completed', 'Approved', 'Denied')) && $step->getDateCompleted() ? $step->getDateCompleted()->format($format) : null));
			if ($step->getStatus() === 'Completed' || $step->getStatus() === 'Approved' || $step->getStatus() === 'Denied') 
			{
				$CData = $xml_res->createCDATASection('');
				$child = $xml_res->createElement('wfDispReviewerApproverList');
				$child->appendChild($CData);
				$element->appendChild($child);
				$CData = $xml_res->createCDATASection('');
				$child = $xml_res->createElement('wfReviewerApproverList');
				$child->appendChild($CData);
				$element->appendChild($child);
				$completedBy = '';
				foreach ($step->getCompletedBy() as $completer) {
					$completedBy .= ($gs->getUserDisplayDefault() ? $completer->getCompletedBy()->getUserProfile()->getDisplayName() : $completer->getCompletedBy()->getUserNameDnAbbreviated()).',';
				}
				$completedBy = substr_replace($completedBy, '', -1);
				$CData = $xml_res->createCDATASection($completedBy);
				$child = $xml_res->createElement('wfReviewApprovalComplete');
				$child->appendChild($CData);
				$element->appendChild($child);
				$CData = ($step->getStepType() === 1) ? $xml_res->createCDATASection('') : $xml_res->createCDATASection('1');
				$child = $xml_res->createElement('wfReviewerApproverSelect');
				$child->appendChild($CData);
				$element->appendChild($child);
				if ($step->getStatus() === 'Denied') {
					$found = true;
				}
				$stepcompleted = true;
			}
			else 
			{
				$assignees = '';
				foreach ($step->getAssignee() as $a) {

					if (!$a->getGroupMember()) {
						$assignees .= $a->getAssignee()->getUserNameDnAbbreviated() . ',';
					}
				}
				if (count($step->getAssigneeGroup()))
				{
					$assignees .= implode(',', $step->getAssigneeGroup()) . ',';
				}


				if ( (!empty($step->getParticipantTokens()) && $step->getParticipantTokens() != "[Formula]" )  )   {
					$assignees .= $step->getParticipantTokens().',';
				}

				if ( empty($assignees) && !empty($pformula) ) {
					$assignees = "[Formula]".',';
				}
				
				if ( $step->getStepType() == 5) $assignees = "";
				$assignees = empty($assignees) && $step->getStepType() != 5 ? '[Please Select] ' : $assignees;
				$assignees = substr_replace($assignees, '', -1);
				$CData = $xml_res->createCDATASection($assignees);
				$child = $xml_res->createElement('wfDispReviewerApproverList');
				$child->appendChild($CData);
				$element->appendChild($child);
				$CData = $xml_res->createCDATASection($assignees);
				$child = $xml_res->createElement('wfReviewerApproverList');
				$child->appendChild($CData);
				$element->appendChild($child);
				$completedBy = '';
				if ($step->getCompletedBy()->count())
				{
					foreach ($step->getCompletedBy() as $completer) {
						$completedBy .= ($gs->getUserDisplayDefault() ? $completer->getCompletedBy()->getUserProfile()->getDisplayName() : $completer->getCompletedBy()->getUserNameDnAbbreviated()).',';
					}
					$completedBy = substr_replace($completedBy, '', -1);
				}
				$CData = $xml_res->createCDATASection($completedBy);
				$child = $xml_res->createElement('wfReviewApprovalComplete');
				$child->appendChild($CData);
				$element->appendChild($child);
				$Dis_CData = ($changeable === true && ($step->getParticipants() === 1 || $step->getParticipants() === 3)) ? '1' : '';
				$CData = $xml_res->createCDATASection($Dis_CData);
				$child = $xml_res->createElement('wfReviewerApproverSelect');
				$child->appendChild($CData);
				$element->appendChild($child);

				if ( $step->getIsCurrentStep() )
				{
					$stepcompleted = false;
				}

				if ( $stepcompleted)
				{
					$element->appendChild($xml_res->createElement('wfNodeSkipped', 1));
				}else{
					$element->appendChild($xml_res->createElement('wfNodeSkipped', 0));
				}



				$found = true;
				unset($assignees);
			}
		
			$CData = $xml_res->createCDATASection($step->getDocStatus());
			$child = $xml_res->createElement('wfDocStatus');
			$child->appendChild($CData);
			$element->appendChild($child);



			if ( $step->getIsCurrentStep() )
			{
				$element->appendChild($xml_res->createElement('wfIsCurrentItem', 1));
			}else{
				$element->appendChild($xml_res->createElement('wfIsCurrentItem', 0));
			}

			
			$CData = $xml_res->createCDATASection('');
			$child = $xml_res->createElement('wfCompleteNotifyList');
			$child->appendChild($CData);
			$element->appendChild($child);
			$CData = $xml_res->createCDATASection('');
			$child = $xml_res->createElement('wfActivateNotifyList');
			$child->appendChild($CData);
			$element->appendChild($child);
			$element->appendChild($xml_res->createElement('Modified', 0));
			$element->appendChild($xml_res->createElement('Selected', 0));
			$element->appendChild($xml_res->createElement('IsNew', 0));
			$element->appendChild($xml_res->createElement('IsDeleted', 0));

			unset($child, $CData, $current);
		}

		return $xml_res;
	}
}
