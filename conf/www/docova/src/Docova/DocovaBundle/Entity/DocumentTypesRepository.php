<?php
namespace Docova\DocovaBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * DocumentTypesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DocumentTypesRepository extends EntityRepository
{
	
	/** Returns Document Types xml data for Admin view perspective (wAdminDocTypes)
	 * @param  string  $icon_path => path for images location
	 * @param  array $criteria => where connditon clause
	 * @param  array, $sortBy => For sorting
	 * @param  boolean $return_obj => if its true returns DOM object else string
	 * @return string $data_xml => xml data for the view
	 */
	public function getDataXML($icon_path, $criteria = array(), $sortBy = array(), $return_obj = false)
	{
		if (empty($criteria) && empty($sortBy)) {
			$documents = $this->findBy(array('Trash' => false), array('Doc_Name' => 'ASC'));
		}
		else {
			$orderBy = array();
			if (!empty($sortBy)) 
			{
				foreach ($sortBy as $key => $value) {
					if ($this->_class->hasField($key)) {
						$orderBy[$key] = strtoupper($value) == 'DESC' ? 'DESC' : 'ASC';
					}
					else {
						if ($key == 'doctype') {
							$orderBy['Doc_Name'] = strtoupper($value) == 'DESC' ? 'DESC' : 'ASC';
						}
					}
				}
			}
			else {
				$orderBy = array('Doc_Name' => 'ASC');
			}
			$criteria['Trash'] = false;
			$documents = $this->findBy($criteria, $orderBy);
		}
		
		if ($return_obj === false) {
			$data = array();
			foreach ($documents as $doc)
			{
				$data[] = array(
					'dockey' => $doc->getId(),
					'doctype' => $doc->getDocName(),
					'disable-icon' => ($doc->getStatus() == true ? "vwicn082.gif" : "vwicn081.gif"),
					'description' => $doc->getDescription(),
				);
/*
					$data_xml .= '<document>';
						$data_xml .= '<dockey>'.$doc->getId().'</dockey>'; // common field
						$data_xml .= '<docid>'.$doc->getId().'</docid>';  // common field
						$data_xml .= '<rectype>doc</rectype>'; // common field
						// view specific fields
						$data_xml .= '<doctype><![CDATA['. $doc->getDocName().']]></doctype>';
						$image_name=( $doc->getStatus() == true) ? "vwicn082.gif" : "vwicn081.gif";
						$data_xml .= "<disable-icon><img width='13' height='11' alt='Enabled' border='0' src=\"$icon_path/$image_name\"/></disable-icon>";
						$data_xml .= '<description><![CDATA['. $doc->getDescription().']]></description>';
						$data_xml .= '<statno />';
						$data_xml .= '<wfstarted />';
						$data_xml .= '<delflag />';
					$data_xml .= '</document>';
*/
			}
			return $data;
		}
		else {
			$data_xml = new \DOMDocument('1.0', 'UTF-8');
		}
		
		return $data_xml;
	}
	
	/**
	 * Deletes documents from web admin view
	 * @param: xml data with id to delete
	 * @return: xml Data response
	 */
	public function deleteSelectedDocuments($post_xml){
	
		$deleted=0;
	
		foreach ($post_xml->getElementsByTagName('Unid') as $doc_id)
		{
			$document = $this->find($doc_id->nodeValue);
			if (!empty($document))
			{
				try {
					$query = $this->createQueryBuilder('DT')
						->update()
						->set('DT.Trash', true)
						->where('DT.id = :document')
						->setParameter('document', $doc_id->nodeValue)
						->getQuery();
					
					$query->execute();
					$deleted++;
				}
				catch (\Exception $e) {
					continue;
				}
			}
		}
		// setup return xml
		$response_xml = new \DOMDocument("1.0", "UTF-8");
		$root = $response_xml->appendChild($response_xml->createElement('Results'));
		if ($deleted !== 0)
		{
			$child = $response_xml->createElement('Result', 'OK');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Status';
			$child->appendChild($attrib);
			$root->appendChild($child);
	
			$child = $response_xml->createElement('Result', $deleted);
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Ret1';
			$child->appendChild($attrib);
			$root->appendChild($child);
		}
		else {
			$child = $response_xml->createElement('Result', 'FAILED');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Status';
			$child->appendChild($attrib);
			$root->appendChild($child);
	
			$child = $response_xml->createElement('Result', 'Could not delete one or more of the selected documents.');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'ErrMsg';
			$child->appendChild($attrib);
			$root->appendChild($child);
		}
		return $response_xml->saveXML();
	}
	
	/**
	 * Check if a document type contains specific subform then return the subform XML properties
	 * 
	 * @param integer $doctype
	 * @param string $subform
	 * @return boolean|mixed
	 */
	public function containsSubform($doctype, $subform)
	{
		$query = $this->createQueryBuilder('DT')
			->join('DT.DocTypeSubform', 'DTS')
			->join('DTS.Subform', 'S')
			->select('DTS.Properties_XML')
			->where('DT.id = :doctype')
			->andWhere('S.Form_Name = :subform')
			->andWhere('DT.Trash = false')
			->setParameters(array('doctype' => $doctype, 'subform' => $subform))
			->getQuery();
		
		$result = $query->getResult();
		if (empty($result)) 
		{
			return false;
		}
		
		return $result[0];
	}
}


//------------------ NOT USED ---------------------------------
// $root = $data_xml->appendChild($data_xml->createElement('document')); //<document />
// // common fields
// $root->appendChild($data_xml->createElement('dockey', $doc->getId())); //<dockey />
// $root->appendChild($data_xml->createElement('docid', $doc->getId())); //<docid />
// $root->appendChild($data_xml->createElement('rectype', 'doc'));
// // view specific fields
// // 1. doctype
// $newnode = $data_xml->createElement('doctype'); //<docytype/>
// $cdata = $data_xml->createCDATASection($doc->getDocName()); // cdata for element
// $newnode->appendChild($cdata);
// $root->appendChild($newnode); // append <docytype/> node to the document

// //2. disable/enable icon
// if ($doc->getDisabled()){
// 	//$newnode = $data_xml->createElement('disable-icon',"<img width='13' height='11' alt='Enabled' border='0' src=\"$icon_path/vwicn082.gif\"/>");
// 	$newnode = $data_xml->createElement('disable-icon',"<img width=\"13\" height=\"11\" alt=\"Enabled\" border=\"0\" src=\"$icon_path/vwicn082.gif\" >");
// }else{
// 	//$newnode = $data_xml->createElement('disable-icon',"<img width='13' height='11' alt='Enabled' border='0' src=\"$icon_path/vwicn081.gif\"/>");
// 	$newnode = $data_xml->createElement('disable-icon',"<img width=\"13\" height=\"11\" alt=\"Enabled\" border=\"0\" src=\"$icon_path/vwicn081.gif\" >");
// }
// $root->appendChild($newnode); // append <disable-icon/> node to the document

// //3. description
// $newnode = $data_xml->createElement('description'); //<docytype/>
// $cdata = $data_xml->createCDATASection($doc->getDescription()); // cdata for element
// $newnode->appendChild($cdata);
// $root->appendChild($newnode); // append <description/> node to the document


// // to log to console
// //$data_xml->saveXML(); // returns string for dom document
// //var_dump($data_xml->saveXML()); // FOR DEBUGGING