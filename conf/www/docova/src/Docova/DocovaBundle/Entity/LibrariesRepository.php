<?php
namespace Docova\DocovaBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Docova\DocovaBundle\ObjectModel\Docova;

/**
 * LibrariesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LibrariesRepository extends EntityRepository
{

	/**
	* Deletes librarie from web admin view
	* 
	* @param \DOMDocument $post_xml
	* @return string
	*/
	public function deleteSelectedDocuments($post_xml){
	
		$deleted=0;
	
		foreach ($post_xml->getElementsByTagName('Unid') as $doc_id)
		{
			if (!empty($doc_id->nodeValue))
			{
				$query = $this->createQueryBuilder('L')
					->update()
					->set('L.Trash', true)
					->where('L.id = :document')
					->setParameter('document', $doc_id->nodeValue)
					->getQuery();
				
				$query->execute();
				$deleted++;
			}
	
		}
		// setup return xml
		$response_xml = new \DOMDocument("1.0", "UTF-8");
		$root = $response_xml->appendChild($response_xml->createElement('Results'));
		if ($deleted !== 0)
		{
			$child = $response_xml->createElement('Result', 'OK');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Status';
			$child->appendChild($attrib);
			$root->appendChild($child);
	
			$child = $response_xml->createElement('Result', $deleted);
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Ret1';
			$child->appendChild($attrib);
			$root->appendChild($child);
		}
		else {
			$child = $response_xml->createElement('Result', 'FAILED');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Status';
			$child->appendChild($attrib);
			$root->appendChild($child);
	
			$child = $response_xml->createElement('Result', 'Could not delete one or more of the selected documents.');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'ErrMsg';
			$child->appendChild($attrib);
			$root->appendChild($child);
		}
		return $response_xml->saveXML();
	}
	
	/**
	 * Get all enabled library IDs
	 * 
	 * @return array 
	 */
	public function getLibrarieIds()
	{
		$output = array();
		$query = $this->createQueryBuilder('L')
			->select('L.id')
			->where('L.Trash = false')
			->andWhere('L.Status = true')
			->getQuery();

		$result = $query->getArrayResult();
		if (!empty($result[0])) 
		{
			for ($x = 0; $x < count($result); $x++)
			{
				$output[] = $result[$x]['id'];
			}
		}
		
		return $output;
	}
	
	/**
	 * Get array of libraries columns base on provided criteria
	 * 
	 * @param array $columns
	 * @param array $criteria
	 * @return array
	 */
	public function findByInArray($columns = array('L.id'), $criteria = array())
	{
		$query = $this->createQueryBuilder('L')
			->select($columns)
			->where('L.Trash = false');
		if (!empty($criteria)) 
		{
			foreach ($criteria as $field => $value)
			{
				$query->andWhere("L.$field = :v$field")
					->setParameter("v$field", $value);
			}
		}
		
		$result = $query->getQuery()->getArrayResult();
		if (!empty($result[0])) 
		{
			return $result;
		}
		return array();
	}
	
	/**
	 * Get list of libraries by ID(s)
	 * 
	 * @param array $ids
	 * @param array $sort
	 * @return array
	 */
	public function getByIds($ids = array(), $sort = array())
	{
		if (!empty($ids)) 
		{
			$query = $this->createQueryBuilder('L')
				->where('L.Trash = false')
				->andWhere('L.isApp = false');
			if (count($ids) > 1) {
				$query->andWhere($query->expr()->in('L.id', $ids));
			}
			else {
				$query->andWhere('L.id = :libid')
					->setParameter('libid', $ids[0]);
			}
			
			if (!empty($sort)) {
				foreach ($sort as $key => $type) {
					$query->addOrderBy($key, $type);
				}
			}
			
			$result = $query->getQuery()->getResult();
			return $result;
		}
		return array();
	}

	/**
	 * Get Library based on name
	 * 
	 * @param array $ids
	 * @param array $sort
	 * @return array
	 */
	public function getByName($name)
	{
		$result = null;
		if (!empty($name)) 
		{
			$query = $this->createQueryBuilder('L')
				->where('L.Trash = false')
				->andWhere('L.Library_Title = :libtitle')
				->setParameter('libtitle', $name)
				->getQuery();
			try{
				$result = $query->getSingleResult();
			}catch(\Doctrine\ORM\NoResultException $e){
				$result = null;
			}catch(\Doctrine\ORM\NonUniqueResultException $e){
				$result = null;
			}
		}
		return $result;
	}
	
	/**
	 * Get user subscribed or unsubscribed libraries list
	 * 
	 * @param \Docova\DocovaBundle\Entity\UserAccounts $user
	 * @param boolean $subscribed
	 * @return array
	 */
	public function getUserLibraries($user, $subscribed, $order)
	{
		$conn = $this->_em->getConnection();
		if ($subscribed === true)
		{
			$query = 'SELECT L.id, L.Library_Title, L.Community, L.Realm, L.Description, L.Load_Docs_As_Folders FROM tb_libraries AS L WHERE L.Trash = 0 AND L.Status = 1 AND L.Is_App = 0 AND L.id IN (
						SELECT I.object_identifier FROM acl_entries AS E INNER JOIN acl_object_identities AS I ON (E.object_identity_id = I.id) INNER JOIN acl_classes AS C ON (E.class_id = C.id) INNER JOIN acl_security_identities AS S ON (E.security_identity_id = S.id)
						WHERE C.class_type = ? AND S.identifier = ? AND E.mask = 8 AND S.username = 1 GROUP BY I.object_identifier)';
		}
		else {
			$query = 'SELECT L.id FROM tb_libraries AS L WHERE L.Trash = 0 AND L.Status = 1 AND L.Is_App = 0 AND L.id NOT IN (
						SELECT I.object_identifier FROM acl_entries AS E INNER JOIN acl_object_identities AS I ON (E.object_identity_id = I.id) INNER JOIN acl_classes AS C ON (E.class_id = C.id) INNER JOIN acl_security_identities AS S ON (E.security_identity_id = S.id)
						WHERE C.class_type = ? AND S.identifier = ? AND E.mask = 8 AND S.username = 1 GROUP BY I.object_identifier)';
			
			$lib_list = $conn->fetchAll($query, array('Docova\DocovaBundle\Entity\Libraries', 'Docova\DocovaBundle\Entity\UserAccounts-'.$user->getUsername()));

			if (!empty($lib_list[0]))
			{
				$roles = $user->getRoles();
				$roles = "'ROLE_USER','".implode("','", $roles)."'";
				$query = 'SELECT L.id, L.Library_Title, L.Community, L.Realm, L.Description, L.Load_Docs_As_Folders FROM tb_libraries AS L WHERE L.Trash = 0 AND L.Status = 1 AND L.Is_App = 0 AND L.id IN (';
				$query .= "SELECT I.object_identifier FROM acl_entries AS E INNER JOIN acl_object_identities AS I ON (E.object_identity_id = I.id) INNER JOIN acl_classes AS C ON (E.class_id = C.id) INNER JOIN acl_security_identities AS S ON (E.security_identity_id = S.id)
						WHERE C.class_type = ? AND S.identifier IN (?, $roles) AND E.mask IN (1,128) AND I.object_identifier IN (";

				foreach ($lib_list as $lib) {
					$query .= "'{$lib['id']}',";
				}
				$query = substr_replace($query, ') GROUP BY I.object_identifier)', -1);
			}
			else {
				return array();
			}
		}
		
		if (!empty($order) && is_array($order))
		{
			$query .= ' ORDER BY ';
			foreach ($order as $field => $sort) {
				$query .= " L.$field $sort,";
			}
			$query = substr_replace($query, '', -1);
		}
		
		$result = $conn->fetchAll($query, array('Docova\DocovaBundle\Entity\Libraries', 'Docova\DocovaBundle\Entity\UserAccounts-'.$user->getUsername()));
		if (!empty($result[0]))
			return $result;
		
		return array();
	}
	
	/**
	 * Get all available libraries for the user (subscribed and unsubscribed libraries)
	 * 
	 * @param \Docova\DocovaBundle\Entity\UserAccounts $user
	 */
	public function getAllVisibleLibraries($user)
	{
		$conn = $this->_em->getConnection();
		$roles = $user->getRoles();
		$roles = "'ROLE_USER','".implode("','", $roles)."'";
		$query = 'SELECT L.id, L.Library_Title, L.Community, L.Realm, L.Description, L.Load_Docs_As_Folders FROM tb_libraries AS L WHERE L.Trash = 0 AND L.Status = 1 AND L.Is_App = 0 AND L.id IN (';
		$query .= "SELECT I.object_identifier FROM acl_entries AS E INNER JOIN acl_object_identities AS I ON (E.object_identity_id = I.id) INNER JOIN acl_classes AS C ON (E.class_id = C.id) INNER JOIN acl_security_identities AS S ON (E.security_identity_id = S.id)
						WHERE C.class_type = ? AND S.identifier IN (?, $roles) AND E.mask IN (1,128))";

		$result = $conn->fetchAll($query, array('Docova\DocovaBundle\Entity\Libraries', 'Docova\DocovaBundle\Entity\UserAccounts-'.$user->getUsername()));
		if (!empty($result[0]))
			return $result;
		
		return array();
	}
	
	/**
	 * Search for apps containing words of search criteria
	 * 
	 * @param string $search_text
	 * @return array
	 */
	public function searchApp($search_text)
	{
		$output = [];		
		
		$criteria = str_replace('"', '', $search_text);
		$query = $this->createQueryBuilder('A')->andWhere('A.Trash = false');
		$expr = $query->expr()->like('A.Library_Title', $query->expr()->literal("%$criteria%"))->__toString();		
		$query->andWhere($expr)->addOrderBy('A.Library_Title', 'ASC');
		
		$result = $query->getQuery()->getResult();
		
		if (!empty($result))
		{
		    $output = $result;
		}
		return $output;
	}
	
	/**
	 * Get list of all apps/libraries/library groups with paginated results
	 * 
	 * @param number $offset
	 * @param number $limit
	 * @return array
	 */
	public function getAllAppLibGroups($offset = 0, $limit = 20)
	{
		$conn = $this->_em->getConnection();
		$driver = $conn->getDriver();
		$conn->beginTransaction();
		$query = "SELECT id, Library_Title AS title, Description AS dscp, App_Icon AS icon, App_Icon_Color AS iconcolor, Is_App AS isapp, NULL AS creator FROM tb_libraries WHERE Trash = 0";
		$query .= ' UNION ';
		$query .= 'SELECT id, Group_Title AS title, Group_Description AS dscp, Group_Icon AS icon, Group_Icon_Color AS iconcolor, 0 AS isapp, Created_By AS creator FROM tb_library_groups';
		$query .= ' ORDER BY title ASC ';
		if ($driver->getName() == 'pdo_sqlsrv') {
		    if($offset > 0 || $limit > 0){
		        $query .= " OFFSET $offset ROWS";
		    }
    		if($limit > 0){
    		    $query .= " FETCH NEXT $limit ROWS ONLY";
    		}
		}
		else {
			if($limit > 0){
			    $query .= " LIMIT $limit";
			}
			if($offset > 0){
			    $query .= " OFFSET $offset";
			}
		}
		
		$stmt = $conn->prepare($query);
		$stmt->execute();
		$result = $stmt->fetchAll();
		$conn->commit();
		if (!empty($result[0])) {
			return $result;
		}
		return [];
	}
	
	/**
	 * Get all application IDs in array
	 * 
	 * @return array
	 */
	public function getAllAppIds()
	{
		$query = $this->createQueryBuilder('L')
			->select('L.id')
			->where('L.Trash = false')
			->andWhere('L.isApp = true')
			->getQuery();
		
		$result = $query->getArrayResult();
		if (!empty($result[0])) {
			return $result;
		}
		
		return [];
	}
	
	/**
	 * Get all visible applications to the user
	 * 
	 * @param \Docova\DocovaBundle\Entity\UserAccounts $user
	 * @return array
	 */
	public function getAllAvailableApps($container)
	{
	    	    
	    $conn = $this->_em->getConnection();
	    $query = "SELECT id, Library_Title, Community, Realm, Description, App_Icon, App_Icon_Color, Is_App FROM tb_libraries WHERE Trash = 0";
	    $query .= ' ORDER BY Library_Title ASC ';    
	    $stmt = $conn->prepare($query);
	    $apps = $conn->fetchAll($query);	    
	    
	    if (!empty($apps))
	    {
	        $appcount = count($apps);
	        for ($x = 0; $x < $appcount; $x++) {
	           $app = $this->_em->getReference('DocovaBundle:Libraries', $apps[$x]['id']);
	           $app->setIsApp($apps[$x]['Is_App']);
	           $access = $this->getAppAccessLevel($container, $app);
	           if($access == 0){
	               unset($apps[$x]);
	           }
	        }
	    }
	    
	    return $apps;
	}
	
	
	private function getAppAccessLevel($container, $app)
	{
	    if ($app->getIsApp())
	    {
	        $docova = new Docova($container);
	        $acl = $docova->DocovaAcl($app);
	        $docova = null;
	        $access = 0;
	        if ($acl->isManager()) {
	            $access = 6;
	        }
	        elseif ($acl->isDesigner()) {
	            $access = 5;
	        }
	        elseif ($acl->isEditor()) {
	            $access = 4;
	        }
	        elseif ($acl->isAuthor()) {
	            $access = 3;
	        }
	        elseif ($acl->isReader()) {
	            $access = 2;
	        }
	    }
	    else {
	        $security_checker = $container->get('security.authorization_checker');
	        
	        if ($app->getTrash() === true || false === $security_checker->isGranted('VIEW', $app))
	        {
	            $access = 0;
	        }else{
	            $access = 2;
	            if ($security_checker->isGranted('ROLE_ADMIN') || $security_checker->isGranted('MASTER', $app)) {
	                $access = 6;
	            }
	            elseif ($security_checker->isGranted('ROLE_USER')) {
	                $access = 3;
	            }	            
	        }	        
	    }
	    
	    return $access;
	}
}