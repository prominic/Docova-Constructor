<?php
namespace Docova\DocovaBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * FileTemplatesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HtmlResourcesRepository extends EntityRepository
{
	public function getDataXML($criteria = array(), $sortBy = array(), $return_obj = false)
	{
		if (empty($criteria) && empty($sortBy)) {
			$html_resources = $this->findAll();
		}
		else {
			$orderBy = array();
			if (!empty($sortBy))
			{
				foreach ($sortBy as $key => $value) {
					if ($this->_class->hasField($key) && !empty($value)) {
						$orderBy[$key] = strtoupper($value) == 'DESC' ? 'DESC' : 'ASC';
					}
				}
			}
			$html_resources = $this->findBy($criteria, $orderBy);
		}
		
		$data_xml = ($return_obj === false) ? array() : new \DOMDocument('1.0', 'UTF-8');
		foreach ($html_resources as $doc)
		{
			if ($return_obj === false)
			{
				$data_xml[] = array(
					'dockey' => $doc->getId(),
					'resourceName' => $doc->getResourceName(),
					'fileName' => $doc->getFileName(),
				);
/*
				$data_xml .= '<document>';
				$data_xml .= '<dockey>'.$doc->getId().'</dockey>';
				$data_xml .= '<docid>'.$doc->getId().'</docid>';
				$data_xml .= '<rectype>doc</rectype>';
				$data_xml .= '<typekey />';
				$data_xml .= '<name><![CDATA['.$doc->getResourceName().']]></name>';
				$data_xml .= '<files><![CDATA[]]>'.$doc->getFileName().'</files>';
				$data_xml .= '<statno />';
				$data_xml .= '<wfstarted />';
				$data_xml .= '<delflag />';
				$data_xml .= '</document>';
*/
			}
			else {
				$root = $data_xml->appendChild($data_xml->createElement('document'));
				$root->appendChild($data_xml->createElement('dockey', $doc->getId()));
				$root->appendChild($data_xml->createElement('docid', $doc->getId()));
				$root->appendChild($data_xml->createElement('rectype', 'doc'));
				$root->appendChild($data_xml->createElement('typekey'));
				$cdata = $data_xml->createCDATASection($doc->getResourceName());
				$newnode = $data_xml->createElement('resourceName');
				$newnode->appendChild($cdata);
				$root->appendChild($newnode);
				$cdata = $data_xml->createCDATASection($doc->getFileName());
				$newnode = $data_xml->createElement('fileName');
				$newnode->appendChild($cdata);
				$root->appendChild($newnode);
			}
		}
		
		return $data_xml;
	}
	
	/*
	 * Deletes documents from web admin view
	* @param: xml data with id to delete
	* @return: xml Data response
	*/
	public function deleteSelectedDocuments($post_xml){
	
		$deleted=0;
	
		foreach ($post_xml->getElementsByTagName('Unid') as $doc_id)
		{
			$document = $this->find($doc_id->nodeValue);
			if (!empty($document))
			{
				$this->_em->remove($document);
				$deleted++;
				$this->_em->flush(); // commit each delete
			}
	
		}
		// setup return xml
		$response_xml = new \DOMDocument("1.0", "UTF-8");
		$root = $response_xml->appendChild($response_xml->createElement('Results'));
		if ($deleted !== 0)
		{
			$child = $response_xml->createElement('Result', 'OK');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Status';
			$child->appendChild($attrib);
			$root->appendChild($child);
	
			$child = $response_xml->createElement('Result', $deleted);
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Ret1';
			$child->appendChild($attrib);
			$root->appendChild($child);
		}
		else {
			$child = $response_xml->createElement('Result', 'FAILED');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Status';
			$child->appendChild($attrib);
			$root->appendChild($child);
	
			$child = $response_xml->createElement('Result', 'Could not delete one or more of the selected documents.');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'ErrMsg';
			$child->appendChild($attrib);
			$root->appendChild($child);
		}
		return $response_xml->saveXML();
	}
}