<?php
namespace Docova\DocovaBundle\Entity;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * UserAccountsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserAccountsRepository extends EntityRepository implements UserLoaderInterface
{
	public function loadUserByUsername($username)
	{
		//var_dump("loadUserByUsername");
		$query = $this->createQueryBuilder('UA')
			->where('UA.Trash = false')
			->andWhere('UA.username = :username OR UA.userNameDnAbbreviated = :userNameDnAbbreviated')
			->setParameters(array('username' => $username, 'userNameDnAbbreviated' => $username ));
		
		if (!empty($_POST['_password'])) 
		{
			$query->andWhere('UA.password = :pass')
				->setParameter('pass', md5(md5(md5($_POST['_password']))));
		}
		
		$query = $query->getQuery();
	
		try {
			// The Query::getSingleResult() method throws an exception
			// if there is no record matching the criteria.
			$user = $query->getSingleResult();
/*
 * NOT NEEDED FOR NOW
 *
			$query = $this->_em->createQueryBuilder()
				->select('GS')
				->from('DocovaBundle:GlobalSettings', 'GS')
				->getQuery();
			$global_settings = $query->getSingleResult();
			$_SESSION['directory'] = $global_settings->getLDAPDirectory();
			$_SESSION['port'] = $global_settings->getLDAPPort();
*/
			if ($user->getUserProfile()->getAccountType() == false || $user->getTrash() == true)
			{
				return;
			}
			
		} catch (NoResultException $e) {
			$message = sprintf('Unable to find a user object through DB Authentication, identified by "%s".',	$username );
			throw new UsernameNotFoundException($message, 0, $e);
		}
	
		return $user;
	}
	
	public function refreshUser(UserInterface $user)
	{
		$class = get_class($user);
		if (!$this->supportsClass($class)) {
			throw new UnsupportedUserException(
					sprintf('Instances of "%s" are not supported.', $class )
				);
		}
	
		$user_obj = $this->find($user->getId());
		if ($user_obj && $user_obj->getTrash()) {
			throw new UsernameNotFoundException('Inactive user identified by "%s" attempts to login!', $user->getUsername());
		}
		
		return $user_obj;
	}
	
	public function supportsClass($class)
	{
		return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
	}

	/**
	 * Retrive array of users with specific role
	 * 
	 * @param string $role_name
	 * @return mixed
	 */
	public function findByRole($role_name)
	{
		$query = $this->createQueryBuilder('U')
			->join('U.User_Roles', 'UR')
			->where('UR.Role = :role')
			->setParameter('role', $role_name)
			->getQuery();

		return $query->getResult();
	}
	
	/**
	 * Return all user profiles XML Data as string or DOM Document
	 * 
	 * @param array $criteria
	 * @param array $orderBy
	 * @param boolean $retrun_obj
	 * @return string|\DOMDocument
	 */
	public function getDataXML($criteria = array(), $orderBy = array(), $return_obj = false)
	{
		if (empty($criteria) && empty($orderBy)) 
		{
			$users_list = $this->findBy(array('Trash' => false), array('username' => 'ASC'));
		}
		else {
			$query = $this->createQueryBuilder('UA')
				->join('UA.User_Profile', 'UP')
				->where('UA.Trash = false');

			if (!empty($criteria)) {
				foreach ($criteria as $field => $value) {
					$query->andWhere('UA.' . $field . ' = :v_'.$field);
					$query->setParameter('v_'.$field, $value);
				}
			}
				
			if (!empty($orderBy))
			{
				foreach ($orderBy as $key => $value) {
					if (!empty($value))
					{
						if ($this->_class->hasField($key)) {
							$query->addOrderBy('UA.'.$key, strtoupper($value) == 'DESC' ? 'DESC' : 'ASC');
						}
						elseif ($key == 'lastaccess') {
							$query->addOrderBy('UP.Last_Modified_Date', strtoupper($value) == 'DESC' ? 'DESC' : 'ASC');
						}
					}
				}
			}
			else {
				$query->addOrderBy('UA.username', 'ASC');
			}
			
			$users_list = $query->getQuery()->getResult();
		}
		
		$data_xml = ($return_obj === false) ? array() : new \DOMDocument('1.0', 'UTF-8');
		if (!empty($users_list)) {
			foreach ($users_list as $doc)
			{
				if ($return_obj === false)
				{
					$user_profile = $doc->getUserProfile();
					$access_date = (!empty($user_profile) && !empty($user_profile->getLastModifiedDate())) ? $user_profile->getLastModifiedDate()->format("m/d/Y h:i:s A") : '';
					$data_xml[] = array(
						'dockey' => $doc->getId(),
						'user' => $doc->getUsername(),
						'lastaccess' => $access_date
					);
				}
				else {
					$root = $data_xml->appendChild($data_xml->createElement('document'));
					$root->appendChild($data_xml->createElement('dockey', $doc->getId()));
					$root->appendChild($data_xml->createElement('docid', $doc->getId()));
					$root->appendChild($data_xml->createElement('rectype', 'doc'));
					
					$cdata = $data_xml->createCDATASection($doc->getUsername());
					$newnode = $data_xml->createElement('username');
					$newnode->appendChild($cdata);
					$root->appendChild($newnode);
					$user_profile = $doc->getUserProfile();
					$access_date = (!empty($user_profile) && !empty($user_profile->getLastModifiedDate())) ? $user_profile->getLastModifiedDate()->format("m/d/Y h:i:s A") : '';						
					$cdata = $data_xml->createCDATASection($access_date);
					$newnode = $data_xml->createElement('lastaccess');
					$newnode->appendChild($cdata);
					$root->appendChild($newnode);
				}
			}
		}
		
		return $data_xml;
	}
	
	/**
	* Deletes documents from web admin view
	* 
	* @param \DOMDocument $post_xml
	* @return \DOMDocument
	*/
	public function deleteSelectedDocuments($post_xml){
	
		$deleted=0;
	
		foreach ($post_xml->getElementsByTagName('Unid') as $doc_id)
		{
			$document = $this->find($doc_id->nodeValue);
			if (!empty($document))
			{
				$document->setTrash(true);
//				$this->_em->remove($document);
				$deleted++;
				$this->_em->flush(); // commit each delete
			}
	
		}
		// setup return xml
		$response_xml = new \DOMDocument("1.0", "UTF-8");
		$root = $response_xml->appendChild($response_xml->createElement('Results'));
		if ($deleted !== 0)
		{
			$child = $response_xml->createElement('Result', 'OK');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Status';
			$child->appendChild($attrib);
			$root->appendChild($child);
	
			$child = $response_xml->createElement('Result', $deleted);
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Ret1';
			$child->appendChild($attrib);
			$root->appendChild($child);
		}
		else {
			$child = $response_xml->createElement('Result', 'FAILED');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Status';
			$child->appendChild($attrib);
			$root->appendChild($child);
	
			$child = $response_xml->createElement('Result', 'Could not delete one or more of the selected documents.');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'ErrMsg';
			$child->appendChild($attrib);
			$root->appendChild($child);
		}
		return $response_xml->saveXML();
	}
	
	/**
	 * Check for duplicate usernames
	 * 
	 * @param string $searchFilter
	 * @return array
	 */
	public function isDuplicatedUsername($searchFilter)
	{
		$query = $this->createQueryBuilder('UA');
		$anotherQry=$query
			->join("UA.User_Profile", "UP")
			->select('COUNT(UA.id)')
			->where('UA.Trash = false and UP.Account_Type=true')
			->andWhere('UA.username = :uname')
			->setParameter('uname', $searchFilter)
			->getQuery();
	
		return $anotherQry->getSingleScalarResult();
	}
	
	public function getNonDuplicateUsername($username)
	{
		for ($x = 1; $x < 50; $x++) {
			$exist = $this->isDuplicateUsername($username . $x);
			if (empty($exist)) {
				return ($username . $x);
			}
		}
		return false;
	}
	
	/**
	 * Search for a username in DB abbreviated or Display Name
	 * 
	 * @param string $username
	 * @return array
	 */
	public function searchUser($username)
	{
		$query = $this->createQueryBuilder('UA')
			->join('UA.User_Profile', 'P')
			->select('UA.userNameDnAbbreviated, P.Display_Name')
			->where('UA.Trash = false')
			->orderBy('UA.userNameDnAbbreviated');
		
		$query->andWhere($query->expr()->orX(
			$query->expr()->like('UA.userNameDnAbbreviated', $query->expr()->literal("%$username%")),
			$query->expr()->like('P.Display_Name', $query->expr()->literal("%$username%"))
		) );
		
		$result = $query->getQuery()->getArrayResult();
		
		return $result;
	}
	
	/**
	 * Search for a username DN abbreviated
	 * 
	 * @param string $username
	 * @param boolean $hide_inactive [optional()]
	 * @param integer $limit [optional()]
	 * @param integer $offset [optional()]
	 * @return mixed
	 */
	public function searchUsernameAbbreviated($username, $hide_inactive = false, $limit = null, $offset = null)
	{
		$query = $this->createQueryBuilder('UA')
			->join('UA.User_Profile', 'UP')
			->addSelect('UP');
		$query->where($query->expr()->like('UA.userNameDnAbbreviated', $query->expr()->literal("%$username%")))
			->orderBy('UA.userNameDnAbbreviated', 'ASC');
		
		if ($hide_inactive === true) 
		{
			$query->andWhere('UA.Trash = false');
		}
		
		if (!empty($limit)) 
		{
			$query->setMaxResults($limit);
		}
		
		if (!empty($offset)) 
		{
			$query->setFirstResult($offset);
		}
		
		$results = $query->getQuery()->getResult();

		return  $results;
	}
	
	/**
	 * Get amount of users base on filters
	 * 
	 * @param array $filters
	 * @return integer
	 */
	public function getCountBy($filters = array())
	{
		$query = $this->createQueryBuilder('UA')
			->select('COUNT(UA.id)')
			->where('UA.id IS NOT NULL');
		if (!empty($filters)) 
		{
			foreach ($filters as $field => $value) {
				$query->andWhere("UA.$field = :v$field")
					->setParameter("v$field", $value);
			}
		}

		try {
			$result = $query->getQuery()->getSingleScalarResult();
			return $result;
		}
		catch (\Exception $e) {
			return 0;
		}
	}
	
	/**
	 * Generate XML for deleted users perspective
	 * 
	 * @param string $icon_path
	 * @param array $criteria
	 * @param array $orderBy
	 * @return string
	 */
	public function getDeletedUsers($icon_path, $criteria = array(), $orderBy = array())
	{
		if (empty($criteria) && empty($orderBy))
		{
			$users_list = $this->findBy(array('Trash' => true), array('username' => 'ASC'));
		}
		else {
			$query = $this->createQueryBuilder('UA')
				->join('UA.User_Profile', 'UP')
				->where('UA.Trash = true');
			
			if (!empty($criteria)) {
				foreach ($criteria as $field => $value) {
					$query->andWhere('UA.' . $field . ' = :v_'.$field);
					$query->setParameter('v_'.$field, $value);
				}
			}
			
			if (!empty($orderBy))
			{
				foreach ($orderBy as $key => $value) {
					if (!empty($value))
					{
						if ($this->_class->hasField($key)) {
							$query->addOrderBy('UA.'.$key, strtoupper($value) == 'DESC' ? 'DESC' : 'ASC');
						}
						elseif ($key == 'lastaccess') {
							$query->addOrderBy('UP.Last_Modified_Date', strtoupper($value) == 'DESC' ? 'DESC' : 'ASC');
						}
					}
				}
			}else {
				$query->addOrderBy('UA.username', 'ASC');
			}
				
			$users_list = $query->getQuery()->getResult();
		}
		
		$data_xml = array();
		if (!empty($users_list)) {
			foreach ($users_list as $doc)
			{
				$user_profile = $doc->getUserProfile();
				$access_date = (!empty($user_profile) && !empty($user_profile->getLastModifiedDate())) ? $user_profile->getLastModifiedDate()->format("m/d/Y h:i:s A") : '';				
				$data_xml[] = array(
						'dockey' => $doc->getId(),
						'username' => $doc->getUsername(),
						'lastaccess' => $access_date,
						'reinstate' => '../Undo.gif'
				);
			}
		}
		return $data_xml;
	}
	
	/**
	 * Reinstate the deleted user(s)
	 * 
	 * @param \DOMDocument $xml
	 * @return string
	 */
	public function reinstateUser($xml)
	{
		$reverted = 0;
		foreach ($xml->getElementsByTagName('UserKey') as $user)
		{
			$document = $this->find($user->nodeValue);
			if (!empty($document))
			{
				$document->setTrash(false);
				$reverted++;
				$this->_em->flush(); // commit each delete
			}
		}
		// setup return xml
		$response_xml = new \DOMDocument("1.0", "UTF-8");
		$root = $response_xml->appendChild($response_xml->createElement('Results'));
		if ($reverted !== 0)
		{
			$child = $response_xml->createElement('Result', 'OK');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Status';
			$child->appendChild($attrib);
			$root->appendChild($child);
	
			$child = $response_xml->createElement('Result', $reverted);
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Ret1';
			$child->appendChild($attrib);
			$root->appendChild($child);
		}
		else {
			$child = $response_xml->createElement('Result', 'FAILED');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Status';
			$child->appendChild($attrib);
			$root->appendChild($child);
	
			$child = $response_xml->createElement('Result', 'Could not reinstate one or more of the selected documents.');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'ErrMsg';
			$child->appendChild($attrib);
			$root->appendChild($child);
		}
		return $response_xml->saveXML();
	}
}
