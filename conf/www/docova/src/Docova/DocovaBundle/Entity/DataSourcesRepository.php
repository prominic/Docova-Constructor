<?php
namespace Docova\DocovaBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * DataSourcesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DataSourcesRepository extends EntityRepository
{
	
	public function getDataXML($criteria = array(), $sortBy = array(), $return_obj = false)
	{
	if (empty($criteria) && empty($sortBy)) {
			$templates = $this->findAll();
		}
		else {
			$orderBy = array();
			if (!empty($sortBy))
			{
				foreach ($sortBy as $key => $value) {
					if ($this->_class->hasField($key)) {
						$orderBy[$key] = strtoupper($value) == 'DESC' ? 'DESC' : 'ASC';
					}
					else {
						if ($key == 'Type' && !empty($value)) {
							$orderBy['Type'] = strtoupper($value) == 'DESC' ? 'DESC' : 'ASC';
						}
						elseif ($key == 'Name' && !empty($value)) {
							$orderBy['Name'] = strtoupper($value) == 'DESC' ? 'DESC' : 'ASC';
						}
					}
				}
			}
			$templates = $this->findBy($criteria, $orderBy);
		}
		
		$data_xml = ($return_obj === false) ? '' : new \DOMDocument('1.0', 'UTF-8');
		foreach ($templates as $doc)
		{
			if ($return_obj === false)
			{
				$data_xml[] = array(
						'dockey' => $doc->getId(),
						'type' => $doc->getType(),
						'name' => $doc->getName()
				);
				
				/*
				$data_xml .= '<document>';
				$data_xml .= '<dockey>'.$doc->getId().'</dockey>';
				$data_xml .= '<docid>'.$doc->getId().'</docid>';
				$data_xml .= '<rectype>doc</rectype>';
				$data_xml .= '<type><![CDATA['.$doc->getType().']]></type>';
				$data_xml .= '<name><![CDATA['.$doc->getName().']]></name>';
				$data_xml .= '<statno />';
				$data_xml .= '<wfstarted />';
				$data_xml .= '<delflag />';
				$data_xml .= '</document>';
				*/
			}
			else {
				$root = $data_xml->appendChild($data_xml->createElement('document'));
				$root->appendChild($data_xml->createElement('dockey', $doc->getId()));
				$root->appendChild($data_xml->createElement('docid', $doc->getId()));
				$root->appendChild($data_xml->createElement('rectype', 'doc'));
				
				$cdata = $data_xml->createCDATASection($doc->getName);
				$newnode = $data_xml->createElement('name');
				$newnode->appendChild($cdata);
				$root->appendChild($newnode);
			}
		}
		
		return $data_xml;
	}
	public function getDataSource($name){
		$qbLib = $this->createQueryBuilder("d");
		$qbLib->select("d")
		->where("d.Name=?1")
		->setParameter(1, $name);
		$result= $qbLib->getQuery()->getResult();
		if (!empty($result) && !empty($result[0]))
			return $result[0];
		else
			return null;
	}
	public function getDataSources()
	{		
		$data_sources = $this->findAll();
		if (empty($data_sources))
			return array();
		else{
			$dataSources = array();
			foreach($data_sources as $data_source){
				$dataSources[] = $data_source->getName();
			}
			return $dataSources;
		}
	}
	public function getFileResources()
	{		
		return $this->_em->getRepository("DocovaBundle:FileResources")->getFileResources();
	}
	/*
	 * Deletes documents from web admin view
	* @param: xml data with id to delete
	* @return: xml Data response
	*/
	public function deleteSelectedDocuments($post_xml){
	
		$deleted=0;
	
		foreach ($post_xml->getElementsByTagName('Unid') as $doc_id)
		{
			$document = $this->find($doc_id->nodeValue);
			if (!empty($document))
			{
				$this->_em->remove($document);
				$deleted++;
				$this->_em->flush(); // commit each delete
			}
	
		}
		// setup return xml
		$response_xml = new \DOMDocument("1.0", "UTF-8");
		$root = $response_xml->appendChild($response_xml->createElement('Results'));
		if ($deleted !== 0)
		{
			$child = $response_xml->createElement('Result', 'OK');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Status';
			$child->appendChild($attrib);
			$root->appendChild($child);
	
			$child = $response_xml->createElement('Result', $deleted);
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Ret1';
			$child->appendChild($attrib);
			$root->appendChild($child);
		}
		else {
			$child = $response_xml->createElement('Result', 'FAILED');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Status';
			$child->appendChild($attrib);
			$root->appendChild($child);
	
			$child = $response_xml->createElement('Result', 'Could not delete one or more of the selected documents.');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'ErrMsg';
			$child->appendChild($attrib);
			$root->appendChild($child);
		}
		return $response_xml->saveXML();
	}
}