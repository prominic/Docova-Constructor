<?php
namespace Docova\DocovaBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * DesignElementsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DesignElementsRepository extends EntityRepository
{
	/**
	 * Get all fields in a subform
	 * 
	 * @param integer $subformId
	 * @return mixed
	 */
	public function getSubformFields($subformId)
	{
		$query = $this->createQueryBuilder('SF')
				->where('SF.Subform = :SubId AND SF.trash = false')
				->setParameter('SubId', $subformId)
				->getQuery();
		
		$result = $query->getResult();
		
		return $result;
	}
	
	/**
	 * Get application form elements
	 * 
	 * @param string $form
	 * @param string $app
	 * @param string $output
	 * @return array
	 */
	public function getFormFields($form, $app, $output = null)
	{
		$query = $this->createQueryBuilder('E')
			->leftJoin('E.Subform', 'S')
			->where('E.trash = false')
			->andWhere('E.form = :form OR S.application = :app')
			->addOrderBy('E.fieldName', 'ASC')
			->setParameter('form', $form)
			->setParameter('app', $app)
			->getQuery();
		
		if (strtolower($output) == 'array')
		{
			$result = $query->getArrayResult();
			if (!empty($result))
				return $result;
		}
		else {
			$result = $query->getResult();
			if (!empty($result))
				return $result;
		}
		return array();
	}
	
	/**
	 * Get an app field either in form or subform
	 * 
	 * @param string $field
	 * @param string $form
	 * @param string $app
	 * @return mixed
	 */
	public function getField($field, $form, $app)
	{
		$query = $this->createQueryBuilder('E')
			->leftJoin('E.Subform', 'S')
			->where('E.trash = false')
			->andWhere('E.fieldName = :field')
			->andWhere('E.form = :form OR S.application = :app')
			->setParameter('field', $field)
			->setParameter('form', $form)
			->setParameter('app', $app)
			->addOrderBy('E.form', 'DESC')
			->getQuery();
		
		$result = $query->getResult();
		if (!empty($result) && count($result)) {
			for ($x = 0; $x < count($result); $x++) {
				//if ($result[$x]->getForm()) {
					return $result[$x];
				//}
			}
		}
		return null;
	}
	
	/**
	 * Get all form/subform elements in array
	 * 
	 * @param array $list
	 * @param string $form
	 * @param string $app
	 * @return array
	 */
	public function getFormElementsBy($list, $form, $app)
	{
		$output = array();
		$list = array_map('strtolower', $list);
		$query = $this->createQueryBuilder('E');
		$result = $query->select(array('E.id', 'E.fieldName', 'E.fieldType', 'E.multiSeparator', 'E.nameFieldType', 'S.Form_Name subformName'))
			->leftJoin('E.Subform', 'S')
			->where('E.trash = false')
			->andWhere('E.form = :form OR S.application = :app')
			->andWhere($query->expr()->in('E.fieldName', $list))
			->setParameter('form', $form)
			->setParameter('app', $app)
			->addOrderBy('E.fieldName', 'ASC')
			->addOrderBy('S.Form_Name', 'DESC')
			->getQuery()
			->getArrayResult();
		
		if (!empty($result[0]))
		{
			foreach ($result as $fields) {
			    if(array_key_exists(strtolower($fields['fieldName']), $output)){
			        array_push($output[strtolower($fields['fieldName'])]['allids'], $fields['id']); 
			    }else{			    
    				$output[strtolower($fields['fieldName'])] = array(
    					'id' => $fields['id'],
    					'fieldType' => $fields['fieldType'],
    					'multiSeparator' => $fields['multiSeparator'],
    					'nameFieldType' => $fields['nameFieldType'],
    				    'allids' => [$fields['id']]
    				);
			    }
			}
		}
		
		return $output;
	}
	
	/**
	 * Get uploader field in the doctype
	 * 
	 * @param integer $doctype
	 * @return mixed|NULL
	 */
	public function getUploaderField($doctype)
	{
		$query = $this->createQueryBuilder('SF')
			->join('SF.Subform', 'S')
			->join('Docova\DocovaBundle\Entity\DocTypeSubforms', 'DTS', 'WITH', 'DTS.Subform = SF.Subform')
			->where('DTS.DocType = :doctype')
			->andWhere("S.Form_Name = 'Attachments'")
			->andWhere('S.Is_Custom = false')
			->setParameter('doctype', $doctype)
			->getQuery();

		try {
			$result = $query->getSingleResult();
			return $result;
		}
		catch (\Exception $e) {
			return null;
		}
	}
	
	/**
	 * Get all field meta data in an application
	 * 
	 * @param string $fieldname
	 * @param string $appid
	 * @return array
	 */
	public function getAppField($fieldname, $appid)
	{
		$query = $this->createQueryBuilder('D')
			->join('D.form', 'F')
			->where('D.fieldName = :fname')
			->andWhere('F.application = :app')
			->setParameter('fname', $fieldname)
			->setParameter('app', $appid)
			->getQuery();
		
		$result = $query->getArrayResult();
		return $result;
	}
	
	/**
	 * Get field meta data in a document if exists
	 * 
	 * @param string $fieldname
	 * @param string $document
	 * @param string $application
	 * @return null|array
	 */
	public function getDocumentField($fieldname, $document, $application, $form)
	{
		$query = $this->createQueryBuilder('E')
			->leftJoin('E.Subform', 'S')
			->where('E.trash = false')
			->andWhere('E.fieldName = :field')
			->andWhere('E.form = :form OR S.application = :app')
			->setParameter('field', $fieldname)
			->setParameter('form', $form)
			->setParameter('app', $application)
			->addOrderBy('E.form', 'DESC')
			->getQuery();
		
		
		try {
			$field = $query->getOneOrNullResult();
			if (!empty($field)) 
			{
				$result = array('field' => $field, 'value' => null);
				$fldtype = $field->getFieldType();
				switch ($fldtype)
				{
					case 1:
						$query = $this->getEntityManager()->getRepository('DocovaBundle:FormDateTimeValues');
						break;
					case 3:
						$query = $this->getEntityManager()->getRepository('DocovaBundle:FormNameValues');
						break;
					case 4:
						$query = $this->getEntityManager()->getRepository('DocovaBundle:FormNumericValues');
						break;
					case 5:
						break;
					default:
						$query = $this->getEntityManager()->getRepository('DocovaBundle:FormTextValues');
						break;
				}

				if ( $fldtype == 5){
					$result['value'] = "";
					return $result;
				}else{
				
					//@todo: needs to be changed to findBy due to multiple values for one field
					$value = $query->findOneBy(array('Field' => $field->getId(), 'Document' => $document, 'trash' => false));
					if (!empty($value))
						$result['value'] = $value->getFieldValue();
					elseif ($field->getFieldType() == 3) {
						$value = $this->getEntityManager()->getRepository('DocovaBundle:FormGroupValues')
							->findOneBy(array('Field' => $field->getId(), 'Document' => $document, 'trash' => false));
						if (!empty($value))
							$result['value'] = $value->getFieldValue();
					}
				
					return $result;
				}
			}
			return null;
		}
		catch (\Exception $e) {
			return null;
		}
	}
	
	/**
	 * Get applicatoin fields. If selection columns are defined array of
	 * columns will be returned otherwise array of objects
	 * 
	 * @param string $appid
	 * @param array $columns
	 */
	public function getAppFields($appid, $columns = array())
	{
		$query = $this->createQueryBuilder('D')
			->join('D.form', 'F')
			->where('F.application = :app')
			->setParameter('app', $appid);
		
		if (!empty($columns)) 
		{
			$columns = is_array($columns) ? $columns : array($columns);
			for ($x = 0; $x < count($columns); $x++) {
				$columns[$x] = 'D.'.$columns[$x];
			}
			$query->select($columns);
		}
		
		if (empty($columns)) {
			$result = $query->getQuery()->getResult();
		}
		else {
			$result = $query->getQuery()->getArrayResult();
		}
		return $result;
	}
	
	/**
	 * Get document existing field names which contains a value
	 * 
	 * @param string $document
	 * @return array
	 */
	public function getDocFieldNames($document)
	{
		$output = array();
		$textFields = $this->createQueryBuilder('F')
			->select('F.fieldName')
			->join('Docova\DocovaBundle\Entity\FormTextValues', 'TV', 'WITH', 'TV.Field = F.id')
			->where('TV.Document = :document')
			->setParameter('document', $document)
			->getQuery()
			->getArrayResult();
		
		$numericFields = $this->createQueryBuilder('F')
			->select('F.fieldName')
			->join('Docova\DocovaBundle\Entity\FormNumericValues', 'TV', 'WITH', 'TV.Field = F.id')
			->where('TV.Document = :document')
			->setParameter('document', $document)
			->getQuery()
			->getArrayResult();

		$dateFields = $this->createQueryBuilder('F')
			->select('F.fieldName')
			->join('Docova\DocovaBundle\Entity\FormDateTimeValues', 'TV', 'WITH', 'TV.Field = F.id')
			->where('TV.Document = :document')
			->setParameter('document', $document)
			->getQuery()
			->getArrayResult();

		$nameFields = $this->createQueryBuilder('F')
			->select('F.fieldName')
			->join('Docova\DocovaBundle\Entity\FormNameValues', 'TV', 'WITH', 'TV.Field = F.id')
			->where('TV.Document = :document')
			->setParameter('document', $document)
			->getQuery()
			->getArrayResult();
				
		$groupFields = $this->createQueryBuilder('F')
			->select('F.fieldName')
			->join('Docova\DocovaBundle\Entity\FormGroupValues', 'TV', 'WITH', 'TV.Field = F.id')
			->where('TV.Document = :document')
			->setParameter('document', $document)
			->getQuery()
			->getArrayResult();
		
		if (!empty($textFields)) 
		{
			foreach ($textFields as $field) {
				$output[] = $field['fieldName'];
			}
		}
		if (!empty($numericFields)) 
		{
			foreach ($numericFields as $field) {
				$output[] = $field['fieldName'];
			}
		}
		if (!empty($dateFields))
		{
			foreach ($dateFields as $field) {
				$output[] = $field['fieldName'];
			}
		}
		if (!empty($nameFields))
		{
			foreach ($nameFields as $field) {
				$output[] = $field['fieldName'];
			}
		}
		if (!empty($groupFields))
		{
			foreach ($groupFields as $field) {
				$output[] = $field['fieldName'];
			}
		}
		$output = array_unique($output);
		
		return $output;
	}
	
	/**
	 * Get profile docuemnt fields list
	 * 
	 * @param string $profile
	 * @param array $fields
	 * @param string $application
	 * @param string $key
	 * @return NULL|DesignElements[]
	 */
	public function getProfileFields($profile, $fields, $application, $key = null)
	{
		$query = $this->createQueryBuilder('F')
			->join('F.profileDocument', 'P')
			->where('P.profileName = :profile')
			->andWhere('P.application = :app')
			->setParameter('profile', $profile)
			->setParameter('app', $application);
		
		if (!empty($fields) && count($fields) == 1)
		{
			$query->andWhere('F.fieldName = :field')
				->setParameter('field', $fields[0]);
		}
		elseif (count($fields) > 1)
		{
			$query->andWhere($query->expr()->in('F.fieldName', $fields));
		}
		else {
			return null;
		}

		if (empty($key)) {
			$query->andWhere("P.profileKey IS NULL OR P.profileKey = ''");
		}
		else {
			$query->andWhere('P.profileKey = :key')
				->setParameter('key', $key);
		}
		$result = $query->getQuery()->getArrayResult();
		return $result;
	}
	
	/**
	 * Find a match field object in a form in Design Element table
	 * 
	 * @param string $fieldname
	 * @param string $form
	 * @param string $app
	 * @param integer $type
	 * @return mixed|NULL
	 */
	public function findFieldInForm($fieldname, $form, $app, $type = null)
	{
		$query = $this->createQueryBuilder('E')
			->join('E.form', 'F')
			->where('E.trash = false')
			->andWhere('E.fieldName = :field')
			->andWhere('E.form = :form')
			->andWhere('F.application = :app')
			->setParameter('field', $fieldname)
			->setParameter('form', $form)
			->setParameter('app', $app);

		if (!is_null($type)) {
			$query->andWhere('E.fieldType = :ftype')
				->setParameter('ftype', $type);
		}
		
		try {
			$result = $query->getQuery()->getOneOrNullResult();
			return $result;
		}
		catch (\Exception $e) {
			return null;
		}
	}
}