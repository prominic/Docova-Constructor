<?php
namespace Docova\DocovaBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * FormTextValuesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FormTextValuesRepository extends EntityRepository
{
	/**
	 * Custom search in form element values base on the entered operand
	 * 
	 * @param integer $fields
	 * @param string $operand
	 * @param string $value
	 * @param array $filters
	 * @param array $doctypes
	 * @return array
	 */
	public function customSearch($fields, $operand, $value, $filters, $doctypes = array(),$defaultFormat="m/d/Y",$type="text")
	{
		if (empty($fields) || empty($operand) || empty($value)) { return array(); }

		if (!empty($filters['folder'])) 
		{
			$folders = array($filters['folder']->getId());
			if (!empty($filters['include_subfolders']) && $filters['include_subfolders'] === true)
			{
				$subfolders = $this->_em->getRepository('DocovaBundle:Folders')->getDescendants($filters['folder']->getPosition(), $filters['folder']->getLibrary()->getId(), null, true);
				foreach ($subfolders as $f)
				{
					$folders[] = $f['id'];
				}
				unset($subfolders, $f);
			}
		}
		elseif (!empty($filters['libraries']))
		{
			$libraries = explode(',', $filters['libraries']);
		}
		else {
			return array();
		}
		
		$query = $this->_em->createQueryBuilder()
			->select('DISTINCT(D.id) AS id')
			->from('Docova\DocovaBundle\Entity\Documents', 'D')
			->leftJoin('D.Bookmarks', 'B')
			->where('D.Trash = false AND D.Archived = false');
		
		$subQuery = $this->createQueryBuilder('EV')
			->select('IDENTITY(EV.Document)');
		$fields = explode(';', $fields);
		if (count($fields) > 1) {
			$subQuery->where($subQuery->expr()->in('EV.Field', $fields));
		}
		else {
			$subQuery->where('EV.Field = :field');
			$query->setParameter('field', $fields[0]);
		}

		if ($operand == 'CONTAINS')
		{
			if (is_array($value) && count($value) > 1)
			{
				$subQuery->andWhere($subQuery->expr()->in('EV.summaryValue', $value));
			}
			else {
				$value = is_array($value) ? $value[0] : $value;
				$subQuery->andWhere($subQuery->expr()->like('EV.summaryValue', $subQuery->expr()->literal($value)));
			}
		}
		elseif ($operand == 'NOT CONTAINS')
		{
			if (is_array($value) && count($value) > 1)
			{
				$subQuery->andWhere($subQuery->expr()->notIn('EV.summaryValue', $value));
			}
			else {
				$value = is_array($value) ? $value[0] : $value;
				$subQuery->andWhere($subQuery->expr()->not($subQuery->expr()->like('EV.summaryValue', $subQuery->expr()->literal($value))));
			}
		}
		else {
			switch ($type){
				case "number":
				    if (\is_numeric($value)){
				    	$value =  \str_replace(",", ".",$value);
				    	if ($value=="0"  || $value=="0.0")
				    		$value="0.00";
				    	$subQuery->andWhere(" StrToNumeric(StrReplace(EV.fieldValue,',','.') AS DECIMAL(10,2)) ".$operand." StrToNumeric('".$value."' AS DECIMAL(10,2))");
				    }					   		
					break;
				case "date":
					try{
						$temp = date_create_from_format($defaultFormat, $value);
					}
					catch (\Exception $e){
						$temp = null;
					}
					
					if (!empty($temp)){
						$value = new \DateTime();
						$value->setTimestamp(strtotime($temp->format('m/d/Y')));
						$value->setTime(0,0,0);
						unset($temp);
						
						$subQuery->andWhere("  StrToDate(EV.fieldValue,103) ".$operand.' :value');
						$isoDate = $value->format("Y-m-d H:i:s");
						$query->setParameter('value', $isoDate);
					}
					break;
				default:
					$subQuery->andWhere('EV.summaryValue '.$operand.' :value');
					$query->setParameter('value', $value);
					break;
			}
		}

		$query->andWhere($query->expr()->in('D.id', $subQuery->getDQL()));

		if (!empty($folders)) 
		{
			$query->join('D.folder', 'DF');
			if (count($folders) > 1)
			{
				$query->andWhere($query->expr()->in('D.folder', $folders). ' OR '.$query->expr()->in('B.Target_Folder', $folders));
			}
			else {
				$query->andWhere('D.folder = :folder OR B.Target_Folder = :folder');
				$query->setParameter('folder', $folders[0]);
			}
			$query->andWhere('DF.Del = false');
			$query->andWhere('DF.Inactive = false');
		}
		elseif (!empty($libraries))
		{
			$query->join('D.folder', 'DF')
				->join('DF.Library', 'L')
				->andWhere('L.Trash = false')
				->andWhere('DF.Del = false')
				->andWhere('DF.Inactive = false');
			if (count($libraries) > 1)
			{
				$query->andWhere($query->expr()->in('DF.Library', $libraries));
			}
			else {
				$query->andWhere('DF.Library = :lib_id');
				$query->setParameter('lib_id', $libraries[0]);
			}
		}
		
		if (!empty($doctypes) && count($doctypes) > 0) 
		{
			$query->join('D.DocType', 'DT');
			if (count($doctypes) > 1) {
				$query->andWhere($query->expr()->in('DT.id', $doctypes));
			}
			else {
				$query->andWhere('DT.id = :doctype');
				$query->setParameter('doctype', $doctypes[0]);
			}
		}
		
		$output = array();
		$result = $query->getQuery()->getArrayResult();
		$len = count($result);
		if (!empty($result) && !empty($result[0])) {
			for ($x = 0; $x < $len; $x++) {
				$output[] = $result[$x]['id']; 
			}
		}
		return $output;
	}

	/**
	 * @param integer $document
	 * @param string $field_name
	 * @return string
	 */
	public function getFieldValue($document, $field_name)
	{
		$query = $this->createQueryBuilder('EV')
			->select(array('EV.fieldValue', 'O.Display_Option'))
			->join('EV.Field', 'F')
			->leftJoin('F.Options', 'O', 'WITH', '(F.id = O.Field AND O.Opt_Value = EV.fieldValue)')
			->where('EV.Document = :document')
			->andWhere('F.fieldName = :field OR F.fieldName = :fieldArr')
			->setParameters(array('document' => $document, 'field' => $field_name, 'fieldArr' => $field_name.'[]'))
			->addOrderBy('EV.order', 'ASC')
			->getQuery();
		
		$result = $query->getArrayResult();
		if (!empty($result[0])) 
		{
			return !empty($result[0]['fieldValue']) ? (!empty($result[0]['Display_Option']) ? $result[0]['Display_Option'] : $result[0]['fieldValue']) : '';
		}
		return '';
	}
	
	/**
	 * Get particular fields value in a document
	 * 
	 * @param integer $document
	 * @param array $fields
	 * @param boolean $return_obj
	 * @return mixed
	 */
	public function getDocumentFieldsValue($document, $fields, $return_obj = false)
	{
		$query = $this->createQueryBuilder('EV')
			->join('EV.Field', 'F')
			->join('EV.Document', 'D')
			->where('EV.Document = :document')
			->andWhere('D.Trash = false AND D.Archived = false')
			->setParameter('document', $document);
		if ($return_obj === false)
		{
			$query->select(array('EV.fieldValue', 'F.fieldName', 'F.fieldType', 'F.multiSeparator',  'F.id'));
		}

		if (count($fields > 1)) 
		{
			$query->andWhere($query->expr()->in('F.fieldName', $fields));
		}
		else {
			$query->andWhere('F.fieldName = :field')
				->setParameter('field', $fields[0]);
		}
		
		$result = $query->getQuery()->getResult();
		
		return !empty($result) ? $result : array();
	}
	
	/**
	 * Get a field value(s) base on provided criteria in particular document/folder/library or all
	 * 
	 * @param array $criteria
	 * @param string $field
	 * @param integer $library
	 * @param integer $folder
	 * @param integer $document
	 * @return mixed
	 */
	public function getFieldValuesByCriteria($criteria, $field, $library = null, $folder = null, $document = null)
	{
		$q = $this->createQueryBuilder('FEV')
			->join('FEV.Document', 'D')
			->join('FEV.Field', 'FLD')
			->select('D.id')
			->where('D.Archived = false');

		if (!empty($document)) 
		{
			$q->andWhere("D.id = '{$document}'");
		}
		elseif (!empty($folder)) 
		{
			$q->join('D.folder', 'FL')
				->andWhere("FL.id = '{$folder}'");
		}
		elseif (!empty($library))
		{
			$q->join('D.folder', 'FL')
				->join('FL.Library', 'L')
				->andWhere("L.id = '{$library}'")
				->andWhere('L.Trash = false');
		}
		
		$keys = array_keys($criteria);
		$values = array_values($criteria);
		if (count($criteria) > 1) 
		{
			$q->andWhere($q->expr()->in('FLD.fieldName', $keys))
				->andWhere($q->expr()->in($q->expr()->trim('FEV.fieldValue'), $values));
		}
		else {
			$q->andWhere("FLD.fieldName = '{$keys[0]}'")
				->andWhere("FEV.fieldValue = '{$values[0]}'");
		}
		
		$query = $this->createQueryBuilder('EV')
			->join('EV.Field', 'F')
			->select(array('DISTINCT(EV.fieldValue) AS fieldValue', 'F.fieldType', 'IDENTITY(EV.Document) AS Document'))
			->where('F.fieldName = :retfield')
			->setParameter('retfield', $field);

		$query->andWhere($query->expr()->in('EV.Document', $q->getDQL()));
		
		$result = $query->getQuery()->getResult();
		return $result;
	}
	
	/**
	 * Get all values for fields in particular subform
	 * 
	 * @param integer $subform
	 * @return mixed
	 */
	public function getSubformFieldValues($subform)
	{
		$query = $this->createQueryBuilder('FEV')
			->join('FEV.Field', 'F')
			->where('F.Subform = :subform')
			->addOrderBy('FEV.order', 'ASC')
			->setParameter('subform', $subform)
			->getQuery();
		
		$result = $query->getResult();
		
		return $result;
	}
	
	/**
	 * Get application field values
	 * 
	 * @param string $field
	 * @return array
	 */
	public function getAppFieldValues($field)
	{
		$query = $this->createQueryBuilder('V')
			->select('V.fieldValue AS fvalue, IDENTITY(V.Document) AS docid')
			->where('V.Field = :field')
			->addOrderBy('V.order', 'ASC')
			->setParameter('field', $field)
			->getQuery();
		
		$result = $query->getArrayResult();
		return $result;
	}
	
	/**
	 * Delete all document field values
	 * 
	 * @param string $docid
	 */
	public function deleteAllValues($docid)
	{
		$query = $this->createQueryBuilder('V')
			->delete()
			->where('V.Document = :doc')
			->setParameter('doc', $docid)
			->getQuery();
		
		$query->execute();
	}
	
	/**
	 * Delete specified field values
	 * 
	 * @param string $field
	 */
	public function deleteFieldRecords($field)
	{
		$query = $this->createQueryBuilder('V')
			->delete()
			->where('V.Field = :field')
			->setParameter('field', $field)
			->getQuery();
		
		$query->execute();
	}
	
	/**
	 * Fetch (imported) application document texts
	 * empty $app means all documents
	 * 
	 * @param string $app
	 * @return array
	 */
	public function fetchDocumentTexts($app = null)
	{
		$query = $this->createQueryBuilder('V')
			->select(array('V.id', 'IDENTITY(V.Document) AS Doc_Id', 'IDENTITY(V.Field) AS Field_Id', 'V.fieldValue'))
			->join('V.Document', 'D')
			->where('D.Trash = false')
			->andWhere('D.application IS NOT NULL')
			->addOrderBy('V.Document', 'ASC')
			->addOrderBy('V.order', 'ASC');
		
		if (!empty($app))
		{
			$query->andWhere('D.application = :appid')
				->setParameter('appid', $app);
		}
		
		$result = $query->getQuery()->getArrayResult();
		if (!empty($result[0]))
		{
			return $result;
		}
		
		return array();
	}
}