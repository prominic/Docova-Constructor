<?php

namespace Docova\DocovaBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * FormGroupValuesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FormGroupValuesRepository extends EntityRepository
{
	/**
	 * Get group field value
	 *
	 * @param integer $document
	 * @param string $field_name
	 * @return string
	 */
	public function getFieldValue($document, $field_name)
	{
		$query = $this->createQueryBuilder('EV')
			->select('G.displayName')
			->join('EV.Field', 'F')
			->join('EV.fieldValue', 'G')
			->where('EV.Document = :document')
			->andWhere('F.fieldName = :field OR F.fieldName = :fieldArr')
			->setParameter('document', $document)
			->setParameter('field', $field_name)
			->setParameter('fieldArr', $field_name.'[]')
			->getQuery();
	
		$result = $query->getArrayResult();
		if (!empty($result[0]))
		{
			return !empty($result[0]['displayName']) ? $result[0]['displayName'] : '';
		}
		return '';
	}
	
	/**
	 * Get particular fields value in a document
	 *
	 * @param integer $document
	 * @param array $fields
	 * @param boolean $return_obj
	 * @return mixed
	 */
	public function getDocumentFieldsValue($document, $fields, $return_obj = false)
	{
		$query = $this->createQueryBuilder('EV')
			->join('EV.Field', 'F')
			->where('EV.Document = :document')
			->addOrderBy('EV.order', 'ASC')
			->setParameter('document', $document);
	
		if ($return_obj === false)
		{
			$query->join('EV.fieldValue', 'G');
			$query->select(array('G.displayName AS fieldValue', 'F.fieldName', 'F.fieldType','F.multiSeparator',  'F.id'));
		}
	
		if (count($fields > 1))
		{
			$query->andWhere($query->expr()->in('F.fieldName', $fields));
		}
		else {
			$query->andWhere('F.fieldName = :field')
			->setParameter('field', $fields[0]);
		}
	
		$result = $query->getQuery()->getResult();
		return !empty($result) ? $result : array();
	}
	
	/**
	 * Get application field values
	 *
	 * @param string $field
	 * @return array
	 */
	public function getAppFieldValues($field)
	{
		$query = $this->createQueryBuilder('V')
			->join('V.feildValue', 'G')
			->select('G.displayName AS fvalue, IDENTITY(V.Document) AS docid')
			->where('V.Field = :field')
			->setParameter('field', $field)
			->addOrderBy('V.order', 'ASC')
			->getQuery();
	
		$result = $query->getArrayResult();
		return $result;
	}
	
	/**
	 * Delete all document field values
	 *
	 * @param string $docid
	 */
	public function deleteAllValues($docid)
	{
		$query = $this->createQueryBuilder('V')
			->delete()
			->where('V.Document = :doc')
			->setParameter('doc', $docid)
			->getQuery();
	
		$query->execute();
	}
	
	/**
	 * Delete specified field values
	 *
	 * @param string $field
	 */
	public function deleteFieldRecords($field)
	{
		$query = $this->createQueryBuilder('V')
			->delete()
			->where('V.Field = :field')
			->setParameter('field', $field)
			->getQuery();
	
		$query->execute();
	}

	/**
	 * Get document readers or authors (DocReaders if $type is reader, otherwise DocAuthors)
	 * 
	 * @param string $document
	 * @param string $type
	 * @return array
	 */
	public function getDocNames($document, $type)
	{
		$query = $this->createQueryBuilder('G')
			->join('G.fieldValue', 'V')
			->join('G.Field', 'F')
			->select(array('G.id','V.Role'))
			->where('G.Document = :doc')
			->andWhere('F.nameFieldType = :type')
			->setParameter('doc', $document)
			->setParameter('type', $type == 'reader' ? 2 : 3)
			->getQuery();
		
		$result = $query->getArrayResult();
		if (!empty($result))
		{
			return $result;
		}
		
		return array();
	}
}
