<?php

namespace Docova\DocovaBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * FormNameValuesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FormNameValuesRepository extends EntityRepository
{
	
	/**
	 * Custom search in form element values base on the entered operand
	 *
	 * @param integer $fields
	 * @param string $operand
	 * @param string $value
	 * @param array $filters
	 * @param array $doctypes
	 * @return array
	 */
	public function customSearch($fields, $operand, $value, $filters, $doctypes = array(),$defaultFormat="m/d/Y",$type="text")
	{
		if (empty($fields) || empty($operand) || empty($value)) { return array(); }
		
		if (!empty($filters['folder']))
		{
			$folders = array($filters['folder']->getId());
			if (!empty($filters['include_subfolders']) && $filters['include_subfolders'] === true)
			{
				$subfolders = $this->_em->getRepository('DocovaBundle:Folders')->getDescendants($filters['folder']->getPosition(), $filters['folder']->getLibrary()->getId(), null, true);
				foreach ($subfolders as $f)
				{
					$folders[] = $f['id'];
				}
				unset($subfolders, $f);
			}
		}
		elseif (!empty($filters['libraries']))
		{
			$libraries = explode(',', $filters['libraries']);
		}
		else {
			return array();
		}
		
		$query = $this->_em->createQueryBuilder()
			->select('DISTINCT(D.id) AS id')
			->from('Docova\DocovaBundle\Entity\Documents', 'D')
			->leftJoin('D.Bookmarks', 'B')
			->where('D.Trash = false AND D.Archived = false');

		$fields = explode(';', $fields);
		$fieldList = $this->getSQLList($fields);
		
		if ($operand == 'CONTAINS')
		{
		   $nameQuery = "LIKE '".$value."'";   
		}
		elseif ($operand == 'NOT CONTAINS'){
			$nameQuery = "NOT LIKE '".$value."'";
		}		
		else{
			$nameQuery = "= '".$value."'";
		}
		
		$SQL = <<< EOT
			SELECT DISTINCT doc_id FROM tb_form_name_values
			JOIN tb_user_accounts acc on acc.id = Field_Value
			WHERE field_id IN $fieldList
			AND user_name_dn_abbreviated $nameQuery
			UNION
			SELECT DISTINCT doc_id FROM tb_form_group_values
			JOIN tb_user_roles r on r.id = Field_Value
			WHERE field_id IN $fieldList
			AND group_name $nameQuery
			
EOT;
		$nameResults = $this->_em->getConnection()->fetchAll($SQL);
		$nameMatches=array();
		foreach($nameResults as $nameResult){
			$nameMatches[] = $nameResult['doc_id'];
		}
		$query->andWhere('D.id IN '.$this->getSQLList($nameMatches));
		 
		if (!empty($folders))
		{
			$query->join('D.folder', 'DF');
			if (count($folders) > 1)
			{
				$query->andWhere($query->expr()->in('D.folder', $folders). ' OR '.$query->expr()->in('B.Target_Folder', $folders));
			}
			else {
				$query->andWhere('D.folder = :folder OR B.Target_Folder = :folder');
				$query->setParameter('folder', $folders[0]);
			}
			$query->andWhere('DF.Del = false');
			$query->andWhere('DF.Inactive = false');
		}
		elseif (!empty($libraries))
		{
			$query->join('D.folder', 'DF')
				->join('DF.Library', 'L')
				->andWhere('L.Trash = false')
				->andWhere('DF.Del = false')
				->andWhere('DF.Inactive = false');
			if (count($libraries) > 1)
			{
				$query->andWhere($query->expr()->in('DF.Library', $libraries));
			}
			else {
				$query->andWhere('DF.Library = :lib_id');
				$query->setParameter('lib_id', $libraries[0]);
			}
		}
		
		if (!empty($doctypes) && count($doctypes) > 0)
		{
			$query->join('D.DocType', 'DT');
			if (count($doctypes) > 1) {
				$query->andWhere($query->expr()->in('DT.id', $doctypes));
			}
			else {
				$query->andWhere('DT.id = :doctype');
				$query->setParameter('doctype', $doctypes[0]);
			}
		}
		
		$output = array();
		
		// echo "<br>". $query->getQuery()->getDQL();
		$result = $query->getQuery()->getArrayResult();
		$len = count($result);
		if (!empty($result) && !empty($result[0])) {
			for ($x = 0; $x < $len; $x++) {
				$output[] = $result[$x]['id'];
			}
		}
		return $output;
	}
	
	/**
	 * Get name field value
	 * 
	 * @param integer $document
	 * @param string $field_name
	 * @return string
	 */
	public function getFieldValue($document, $field_name)
	{
		$query = $this->createQueryBuilder('EV')
			->select('N.userNameDnAbbreviated')
			->join('EV.Field', 'F')
			->join('EV.fieldValue', 'N')
			->where('EV.Document = :document')
			->andWhere('F.fieldName = :field OR F.fieldName = :fieldArr')
			->setParameter('document', $document)
			->setParameter('field', $field_name)
			->setParameter('fieldArr', $field_name.'[]')
			->getQuery();
	
		$result = $query->getArrayResult();
		if (!empty($result[0]))
		{
			return !empty($result[0]['userNameDnAbbreviated']) ? $result[0]['userNameDnAbbreviated'] : '';
		}
		return '';
	}
	
	/**
	 * Get particular fields value in a document
	 *
	 * @param integer $document
	 * @param array $fields
	 * @param boolean $return_obj
	 * @return mixed
	 */
	public function getDocumentFieldsValue($document, $fields, $return_obj = false)
	{
		$query = $this->createQueryBuilder('EV')
			->join('EV.Field', 'F')
			->where('EV.Document = :document')
			->addOrderBy('EV.order', 'ASC')
			->setParameter('document', $document);
	
		if ($return_obj === false)
		{
			$query->join('EV.fieldValue', 'N');
			$query->select(array('N.userNameDnAbbreviated AS fieldValue', 'F.fieldName', 'F.fieldType', 'F.multiSeparator', 'F.id'));
		}
	
		if (count($fields > 1))
		{
			$query->andWhere($query->expr()->in('F.fieldName', $fields));
		}
		else {
			$query->andWhere('F.fieldName = :field')
			->setParameter('field', $fields[0]);
		}
	
		$result = $query->getQuery()->getResult();
		return !empty($result) ? $result : array();
	}
	
	/**
	 * Get application field values
	 *
	 * @param string $field
	 * @return array
	 */
	public function getAppFieldValues($field)
	{
		$query = $this->createQueryBuilder('V')
			->join('V.feildValue', 'N')
			->select('N.userNameDnAbbreviated AS fvalue, IDENTITY(V.Document) AS docid')
			->where('V.Field = :field')
			->setParameter('field', $field)
			->addOrderBy('V.order', 'ASC')
			->getQuery();
	
		$result = $query->getArrayResult();
		return $result;
	}
	
	/**
	 * Delete all document field values
	 *
	 * @param string $docid
	 */
	public function deleteAllValues($docid)
	{
		$query = $this->createQueryBuilder('V')
			->delete()
			->where('V.Document = :doc')
			->setParameter('doc', $docid)
			->getQuery();
	
		$query->execute();
	}
	
	/**
	 * Delete specified field values
	 *
	 * @param string $field
	 */
	public function deleteFieldRecords($field)
	{
		$query = $this->createQueryBuilder('V')
			->delete()
			->where('V.Field = :field')
			->setParameter('field', $field)
			->getQuery();
	
		$query->execute();
	}

	/**
	 * Create GUID
	 * 
	 * @return string
	 */
	protected function getGUID(){
		mt_srand((double)microtime()*10000);//optional for php 4.2.0 and up.
		$charid = strtoupper(md5(uniqid(rand(), true)));
		$hyphen = chr(45);// "-"
		$uuid = chr(123)// "{"
		.substr($charid, 0, 8).$hyphen
		.substr($charid, 8, 4).$hyphen
		.substr($charid,12, 4).$hyphen
		.substr($charid,16, 4).$hyphen
		.substr($charid,20,12)
		.chr(125);// "}"
		return $uuid;
	}

	/**
	 * Generate a SQL query list
	 * 
	 * @param array $data
	 * @return string
	 */
	protected function getSQLList(array $data){
		$list = "(";
		foreach($data as $index=>$value){
			if ($index!=0){
				$list.=",";
			}
			$list.="'".$value."'";
		}
		$list.=")";
		
		if ($list=="()") {
			//dont return an empty list or the query will fail
			return "('".$this->getGUID()."')";
		}
		return $list;
	}

	/**
	 * Get document readers or authors (DocReaders if $type is reader, otherwise DocAuthors)
	 * 
	 * @param string $document
	 * @param string $type
	 * @return array
	 */
	public function getDocNames($document, $type)
	{
		$output = array();
		$query = $this->createQueryBuilder('N')
			->join('N.fieldValue', 'V')
			->join('N.Field', 'F')
			->select('IDENTITY(N.fieldValue) AS fieldValue')
			->where('N.Document = :doc')
			->andWhere('F.nameFieldType = :type')
			->setParameter('doc', $document)
			->setParameter('type', $type == 'reader' ? 2 : 3)
			->getQuery();
		
		$result = $query->getResult();
		if (!empty($result))
		{
			foreach ($result as $name) {
				$output[] = $name['fieldValue'];
			}
			return $output;
		}
		
		return array();
	}
}
