<?php

namespace Docova\DocovaBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * FoldersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FoldersRepository extends EntityRepository
{
	/**
	 * Similar to findOneBy except for the output which is HYDRATE_ARRAY type or NULL
	 * 
	 * @param array $criteria
	 * @return array|null
	 */
	public function getOneBy($criteria = array())
	{
		if (!empty($criteria)) 
		{
			$query = $this->createQueryBuilder('F')
				->leftJoin('F.parentfolder', 'PF')
				->join('F.Library', 'L')
				->addSelect('PF')
				->addSelect('L.id AS Library')
				->where('F.id IS NOT NULL')
				->andWhere('L.Trash = false');
				foreach ($criteria as $field => $value) {
					$query->andWhere("F.$field = :v$field")
						->setParameter("v$field", $value);
				}
			
			$result = $query->getQuery()->getOneOrNullResult(\Doctrine\ORM\AbstractQuery::HYDRATE_ARRAY);
			return $result;
		}
		return null;
	}
	
	/**
	 * Get one folder and linked library objects in one query
	 * 
	 * @param array $criteria
	 * @return Folders|NULL
	 */
	public function getOneFolderAndLibrary($criteria = array())
	{
		$query = $this->createQueryBuilder('F')
			->join('F.Library', 'L')
			->addSelect('L')
			->where('L.Trash = 0');
		foreach ($criteria as $field => $value)
		{
			$query->andWhere("F.$field = :v$field")
				->setParameter("v$field", $value);
		}
		
		try {
			$result = $query->getQuery()->getOneOrNullResult();
			return $result;
		}
		catch (\Exception $e) {
			return null;
		}
		return null;
	}

	/**
	 * Similar to findBy except for the output whill be HYDRATE_ARRAY type or NULL
	 *
	 * @param array $criteria
	 * @param \Docova\DocovaBundle\Entity\UserAccounts $user
	 * @return array|null
	 */
	public function getSubfolders($library, $user, $folder = null, $isAdmin = false)
	{
		$conn = $this->_em->getConnection();
		$driver = $conn->getDriver()->getName();
		if ($driver == 'pdo_mysql') 
		{
			if (!empty($folder))
			{
				$query = 'SELECT `F`.`id`, `F`.`Folder_Name`, `F`.`Position`, `F`.`Icon_Normal`, `F`.`Icon_Selected`, `F`.`Parent_Id` FROM `tb_library_folders` AS `F`
			    	  WHERE `F`.`Del` = 0 AND `F`.`Sub_Trash` = 0 AND `F`.`Library_Id` = ? AND `F`.`Parent_Id` = ? ORDER BY `F`.`Position` ASC';
				$folders = $conn->fetchAll($query, array($library, $folder));
			}
			else {
				$query = 'SELECT `F`.`id`, `F`.`Folder_Name`, `F`.`Position`, `F`.`Icon_Normal`, `F`.`Icon_Selected`, `F`.`Parent_Id` FROM `tb_library_folders` AS `F`
			    	  WHERE `F`.`Del` = 0 AND `F`.`Sub_Trash` = 0 AND `F`.`Library_Id` = ? AND `F`.`Parent_Id` IS NULL ORDER BY `F`.`Position` ASC';
				$folders = $conn->fetchAll($query, array($library));
			}
		}
		elseif ($driver == 'pdo_sqlsrv') 
		{
			if (!empty($folder))
			{
				$query = 'SELECT [F].[id], [F].[Folder_Name], [F].[Position], [F].[Icon_Normal], [F].[Icon_Selected], [F].[Parent_Id] FROM [tb_library_folders] AS [F]
			    	  WHERE [F].[Del] = 0 AND [F].[Sub_Trash] = 0 AND [F].[Library_Id] = ? AND [F].[Parent_Id] = ? ORDER BY [F].[Position] ASC';
				$folders = $conn->fetchAll($query, array($library, $folder));
			}
			else {
				$query = 'SELECT [F].[id], [F].[Folder_Name], [F].[Position], [F].[Icon_Normal], [F].[Icon_Selected], [F].[Parent_Id] FROM [tb_library_folders] AS [F]
			    	  WHERE [F].[Del] = 0 AND [F].[Sub_Trash] = 0 AND [F].[Library_Id] = ? AND [F].[Parent_Id] IS NULL ORDER BY [F].[Position] ASC';
				$folders = $conn->fetchAll($query, array($library));
			}
		}
		
		if (!empty($folders) && count($folders) > 0) 
		{
			if ($isAdmin === false) 
			{
				$folders = $this->checkFoldersACL($library, $folders, $user);
			}
			return $folders;
		}
		return null;

/* 		if (!empty($criteria))
		{
			$query = $this->createQueryBuilder('F')
			->leftJoin('F.parentfolder', 'PF')
			->join('F.Library', 'L')
			->addSelect('PF')
			->addSelect('L')
			->where('F.id IS NOT NULL');
			foreach ($criteria as $field => $value) {
				if ($value === null) {
					$query->andWhere("F.$field IS NULL");
				}
				else {
					$query->andWhere("F.$field = :v$field")
					->setParameter("v$field", $value);
				}
			}
				
			$result = $query->getQuery()->getArrayResult();
			if (!empty($result) && count($result) > 0) 
			{
				return $result;
			}
		}
		return null;
 */	
	}

	/**
	 * Load all folders and subfolders in specific library
	 * 
	 * @param string $library
	 * @param \Docova\DocovaBundle\Entity\UserAccounts $user
	 * @param boolean $isAdmin [optional(false)]
	 * @return array
	 */
    public function getAllFolders($library, $user, $isAdmin = false)
    {

    	$conn = $this->_em->getConnection();
    	$driver = $conn->getDriver()->getName();
    	if ($driver == 'pdo_mysql') 
    	{
    	$query = "SELECT `F`.`id`, `F`.`Folder_Name`, `F`.`Position`, `F`.`Icon_Normal`, `F`.`Icon_Selected`, `F`.`Parent_Id` FROM `tb_library_folders` AS `F`
    			 WHERE `F`.`Del` = 0 AND `F`.`Sub_Trash` = 0 AND `F`.`Library_Id` = ? ORDER BY `F`.`Position` ASC";
    	}
    	elseif ($driver == 'pdo_sqlsrv') {
    		$query = "SELECT [F].[id], [F].[Folder_Name], [F].[Position], [F].[Icon_Normal], [F].[Icon_Selected], [F].[Parent_Id] FROM [tb_library_folders] AS [F]
    			 WHERE [F].[Del] = 0 AND [F].[Sub_Trash] = 0 AND [F].[Library_Id] = ? ORDER BY [F].[Position] ASC";
    	}
    	$folders = $conn->fetchAll($query, array($library));
    	if (!empty($folders) && count($folders) > 0) 
    	{
    		if ($isAdmin === false) 
    		{
    			$folders = $this->checkFoldersACL($library, $folders, $user);
    		}
    		return $folders;
    	}
    	return array();
/*   	
    	$query = $this->createQueryBuilder('F')
    		->leftJoin('F.parentfolder', 'PF')
    		->join('F.Library', 'L')
    		->addSelect('L')
    		->addSelect('PF')
    		->where('F.Library = :library')
    		->andWhere('F.Del = false')
    		->andWhere('F.Inactive = 0')
    		->setParameter('library', $library)
    		->orderBy('F.Position', 'ASC')
    		->getQuery();
    	
    	$result = $query->getArrayResult();
    	return $result;

    	$qb = $this->createQueryBuilder('F')
    		->select('DISTINCT(F.id)');
    	$qb->join('\Docova\DocovaBundle\Entity\Folders', 'FF', 'WITH', 'F.Position LIKE CONCAT(FF.Position, \'%\')')
    		->where('FF.Del = true')
    		->andWhere("FF.Library = :library")
    		->andWhere("F.Library = :library")
    		->setParameter('library', $library);
    	
    	$deleted_folders = $qb->getQuery()->getArrayResult();
    	
    	$query = $this->createQueryBuilder('F')
    		->join('F.Library', 'L')
    		->leftJoin('F.parentfolder', 'PF')
    		->addSelect('L')
    		->addSelect('PF')
    		->where('F.Del = false')
    		->andWhere('F.Library = :library')
    		->setParameter('library', $library)
    		->orderBy('F.Position', 'ASC');
    	if (!empty($deleted_folders)) {
    		if (count($deleted_folders) > 1)
    		{
    			foreach ($deleted_folders as $index => $value)
    			{
    				if (is_array($value)) 
    				{
    					$deleted_folders[$index] = !empty($value['id']) ? $value['id'] : $value[1];
    				}
    			}
    			$query->andWhere($query->expr()->notIn('F.id', $deleted_folders));
    		}
    		else {
    			$query->andWhere('F.id != :delFolder ')
    				->setParameter('delFolder', $deleted_folders[0]);
    		}
    	}
     	$result = $query->getQuery()->getArrayResult();
*/
    }
    
    /**
     * Get all synched folders for current user
     * 
     * @param integer $user
     * @return mixed|boolean
     */
    public function getSyncedFoldres($user)
    {
    	$query = $this->createQueryBuilder('F')
    		->join('F.Library', 'L')
    		->join('F.SynchUsers', 'SU')
    		->addSelect('L')
    		->where('F.Synched = true')
    		->andWhere('L.Trash = false')
    		->andWhere('F.Del = false')
    		->andWhere('F.Inactive = 0')
    		->andWhere('SU.id = :user')
    		->setParameter('user', $user)
    		->getQuery();
    	
    	$result = $query->getResult();
    	if (!empty($result)) 
    	{
    		return $result;
    	}
    	
    	return false;
    }
    
    /**
     * Get all synch users for particular folder in array
     * 
     * @param string $folder
     * @return array
     */
    public function getFolderSynchUsers($folder)
    {
    	$query = $this->createQueryBuilder('F')
    		->join('F.SynchUsers', 'FSU')
    		->select('FSU.id')
    		->where('F.id = :folder')
    		->setParameter('folder', $folder)
    		->getQuery();
    	
    	$result = $query->getArrayResult();
    	return $result;
    }
    
    /**
     * Get all applicable doctypes for particular folder in array
     * 
     * @param string $folder
     * @return array
     */
    public function getFolderDocTypes($folder) 
    {
    	$query = $this->createQueryBuilder('F')
    		->join('F.ApplicableDocType', 'FAD')
    		->select('FAD.id')
    		->where('F.id = :folder')
    		->setParameter('folder', $folder)
    		->getQuery();
    	
    	$result = $query->getArrayResult();
    	return $result;
    }
    
    /**
     * Get default perspective ID for a folder
     * 
     * @param string $folder
     * @return mixed
     */
    public function getPerspectiveId($folder)
    {
    	$query = $this->createQueryBuilder('F')
    		->join('F.Default_Perspective', 'P')
    		->select('P.id')
    		->where('F.id = :folder')
    		->setParameter('folder', $folder)
    		->getQuery();
    	
    	$result = $query->getOneOrNullResult(\Doctrine\ORM\AbstractQuery::HYDRATE_ARRAY);
    	return $result;
    }
    
    /**
     * Check if folder exists in parent folder children
     * 
     * @param integer $parent_folder [optional()]
     * @param string $folder_name
     * @param integer $library [optional()]
     * @return boolean|array
     */
    public function folderExists($parent_folder = null, $folder_name, $library = null)
    {
    	$query = $this->createQueryBuilder('F')
    		->select('COUNT(F.id)')
    		->where('F.Folder_Name = :fname')
    		->andWhere('F.Del = false')
    		->setParameter('fname', $folder_name);

    	if (!empty($parent_folder)) 
    	{
    		$query->andWhere('F.parentfolder = :pfolder')
    			  ->setParameter('pfolder', $parent_folder);
    	}
    	elseif (!empty($library)) {
    		$query->join('F.Library', 'L')
    			->andWhere('F.Library = :library')
    			->andWhere('F.parentfolder IS NULL')
    			->andWhere('L.Trash = false')
    			->setParameter('library', $library);
    	}
    	
   		$result = $query->getQuery()->getSingleScalarResult();
   		if (empty($result)) 
    	{
   			return false;
   		}
   		return true;
    }

    /**
     * Check if folder by ID exists in parent folder children
     *
     * @param integer $parent_folder [optional()]
     * @param string $folder_name
     * @param integer $library [optional()]
     * @return boolean|array
     */
    public function folderByIdExists($parent_folder = null, $folder, $library = null)
    {
    	$query = $this->createQueryBuilder('F')
    		->select('COUNT(F.id)')
	    	->where('F.id = :folder')
    		->setParameter('folder', $folder);
    
    	if (!empty($parent_folder))
    	{
    		$query->andWhere('F.parentfolder = :pfolder')
    			->setParameter('pfolder', $parent_folder);
    	}
    	elseif (!empty($library)) {
    		$query->join('F.Library', 'L')
    			->andWhere('F.Library = :library')
	    		->andWhere('F.parentfolder IS NULL')
	    		->andWhere('L.Trash = false')
	    		->setParameter('library', $library);
    	}
    	 
    	$result = $query->getQuery()->getSingleScalarResult();
    	if (empty($result))
    	{
    		return false;
    	}
    	return true;
    }

    /**
     * Get all descendants of a folder (not sorted)
     * 
     * @param string $foldre_position
     * @param string $library
     * @param integer $include_folder [optional()]
     * @param boolean $return_array [optional(false)]
     * @return mixed
     */
    public function getDescendants($folder_position, $library, $include_folder = null, $return_array = false)
    {
    	$query = $this->createQueryBuilder('F')
    		->join('F.Library', 'L')
    		->where('L.Trash = false');
    	$query->andWhere($query->expr()->like('F.Position', 
    			$query->expr()->literal("$folder_position.%")
	    	))
    		->andWhere('F.Library = :library')
    		->setParameter('library', $library);
    	
    	if (!empty($include_folder)) 
    	{
    		$query->orWhere('F.id = :folder')
    			->setParameter('folder', $include_folder);
    	}
    	
    	$query->orderBy('F.Position', 'ASC');
    	
    	if ($return_array === true) 
    	{
    		$query->leftJoin('F.parentfolder', 'PF')
    			->select(array('F.id', 'PF.id AS Parent', 'PF.Position AS pPosition'));
    		$result = $query->getQuery()->getResult(\Doctrine\ORM\AbstractQuery::HYDRATE_ARRAY);
    	}
		else {
    		$result = $query->getQuery()->getResult();
		}
    	return $result;
    }
    
    /**
     * Get all ancestors for a folder
     * 
     * @param string $folder_position
     * @param string $library
     * @param string $include_folder [optional()]
     * @param boolean $return_array [optional(false)]
     * @return mixed
     */
    public function getAncestors($folder_position, $library, $include_folder = null, $return_array = false)
    {
    	$positions = explode('.', $folder_position);
    	if (count($positions) > 0) 
    	{
    		if (count($positions) == 1) {
    			unset($positions);
    		}
    		else {
	    		$p = '';
		    	$len = count($positions) - 1;
		    	for ($x = 0; $x < $len; $x++) {
		    		$temp = $positions[$x];
		    		$positions[$x] = $p . $positions[$x];
		    		$p = $p . $temp . '.'; 
		    	}
		    	unset($positions[$len]);
    		}
	    	
	    	$query = $this->createQueryBuilder('F')
	    		->join('F.Library', 'L')
	    		->where('F.Del = false')
	    		->andWhere('L.Trash = false')
	    		->andWhere('F.Inactive = 0')
	    		->andWhere('F.Library = :library')
	    		->setParameter('library', $library)
	    		->orderBy('F.Position', 'ASC');
	    	if (!empty($positions) && count($positions) > 1) 
	    	{
	    		$query->andWhere($query->expr()->in('F.Position', $positions));
	    	}
	    	elseif (!empty($positions))
	    	{
	    		$query->andWhere('F.Position = :position')
	    			->setParameter('position', $positions[0]);
	    	}
	    	elseif (empty($include_folder)) {
	    		return null;
	    	}
	    	
	    	if (!empty($include_folder)) 
	    	{
	    		if (empty($positions)) 
	    		{
	    			$query->andWhere('F.id = :folder');
	    		}
	    		else {
	    			$query->orWhere('F.id = :folder');
	    		}
	    		$query->setParameter('folder', $include_folder);
	    	}
	    	
	    	if ($return_array === true) 
	    	{
	    		$query->leftJoin('F.parentfolder', 'PF')
    				->select(array('F.id', 'PF.id AS Parent', 'PF.Position AS pPosition'));
	    		$result = $query->getQuery()->getResult(\Doctrine\ORM\AbstractQuery::HYDRATE_ARRAY);
	    	}
	    	else {
	    		$result = $query->getQuery()->getResult();
	    	}
	    	
	    	return $result;
    	}
    }
    
    /**
     * Check if a folder exists in all descendants of a particular folder
     * 
     * @param string $folder_position
     * @param string $folder
     * @param string $library
     * @return boolean
     */
    public function folderExistsInDescendants($folder_position, $folder, $library)
    {
    	$query = $this->createQueryBuilder('F')
    		->join('F.Library', 'L')
    		->select('COUNT(F.id)')
    		->where('L.Trash = false');
    	$query->andWhere($query->expr()->like('F.Position',
    			$query->expr()->literal("$folder_position%")
    		))
    		->andWhere('F.id = :folder')
    		->andWhere('F.Library = :library')
    		->setParameters(array('folder' => $folder, 'library' => $library));
    	 
    	$result = $query->getQuery()->getSingleScalarResult();
    	if (empty($result)) 
    	{
    		return false;
    	}
    	return true;
    }
    
    /**
     * Set all subfolders of the deleted folder as inactive
     * 
     * @param string $position
     * @param string $library
     * @return boolean
     */
    public function setChildrenInactive($position, $library)
    {
    	$query = $this->createQueryBuilder('F')
    		->update()
    		->set('F.Inactive', '1 + F.Inactive')
    		->where('F.Del = false');
    	$query->andWhere($query->expr()->like('F.Position',
    		$query->expr()->literal("$position.%")
    	))
    	->andWhere('F.Library = :library')
    	->setParameter('library', $library);
		
    	$result = $query->getQuery()->execute();
    	if ($result > 0) 
    	{
    		return true;
    	}
    	return false;
    }
    
    /**
     * Restore all inactive subfolders of a deleted folder
     * 
     * @param string $position
     * @param string $library
     * @return boolean
     */
    public function resetInactiveSubfolders($position, $library)
    {
    	$query = $this->createQueryBuilder('F')
	    	->update()
	    	->set('F.Inactive', 'F.Inactive - 1')
	    	->where('F.Del = false');
    	$query->andWhere($query->expr()->like('F.Position',
    			$query->expr()->literal("$position.%")
    	))
    	->andWhere('F.Library = :library')
    	->setParameter('library', $library);
    	
    	$result = $query->getQuery()->execute();
    	if ($result > 0)
    	{
    		return true;
    	}
    	return false;
    }
    
    /**
     * Get all deleted folders in particular library
     * 
     * @param string $library
     * @return array
     */
    public function getDeletedFolders($library)
    {
    	$conn = $this->_em->getConnection();
   		$query = 'SELECT DISTINCT F.id, F.Folder_Name, F.Folder_Name AS Doc_Title, F.Date_Created, F.Date_Updated, F.Position, F.Description, F.Icon_Normal, F.Icon_Selected, F.Del, F.Date_Deleted, F.Deleted_By, F.Library_Id, F.Parent_Id, L.Library_Title, U1.user_name_dn_abbreviated AS CreatedBy, U1.user_name_dn_abbreviated AS Author, U2.user_name_dn_abbreviated AS ModifiedBy
   				  FROM tb_library_folders AS F INNER JOIN tb_libraries AS L ON (F.Library_Id = L.id) INNER JOIN tb_user_accounts AS U1 ON (F.Created_By = U1.id) LEFT JOIN tb_user_accounts AS U2 ON (F.Updated_By = U2.id)
   					WHERE F.Del = 1 AND F.Library_Id = ? AND L.Trash = 0';
   		$result = $conn->fetchAll($query, array($library));
    	return $result;
    }
    
    /**
     * Check ACL for each folder
     * 
     * @param string $library
     * @param array $folders
     * @param \Docova\DocovaBundle\Entity\UserAccounts $user
     * @return array 
     */
    private function checkFoldersACL($library, $folders, $user)
    {
    	$output = array();
    	$conn = $this->_em->getConnection();
    	$driver = $conn->getDriver()->getName();
    	$user_array = "?,";
    	foreach ($user->getRoles() as $role) {
    		if ($role != 'ROLE_USER' && $role !== 'ROLE_ADMIN') 
    		{
    			$user_array .= "'$role',";
    		}
    	}
    	$user_array = substr_replace($user_array, '', -1);
    	foreach ($folders as $folder) {
    		$ancestors = $this->getAncestors($folder['Position'], $library, null, true);
    		if (!empty($ancestors) && count($ancestors) > 0)
    		{
    			$count = 0;
    			$insdie_pquery = '';
    			foreach ($ancestors as $pfolder) {
    				$insdie_pquery .= "'{$pfolder['id']}',";
    				$count++;
    			}
    			$insdie_pquery = !empty($insdie_pquery) ? substr_replace($insdie_pquery, '', -1) : '';
    			if ($driver == 'pdo_mysql') {
	    			$manager_q = "SELECT COUNT(DISTINCT(`ACE`.`id`)) FROM `acl_entries` AS `ACE` INNER JOIN `acl_object_identities` AS `ACO` ON (`ACE`.`object_identity_id` = `ACO`.`id`) INNER JOIN `acl_security_identities` AS `SI` ON (`ACE`.`security_identity_id` = `SI`.`id`)
    						  	  WHERE `ACE`.`mask` >= 128 AND `SI`.`identifier` IN ($user_array) AND `ACO`.`object_identifier` IN ($insdie_pquery)";
    			}
    			elseif ($driver == 'pdo_sqlsrv') {
    				$manager_q = "SELECT COUNT(DISTINCT([ACE].[id])) FROM [acl_entries] AS [ACE] INNER JOIN [acl_object_identities] AS [ACO] ON ([ACE].[object_identity_id] = [ACO].[id]) INNER JOIN [acl_security_identities] AS [SI] ON ([ACE].[security_identity_id] = [SI].[id])
    							  WHERE [ACE].[mask] >= 128 AND [SI].[identifier] IN ($user_array) AND [ACO].[object_identifier] IN ($insdie_pquery)";
    			}
    			$result = $conn->fetchArray($manager_q, array('Docova\DocovaBundle\Entity\UserAccounts-'.$user->getUsername()));
    			unset($manager_q);
    			if (!empty($result) && $result[0] > 0) {
    				$output[] = $folder;
    				continue;
    			}
    	
    			if ($driver == 'pdo_mysql') {
	    			$view_q = "SELECT COUNT(DISTINCT(`ACE`.`object_identity_id`)) FROM `acl_entries` AS `ACE` INNER JOIN `acl_object_identities` AS `ACO` ON (`ACE`.`object_identity_id` = `ACO`.`id`) INNER JOIN `acl_security_identities` AS `SI` ON (`ACE`.`security_identity_id` = `SI`.`id`)
    						   WHERE `ACE`.`mask` = 1 AND (`SI`.`identifier` IN ($user_array) OR `SI`.`identifier` = ?) AND `ACO`.`object_identifier` IN ($insdie_pquery)";
    			}
    			elseif ($driver == 'pdo_sqlsrv') {
    				$view_q = "SELECT COUNT(DISTINCT [ACE].[object_identity_id]) FROM [acl_entries] AS [ACE] INNER JOIN [acl_object_identities] AS [ACO] ON ([ACE].[object_identity_id] = [ACO].[id]) INNER JOIN [acl_security_identities] AS [SI] ON ([ACE].[security_identity_id] = [SI].[id])
							   WHERE [ACE].[mask] = 1 AND ([SI].[identifier] IN ($user_array) OR [SI].[identifier] = ?) AND [ACO].[object_identifier] IN ($insdie_pquery)";
    			}
    			$result = $conn->fetchArray($view_q, array('Docova\DocovaBundle\Entity\UserAccounts-'.$user->getUsername(), 'ROLE_USER'));
    			unset($view_q);
    			if (!empty($result) && $result[0] != $count) {
/*
    				if (!empty($folder['Parent_Id'])) {
    					$author_q = "SELECT COUNT(DISTINCT(`ACE`.`id`)) FROM `acl_entries` AS `ACE` INNER JOIN `acl_object_identities` AS `ACO` ON (`ACE`.`object_identity_id` = `ACO`.`id`) INNER JOIN `acl_security_identities` AS `SI` ON (`ACE`.`security_identity_id` = `SI`.`id`)
    								 WHERE `ACE`.`mask` = 2 AND `SI`.`identifier` = ? AND `ACO`.`object_identifier` = ?";
    					$result = $conn->fetchArray($author_q, array('Docova\DocovaBundle\Entity\UserAccounts-'.$userid, $folder['Parent_Id']));
    					unset($author_q);
    					if (empty($result) || $result[0] == 0)
    					{
    						continue;
    					}
    				}
    				else {
*/
    					continue;
//    				}
    			}
    		}
    		if ($driver == 'pdo_mysql') {
    			$query = "SELECT COUNT(DISTINCT(`ACE`.`id`)) FROM `acl_entries` AS `ACE` INNER JOIN `acl_object_identities` AS `ACO` ON (`ACE`.`object_identity_id` = `ACO`.`id`) INNER JOIN `acl_security_identities` AS `SI` ON (`ACE`.`security_identity_id` = `SI`.`id`)
				    	  WHERE ((`ACE`.`mask`= 1 AND (`SI`.`identifier` IN ($user_array) OR `SI`.`identifier` = ?)) OR (`ACE`.`mask` IN (2, 64, 128) AND `SI`.`identifier` IN ($user_array))) AND `ACO`.`object_identifier` = ?";
    		}
    		elseif ($driver == 'pdo_sqlsrv') {
    			$query = "SELECT COUNT(DISTINCT [ACE].[id]) FROM [acl_entries] AS [ACE] INNER JOIN [acl_object_identities] AS [ACO] ON ([ACE].[object_identity_id] = [ACO].[id]) INNER JOIN [acl_security_identities] AS [SI] ON ([ACE].[security_identity_id] = [SI].[id])
				    	  WHERE (([ACE].[mask] = 1 AND ([SI].[identifier] IN ($user_array) OR [SI].[identifier] = ?)) OR ([ACE].[mask] IN (2, 64, 128) AND [SI].[identifier] IN ($user_array))) AND [ACO].[object_identifier] = ?";
    		}
    		$result = $conn->fetchArray($query, array('Docova\DocovaBundle\Entity\UserAccounts-'.$user->getUsername(), 'ROLE_USER', 'Docova\DocovaBundle\Entity\UserAccounts-'.$user->getUsername(), $folder['id']));
    		unset($query);
    		if (!empty($result) && $result[0] > 0) {
    			$output[] = $folder;
    			continue;
    		}
    	}

    	return $output;
    }
    
    public function getFolderName($folder)
    {
    	$query = $this->createQueryBuilder('F')
    		->select('F.Folder_Name')
    		->where('F.id = :folder')
    		->setParameter('folder', $folder)
    		->getQuery();
    	
    	return $query->getSingleScalarResult();
    }
}
