<?php
namespace Docova\DocovaBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * WorkflowRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class WorkflowRepository extends EntityRepository
{
	const TYPE_1 = 'Start';
	const TYPE_2 = 'Review';
	const TYPE_3 = 'Approve';
	const TYPE_4 = 'End';
	
	public function getDataXML($icon_path, $criteria = array(), $sortBy = array(), $return_obj = false, $return_steps = true)
	{
		$global_settings = $this->_em->getRepository('DocovaBundle:GlobalSettings')->findAll();
		$global_settings = $global_settings[0];
		if (empty($criteria) && empty($sortBy)) {
			
			$Workflows = $this->findBy(array('Trash' => false, 'App_Id' => null), $orderBy);
		}
		else {
			$orderBy = array();
			if (!empty($sortBy)) 
			{
				foreach ($sortBy as $key => $value) {
					if ($this->_class->hasField($key) && !empty($value)) {
						$orderBy[$key] = strtoupper($value) == 'DESC' ? 'DESC' : 'ASC';
					}
				}
			}
			$criteria = !empty($criteria) ? $criteria : array('Trash' => false, 'App_Id' => null);
			
			$Workflows = $this->findBy($criteria, $orderBy);
		}
		
		$data_xml = ($return_obj === false) ? array() : new \DOMDocument('1.0', 'UTF-8');
		$documents = array();
		$wf_order = $stp_order = 0;
		foreach ($Workflows as $wf)
		{
			$documents[] = $wf;
			foreach ($wf->getSteps() as $step)
			{
				$documents[] = $step;
			}
		}
		unset($Workflows, $wf);

		foreach ($documents as $doc)
		{
			if ($return_obj === false) 
			{
				if ($doc instanceof \Docova\DocovaBundle\Entity\Workflow) 
				{
					$data_xml[] = array(
						'dockey' => 'W-'.$doc->getId(),
						'sortorder' => $wf_order,
						'default-icon' => (($doc->getUseDefaultDoc() === true) ? 'vwicn099.gif' : ''),
						'workflowname' => $doc->getWorkflowName()
					);
				}
				else {
					$participants = ($doc->getParticipants() == 1 || $doc->getParticipants() == 3) ? '[Author]' : '';
					if ($doc->getOtherParticipant()->count() > 0) 
					{
						foreach ($doc->getOtherParticipant() as $pr) 
						{
							if ($global_settings->getUserDisplayDefault()) 
							{
								$participants .= ',' . $pr->getUserProfile()->getDisplayName();
							}
							else {
								$participants .= ','.$pr->getUserNameDnAbbreviated();
							}
						}
						unset($pr);
					}
					if (count($doc->getOtherParticipantGroups()) > 0) 
					{
						$participants .= ','.implode(',', $doc->getOtherParticipantGroups());
					}
					$participants = 0 === strpos($participants, ',') ? substr($participants, 1) : $participants;
					$data_xml[] = array(
						'dockey' => 'W-'.$doc->getId(),
						'sortorder' => $wf_order.$stp_order,
						'parentid' => $doc->getWorkflow()->getId(),
						'wforder' => $doc->getPosition(),
						'title' => '('.$doc->getPosition().') '.$doc->getStepName(),
						'type' => $doc->getStepType(true),
						'distribution' => (($doc->getDistribution() == 1 || !$doc->getDistribution()) ? 'Serial' : 'Parallel'),
						'participants' => $participants
					);
					$stp_order++;
				}
/*				
				$data_xml .= '<document>';
				$data_xml .= '<rectype>doc</rectype>';
				$data_xml .= '<statno />';
				$data_xml .= '<wfstarted />';
				$data_xml .= '<delflag />';
				if ($doc instanceof \Docova\DocovaBundle\Entity\Workflow) 
				{
					$wf_order++;
					$data_xml .= '<dockey>W-'.$doc->getId().'</dockey>';
					$data_xml .= '<docid>W-'.$doc->getId().'</docid>';
					$data_xml .= "<sortorder>$wf_order</sortorder>";
					$data_xml .= '<default-icon>' . (($doc->getUseDefaultDoc() === true) ? '<img width="13" height="11" alt="Enabled" src="'.$icon_path.'/vwicn099.gif" border="0" />' : '') . '</default-icon>';
					$data_xml .= '<workflowname><![CDATA['.$doc->getWorkflowName().']]></workflowname>';
					$stp_order = 1;
				}
				else 
				{
					$data_xml .= '<dockey>'.$doc->getId().'</dockey>';
					$data_xml .= '<docid>'.$doc->getId().'</docid>';
					$data_xml .= "<sortorder>$wf_order.$stp_order</sortorder>";
					$data_xml .= '<parentid>'.$doc->getWorkflow()->getId().'</parentid>';
					$data_xml .= '<wforder>'.$doc->getPosition().'</wforder>';
					$data_xml .= '<title><![CDATA[('.$doc->getPosition().') '.$doc->getStepName().']]></title>';
					$data_xml .= '<type><![CDATA['.$doc->getStepType(true).']]></type>';
					$data_xml .= '<distribution><![CDATA['.(($doc->getDistribution() == 1 || !$doc->getDistribution()) ? 'Serial' : 'Parallel').']]></distribution>';
					$participants = ($doc->getParticipants() == 1 || $doc->getParticipants() == 3) ? '[Author]' : '';
					if ($doc->getOtherParticipant()->count() > 0) 
					{
						foreach ($doc->getOtherParticipant() as $pr) 
						{
							$participants .= ','.$pr->getUserNameDnAbbreviated();
						}
						unset($pr);
					}
					if (count($doc->getOtherParticipantGroups()) > 0) 
					{
						$participants .= ','.implode(',', $doc->getOtherParticipantGroups());
					}
					$participants = 0 === strpos($participants, ',') ? substr($participants, 1) : $participants;
					$data_xml .= "<participants><![CDATA[$participants]]></participants>";
					$stp_order++;
				}
				$data_xml .= '</document>';
*/
			}
			else 
			{
				$root = $data_xml->appendChild($data_xml->createElement('document'));
				$root->appendChild($data_xml->createElement('rectype', 'doc'));

				if ($doc instanceof \Docova\DocovaBundle\Entity\Workflow)
				{
					$wf_order++;
					$root->appendChild($data_xml->createElement('dockey', 'W-'.$doc->getId()));
					$root->appendChild($data_xml->createElement('docid', 'W-'.$doc->getId()));
					$root->appendChild($data_xml->createElement('sortorder', $wf_order));
					$cdata = $data_xml->createCDATASection(($doc->getUseDefaultDoc() === true) ? '<img width="13" height="11" alt="Enabled" src="'.$icon_path.'/vwicn099.gif" border="0" />' : '');
					$newnode = $data_xml->createElement('default-icon');
					$newnode->appendChild($cdata);
					$root->appendChild($newnode);
					$cdata = $data_xml->createCDATASection($doc->getWorkflowName());
					$newnode = $data_xml->createElement('workflowname');
					$newnode->appendChild($cdata);
					$root->appendChild($newnode);
					$stp_order = 1;
				}
				else
				{
					$root->appendChild($data_xml->createElement('dockey', $doc->getId()));
					$root->appendChild($data_xml->createElement('docid', $doc->getId()));
					$root->appendChild($data_xml->createElement('sortorder', $wf_order.$stp_order));
					$root->appendChild($data_xml->createElement('parentid', $doc->getWorkflow()->getId()));
					$root->appendChild($data_xml->createElement('wforder', $doc->getPosition()));
					$cdata = $data_xml->createCDATASection('('.$doc->getPosition().') '.$doc->getStepName());
					$newnode = $data_xml->createElement('title');
					$newnode->appendChild($cdata);
					$root->appendChild($newnode);
					$cdata = $data_xml->createCDATASection($doc->getStepType(true));
					$newnode = $data_xml->createElement('type');
					$newnode->appendChild($cdata);
					$root->appendChild($newnode);
					$cdata = $data_xml->createCDATASection(($doc->getDistribution() == 1 || !$doc->getDistribution()) ? 'Serial' : 'Parallel');
					$newnode = $data_xml->createElement('distribution');
					$newnode->appendChild($cdata);
					$root->appendChild($newnode);
					$participants = ($doc->getParticipants() == 1 || $doc->getParticipants() == 3) ? '[Author]' : '';
					if ($doc->getOtherParticipant()->count() > 0)
					{
						foreach ($doc->getOtherParticipant() as $pr)
						{
							$participants .= ','.$pr->getDisplayName();
						}
						unset($pr);
					}
					if (count($doc->getOtherParticipantGroups()) > 0) 
					{
						$participants .= ','.implode(',', $doc->getOtherParticipantGroups());
					}
					$participants = 0 === strpos($participants, ',') ? substr($participants, 1) : $participants;
					$cdata = $data_xml->createCDATASection($participants);
					$newnode = $data_xml->createElement('participants');
					$newnode->appendChild($cdata);
					$root->appendChild($newnode);
					$stp_order++;
				}
			}
		}
		
		return $data_xml;
	}
	
	/*
	 * Deletes documents from web admin view
	* @param: xml data with id to delete
	* @return: xml Data response
	*/
	public function deleteSelectedDocuments($post_xml){
	
		$deleted=0;
	
		foreach ($post_xml->getElementsByTagName('Unid') as $doc_id)
		{
			if (strpos($doc_id->nodeValue, 'W-') === 0)
			{
				$document = $this->find(substr($doc_id->nodeValue, 2));
				if (!empty($document))
				{
					$this->_em->remove($document);
					$this->_em->flush(); // commit each delete
					$deleted++;
				}
			}
			else {
				$document = $this->_em->getReference('DocovaBundle:WorkflowSteps', $doc_id->nodeValue);
				$this->_em->remove($document);
				$this->_em->flush(); // commit each delete
				$deleted++;
			}
		}
		// setup return xml
		$response_xml = new \DOMDocument("1.0", "UTF-8");
		$root = $response_xml->appendChild($response_xml->createElement('Results'));
		if ($deleted !== 0)
		{
			$child = $response_xml->createElement('Result', 'OK');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Status';
			$child->appendChild($attrib);
			$root->appendChild($child);
	
			$child = $response_xml->createElement('Result', $deleted);
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Ret1';
			$child->appendChild($attrib);
			$root->appendChild($child);
		}
		else {
			$child = $response_xml->createElement('Result', 'FAILED');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'Status';
			$child->appendChild($attrib);
			$root->appendChild($child);
	
			$child = $response_xml->createElement('Result', 'Could not delete one or more of the selected documents.');
			$attrib = $response_xml->createAttribute('ID');
			$attrib->value = 'ErrMsg';
			$child->appendChild($attrib);
			$root->appendChild($child);
		}
		return $response_xml->saveXML();
	}

	/**
	 * Get all application forms data array/xml for view
	 *
	 * @param string $app_id
	 * @param string $format
	 * @return array
	 */
	public function getViewData($app_id, $format = 'array')
	{
		$output = array('@timestamp' => time(), '@toplevelentries' => '0');
		$query = $this->createQueryBuilder('WF')
			->join('WF.application', 'A')
			->where('WF.application = :app')
			->andWhere('A.Trash = false')
			->andWhere('A.isApp = true')
			->setParameter('app', $app_id)
			->getQuery();
	
		$result = $query->getResult();
	
		if (!empty($result))
		{
			if ($format === 'array')
			{
				$output['@toplevelentries'] = count($result);
				$output['viewentry'] = array();
				foreach ($result as $workflow) {
					$output['viewentry'][] = array(
						'@unid' => $workflow->getId(),
						'entrydata' => array(
							array('html' => array($workflow->getUseDefaultDoc() ? '<i  class="far fa-thumbs-up"></i>' : '')),
							array('text' => array($workflow->getWorkflowName())),
							array('datetime' => array('@dst'=>true, 0 => ($workflow->getDateModified() ? $workflow->getDateModified()->format('Ymd his') : ''))),
						)
					);
				}
			}
			else {
				$xml = '<viewentries timestamp="'.time().'" toplevelentries="'.count($result).'">';
				foreach ($result as $workflow) {
					$xml .= "<viewentry unid='{$workflow->getId()}'>";
					$xml .= "<entrydata columnnumber='0'><text>{$workflow->WorkflowName()}</text></entrydata>";
					$xml .= "<entrydata columnnumber='1'><datetime dst='true'>{$workflow->getDateModified()->format('Ymd his')}</datetime></entrydata>";
					$xml .= '</viewentry>';
				}
				$xml .= '</viewentries>';
				$output = $xml;
			}
			$result = $workflow = null;
		}
		return $output;
	}
	
	/**
	 * Check for existence of an workflow name in selected app
	 * 
	 * @param string $app_id
	 * @param string $wfname
	 * @return boolean
	 */
	public function workflowExists($app_id, $wfname)
	{
		$query = $this->createQueryBuilder('WF')
			->select('COUNT(WF.id)')
			->where('WF.application = :app')
			->andWhere('WF.Workflow_Name = :wfname')
			->setParameter('app', $app_id)
			->setParameter('wfname', $wfname)
			->getQuery();
		
		$result = $query->getSingleScalarResult();

		return $result > 0 ? true : false;
	}


	public function getWorkflowStepsXML( $workflow, $currentuser )
	{
		$xml_res = new \DOMDocument('1.0', 'UTF-8');
		$root = $xml_res->appendChild($xml_res->createElement('Documents'));
		if ( empty($workflow)) return $xml_res;

		$steps = $workflow->getSteps();
		if ($steps->count() < 1) 
		{
			throw new \Exception('No workflow step was found.');
		}
		
		foreach ($steps as $step)
		{
			$element = $root->appendChild($xml_res->createElement('Document'));
			$element->appendChild($xml_res->createElement('wfItemKey', $step->getId()));

			$element->appendChild($xml_res->createElement('wfParticipantFormula', ($step->getParticipantFormula() ? $step->getParticipantFormula() : '' ) ) );
			$element->appendChild($xml_res->createElement('Unid', $step->getId()));
			$element->appendChild($xml_res->createElement('wfOrder', $step->getPosition()));
			$CData = $xml_res->createCDATASection($step->getStepName());
			$child = $xml_res->createElement('wfTitle');
			$child->appendChild($CData);
			$element->appendChild($child);
			$element->appendChild($xml_res->createElement('wfAction', $step->getStepType(true)));
			$element->appendChild($xml_res->createElement('wfType', ($step->getDistribution() == 2) ? 'Parallel' : 'Serial'));
			$CData = $xml_res->createCDATASection(($step->getStepType() === 5 ? '' : 'Pending'));
			$child = $xml_res->createElement('wfStatus');
			$child->appendChild($CData);
			$element->appendChild($child);
			
			if ($step->getStepType() === 1)
			{
				$jsonattr = $xml_res->createAttribute('runtimejsonstr');
				$jsonattr->value = $step->getRuntimeJSON();

				$root->appendChild($jsonattr);

				$Dis_CData = $xml_res->createCDATASection('[Author]');
				$Rev_CData = $xml_res->createCDATASection('[Author]');
			}else 
			{
				if ( !empty($step->getParticipantTokens()) )
				{


					$tokenarr = explode(",", $step->getParticipantTokens());
					$tokenlist = '';
					foreach ( $tokenarr as $token){
						if ( $token == "[Author]" || $token == "[Formula]"){
							//is a user or group
							$tokenlist .= $token."," ;
						}
					}

					$temp_users = $step->getOtherParticipant();
					if ($temp_users->count() > 0)
					{
						for ($x = 0; $x < $temp_users->count(); $x++)
						{
							if ($temp_users[$x]->getUserNameDnAbbreviated() !== $currentuser->getUserNameDnAbbreviated()) {
//									$CData .= $temp_users[$x]->getUsername().',';
								$tokenlist .= $temp_users[$x]->getUserNameDnAbbreviated().',';
							}
						}
					}
					if (count($step->getOtherParticipantGroups()) > 0) 
					{
						$tokenlist .= implode(',', $step->getOtherParticipantGroups()).',';
					}

					$tokenlist = false !== strpos($tokenlist, ',') ? substr_replace($tokenlist, '', -1) : $tokenlist;
					if ( $step->getStepType() === 5 ) $tokenlist = "";
					$Dis_CData = $xml_res->createCDATASection($tokenlist);
					$Rev_CData = $xml_res->createCDATASection($tokenlist);
					unset($temp_users, $x, $tokenlist);

				}else
				{
					$tmpstr = ($step->getStepType() === 5 ? "" : '[Author]');
					$Dis_CData = $xml_res->createCDATASection($tmpstr);
					$Rev_CData = $xml_res->createCDATASection($tmpstr);
				}
			}
			
			$child = $xml_res->createElement('wfDispReviewerApproverList');
			$child->appendChild($Dis_CData);
			$element->appendChild($child);
			$child = $xml_res->createElement('wfReviewerApproverList');
			$child->appendChild($Rev_CData);
			$element->appendChild($child);
			$CData = $xml_res->createCDATASection('');
			$child = $xml_res->createElement('wfReviewApprovalComplete');
			$child->appendChild($CData);
			$element->appendChild($child);
			$data = ($step->getParticipants() === 2 || $step->getParticipants() === 3) ? '1' : '';
			$CData = $xml_res->createCDATASection($data);
			$child = $xml_res->createElement('wfReviewerApproverSelect');
			$child->appendChild($CData);
			$element->appendChild($child);
			$CData = $xml_res->createCDATASection($step->getDocStatus());
			$child = $xml_res->createElement('wfDocStatus');
			$child->appendChild($CData);
			$element->appendChild($child);
			$current = ($step->getStepType() === 1) ? 1 : 0;
			$element->appendChild($xml_res->createElement('wfIsCurrentItem', $current));
			$CData = $xml_res->createCDATASection('');
			$child = $xml_res->createElement('wfCompleteNotifyList');
			$child->appendChild($CData);
			$element->appendChild($child);
			$CData = $xml_res->createCDATASection('');
			$child = $xml_res->createElement('wfActivateNotifyList');
			$child->appendChild($CData);
			$element->appendChild($child);
			$element->appendChild($xml_res->createElement('Modified', 0));
			$element->appendChild($xml_res->createElement('Selected', 0));
			$element->appendChild($xml_res->createElement('IsNew', 1));
			$element->appendChild($xml_res->createElement('IsDeleted', 0));
			
			unset($child, $CData, $current);
		}
		
		
		return $xml_res;
	}

	
}