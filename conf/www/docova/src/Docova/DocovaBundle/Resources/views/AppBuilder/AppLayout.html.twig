<!doctype html>
<html>
<head>
<title>{% trans %}App Layout{% endtrans %}</title>
<META content="0" http-equiv="expires">
<META content="0" http-equiv="cache-control">
<META content="no-cache" http-equiv="Pragma">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/smoothness-flat/jquery-ui.css') }}">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/styleForm.css') }}">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/admin/styleNewAppBuilder.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/font-awesome/css/all.min.css') }}" type="text/css" />
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/commonFunctions.js') }}" charset="UTF-8"></script>
<script type="text/javascript" language="JavaScript" src="{{ asset('bundles/docova/js/Docova.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/docova/jquery/jquery.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/docova/jquery/jquery-ui.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/sarissa.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/admin/appBuilderJS.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/sarissa_ieemu_xpath.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/jquery/jqueryLayouts.js') }}"></script>
<script type="text/javascript" language="JavaScript" src="{{ asset('bundles/docova/js/admin/sfWorkspaceCommonJsHeader.js') }}"></script>

<script type="text/javascript" src="{{ asset('bundles/docova/gridstack/loadash.min.js') }}"></script>
<link rel="stylesheet" href="{{ asset('bundles/docova/gridstack/gridstack.min.css') }}" />
<link rel="stylesheet" href="{{ asset('bundles/docova/gridstack/gridstacklarge.css') }}" />

<script type="text/javascript" src="{{ asset('bundles/docova/gridstack/gridstack.min.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/docova/gridstack/gridstack.jQueryUI.min.js') }}"></script>

<script language="JavaScript" type="text/javascript">
var MembersView = null; //embedded view object
var dlgParams = new Array();  //params array that gets used by dialogs
var retValues = new Array(); //ret params array that can be used by dialogs
var curSelFrame = null;  //currently selected frame in layout
var defaultVal = null; //hold last val for.inputEntry class fields
var showframecontent = true;  //whether frame content is hidden or shown
var is_chrome =false;
var is_firefox = false;
var is_opera = false;
var is_explorer  = false;
var is_safari = false;
var vmargin = 5;
var cheight = 60;
var rows = 48;
var gridobj = null;
var gridobjin = null;

var info = {
	"DocID" : "{{ layout ? layout.getId : '' }}",
	"DocKey" : "{{ layout ? layout.getId }}",
	"DocumentNumber" : "",
	"SystemKey" : "{{ settings.getSystemKey }}",
	"ThreadKey" : "",
	"ServerName" : "{{ app.request.server.get('HTTP_HOST') }}",
	"ServerUrl" : "{{ app.request.getscheme }}://{{ app.request.server.get('HTTP_HOST') }}",
	"NsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
	"PortalWebPath" : "{{ path('docova_homepage')[:path('docova_homepage')|length -1] }}",
	"PortalNsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length-2] }}",
	"IsNewDoc" : "{{ layout ? '0' : '1' }}",
	"isDocBeingEdited" : "true",
	"ArchiveNsfName" : "",
	"UpgradeRequired" : "{{ oldcode }}",
	"TriggerDesignCreation" : "{{ app.request.query.get('TriggerDesignCreation') }}",
	"AppID":"{{ appId }}",
	"CurrPath":"{{ path('docova_homepage') }}"
};
function getinfovar(){
   return info;
}
InitVars(info);


function allDone(inhtml){
	$(".innerre").html(inhtml);
	InitLayout();

	if(docInfo && docInfo.TriggerDesignCreation && docInfo.TriggerDesignCreation != ""){
		$("form:first" ).submit();
	}
}

function setFrameTargetOptions(curtarget)
{
	var curSel = curtarget
	$("#DefaultTarget").children().remove();
	$("#DefaultTarget").append("<option></option>");
	$(".grid-stack-item").each ( function() {
		var id = $(this).attr("id");
		var selstr = "";
	
		if ( curSel == id)
			selstr = " selected "

		$("#DefaultTarget").append("<option " + selstr + ">" + id + "</option>");
	} );
}

function calcCellHeight()
{
	var id = ".grid-stack";
	var p = $(id).parent();
    var pheight =  p.height();
    var tvmargin = vmargin;

    var mheight = (tvmargin * (rows - 1));    
    while((pheight - mheight) < rows){
    	tvmargin = tvmargin - 1;
    	mheight = (tvmargin * (rows - 1));
    }
    vmargin = tvmargin;
	var tcheight = parseInt(Math.floor((pheight - (tvmargin * (rows - 1))) / rows), 10);   

    cheight = tcheight;
    return cheight;
}

function initGridStack()
{
	if ( $('.grid-stack').length == 0 ) return;

	calcCellHeight();

    var options = {
        width : rows,
        height: rows, 
        verticalMargin: vmargin,
		cellHeight: cheight,
        alwaysShowResizeHandle: true,
        draggable: {
			handle: '.dhgrip'
		},
        resizable: { 
			handles: "sw, se"
        }
    };

    
    $(".grid-stack").gridstack(options);
	gridobj = $('.grid-stack').data('gridstack');

	updateLayoutStyle();
}

function updateLayoutStyle()
{
	//set margins
	var gs = $(".grid-stack");

	if ( gs.length == 0 ) return;

	gs.attr("pmargin", $("#LayoutMargin").val());
	gs.attr("pbackground", $("#PanelsBackgroundColor").val());
	gs.attr("pvspacing", $("#PanelsVerticalSpacing").val());
	vmargin = parseInt($("#PanelsVerticalSpacing").val(), 10);

	var ppadding = $("#LayoutPadding").val();
	gs.attr("ppadding", ppadding);
	
	$(".innerre").css("padding", $("#LayoutMargin").val());
	$(".innerre").css("background",  $("#PanelsBackgroundColor").val());

	var lhspacing = $("#PanelsHorizontalSpacingL").val();
	gs.attr("pleft", lhspacing);
	var rhspacing =  $("#PanelsHorizontalSpacingR").val();
	gs.attr("pright", rhspacing);
	var pshadow = $("#PanelsShadow").is(":checked");
	gs.attr("pshadow", (pshadow ? 'true' : 'none'));
	var pbstyle = $("#PanelsBorderStyle").val();
	var pbsize = $("#PanelsBorderSize").val();
	var pbcolor = $("#PanelsBorderColor").val();
	var pbradius = $("#PanelsBorderRadius").val();
	gs.attr("pradius", pbradius);

	var borderstr = pbsize + "px " + pbstyle + " " + pbcolor;
	gs.attr("pborder", borderstr);
	

	$(".grid-stack-item-content").each ( function() {
		
		$(this).css("left", lhspacing + "px");
		$(this).css("right", rhspacing + "px" );
		$(this).css("padding",  ppadding + "px")
		
		if ( pshadow ){
			$(this).css("box-shadow",  "0 0 35px 0 rgba(154,161,171,.15)");
		}else{
			$(this).css("box-shadow",  "none");
		}
		
		$(this).css("border", borderstr);
		$(this).css("border-radius", pbradius + "px")
	})

	calcCellHeight();
	
	gridobj.verticalMargin(vmargin);
	gridobj.cellHeight(cheight);
}

function InitLayout()
{
	//Disable context menu
	$(document).on("contextmenu", function(e){ e.preventDefault(); e.stopPropagation();});
	$("#frameProperties :input").attr("disabled", "true");

	//calculate the widths of the panels - horizontal
	$("#eastpane").width("414px").css({
		'left' : 'auto',
		'right' : '0'
	});
	$("#inner-center").width($("#divContentSection").width() - $("#eastpane").outerWidth() - 15);

	$(window).resize(function(e) {
		e = e || event;
		if (e.target == window) {
			$("#inner-center").width($("#divContentSection").width() - $(".ui-layout-east").outerWidth() - 15);
			$(".ui-layout-east").css("left", "");
		}
	});
	
	$('#right-panel-tabs').tabs({
		collapsible: true,
		activate: function(e, ui) {
			if (!ui.newPanel.html()) {
				$('#eastpane').width($('#vertical-tabs').width() + 10).css({
					'left' : 'auto',
					'right' : '0'
				});
			}
			else {
				$('#eastpane').width(414).css({
					'left' : 'auto',
					'right' : '0'
				});
			}
			$("#inner-center").width($("#divContentSection").width() - $(".ui-layout-east").outerWidth() - 15);
			$(".ui-layout-east").css("left", "");
		}
	});

	$(".grid-stack-item").each( function() {
		$(this).append('<i title="Move Panel" class="dhgrip fas fa-grip-horizontal"></i><i  title="Delete Panel" class="rmpanel far fa-times"></i>')
	});

	$(".cssapplynow").change ( function(){
		updateLayoutStyle();
	});

	$(".ui-layout-east").resizable({
		handles: 'w',
 		ghost: true,
 		resize:function( e,ui ){
 			$(".ui-resizable-helper").css("border-left", " 8px solid  rgb(221,221,221)");
	 		$("#layoutIframe").hide();
 		},
 		stop: function(e, ui){
 			resizeNewPanelHorizontal(ui);	
	   		$("#layoutIframe").show();
		}
	});
	
	showContent();

	$(".docova_quick_width").on("click", function ()
	{
		var widthstr = $(this).text();
		var grid = gridobj;
	    var gsi = $(curSelFrame);
	    gsi.attr('quick_width', widthstr);
		if ( widthstr == "1/2"){			
	        grid.resize(gsi,(rows*(1/2)),null);	        
		}else if ( widthstr == "1/3"){
			 grid.resize(gsi,(rows*(1/3)),null);
		}else if ( widthstr == "1/4"){
			grid.resize(gsi,(rows*(1/4)),null);					
		}else if ( widthstr == "2/3"){
			 grid.resize(gsi,(rows*(2/3)),null);			
		}else if ( widthstr == "3/4"){
			 grid.resize(gsi,(rows*(3/4)),null);			
		}else if (widthstr == "full"){
			grid.resize(gsi,rows,null);
		}
	});

	$(".docova_quick_height").on("click", function ()
	{
		var heightstr = $(this).text();
		var grid = gridobj;
	    var gsi = $(curSelFrame);
	    gsi.attr('quick_height', heightstr)
		if ( heightstr == "1/2"){		
	        grid.resize(gsi,null, (rows*(1/2)));	        
		}else if ( heightstr == "1/3"){
			 grid.resize(gsi,null,(rows*(1/3)));
		}else if ( heightstr == "1/4"){
			grid.resize(gsi,null,(rows*(1/4)));					
		}else if ( heightstr == "2/3"){
			 grid.resize(gsi,null,(rows*(2/3)));			
		}else if ( heightstr == "3/4"){
			 grid.resize(gsi,null,(rows*(3/4)));			
		}else if (heightstr == "full"){
			grid.resize(gsi,null,rows);
		}
	});

	//show divContentSection
	$("#divContentSection").css("display", "block");
	$("#fborderwidth").hide();	
	setPropertiesTriggersLayout();

	is_chrome = navigator.userAgent.indexOf('Chrome') > -1;
    is_firefox = navigator.userAgent.indexOf('Firefox') > -1;
    is_opera = navigator.userAgent.toLowerCase().indexOf("opr") > -1;
    if(!(is_chrome) && !(is_firefox) && !(is_opera)){ //check for Safari after Chrome as Chrome has "Chrome" and "Safari" in userAgent text
    	is_safari = navigator.userAgent.indexOf("Safari") > -1;
    }
    if(!(is_chrome) && !(is_firefox) && !(is_opera) && !(is_safari)){ //if none of the others then its explorer
		is_explorer = true;
    }

	if(is_explorer || is_safari){ //set color pickers
	   $("#btn-ColorPicker").css("display", "");
	   $("#btn-IconColorPicker").css("display", "");
	   $("#btn-BorderColorPicker").css("display", "");
	   $(".colorpickerhelper").hide();
	}	

	InitHelperColors();
	
	$(".inputEntryColor").change(function(){
		var helper = $(this).prev("input");
		if ( helper.length > 0){
			helper.val($(this).val());
		}
	});

	$(".colorpickerhelper").change ( function(){
		$(this).next("input").val($(this).val());
	});
	
	loadCurrentStyle();
	initGridStack();
}

$(function(){
	InitLayout();
});

function loadCurrentStyle()
{
	vmargin =   $(".grid-stack").attr("pvspacing") ? $(".grid-stack").attr("pvspacing") : vmargin;
	vmargin = parseInt(vmargin, 10);

	$("#PanelsVerticalSpacing").val(vmargin);
	var bcolor = $(".grid-stack").attr("pbackground");

    if ( bcolor && bcolor != ""){
        $(".innerre").css("background", bcolor);
        $("#PanelsBackgroundColor").val(bcolor);
    }
    var bmargin = $(".grid-stack").attr("pmargin");

    if ( bmargin && bmargin != ""){
         $(".innerre").css("padding", bmargin);
         $("#LayoutMargin").val(bmargin);
    }

    var left = $(".grid-stack").attr("pleft") ? $(".grid-stack").attr("pleft") : "0";
    left = parseInt(left);
    $("#PanelsHorizontalSpacingL").val(left);
    var right = $(".grid-stack").attr("pright") ? $(".grid-stack").attr("pright") : "0";
    right = parseInt(right);
    $("#PanelsHorizontalSpacingR").val(right);

	var pborder = $(".grid-stack" ).attr("pborder");
	if ( pborder && pborder != "")
	{
		var borderarr = pborder.split(" ");
		if ( borderarr.length >= 0)
		{
			var bordersize = borderarr[0];
			if ( bordersize && bordersize!= "")
				$("#PanelsBorderSize").val(parseInt(bordersize));
		}
		if ( borderarr.length >= 1){
			borderstyle = borderarr[1];
			if (borderstyle && borderstyle != "")
				$("#PanelsBorderStyle").val(borderstyle.toLowerCase());

		}
		if ( borderarr.length >= 2){
			var bordercolor = borderarr[2];
			if ( bordercolor && bordercolor != "")
				$("#PanelsBorderColor").val(rgb2hex(bordercolor));
		}
	}

    

	var pshadow = $(".grid-stack").attr("pshadow") ? $(".grid-stack").attr("pshadow") : "none";
	if ( pshadow && pshadow != "" && pshadow.toLowerCase() != "none"){
		$("#PanelsShadow").prop("checked" ,true)
	}else{
		$("#PanelsShadow").prop("checked" ,false)
	}

	ppadding =   $(".grid-stack").attr("ppadding") ? $(".grid-stack").attr("ppadding") : "0";
	ppadding = parseInt(ppadding, 10);
	$("#LayoutPadding").val(ppadding);

	pradius =   $(".grid-stack").attr("pradius") ? $(".grid-stack").attr("pradius") : "4";
	pradius = parseInt(pradius, 10);
	$("#PanelsBorderRadius").val(pradius);
}


function UpdateOptions (selectedOption){
	var currProtocol = location.protocol;
	var optionlist = "";
	var elementList = $("#DOCOVA_Content");
	var secureflag = "OFF";
	
	if(currProtocol == "http:"){
		secureflag = "OFF";
	}else{
		secureflag = "ON";
	}
	
	if(selectedOption == "-Select-"){
		optionlist = "";
	}
	
	if(selectedOption == "Outline"){
		optionlist = Docova.Utils.dbColumn({
			servername: "",
			nsfname: docInfo.NsfName,
			viewname: "luApplication",
			urlsuffix: ["Outlines"],
			viewiscategorized: true,
			key: docInfo.AppID,
			column: "7",
			secure: secureflag
		});
	}

	if(selectedOption == "View"){
		optionlist = Docova.Utils.dbColumn({
			servername: "",
			nsfname: docInfo.NsfName,
			viewname: "luApplication",
			urlsuffix: ["Views"],
			viewiscategorized: true,
			key: docInfo.AppID,
			column: "8",
			secure: secureflag
		});
	}
	
	if(selectedOption == "Page"){
		optionlist = Docova.Utils.dbColumn({
			servername: "",
			nsfname: docInfo.NsfName,
			viewname: "luApplication",
			urlsuffix: ["Pages"],
			viewiscategorized: true,
			key: docInfo.AppID,
			column: "7",
			secure: secureflag
		});
	}

	if(selectedOption == "Form"){
		optionlist = Docova.Utils.dbColumn({
			servername: "",
			nsfname: docInfo.NsfName,
			viewname: "luApplication",
			urlsuffix: ["Forms"],
			viewiscategorized: true,
			key: docInfo.AppID,
			column: "7",
			secure: secureflag
		});
	}
	
	if(selectedOption == "Layout"){
		optionlist = Docova.Utils.dbColumn({
			servername: "",
			nsfname: docInfo.NsfName,
			viewname: "luApplication",
			urlsuffix: ["Layouts"],
			viewiscategorized: true,
			key: docInfo.AppID,
			column: "7",
			secure: secureflag
		});
	}

	elementList.empty();
	var optionlistarray = optionlist.split(";");

	elementList.append($("<option></option>").attr("value", "-Select-").text("-{% trans %}Select{% endtrans %}-"));
	for(x=0;x<optionlistarray.length;x++){
		var txtarry = optionlistarray[x].split("|");
		var opttxt = "";
		var optval = ""; 
		if ( txtarry.length > 1 )
			optval = txtarry[1];
		opttxt = txtarry[0];
		if ( optval == "" ) 
			optval = opttxt;
			
		elementList.append($("<option></option>").attr("value", optval).text(opttxt));
	}	
}

function getViewTypeLocal(selectedOptionText) {	//daw
	if(selectedOptionText == "" || selectedOptionText == "-Select-") {return ""}
	
	var currProtocol = location.protocol;
	var secureflag = "OFF"
	
	if(currProtocol == "http:"){
		secureflag = "OFF";
	}else{
		secureflag = "ON";
	}

	var result = '';	
	var strUrl = '/' + docInfo.NsfName + '/luApplication/Views?AppID=' + docInfo.AppID + '&StartKey=' + selectedOptionText;
	$.ajax({
		url : strUrl,
		async : false,
		cache : false,
		type : "GET",
		dataType : "xml"
	})
	.done(function(data) {
		var viewentry = $(data).find("viewentry:first");
		var jqViewEntry = $(viewentry);
		jqViewEntry.find("entrydata[columnnumber='7']").find("text,number,datetime").each(function (index) {
			result += $(this).text();
		});
	})
	.fail(function() {
		result = '';
	});
	$('#ViewType').val(result);

	return result;
}

/*Read the attributes from the frame to update the propertes table */
function getFrameAttributes(selectedWindow)
{ 
	$("#frameProperties :input").removeAttr("disabled");

	var frameelm =selectedWindow;
	curSelFrame = frameelm;
	var element = frameelm;
	var id = $(element).attr("id");
	var parentFramesetId = $(element).parent().attr("id") || "";
	var ctype = $(element).attr("contenttype") || "-Select-";
	var content = $(element).attr("content") || "-Select-";
	var noresize = $(element).attr("dnoresize") || "";
	var noscroll = $(element).attr("dnoscroll") || "";
	var deftarget = $(element).attr("target") || "";
	var tabtitle = $(element).attr("tabtitle") || "";
	var openintab = $(element).attr("openintab") || "";
	var framesetBorderType = $(element).parent().attr("dbordertype") || "3D Border";
	var borderwidth = $(element).parent().attr("dborderwidth") || "";
	var additionalstyle = $(element).attr("dadditionalstyle");
	var quick_width = $(element).attr('quick_width');
	var quick_height = $(element).attr('quick_height');

	if ( additionalstyle){
		$("#FrameCustomStyle").val(additionalstyle);
	}else{
		$("#FrameCustomStyle").val("");
	}
						
	$("#FrameID").val(id );
	$("#ParentFramesetID").val(parentFramesetId );
	$("#FramesetBorder").val(framesetBorderType);
	if ( framesetBorderType && framesetBorderType != "" ) {
		if ( framesetBorderType != "Manual" ) {
			$("#fborderwidth").hide();
		}else{
			$("#fborderwidth").show();
		}
	}else{
		$("#fborderwidth").hide();
	}	
				
	$("#FramesetBorderWidth").val(borderwidth)				
	$("#DefaultTarget").val(deftarget );
	$("#DOCOVA_ContentType").val(ctype );
	UpdateOptions(ctype );
	var elemlist = $("#DOCOVA_Content");
	var optsarray = elemlist.find("option").each( function() {
		if ( $(this).val() == content || $(this).text() == content ){
			$(this).prop('selected', true);
		}
	});

	if (quick_width) {
		$('button.docova_quick_width').each(function(){
			if ($(this).text() == quick_width) {
				$(this).addClass('ui-state-highlight');
			}
			else {
				$(this).removeClass('ui-state-highlight');
			}
		});
	}

	if (quick_height) {
		$('button.docova_quick_height').each(function(){
			if ($(this).text() == quick_height) {
				$(this).addClass('ui-state-highlight');
			}
			else {
				$(this).removeClass('ui-state-highlight');
			}
		});
	}

	if ( ctype == "Page" ){
		//if content type is page, openintab is enabled 
		$("#OpenInTab").attr("disabled", false);
	}else if(ctype == "View" ){
		//if content type is view, openintab is always set on and disabled so it cant be changed 
		$("#OpenInTab").prop("checked", true);
		$("#OpenInTab").attr("disabled", true);		
	}else if(ctype == "Outline" ||  ctype == "Form"){
		//if content type is Outline, openintab is always set off and disabled so it cant be changed 
		$("#OpenInTab").prop("checked", false);
		$("#OpenInTab").attr("disabled", "true");				
	}else{
		//all other cases, set it disabled
		$("#OpenInTab").attr("disabled", "true");
	}
	
	if(openintab && openintab == "1"){
		$("#OpenInTab")[0].checked = true;
		$("#TabTitle").val(tabtitle );
		$("[name=showtabtitle]").css("display", "");
	}else{
		$("#OpenInTab")[0].checked = false;
		$("#TabTitle").val("");
		$("[name=showtabtitle]").css("display", "none");						
	}
	
	$("#AllowFrameScroll")[0].checked = !(noscroll && noscroll == "1");
	var index = $('#vertical-tabs a[href="#frameProperties"]').parent().index();
	$("#right-panel-tabs").tabs("option", "active", index);
	setFrameTargetOptions(deftarget);
} 

//get the frameset/frames code from the iframe that holds it.
function getLayoutHtml()
{
	$(".innerre").hide();
	$(".grid-stack-item").each ( function () 
	{
		if ($(this).attr("dsrc") !== undefined &&  $(this).attr("dsrc") != "" ){
			var contentdiv = $(this).children(".grid-stack-item-content");
			var dsrc = $(this).attr("dsrc");
			
			var htmlcode = "<div style='position:relative;width:100%;height:100%'><iframe class='ifrmcontainer'  src = \""  + $(this).attr("dsrc") + "\"></iframe></div>";
			contentdiv.html ( htmlcode);
		}else{
			var src = docInfo.ServerUrl + "/" + docInfo.NsfName + "/EmptyContent?openPage";
			var contentdiv = $(this).children(".grid-stack-item-content");
			var dsrc = src;
			
			var htmlcode = "<div style='position:relative;width:100%;height:100%'><iframe class='ifrmcontainer'  src = \""  + $(this).attr("dsrc") + "\"></iframe></div>";
			contentdiv.html ( htmlcode);
		}

		//remove inline drop/shadow if any

		if ( $(this).get(0).style.boxShadow != "" ){
			$(this).get(0).style.boxShadow = "none";
			$(this).get(0).style.zIndex = "auto";
		}
		
	})

	jQuery(".grid-stack").removeClass().addClass("grid-stack");
	jQuery(".grid-stack").find(".ui-resizable-handle").remove();
	jQuery(".grid-stack").removeAttr("style");

	var htmltxt =  $(".innerre").html();
	var htmlobj = $(htmltxt);
	htmlobj.find(".dhgrip").remove();
	htmlobj.find(".rmpanel").remove();
	htmltxt = $("<div></div>").append(htmlobj).html();

	return htmltxt;
}

//applies the properts to the table selected
function applyChanges()
{
	if (!curSelFrame) return;
	var url = "";
	var curFrame = curSelFrame;
	$(curFrame).attr("id", $("#FrameID").val() );
	$(curFrame).attr("target", $("#DefaultTarget").val() );
	
	if ( ! $('#AllowFrameResize').is(":checked") ) {
		$(curFrame).attr("dnoresize", "1" );
	}else{
		$(curFrame).attr("dnoresize", "" );
	}
	
	$(curFrame).parent().attr("dbordertype", $("#FramesetBorder").val() );
	$(curFrame).parent().attr("dborderwidth", $("#FramesetBorderWidth").val() );

	if ( ! $('#AllowFrameScroll').is(":checked") ) {
		$(curFrame).attr("dnoscroll", "1" );
		$(curFrame).attr("scrolling","no");
	}else{
		$(curFrame).attr("dnoscroll", "" );
		$(curFrame).attr("scrolling","");
	}

	$(curFrame).attr("dadditionalstyle", $("#FrameCustomStyle").val());
	
	if ( $("#DOCOVA_ContentType").val() != "-Select-" ){
			$(curFrame).attr("contenttype", $("#DOCOVA_ContentType").val() );
	}else{ //ContentType field was set to -Select-
		$(curFrame).attr("contenttype", "");
		$(curFrame).attr("content", "" );
		$(curFrame).attr("dsrc", "{{ path('docova_nocontentlayout') }}?showmsg=1" );			
	}
		
	$(curFrame).attr("tabtitle", $("#TabTitle").val() );	
	if ( $("#DOCOVA_ContentType").val() == "Page" ){
		//if content type is page, openintab is enabled 
		$("#OpenInTab").attr("disabled", false);
	}else if($("#DOCOVA_ContentType").val() == "View" ){
		//if content type is view, openintab is always set on and disabled so it cant be changed 
		$("#OpenInTab").prop("checked", true);
		$("#OpenInTab").attr("disabled", true);		
	}else if($("#DOCOVA_ContentType").val() == "Outline" ||  $("#DOCOVA_ContentType").val() == "Form"){
		//if content type is Outline, openintab is always set off and disabled so it cant be changed 
		$("#OpenInTab").prop("checked", false);
		$("#OpenInTab").attr("disabled", "true");				
	}else{
		//all other cases, set it disabled
		$("#OpenInTab").attr("disabled", "true");
	}
 
	if ( $('#OpenInTab').is(":checked") ) {
		$(curFrame).attr("openintab", "1" );
	}else{
		$(curFrame).attr("openintab", "" );	
	}
		
	if ( $("#DOCOVA_Content").val() != "-Select-" ) 
	{
		var tabtitle = $("#TabTitle").val();
		$(curFrame).attr("content", $("#DOCOVA_Content").val() );
		if ( $("#DOCOVA_ContentType").val() ==  "Page" ) {
			//var eUrl =  docInfo.ServerUrl + "/" + docInfo.NsfName + "/"  + $("#Content").val() + "?openPage"
		 	var eUrl =  "/wViewPage/" + $("#DOCOVA_Content").val() + "?openPage";
		 	if($.trim(tabtitle) == ""){
		 		var title = $("#DOCOVA_Content").val();
			}else{			 		
		 		var title = $("#TabTitle").val();	
		 	}
			if($('#OpenInTab').is(":checked")){
				//var url = docInfo.ServerUrl + "/" + docInfo.PortalWebPath + "/wViewFrame?readForm&title=" + title + "&surl=" + eUrl ;
				var url = "{{ '{{ path(\'docova_homepage\') }}' }}wViewFrame?readForm&title=" + title + "&surl=" + encodeURIComponent(eUrl) + encodeURIComponent("&AppID=") + "{{ '{{ appId }}' }}";
		 		$(curFrame).attr("dsrc", url );
			}else{
				var url = "{{ '{{ path(\'docova_homepage\') }}' }}" + eUrl.substr(1) + "&AppID={{ '{{ appId }}' }}";
				$(curFrame).attr("dsrc", url );
			}
		}else if ( $("#DOCOVA_ContentType").val() ==  "Form"){
			var url = "{{ '{{ path(\'docova_homepage\') }}' }}wViewForm/" + $("#DOCOVA_Content").val() + "?openForm&AppID={{ '{{ appId }}' }}";
		 	$(curFrame).attr("dsrc", url );
		}else if ( $("#DOCOVA_ContentType").val() ==  "Layout"){
			var url = "{{ '{{ path(\'docova_homepage\') }}' }}wLoadLayout/" + $("#DOCOVA_Content").val() + "?openForm&AppID={{ '{{ appId }}' }}";
			$(curFrame).attr("dsrc", url );			 	
		}else if ( $("#DOCOVA_ContentType").val() ==  "Outline" ) {
			//var url =  docInfo.ServerUrl + "/" + docInfo.NsfName + "/luOutline/"  + $("#Content").val() + "?openDocument"
			var url = "{{ '{{ path(\'docova_homepage\') }}' }}wViewOutline/"  + $("#DOCOVA_Content").val() + "?openDocument&AppID={{ '{{ appId }}' }}";
			$(curFrame).attr("dsrc", url );
		}else if ( $("#DOCOVA_ContentType").val() ==  "View" ) {
			if($.trim(tabtitle) == ""){
				var title = $("#DOCOVA_Content").val();
			}else{			 		
				var title = $("#TabTitle").val();	
			}
			//var eUrl =  docInfo.ServerUrl + "/" + docInfo.NsfName + "/AppViews/"  + $("#Content").val() + "?openDocument"
			//eUrl = docInfo.PortalWebPath + "/AppViewsAll/"  + $("#Content").val() + "?openDocument&AppID=" + docInfo.AppID;
		 	var vtTmp = $("#ViewType").val();		//Calendar support
		 	var viewType = vtTmp ? "&viewType=" + vtTmp : "";		//Calendar support
			eUrl = "AppViewsAll/"  + $("#DOCOVA_Content").val().replace(/\/|\\/g, '-') + "?openDocument" + viewType;
		 	//var url = docInfo.ServerUrl + "/" + docInfo.PortalWebPath + "/wViewFrame?readForm&title=" + title + "&surl=" + eUrl ;
			url = "{{ '{{ path(\'docova_homepage\') }}' }}wViewFrame?readForm&title=" + title + "&surl=" + encodeURIComponent(eUrl) + encodeURIComponent("&AppID=") + "{{ '{{ appId }}' }}";
			$(curFrame).attr("dsrc", url );
		}
		else {
			$(curFrame).attr("content", "" );
			$(curFrame).attr("dsrc", "{{ path('docova_nocontentlayout') }}?showmsg=1" );			 
		}
	}else{
		//Content field was switched to "-Select-"
		$(curFrame).attr("content", "" );
		$(curFrame).attr("dsrc", "{{ path('docova_nocontentlayout') }}?showmsg=1" );			 
	}	   	
		
	//-- set column and row sizes
	var parentFrmst = jQuery(curSelFrame).parent();
	var colattr = jQuery(parentFrmst).attr("cols") || "";
	var rowattr = jQuery(parentFrmst).attr("rows") || "";
	colsizes = colattr.split(",");
	rowsizes = rowattr.split(",");
	var framepos = -1;
	jQuery(parentFrmst).find("frame").each(function(index, element){
		if(element == curSelFrame){
			framepos = index;
			return;
		}
	});
	if(rowattr != ""){
		var tempval = $("#FrameHeight").val();
		if(tempval === ""){
		    tempval = "*";
		}
		if(framepos < rowsizes.length){
			rowsizes[framepos] =	tempval;
		}
		 jQuery(parentFrmst).attr("rows", rowsizes.join(","));
	}
	if(colattr != ""){
		var tempval = $("#FrameWidth").val();
		if(tempval === ""){
		    tempval = "*";
		}
		if(framepos < colsizes.length){
			colsizes[framepos] = tempval;
		}	
		jQuery(parentFrmst).attr("cols", colsizes.join(","));						 
	}
}

function showSelected( obj)
{
	var gs = $(".grid-stack");
	oldborder = gs.attr("pborder");
	if ( oldborder && oldborder != ""){
		$(".selected").css("border", oldborder);	
	}else{
		$(".selected").css("border", "");
	}
	$(".selected").removeClass("selected");
	if ( !obj ) return;

	obj.css("border", "2px dashed black");
	obj.addClass("selected");
	
}

function setPropertiesTriggersLayout()
{
	$(".grid-stack-item-content").on("click", function (event)
	{
		event.stopPropagation();
		showSelected($(this));
		getFrameAttributes($(this).parent().get(0));
	});

	hookPanelDelete();

	$("#DOCOVA_ContentType").on("change", function(){
		//initially clear contenttype, content and dsrc attributes
		$(curSelFrame).attr("contenttype", "")
		$(curSelFrame).attr("content", "" );
		$(curSelFrame).attr("dsrc", "" );
		$("#DOCOVA_Content").val("-Select-");
		applyChanges();
		if ( showframecontent ) {
			if ($(curSelFrame).attr("dsrc") !== undefined &&  $(curSelFrame).attr("dsrc") != "" ) {
				var dsrc = $(curSelFrame).attr("dsrc");
				dsrc = dsrc.replace("{{ '{{ path(\'docova_homepage\') }}' }}", docInfo.PortalWebPath + '/');
				dsrc = dsrc.replace("{{ '{{ appId }}' }}", docInfo.AppID);
				dsrc = dsrc.replace(encodeURIComponent("{{ '{{ appId }}' }}"), encodeURIComponent(docInfo.AppID));				
				$(curSelFrame).find(".ifrmcontainer").attr("src", dsrc);
			//$(this).attr("src", dsrc);
			}
		}
	});
	
	$("#DOCOVA_Content").on("change", function(){
		applyChanges();
		if ( showframecontent ) {
			if ($(curSelFrame).attr("dsrc") !== undefined &&  $(curSelFrame).attr("dsrc") != "" ) {
				var dsrc = $(curSelFrame).attr("dsrc");
				dsrc = dsrc.replace("{{ '{{ path(\'docova_homepage\') }}' }}", docInfo.PortalWebPath + '/');
				dsrc = dsrc.replace("{{ '{{ appId }}' }}", docInfo.AppID);
				dsrc = dsrc.replace(encodeURIComponent("{{ '{{ appId }}' }}"), encodeURIComponent(docInfo.AppID));				
				$(curSelFrame).find(".ifrmcontainer").attr("src", dsrc);
			//$(this).attr("src", dsrc);
			}
		}
	})	
	
	$("#FramesetBorder").on("change", function() {
		if ( $(this).val() != "Manual" ){
			$("#fborderwidth").hide();
		}else{
			$("#fborderwidth").show();
		}
		applyChanges();
	});
	
	$("#AllowFrameScroll").on("change", function(){
		applyChanges();
	})
	
	$("#OpenInTab").on("change", function(){
		if($("#OpenInTab")[0].checked){
			$("[name=showtabtitle]").css("display", "");
		}else{
			$("[name=showtabtitle]").css("display", "none");	
			$("#TabTitle").val("");	
		}
		applyChanges();	
	})
	
	//radio button selected to pick a layout
	$("input[name='selLayout']").change(function(){
  		 layoutSelected(this);
	});
	
	$("#DOCOVA_ContentType").change ( function() {
		UpdateOptions($(this).val());
	});
	
	$("#DOCOVA_Content").change ( function() {		//Calendar support
		getViewTypeLocal($(this).find("option:selected").text());
	});			
	
	$(".manualEntry").focus( function(event){
		//event.preventDefault();
		//event.stopPropagation();
		applyChanges();
		$(this).prop("defaultValue", $(this).val());
		currManualEntry = $(this);
	});
	
	$(".inputEntry").on('keypress', function(e) {
		if (e.keyCode == 13) {
			var inputs = $('form[name=_AppLayout]').find(":input:visible");
            var idx = inputs.index(this);

            if (idx == inputs.length - 1) {
        		inputs[0].select()
    		} else {
        		inputs[idx + 1].focus();
        		inputs[idx + 1].select()
    		}
    		return false;
		}
	})
	.on('focus', function(e) {
		if (typeof $(this).val() == typeof undefined) {
			defaultVal = '';
		}
		else {
			defaultVal = $(this).val();
		}
	})
	.on ('change', function(e){
		if ($(this).val() != defaultVal) {
       		$(this).effect("highlight", {color: "#008000"}, 1000);
    		applyChanges();
		}
		defaultVal = null;
	});
}

function doUpdate()
{
	//update the properties first before saving
	showSelected(null);
	applyChanges();
	$("#frameCode").val(getLayoutHtml());
	$('#layoutUnid').val(docInfo.DocKey);
	if(window.parent.fraTabbedTable && window.parent.fraTabbedTable.objTabBar){
		window.parent.fraTabbedTable.objTabBar.RefreshHelper.AddFolderToRefreshList( "appBuilderMainView", docInfo.DocKey);
	}
	return true;
}

function layoutSelected( obj )
{
	var lid = obj.id.substring(3 );
	var oldsrc =  jQuery("#layoutIframe").attr("src");
	oldsrc = oldsrc.replace(docInfo.ServerUrl, '');
	var oldsrcarr = oldsrc.split("&");
	jQuery("#layoutIframe").attr("src", oldsrcarr[0] + "&layout=" + lid);
}

function hookPanelDelete()
{
	$(".rmpanel").click ( function(e) {

		var ans = confirm("Are you sure you want to remove this panel?")
		if (! ans) return;

		e.preventDefault();
    	var grid = $('.grid-stack').data('gridstack'),
        el = $(this).closest('.grid-stack-item')

    	grid.remove_widget(el);

	})
}

function insertFrame(direction)
{
	var frameid = getAvailableFrameID("fraFrame");

	if ( docInfo.DocID == "" )
	{
		var gsi = $(".grid-stack-item").first();
		gridobj.resize(gsi,null, 12);
	}

	//var gridObj = $('.grid-stack').data('gridstack');
	var framehtml = '<div id="' + frameid + '"><div class="grid-stack-item-content"><div style="position:relative;width:100%;height:100%"><iframe class="ifrmcontainer"></iframe></div></div><i title="Move Panel" class="dhgrip fas fa-grip-horizontal"></i><i  title="Delete Panel" class="rmpanel far fa-times"></i></div>';
	gridobj.addWidget($(framehtml), 0, 0, 12, 12, true);
	setPropertiesTriggersLayout();
	 setFrameTargetOptions();
}

function deleteFrame(){
	if(typeof curSelFrame === "undefined" || curSelFrame === null){
		alert("Please select a frame first.");
		return false;
	}

	var parentFrmst = jQuery(curSelFrame).parent();
	var colattr = jQuery(parentFrmst).attr("cols") || "";
	var rowattr = jQuery(parentFrmst).attr("rows") || "";
	colsizes = colattr.split(",");
	rowsizes = rowattr.split(",");

	var framecount = 0;
	var framepos = -1;
	jQuery(parentFrmst).find("frame, frameset").each(function(index, element){
			if(element == curSelFrame){
				framepos = index;
			}
			framecount ++;
	});

	if(framecount > 1){
		jQuery(curSelFrame).remove();
	}else{
		//-- need to remove the parent frameset
		parentFrmst = jQuery(parentFrmst).parent();		
		if(jQuery(parentFrmst).attr("id") == "toplayout" || jQuery(parentFrmst).attr("id") == "dummy"){
			//-- cant remove the last frame
			return;
		}
		colattr = jQuery(parentFrmst).attr("cols") || "";
		rowattr = jQuery(parentFrmst).attr("rows") || "";
		colsizes = colattr.split(",");
		rowsizes = rowattr.split(",");
	
		 jQuery(curSelFrame).parent().remove();		 
		 framepos = -1;
		jQuery(parentFrmst).find("frame, frameset").each(function(index, element){
			if(element == curSelFrame){
				framepos = index;
				return;
			}
		});		 
	}
	
	if(rowattr != ""){
		rowsizes.splice(framepos, 1);	
	}
	if(colattr != ""){
		colsizes.splice(framepos, 1);	
	}
				
	if(colsizes.length > 0 && colsizes[0] != ""){
		jQuery(parentFrmst ).attr("cols", colsizes.join(","));
	}
	if(rowsizes.length > 0 && rowsizes[0] != ""){
		jQuery(parentFrmst ).attr("rows", rowsizes.join(","));
	}
	
	curSelFrame = null;
	
	if(showframecontent){
		setTimeout(function(){ showContent(true); }, 500);
	}			
}



// submits XML request to the agent
function Submit_XMLRequest(request, agentName){
	//send the request to server
	request = encodeURIComponent(request);
	Docova.Utils.showProgressMessage("Processing subscription request. One moment...");
	var processUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/" + agentName  + "?OpenAgent";
	$.ajax({
		type: "POST", 
		url: processUrl,
		data: request,
		cache: false,
		async: false,
		dataType: "xml",
		success: function(xml){
			var xmlobj = jQuery(xml);
			var statustext = xmlobj.find("Result").first().text();
			if(statustext == "OK"){
				Docova.Utils.hideProgressMessage();
				Docova.Utils.messageBox({
					title: "Subscription(s) created.",
					prompt: "The Subscription(s) have been created successfully.",
					icontype: 4,
					msgboxtype: 0,
					width: 300
				});
				UserSubscriptionData.reload();
			}
		},
		error: function(){
			Docova.Utils.hideProgressMessage();
			Docova.Utils.messageBox({
				title: "Subscription(s) not created.",
				prompt: "The subscription(s) were not created successfully.<br>Try again or contact the Adminstrator.",
				icontype: 1,
				msgboxtype: 0,
				width:300
			});
		}
	});
}

function resizeNewPanelHorizontal( ui )
{
	var elem = ui.element.parent();
	var parentWidth = ui.element.parent().width();
	var divTwo = ui.element.prev();
	var id = ui.element.attr("id");
	var remainingSpace = parentWidth - ( ui.element.width() + 15);
	if (remainingSpace < 710) {
		remainingSpace = 710;
		ui.element.width(parentWidth - 690);
		$(".ui-layout-east").resizable();
	}
	else if (ui.element.width() <= 414) {
		$("#eastpane").width("414px").css({
			'left' : 'auto',
			'right' : '0'
		});
		$("#inner-center").width($("#divContentSection").width() - $("#eastpane").outerWidth() - 15);
		$(".ui-layout-east").resizable();
	}
	
    divTwo.width(remainingSpace);

    if ($("#inner-center").width() > ($("#divContentSection").outerWidth() - $("#eastpane").outerWidth() - 40))
	{
		$("#inner-center").width($("#divContentSection").width() - $("#eastpane").width() - 15);
	}
	initGridStack();
}

function showContent(show){
	$(".grid-stack-item").each ( function (){
		if ($(this).attr("dsrc") !== undefined &&  $(this).attr("dsrc") != "" ) {
			var dsrc = $(this).attr("dsrc");
			var computedPath = dsrc;
			if (computedPath.indexOf(docInfo.CurrPath) > -1) {
				computedPath = computedPath.replace(docInfo.CurrPath, "{{ '{{ path(\'docova_homepage\') }}' }}");
			}
			if (computedPath.indexOf(docInfo.AppID) > -1) {
				computedPath = computedPath.replace(docInfo.AppID, "{{ '{{ appId }}' }}");
			}
			$(this).attr("dsrc", computedPath);
			dsrc = dsrc.replace("{{ '{{ path(\'docova_homepage\') }}' }}", docInfo.PortalWebPath + '/');
			dsrc = dsrc.replace("{{ '{{ appId }}' }}", docInfo.AppID);
			dsrc = dsrc.replace(encodeURIComponent("{{ '{{ appId }}' }}"), encodeURIComponent(docInfo.AppID));			
			$(this).find(".ifrmcontainer").attr("src", dsrc);
			//$(this).attr("src", dsrc);
		}
	});
}

function getAvailableFrameID(prefix){
	if(typeof prefix == "undefined" || prefix == ""){
		var prefix = "fra";
	}
	var count = 1;
	
	var frameids = [];

	
	$(".grid-stack").find(".grid-stack-item").each(function(index, element){	
		if(element.id !== ""){
			frameids.push(element.id);
		}
	});
	
	while(frameids.indexOf(prefix + count.toString()) > -1){
	     count ++;
	}
	
	return (prefix + count.toString());
}

function CloseDocument(){
	if(window.parent.fraTabbedTable && window.parent.fraTabbedTable.objTabBar){
		window.parent.fraTabbedTable.objTabBar.CloseTab(docInfo.DocID);
	}
}

function SaveAndClose(refreshView){
	doUpdate();
	var uidoc = Docova.getUIDocument();
	uidoc.save({ andclose: true });
}
</script>
<style type="text/css">
body { background : #f5f6f7; }
.container {
	/* used for elements that should not have padding or scrollbars */
	border: 0;
	padding: 0 !important;
	overflow: hidden !important;
}
.properties_container {
	padding: 2px 5px !important;
	overflow-y: auto;
	height: 98vh;
	font-size: 0.9em;
}
#resize1 { height: 98% !important; position: relative; }
#action_header {
	height: 25px;
	padding: 3px;
	margin-bottom: 5px;
}
.ui-widget-header {
	margin: 0;
	overflow: hidden;
}

.wh,.hh {
	maxlength: 10;
	width: 40px;
}

.wrap {
	padding: 8px;
	height: 100vh;

	/*po*/
}

.resizable {
	width: 100%;
	padding: 0px;
	border: 1px solid rgb(187, 187, 187);
	position: relative;

}

.scroller {
	width: 100%;
	height: 100%;
	overflow: auto;
}
	
.scroller2 { overflow: hidden }

.west {
	position: absolute;
	width: 25%;
	height: 100%;
	left: 0px;
}

.east {
	position: absolute;
	right: 0px;
	width: 75%;
	height: 100%;
}

#layoutIframe {
	min-width: 200px;
	min-height: 200px;
}

.ui-resizable-s {
	cursor: s-resize;
	height: 8px;
	bottom: 0;
	background-color: rgb(221, 221, 221);
}

.ui-resizable-n {
	cursor: n-resize;
	height: 8px;
	bottom: 0;
	background-color: rgb(221, 221, 221);
}

.ui-resizable-e {
	cursor: e-resize;
	width: 12px;
	bottom: 0;
	background-color: rgb(221, 221, 221);
}

.ui-resizable-ghost {
	opacity: 0 !important;
}

.innerre {
	transform:scale(0.98); 
	overflow:auto; 
	width:100%; 
	border:2px solid darkgray;
	padding:10px;
}

iframe {
	
	 pointer-events: none;
}

.grid-stack > .grid-stack-item > .grid-stack-item-content{
  background: white;
  box-shadow : 0 0 35px 0 rgba(154,161,171,.15);
  border: 2px dashed darkgray;
 
  opacity: 0.6;
  overflow:hidden;
}

.dhgrip {
	cursor: move;
	 margin-left:15px;
	 position:absolute;
	 top:4px;
	 font-size:1.4em;
	 color:balck;
}

.rmpanel {
	cursor: default;
    position:absolute;
    top:4px;
    right: 16px;
    font-size:1.4em;
    color:black;

}

.ifrmcontainer {
	position:absolute;
	top:0px;
	border:0px ;
	width:100%;
	height:100%;
}
</style>
</head>
<body text="#000000" bgcolor="#f5f6f7">
	<form onsubmit="doUpdate(); return true;" method="post" action="" name="_AppLayout">
		<div id="divContentSection" class="app-form" style="display: none;">
			<div class="ui-layout-center" id="inner-center">
            	<div class="resizable1" id="resize1">
            		<div id="action_header" class="tabs ui-tabs ui-widget ui-widget-header"></div>
					<div id="ltab" style="position:relative;">
						<div id="layout" class="innerre" style="position:relative;">
    	            	{% if layouthtml and oldcode %}
    						<iframe id="layoutIframe" style=" width: 1920px; top: 0px; left: 0px; height: 1080px; -webkit-transform: scale(0.9); -moz-transform-scale(0.9); transform: scale(0.9)" align="center" src="{% if layout %}{{ path('docova_applayoutcontainer', {'layout' : layout.getId }) }}{% else %}{{ path('docova_applayoutcontainer') }}{% endif %}?OpenPage" border="1"></iframe>
    					{% elseif layouthtml and not oldcode %}
    						{% include layouthtml %}
    					{% else %}
    		    			<div class="grid-stack" pmargin="5" pvspacing="5" ppadding="0" pleft="0" pright="5" pshadow="true" >
    							<div id= "fraFrame1" class="grid-stack-item selectable" elem='panel' data-gs-x="0" data-gs-y="0" data-gs-width="12" data-gs-height="48" dsrc="{{ path('docova_emptycontent') }}" >
    								<div class="grid-stack-item-content">
    									<iframe class="ifrmcontainer" src="{{ path('docova_emptycontent') }}"></iframe>
    								</div>
    								<i title="Move Panel" class="dhgrip fas fa-grip-horizontal"></i>
    								<i  title="Delete Panel" class="rmpanel far fa-times"></i>
    							</div>
    							<div id="fraFrame2" class="grid-stack-item selectable" elem='panel' data-gs-x="12" data-gs-y="0" data-gs-width="36" data-gs-height="48" dsrc="{{ path('docova_emptycontent') }}">
    								<div class="grid-stack-item-content">
    									<iframe class="ifrmcontainer" src="{{ path('docova_emptycontent') }}"></iframe>
    								</div>
    								<i title="Move Panel" class="dhgrip fas fa-grip-horizontal"></i>
    								<i title="Delete Panel" class="rmpanel far fa-times"></i>
    							</div>
    						</div>
    					{% endif %}
    					</div>
    				</div>
        		</div>
        		<!-- end resize1 -->

				<ul id="tdActionBar">
					<li><a onclick="Docova.Utils.messageBox({
							width: 400,
							title: '{% trans %}Closing Layout{% endtrans %}',
							prompt: '{% trans %}Would you like to save the changes to this layout?{% endtrans %}',
							msgIcon : 'ui-icon-close',
							msgboxtype : 4,
							onYes: function() { SaveAndClose(true) },
							onNo: function() { 	
								window.parent.fraTabbedTable.objTabBar.RefreshHelper.AddFolderToRefreshList( 'appBuilderMainView', docInfo.FormUNID);
								window.parent.fraTabbedTable.objTabBar.CloseTab(docInfo.FormUNID, true, 'appBuilderMainView');
 							}
						});
						return false;" href="" primary="ui-icon-close" secondary="">{% trans %}Close{% endtrans %}</a></li>
					<li><a href="" onclick="$('form[name=_AppLayout]').submit(); return false;" primary="ui-icon-check" secondary="">{% trans %}Save and Close{% endtrans %}</a></li>
					<li><a onclick="insertFrame('left'); return false;" href="" primary="" secondary="" title="{% trans %}Insert Frame{% endtrans %}"><i class="far fa-share-square"></i></a></li>
				</ul>
			</div>
			<!-- end inner-center -->
			<div class="ui-layout-east" id="eastpane" style="right:0;">
        		<div id="right-panel-tabs">
        			<ul id="vertical-tabs">
   						<li title="{% trans %}Layout Properteis{% endtrans %}"><a href="#layoutProperties" class="far fa-layer-group"></a></li>
   						<li title="{% trans %}Frame Properties{% endtrans %}"><a href="#frameProperties" class="far fa-tasks"></a></li>
   						<li title="{% trans %}Layout Style{% endtrans %}" style="padding-top:0.1em;"><a href="#layoutStyle" class="fab fa-css3"></a></li>
        			</ul>
   					<div id="layoutProperties" class="properties_container">
       					<h3 class="tool_box_header ui-widget-header" id="element-type">{% trans %}Layout Properteis{% endtrans %}</h3>
						<table width="100%" class="tblRows">
							<tr valign="top">
								<td width="30%" class="frmLabel">{% trans %}Name{% endtrans %}:</td>
								<td width="70%"><input type="text" name="layoutID" value="{{ layout ? layout.getLayoutId : '' }}" id="layoutID" class="inputEntry prp_inputs"></td>
							</tr>
							<tr valign="top">
								<td width="30%" class="frmLabel">{% trans %}Alias{% endtrans %}:</td>
								<td width="70%"><input type="text" name="DEAlias" value="{{ layout ? layout.getLayoutAlias : '' }}" id="DEAlias" class="inputEntry prp_inputs"></td>
							</tr>
							<tr valign="top">
								<td width="30%" class="frmLabel">{% trans %}Starting layout{% endtrans %}:</td>
								<td width="70%">
									<label><input type="checkbox" name="layoutIsDefault" {{ layout and layout.getLayoutDefault ? 'checked' : '' }} value="1">{% trans %}Default layout for application{% endtrans %}</label>
								</td>
							</tr>
							<tr valign="top">
								<td width="30%" class="frmLabel">{% trans %}Design replace{% endtrans %}:</span></td>
								<td width="70%">
									<label><input type="checkbox" name="ProhibitDesignUpdate" {{ layout and layout.getProhibitDesignUpdate ? 'checked' : '' }} value="PDU" id="ProhibitDesignUpdate">{% trans %}Prohibit Design Update{% endtrans %}</label>
								</td>
							</tr>
						</table>
					</div>
   					<!-- end layoutProperties-->

					<div id="frameProperties" class="properties_container">
       					<h3 class="tool_box_header ui-widget-header" id="element-type">{% trans %}Frame Properties{% endtrans %}</h3>
						<table class="tblRows" width="100%" border="0" cellspacing="0" cellpadding="0">
							<tr valign="top">
								<td class="frmLabel" width="40%">{% trans %}Frame Name{% endtrans %}:</td>
								<td width="60%"><input type="text" name="FrameID" value="" id="FrameID" class="inputEntry prp_inputs" /></td>
							</tr>
							<tr valign="top">
								<td class="frmLabel" width="40%">{% trans %}Default target for links in frame{% endtrans %}:</td>
								<td width="60%"><select  class="inputEntry combobox" id="DefaultTarget" name="DefaultTarget"></select>
									
							</tr>
							<tr valign="top">
                                <td width="40%" class="frmLabel">{% trans %}Quick Width{% endtrans %}:</td>
                                <td width="60%">
                                    <button class="docova_quick_width">1/4</button><button class="docova_quick_width">1/3</button><button class="docova_quick_width">1/2</button><button class="docova_quick_width">2/3</button><button class="docova_quick_width">3/4</button><button class="docova_quick_width">full</button>
                                    
                                </td>
                            </tr>
                            <tr valign="top">
                                <td width="40%" class="frmLabel">{% trans %}Quick Height{% endtrans %}:</td>
                                <td width="60%">
                                    <button class="docova_quick_height">1/4</button><button class="docova_quick_height">1/3</button><button class="docova_quick_height">1/2</button><button class="docova_quick_height">2/3</button><button class="docova_quick_height">3/4</button><button class="docova_quick_height">full</button>                                    
                                </td>
                            </tr>
							<tr valign="top">
								<td  class="frmLabel" width="40%">{% trans %}Allow frame scroll{% endtrans %}:</td>
								<td width="60%">
									<label> <input type="checkbox" name="AllowFrameScroll" value="1" checked id="AllowFrameScroll">{% trans %}Yes{% endtrans %}</label>
								</td>
							</tr>
							<tr valign="top">
								<td class="frmLabel" width="40%">{% trans %}Content{% endtrans %}:</td>
								<td width="60%">
									<select name="DOCOVA_ContentType" id="DOCOVA_ContentType" class="inputEntry combobox">
										<option>-Select-
										<option value="Outline">Menu
										<option>View
										<option>Page
										<option>Layout
										<option>Form
									</select>
								</td>
							</tr>
							<tr valign="top">
								<td class="frmLabel" width="40%">{% trans %}Select Content{% endtrans %}:</td>
								<td width="60%">
									<select name="DOCOVA_Content" id="DOCOVA_Content" class="inputEntry combobox">
										<option>-Select-
									</select>
								</td>
							</tr>
							<tr valign="top">
								<td class="frmLabel" width="40%">{% trans %}Open in tab?{% endtrans %}</td>
								<td width="60%">
									<label> <input type="checkbox" name="OpenInTab" value="1" checked id="OpenInTab">{% trans %}Yes{% endtrans %}</label>
								</td>
							</tr>
							<tr valign="top">
								<td class="frmLabel" width="40%">{% trans %}Tab title{% endtrans %}:</td>
								<td width="60%"><input type="text" name="TabTitle" value="" id="TabTitle" class="inputEntry prp_inputs"></td>
							</tr>
							<tr valign="top">
								<td class="frmLabel" width="40%">{% trans %}Additional Style:{% endtrans %}</td>
								<td width="60%">
									<input type="text" name="FrameCustomStyle" value="" id="FrameCustomStyle" class="inputEntry prp_inputs">
								</td>
							</tr>
						</table>
					</div>
					<!-- end frameProperties-->

					<div id="layoutStyle" class="properties_container">
       					<h3 class="tool_box_header ui-widget-header" id="element-type">{% trans %}Layout Style{% endtrans %}</h3>
						<table class="tblRows" width="100%" border="0" cellspacing="0" cellpadding="0">
							<tr valign="top">
								<td width="40%" class="frmLabel">{% trans %}Layout Background Color{% endtrans %}</td>
								<td width="60%">
									<input type='text' class="colorpickerhelper" />
									<input class="inputEntryColor inputEntryCSS cssapplynow" name="PanelsBackgroundColor" value="#ffffff" id="PanelsBackgroundColor" type="color">
								</td>
							</tr>
							<tr valign="top">
								<td width="40%" class="frmLabel">{% trans %}Layout Margin{% endtrans %}</td>
								<td ><input type="text" value="0" style="width:40px" class="cssapplynow" id="LayoutMargin">px</td>
							</tr>							
							<tr valign="top">
								<td width='40%' class="frmLabel">{% trans %}Panel Padding{% endtrans %}</td>
								<td ><input type="text" value="2"  style="width:40px" class="cssapplynow" id="LayoutPadding">px</td>
							</tr>
							<tr valign="top">
								<td width="40%" class="frmLabel">{% trans %}Panel Left Spacing{% endtrans %}</td>
								<td ><input type="text" value="0" style="width:40px" class="cssapplynow" id="PanelsHorizontalSpacingL">px</td>
							</tr>
							<tr valign="top">
								<td width="40%" class="frmLabel">{% trans %}Panel Right Spacing{% endtrans %}</td>
								<td ><input type="text" value="5" style="width:40px" class="cssapplynow" id="PanelsHorizontalSpacingR">px</td>
							</tr>
							<tr valign="top">
								<td width="40%" class="frmLabel">{% trans %}Panel Vertical Spacing{% endtrans %}</td>
								<td ><input type="text" value="5" style="width:40px" class="cssapplynow" id="PanelsVerticalSpacing">px</td>
							</tr>
							<tr valign="top">
								<td width="40%" class="frmLabel">{% trans %}Shadow Effect{% endtrans %}</td>
								<td  colspan=2><input type="checkbox" checked value="1" id="PanelsShadow" class="cssapplynow">Yes</td>
							</tr>
							<tr valign="top">
								<td width="40%" class="frmLabel">{% trans %}Border Type{% endtrans %}</td>
								<td width='60%'>
									<select name="PanelsBorderStyle" id="PanelsBorderStyle" class="inputEntry cssapplynow">
										<option value="none">{% trans %}None{% endtrans %}
										<option value="solid" selected>Solid
										<option value="dashed">Dashed
										<option value="dotted">Dotted
										<option value="double">Double
										<option value="groove">Groove
										<option value="inset">Inset
										<option value="outset">Outset
										<option value="ridge">Ridge
									</select>
								</td>
							</tr>
							<tr valign="top">
								<td width="40%" class="frmLabel">{% trans %}Border Color{% endtrans %}</td>
								<td>
									<input type='text' class="colorpickerhelper" />
									<input class="inputEntryColor inputEntryCSS cssapplynow" name="PanelsBorderColor" value="#D3D3D3"  id="PanelsBorderColor" type="color">
								</td>
							</tr>
							<tr valign="top">
								<td width="40%" class="frmLabel">{% trans %}Border Size{% endtrans %}</td>
								<td width='60%'><input type="text" style="width:40px" value="1" id="PanelsBorderSize" class="cssapplynow">px</td>
							</tr>
							<tr valign="top">
								<td width="40%" class="frmLabel">{% trans %}Border Radius{% endtrans %}</td>
								<td width='60%'><input type="text" style="width:40px" value="4" id="PanelsBorderRadius" class="cssapplynow">px</td>
							</tr>
						</table>
						<input name="ViewType" value="" type="hidden" id="ViewType" />
					</div>
					<!-- end framesetProperties-->
            		<input name="layoutUnid" id="layoutUnid" value="{{ layout ? layout.getId : '' }}" type="hidden" />
            		<input name="frameCode" value="" id="frameCode" type="hidden">
            	</div>
			</div>
		</div>
	</form>
</body>
</html>
