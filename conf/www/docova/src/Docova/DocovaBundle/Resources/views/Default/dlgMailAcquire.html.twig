<!DOCTYPE html><html>
<head>
<title>{% trans %}Import Mail Messages{% endtrans %}</title>
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="CACHE-CONTROL" CONTENT="0">
<META HTTP-EQUIV="EXPIRES" CONTENT="0">
<link rel="stylesheet" type="text/css" href="{{ asset('bundles/docova/js/jstree/themes/style.css') }}">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/smoothness/jquery-ui.css') }}">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/styleFolderControl.css') }}">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/styleDialogBase.css') }}"	type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/font-awesome/css/all.min.css') }}">
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/jquery/jquery.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/sarissa.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/sarissa_ieemu_xpath.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/commonFunctions.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/json2.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/jstree/jstree.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/jquery/jquery-ui.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/folderControl.js') }}" charset="UTF-8"></script>
{% include 'DocovaBundle:Default:scriptMessagesTranslation.html.twig' %}
<script language="JavaScript" type="text/javascript">
var info = {
	"LibID" : "{% if library is defined %}{{ library.getId }}{% endif %}",
	"UserName" : "{{ user.getUserNameDn|replace({'\\': '\\\\'}) }}",
	"UserNameAB" : "{{ user.getUserNameDnAbbreviated|replace({'\\': '\\\\'}) }}",
	"UserNameCN" : "{{ f_Name("[CN]", user.getUserNameDnAbbreviated)|replace({'\\': '\\\\'}) }}",
	"UserRoles" : "$$WebClient;[User]",
	"isSuperuser" : "",
	"isEditMode" : "",
	"HTTP_Referer" : "", 
	"Query_String" : "OpenForm",
	"Query_String_Decoded" : "OpenForm",
	"Path_Info_Decoded" : "{{ path('docova_mailacquire') }}?OpenForm",
	"ServerName" : "{{ app.request.server.get('HTTP_HOST') }}",
	"ServerUrl" : "{{ app.request.getscheme }}://{{ app.request.server.get('HTTP_HOST') }}",
	"NsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length -2] }}",
	"PortalWebPath" : "{{ path('docova_homepage')[:path('docova_homepage')|length -1] }}",
	"PortalNsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length -2] }}",
	"MailServer" : "Prod02/O=DLI",
	"MailServerUrl" : "http://www.dlitools.com/Docova/Dev/JAV/DocovaHome.nsf",
	"MailFile" : "mail\{{ user.getUserProfile.getFirstName[:1]|lower }}{{ user.getUserProfile.getLastName|lower }}.nsf",
	"MailViewPageSize" : "20",
	"PassValidate" : "{{ app.session.get('epass') ? 'true' : '' }}",
	"AcquireType" : "{{ app.request.query.get('acquiretype')|upper }}",
	"Mode" : "{{ app.request.query.get('mode') }}"
};
function getinfovar() {
	return info;
}

$(function() {
	if (info.PassValidate != 'true') 
	{
		var html = '<table style="width:100%; table-layout:fixed;"><tr><td style="padding-bottom: 5px;">{% trans with {'%usermail%': user.getUserMail} %}Please provide a valid password for "%usermail%"{% endtrans %}</td></tr>\
					<tr><td><input type="password" id="pass" name="pass" value="" class="ui-widget ui-widget-content" style="width: 240px;"></td></tr></table>';

		var dlgEnterPass = window.top.Docova.Utils.createDialog({
			id: "divEnterPassword", 
			dlghtml : html,
			title: "{% trans %}Provide Email Password{% endtrans %}",
			height: 200,
			width: 300,
			sourcewindow: window,
			buttons: {
				"Submit": function() {
					if ($.trim(window.top.document.getElementById('pass').value))
					{
						$.ajax({
							type : 'POST',
							url : 'encryptPass',
							data : 'pass=' + encodeURIComponent(window.top.document.getElementById('pass').value),
							async : false
						})
						.done(function( response ) {
							var pssNode = $(response).find('Result[ID="Ret1"]').text();
							if (pssNode == 'OK') {
								window.top.$('#divDlgAcquireMessagesIFrame').attr( 'src', function ( i, val ) { return val; });
								dlgEnterPass.closeDialog();
							}
							else {
								alert(prmptMessages.msgMEA001);
								$('#pass').val('');
							}
						})
						.fail(function(jqXHR, status, errmsg) {
							alert(prmptMessages.msgMEA002 + errmsg);
						});
					}
				}
	      	},
	      	onOpen: function(event) { 
		      	window.top.$(".ui-dialog-titlebar-close", window.top.$('#divEnterPassword').parent()).hide(); 
		    }
		});
	}
});

var xmlMailViewData = new xmlDataIsland();

var xmlFolderDataProcessed = Sarissa.getDomDocument();
var xmlFolderData = Sarissa.getDomDocument();
var xmlFolderStyle = Sarissa.getDomDocument();
var xmlMailDocs = Sarissa.getDomDocument();
var xmlMailAttachmentStyle = Sarissa.getDomDocument();

var startRecord=1; 
var recordCount=0;
var currentView=""; // currently scrolled view name
var currentFolderID=""; // id of current folder selected - used to back out of folder navigation
var bigPageSize=0; // fast scroll page size
var scrollPageSize=0; //current scroll page size - big or regular depending which scroll button was pressed
var importedCount=0;
var selectedEntry = null; // selected row object
var tempDocUNID = "";

var srcWindow = null;
var srcDoc = null;
var srcDocInfo = null;

/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: InitDialog
 * Called when dialog is first opened.  Initializes settings.
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function InitDialog()
{
	InitVars(info);

	jQuery("button").button();		//--style buttons
	
	srcWindow = window.top.Docova.GlobalStorage["divDlgAcquireMessages"].sourcewindow;	
	srcDocInfo = srcWindow.getinfovar();
	srcDoc = window.top.Docova.GlobalStorage["divDlgAcquireMessages"].sourcedocument;

	//-- get data island for mail view records ready
	xmlMailViewData.id = "xmlMailViewData";
	xmlMailViewData.setTemplateName("otblMailRecords");
    xmlMailViewData.ondatasetcomplete = function() {formatMailEntries()};		
	
	Initialize(); //-- initialize the folder control
	GetMailFolderInfo();	//--retrieve folder listing
	//-- Inbox folder content will be displayed by the onFoldersReady parameter
	
	scrollPageSize=(docInfo.MailViewPageSize)? parseFloat(docInfo.MailViewPageSize) : 20;	     

	jQuery("#tblContainer td.Folders.resizable").resizable({handles: "e,w"});
	
	if(docInfo.AcquireType == "S"){
	    jQuery("#divSection1").height(jQuery("#divSection1").height() - 80);
	    jQuery("#divMailRecords").height(jQuery("#divMailRecords").height() - 80);	    	    
	    jQuery("#divAcquireOptions").show();
	    if(! window.top.Docova.IsPluginAlive){
			jQuery("#spanAcquireFiles").children().prop("disabled", "disabled");
			jQuery("#spanAcquireOptionFiles").prop("disabled", "disabled").hide();
	    }
	}

}//--end InitDialog

/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: formatMailEntries
 * converts mail file sizes from bytes to descriptive format and hides selection column when in acquire 
 * single message mode
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function formatMailEntries(){
    if(docInfo.AcquireType == "S"){
		jQuery("#tblMailRecords td.col1").find("input.selectioncheckbox").hide();
	}
	jQuery("#tblMailRecords td.col5").each(function(index, element){
		var displayval = "";
		var bytevalue = parseInt(jQuery(this).text().trim());			
		jQuery(this).text(bytesToSize(bytevalue));
	});
}//--end formatMailEntries


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: bytesToSize
 * converts a byte value to a corresponding descriptive size in Bytes, KB, MB, GB, or TB
 * Inputs: bytes - size in bytes
 * Returns: string - value formatted to appropriate data size
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function bytesToSize(bytes) {
   var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
   if (bytes == 0) return '0 Byte';
   var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
   return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];
}//--end bytesToSize


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: GetMailFolderInfo
 * retrieves the list of folders from user's mail file
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function GetMailFolderInfo()
{
	//------------------------------------------------------------------------------------------------	
	ShowProgressMessage("{% trans %}Retrieving mail folders. Please wait{% endtrans %}...");
	//------------------------------------------------------------------------------------------------	
	var requesturl = "/" + docInfo.NsfName + "/MailServices?OpenAgent&type=xml";
	var request="";
			
	//--build the access query request
	request += "<Request>";
	request += "<Action>GETMAILFOLDERINFO</Action>";
	request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "<mailserver><![CDATA[" + docInfo.MailServer + "]]></mailserver>";
	request += "<mailserverurl><![CDATA[" + docInfo.MailServerUrl + "]]></mailserverurl>";
	request += "<mailfile>" + docInfo.MailFile + "</mailfile>";	
	request += "</Request>";

	var gotdata = false;			
	jQuery.ajax({
		async: false,
		type: "POST",
		url: requesturl,
		data: request,
		dataType: "xml",
		success: function(xml) {
			xmlFolderData = xml;
 			gotdata = true;
		}
	});	
	
	//------------------------------------------------------------------------------------------------	
	HideProgressMessage();
	//------------------------------------------------------------------------------------------------
	
	if(gotdata){
		// get style sheet
		if (window.DOMParser)
  		{
  			var parser=new DOMParser();
  			xmlFolderStyle=parser.parseFromString(jQuery("#xmlFolderStyle").text(),"text/xml");
		 }else{
		 	return false;
		 }
		// get folder data		
		// create an instance of XSLTProcessor
		var processor = new XSLTProcessor();
		// configure the processor to use our stylesheet 
		processor.importStylesheet(xmlFolderStyle);
		// transform and store the result as a new doc
		xmlFolderDataProcessed = processor.transformToDocument(xmlFolderData);
		// load transformed xml into folder listing
		DLITFolderView.LoadFoldersFromXML(xmlFolderDataProcessed, "Mail", "{{ asset('bundles/docova/images/FIcon_Mail2.png') }}");		
	}
}//--end GetMailFolderInfo


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: openDefaultFolder 
 * Triggers the opening of the Inbox folder when folder list has loaded
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function openDefaultFolder(){
	var folderpath = "Inbox";
	var targetnode = DLITFolderView.jstree.get_node(DLITFolderView.hashCode(folderpath));
	if(targetnode){
		DLITFolderView.jstree.select_node(targetnode, false, false);
	}
}//--end openDefaultFolder


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: ViewFTClear
 * clears the search query and resets the view results
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function ViewFTClear(){
	jQuery("#inpQuery").val("");
	GetViewEntries(currentView, -1);
}//--end ViewFTClear

/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: ViewFTSearch
 * triggers view refresh based on search query input
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function ViewFTSearch(){
	GetViewEntries(currentView, -1);
}//--end ViewFTSearch



/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: GetViewEntries
 * retrieves a page of records from the selected mail view
 * Inputs: viewName - string - name of view to load data from
 *              start - integer - entry in the view to start retrieval from
 *              count - integer - number of entries to return
 *              sortcolumn - integer - view column to sort data by
 *              searchKey - string - key to use to locate matching entries (if searching)
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function GetViewEntries(viewName, start, count, sortcolumn, searchKey)
{
	//------------------------------------------------------------------------------------------------	
	ShowProgressMessage("{% trans %}Retrieving mail records. Please wait{% endtrans %}...");
	//------------------------------------------------------------------------------------------------	
	
	if(count ==undefined || count == null){
		var count = docInfo.MailViewPageSize;
	}
	
	if(start == undefined || start == null){
		var start = 1;
	}
	
	//----------------- use agent 
	var requesturl = "/" + docInfo.NsfName + "/MailServices?OpenAgent&type=xml";
	var request="";
	var colCount = 0;
	
	viewName = (viewName) ? viewName : "INBOX";
	var viewNameEnc; //uni-encoded viewname
	viewNameEnc = viewName;
		
	//--build the request
	request += "<Request>";
	request += "<Action>READMAILVIEW</Action>";
	request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "<mailserver><![CDATA[" + docInfo.MailServer + "]]></mailserver>";
	request += "<mailserverurl><![CDATA[" + docInfo.MailServerUrl + "]]></mailserverurl>";
	request += "<mailfile>" + docInfo.MailFile + "</mailfile>";
	if ( document.all.inpQuery.value != "" ){
		request += "<ftsearch><![CDATA[" + jQuery("#inpQuery").val() + "]]></ftsearch>";
	}
	request += "<viewname>" + viewNameEnc + "</viewname>";
	request += "<start>" + start + "</start>";
	request += "<count>" + count + "</count>";
	request += "</Request>";
     		
	jQuery.ajax({
		async: false,
		type: "POST",
		url: requesturl,
		data: request,
		dataType: "xml",
		success: function(xml) {			
			xmlMailDocs = xml;
			var recCountNodeText = jQuery(xmlMailDocs.selectSingleNode("//Results/Result[@ID='Ret1']/toplevelentries")).text().trim();
			if(recCountNodeText == ""){
				var recCountNodeText = jQuery(xmlMailDocs.selectSingleNode("//Results/Result[@ID='Ret1']/viewentries")).attr("toplevelentries").trim();						
			}			
			recordCount=parseFloat(recCountNodeText);		
			var viewEntryNode = xmlMailDocs.selectSingleNode("//Results/Result[@ID='Ret1']/viewentries");
			if (window.DOMParser)
  			{
  				var parser=new DOMParser();
  				xmlMailDocs=parser.parseFromString(new XMLSerializer().serializeToString(viewEntryNode),"text/xml");
		 	}else{
		 		return false;
		 	}			
			xmlMailViewData.oxml = xmlMailDocs;
			xmlMailViewData.XMLDocument = xmlMailDocs;
		     xmlMailViewData.process();	
		 	jQuery("#tblMailRecords").show();		
		},
		fail: function(){		
			var xmlDom = jQuery.parseXML("<viewentries/>");
			xmlMailViewData.oxml = xmlDom;
			xmlMailViewData.XMLDocument = xmlDom;
		     xmlMailViewData.process();		
			recordCount=0;
			jQuery("#tblMailRecords").hide();		
		}
	});		
		
	if(start == undefined || start == null || isNaN(start) || start=="")
	{
		startRecord = 1;
	}
	else if(start=="-1")
	{
		startRecord = (recordCount +1) - count
	}
	else
	{
		startRecord = start
	}
	
	var recCountString = "";
	if( recordCount > count){
		var startRecordNo = parseFloat(startRecord);
		var pageSizeNo = scrollPageSize-1;
		recCountString = (startRecordNo < 0)? " 1 to " : startRecord + " to ";
		recCountString += ( startRecordNo + pageSizeNo < recordCount)? startRecord + pageSizeNo : recordCount;
		recCountString += " of " + recordCount;
	}
	jQuery("#spanRecCount").text(recCountString);
	UpdateScrollButtons();
	
	//------------------------------------------------------------------------------------------------	
	HideProgressMessage();
	//------------------------------------------------------------------------------------------------	
		
}//--end GetViewEntries



/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: GetSelectedUNIDs
 * Returns an array of document unique ids for selected mail documents
  * Returns: string array containing document unids of selected entries
 *------------------------------------------------------------------------------------------------------------------------------------------- */
 function GetSelectedUNIDs()
{
	var idList= new Array();
	var recordset = xmlMailViewData.recordset;
	if(recordset){
		var maxrows = recordset.getRecordCount();
		for(var row=0; row<maxrows; row++){
			recordset.AbsolutePosition(row);
			var selected = recordset.Fields("Selected").getValue();
			if(selected == "1"){
				idList[idList.length] = recordset.Fields("id").getValue();			
			}		
		}
	}

	return idList;
}//--end GetSelectedUNIDs()


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: DeselectEntries
 * deslects selected entries in the list
 *------------------------------------------------------------------------------------------------------------------------------------------- */
 function DeselectEntries()
{
	selectedEntry = null;
	
	var recordset = xmlMailViewData.recordset;
	if(recordset){
		var maxrows = recordset.getRecordCount();
		for(var row=0; row<maxrows; row++){
			recordset.AbsolutePosition(row);
			var selected = recordset.Fields("Selected").getValue();
			if(selected == "1"){
				recordset.Fields("Selected").setValue("0");			
			}		
		}
	}
	
	xmlMailViewData.Refresh();
}//--end DeselectEntries


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: ImportSelected
 * Imports selected messages
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function ImportSelected()
{
	var selUnids = GetSelectedUNIDs();
	if(selUnids.length==0){ return false;}
	
	//------------------------------------------------------------------------------------------------	
	ShowProgressMessage("Importing messages. Please wait...");
	//------------------------------------------------------------------------------------------------	
	var requesturl = "/" + srcDocInfo.NsfName + "/MailServices?OpenAgent";
	var request="";
				
	//--build the import request
	request += "<Request>";
	request += "<Action>IMPORTMESSAGES</Action>";
	request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "<mailserver><![CDATA[" + docInfo.MailServer + "]]></mailserver>";
	request += "<mailfile>" + docInfo.MailFile + "</mailfile>";	
	if(srcDocInfo.DocumentNumber){ //Importing messages from a document
		request += "<DocKey>" + srcDocInfo.DocKey + "</DocKey>";
		request += "<DocID>" + srcDocInfo.DocID + "</DocID>";		
		request += "<ImportOrigin>" + "Document" + "</ImportOrigin>"
	}else{ //Importing messages from a folder view
		request += "<LibraryKey>" + srcDocInfo.LibraryKey + "</LibraryKey>";
		request += "<FolderID>" + srcDocInfo.FolderID + "</FolderID>";	
		request += "<FolderUnid>" + srcDocInfo.DocID + "</FolderUnid>";
		request += "<ImportOrigin>" + "Folder" + "</ImportOrigin>"
	}
	for(var k=0; k<selUnids.length; k++){
		request +="<Unid>" + selUnids[k] + "</Unid>";
	}
	request += "</Request>";
			
	DeselectEntries();
	
	var successful = false;	
	var httpObj = new objHTTP();
	if(httpObj.PostData(request, requesturl)) {	
		if(httpObj.status=="OK") {		
			successful = true;
			importedCount +=selUnids.length;			
		}
	}
	
	//------------------------------------------------------------------------------------------------	
	HideProgressMessage();
	//------------------------------------------------------------------------------------------------
	
	if(successful){
		window.top.Docova.Utils.messageBox({icontype: 4, msgboxtype : 0, prompt: "Completed importing selected messages.", title: "Mail Import", width: 400});

		//--- record msg import in audit log
		var requesturl = srcDocInfo.ServerUrl + "/" + srcDocInfo.NsfName + "/DocumentServices?OpenAgent";
				
		var request="";
		request += "<Request>";
		request += "<Action>IMPORTEMAIL</Action>";
		request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
		request += "<Unid>" + srcDocInfo.DocID + "</Unid>";
		request += "</Request>";

		var httpObj = new objHTTP();
		httpObj.PostData(request, requesturl)
		
	}else{
		window.top.Docova.Utils.messageBox({icontype: 1, msgboxtype : 0, prompt: "A problem occurred importing selected messages. Please check to see if the selected messages were imported successfully.", title: "Mail Import", width: 400});	
	}	
	
	return successful;
}//--end ImportSelected


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: UpdateScrollButtons
 * updates the state of scroll buttons depending on record count, start record etc
 *------------------------------------------------------------------------------------------------------------------------------------------- */
 function UpdateScrollButtons()
{
	var $firstBtn = jQuery("#spanScrollFirst");
	var $lastBtn = jQuery("#spanScrollLast");
	var $fwdBtn = jQuery("#spanScrollFwd");
	var $fastFwdBtn = jQuery("#spanScrollFastFwd");
	var $backBtn = jQuery("#spanScrollBack");
	var $fastBackBtn = jQuery("#spanScrollFastBack");
	pageSize=parseFloat(docInfo.MailViewPageSize);

	if(recordCount <= pageSize){
		jQuery("#divScrollButtons").hide();
		return;
	}else{
		jQuery("#divScrollButtons").show();
	}
	//----------------------------------------------
	jQuery("#divScrollButtons").prop('disabled', (recordCount <=0));
	//----------------------------------------------
	$fwdBtn.prop("title",  "Next " + pageSize + " records");
	$backBtn.prop("title", "Previous " + pageSize + " records");
	
	//-------------- compute the appropriate fast scroll page size --------------
	if(recordCount > 40*pageSize){
		bigPageSize = 10*pageSize;
		}
	else if(recordCount > 20*pageSize){
		bigPageSize = 5*pageSize;
		}
	else if(recordCount > 10*pageSize){
		bigPageSize = 2*pageSize;
		}
	else{
		bigPageSize = 0;
		}
	//----------------------------------------------
	$fastFwdBtn.prop({"disabled" : (bigPageSize ==0),
		"title" :  (bigPageSize ==0) ? "" : "Jump " + bigPageSize + " records"
	});

	$fastBackBtn.prop({"disabled" : (bigPageSize ==0),
		"title" :  (bigPageSize ==0) ? "" : "Jump " + bigPageSize + " records"
	});
}//--end UpdateScrollButtons


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: ImportBeforeNavigating
 * import handler for messages selected prior to navigating to the next page or view
 * Inputs: cb - callback function - function or anonymous function to run after check/prompt
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function ImportBeforeNavigating(cb)
{	
	var selUnids = GetSelectedUNIDs();
	if(selUnids.length>0 && docInfo.AcquireType != "S"){
			window.top.Docova.Utils.messageBox({
				icontype: 2, 
				msgboxtype : 3, 
				prompt: "Would you like to import selected messages prior to navigating away from current set of records?", 
				title: "Mail Import", 
				width: 400,
				onYes: function(){
					ImportSelected();
					if(typeof cb == "function"){
						cb();
					}
				},
				onNo: function(){
					if(typeof cb == "function"){
						cb();
					}					
				},
				onCancel: function(){
					//-- need to reset folder highlight since it will have changed and we want to cancel - rollback - the operation
					var targetnode = DLITFolderView.jstree.get_node(currentFolderID);
					if(targetnode){
						DLITFolderView.jstree.deselect_all();
						DLITFolderView.jstree.select_node(targetnode, true, false);
					}
				}				
			});
	}else{
		if(typeof cb == "function"){
			cb();
		}	
	}
}//--end ImportBeforeNavigating


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: ScrollView
 * view scroll button handler
 * Inputs: scrollButton - element id - button selected
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function ScrollView(scrollButton)
{
	if(scrollButton.disabled) {return;}

	//-- conditional check to see if anything selected that needs to be imported before navigating away
	ImportBeforeNavigating(function(){
		//-- start scroll code
		startRecordNo = parseFloat(startRecord);
		pageSize=parseFloat(docInfo.MailViewPageSize);

		//------------------------ first page --------------
		if(scrollButton.id == "spanScrollFirst" && startRecordNo > 1){
			scrollPageSize=pageSize;
			GetViewEntries(currentView, 1);
			return;
		}
		//------------------------ last page --------------
		if(scrollButton.id == "spanScrollLast" && (pageSize < recordCount)){
			scrollPageSize=pageSize;
			GetViewEntries(currentView, recordCount-pageSize +1);
			return;
		}
		//------------------------ page fwd --------------
		if(scrollButton.id == "spanScrollFwd" && (startRecordNo + pageSize < recordCount)){
				scrollPageSize=pageSize;
				GetViewEntries(currentView, startRecordNo + pageSize);
				return;
		}
		//------------------------ page back --------------
		if(scrollButton.id == "spanScrollBack" && (startRecordNo > 1)){
			scrollPageSize=pageSize;
			if(startRecordNo >= pageSize){
				GetViewEntries(currentView, startRecordNo - pageSize);
				return;
			}else{
				GetViewEntries(currentView, 1);
				return;
			}
		}
		//------------------------ page fast fwd --------------
		if(scrollButton.id == "spanScrollFastFwd" && (startRecordNo + bigPageSize < recordCount)){
			scrollPageSize=bigPageSize;
			GetViewEntries(currentView, startRecordNo + bigPageSize);
			return; 
		}
		//------------------------ page fast back --------------
		if(scrollButton.id == "spanScrollFastBack" && (startRecordNo > 1)){
			scrollPageSize=bigPageSize;
			if(startRecordNo >= bigPageSize){
				GetViewEntries(currentView, startRecordNo - bigPageSize);
				return;
			}else{
				GetViewEntries(currentView, 1);
				return;
			}
		}		
		//--end scroll code
	});	
}//--end ScrollView



/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: OpenView
 * View/folder selection handler. Triggered by folder control when user selects a folder.
  *------------------------------------------------------------------------------------------------------------------------------------------- */
function OpenView()
{
	//--check to see if we are navigating to the same folder that is currently open
	if(DLITFolderView.CurrentFolderID == currentFolderID){
		//-- do nothing
	}else{
		//-- conditional check to see if selected entries need to be imported before navigating away
		ImportBeforeNavigating(function() {
			//--start open view code	
			viewName = DLITFolderView.CurrentUNID;	
			if(viewName == ""){return;}

			GetViewEntries(viewName, 1);
			
			currentView = viewName;
			currentFolderID = DLITFolderView.CurrentFolderID;
			//--end open view code
		});
	}	
}//--end OpenView



/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: SelectEntry
 * in single select mode highlights the currently selected record and displays additional choice selections
 * Inputs: obj - tr element selected
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function SelectEntry(obj)
{
	if(docInfo.AcquireType != "S"){
		return;   //-- quit since we only select single entries when in the single selection mode
	}

	var recordset = xmlMailViewData.recordset;
	if(selectedEntry){
		if(obj == selectedEntry){return;} //already selected so quit now		
		jQuery(selectedEntry).removeClass("ui-state-hover");  //remove highlight
		//jQuery(selectedEntry).find("input[datafld=selected]").val(""); //clear checkbox
		var row = parseInt(jQuery(selectedEntry).find("input[datafld=id]").attr("record"));  //get row number 
		if(!isNaN(row)){
			recordset.AbsolutePosition(row);
			recordset.Fields("Selected").setValue("0");
		}
	}			

	jQuery("#divFileList").html("");
	
	jQuery(obj).addClass("ui-state-hover");
	//jQuery(obj).find("input[datafld=selected]").val("1");  //set checkbox
	var row = parseInt(jQuery(obj).find("input[datafld=id]").attr("record")); //get row number
	if(!isNaN(row)){			
		recordset.AbsolutePosition(row);
		recordset.Fields("Selected").setValue("1");
		var unid = recordset.Fields("id").getValue();	

		selectedEntry = obj;		
	
		if(SelectedHasFiles()){
			GetEntryInfo(unid);
		}			
	}	
	SetAcquireOptionDefaults();
}//--end SelectEntry


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: DeselectEntry
 * in single select mode removes highlight from the currently selected record and resets additional choice selections
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function DeselectEntry()
{
	if(docInfo.AcquireType != "S"){
		return;   //-- quit since we only select single entries when in the single selection mode
	}

	var recordset = xmlMailViewData.recordset;
	if(selectedEntry){
		jQuery(selectedEntry).removeClass("ui-state-hover");  //remove highlight
		//jQuery(selectedEntry).find("input[datafld=selected]").val(""); //clear checkbox
		var row = parseInt(jQuery(selectedEntry).find("input[datafld=id]").attr("record"));  //get row number 
		if(!isNaN(row)){
			recordset.AbsolutePosition(row);
			recordset.Fields("Selected").setValue("0");
		}
	}			

	selectedEntry = null;
	jQuery("#divFileList").html("");
	SetAcquireOptionDefaults();
}//--end DeselectEntry

/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: SelectedHasFiles
 * checks if selected entry has file attachments
 * Returns: boolean - true or false
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function SelectedHasFiles()
{
	if(!selectedEntry) {return false;}

	var recordset = xmlMailViewData.recordset;
	var row = parseInt(jQuery(selectedEntry).find("input[datafld=id]").attr("record"));  //get row number 
	if(!isNaN(row)){
		recordset.AbsolutePosition(row);
		return (recordset.Fields("hasfiles").getValue() == "1");
	}
	
	return false;
}//--end SelectedHasFiles


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: AcquireMessageSubject
 * imports the selected email subject to the current document
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function AcquireMessageSubject()
{
	if((jQuery("input[name=AcquireSubject]:checked").length == 0) || !selectedEntry) {return true;}
	//-- get subject and copy it into the source document----
	try{
		var row = parseInt(jQuery(selectedEntry).find("input[datafld=id]").attr("record"));  //get row number 
		if(!isNaN(row)){
			var recordset = xmlMailViewData.recordset;		
			recordset.AbsolutePosition(row);
			jQuery("input[name=Subject]:first", srcDoc).val(recordset.Fields("Subject").getValue());
		}		
	return true;
	}catch(e){
		window.top.Docova.Utils.messageBox({prompt: "Message subject acquire failed due to the following error: " + e , icontype: 4,  title: "Mail Acquire", width: 400});
		return false;
		}
}//--end AcquireMessageSubject

/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: AcquireMessageBody
 * imports the selected email body text to the current document
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function AcquireMessageBody(details)
{
	if((jQuery("input[name=AcquireBody]:checked").length == 0) || !selectedEntry || srcDocInfo.TextContentType=="") {return true;}
	//-- get message text and copy it into the source document----
	//------------------------------------------------------------------------------------------------	
	//Using RPC - get the message text from the temporary document
	try{
		if(srcDocInfo.TextContentType=="HTML"){
			//html content editor
			var divider = "<br/><hr/><br/>";

			if(srcWindow.tinyMCE){
				retrieveInlineImages(details.body);
				 
				msgText = convertInlineImgReferences(details.body);
				var docTextContent = srcWindow.tinyMCE.activeEditor.getContent();
				docTextContent += (docTextContent != "")? divider + msgText : msgText;
				srcWindow.tinyMCE.activeEditor.setContent(docTextContent, {format : 'html'});
			}
			else if(jQuery("#dEdit0", srcDoc).length > 0)
			{
				retrieveInlineImages(details.body);
				
				msgText = convertInlineImgReferences(details.body);					
				var curval = jQuery("#dEdit0", srcDoc).html();						
				curval += (jQuery(curval).text().trim() != "") ? divider : "";
				curval += msgText;					
				jQuery("#dEdit0", srcDoc).html(curval);										
			}			
		}
		else{
			//text area
			var divider = "\r\r---------------------------------------------------------------------------------------\r\r";
			var curval = jQuery("#Body", srcDoc).val();				
			curval += (curval != "") ? divider : "";
			curval += details.body.replace("&lt;", "<").replace("&gt;", ">");
			jQuery("#Body", srcDoc).val(curval);				
		}
		return true;
	}catch(e){
		window.top.Docova.Utils.messageBox({prompt: "Message text acquire failed due to the following error: " + e , icontype: 4,  title: "Mail Acquire", width: 400});
		return false;
	}
}

/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: AcquireMessageFiles
 * imports the selected email file attachments to the current document
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function AcquireMessageFiles(details)
{
	if((jQuery("input[name=AcquireFiles]:checked").length == 0) || !selectedEntry || (jQuery("input[name=FileSelect]:checked").length == 0) || !srcDocInfo.HasAttachmentsSection) {return true;}

	//------------------------------------------
	var selectedFiles = new Array();
	if(jQuery("input[name=FileSelect]").length > 0){
		if(jQuery("input[name=AcquireOptionFiles][value=A]:checked").length > 0){
			// All files option selected, dont check the checkboxes
			selectedFiles = jQuery("input[name=FileSelect]").map(function(){return jQuery(this).val();}).get();
		}else{			
			selectedFiles = jQuery("input[name=FileSelect]:checked").map(function(){return jQuery(this).val();}).get();			
		}
	}
	//------------------------------------------
	if(selectedFiles.length ==0){
		//nothing selected
		window.top.Docova.Utils.messageBox({prompt: "Please select the files to acquire.", icontype: 3, title: "Mail Acquire", width: 400});
		return false;
	} 
	
	//-- get message files and copy them into the source document----
	var msgUrl = docInfo.ServerUrl + docInfo.PortalWebPath + '/tempFile/';
	//------------------------------------------
	try{
		var maxFiles = srcWindow.GetAvailableFileCount();
		//----- check if the source document can accept the selected files
		if(maxFiles != -1 && selectedFiles.length > maxFiles){
			var errorMsg = (maxFiles == 0)? "You can not attach any more files to the current document." : "You can attach only " + maxFiles + " file(s) to the current document.";
			window.top.Docova.Utils.messageBox( {prompt: errorMsg , icontype: 3, title: "Mail Acquire", width: 400});
			return false;
		}
		var tempFile="";	
		for(i = 0; i<selectedFiles.length; i++){
			var filename = '';
			for (var x = 0; x < details.attachments.length; x++) {
				if (details.attachments[x].indexOf(selectedFiles[i]) > -1) {
					filename = details.attachments[x];
					break;
				}
			}
			if (filename) {
				tempFile = srcWindow.DownloadAndAttach(msgUrl + filename );
			}
			if(tempFile){
				srcWindow.tmpFilePaths[srcWindow.tmpFilePaths.length]=tempFile;
			}else{
				window.top.Docova.Utils.messageBox({prompt: "Unable to retrieve file [" + selectedFiles[i] + "] from the selected message." , icontype: 4,  title: "Mail Acquire", width: 400});
				return false;	
			}
		}
		return true;
	}
	catch(e){
		window.top.Docova.Utils.messageBox({prompt: "Message file acquire failed due to the following error: " + e , icontype: 4,  title: "Mail Acquire", width: 400});
		return false;
	}
}


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: SetAcquireOptionDefaults
 * sets the display and selection defaults in the acquire options section
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function SetAcquireOptionDefaults()
{	
	var hasFiles = SelectedHasFiles();
	
	//-------------------------------------------------------
	// set default checkbox/radio button values
	jQuery("input[name=AcquireSubject]").prop("checked", "");
	jQuery("input[name=AcquireBody]").prop("checked", "");
	jQuery("input[name=AcquireFiles]").prop("checked", "");
	jQuery("input[name=AcquireOptionFiles]").prop("checked", ""); 
	jQuery("input[name=FileSelect]").prop("checked", "");		
	
	//---- enable/disable buttons ---
	jQuery("#spanAcquireSubject").prop("disabled", (selectedEntry)? "" : "disabled");
	jQuery("#spanAcquireBody").prop("disabled", (selectedEntry && srcDocInfo.TextContentType!="")? "" : "disabled");
	jQuery("#spanAcquireFiles").children().prop("disabled", ((selectedEntry && srcDocInfo.HasAttachmentsSection && hasFiles && window.top.Docova.IsPluginAlive)? "" : "disabled"));
	jQuery("#spanAcquireOptionFiles").prop("disabled", "disabled").hide();
	jQuery("#divFileList").prop("disabled", "disabled").hide();
}//--end SetAcquireOptionDefaults

/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: SetFileAcquireOption
 * sets the display and selection defaults in the acquire options section
 * Inputs: fileSelect - element - radio button element
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function SetFileAcquireOption(fileSelect)
{
	if(fileSelect.checked){
		jQuery("#spanAcquireOptionFiles").prop("disabled", "").show();
		jQuery("input[name=AcquireOptionFiles][value=A]").prop("checked", "checked");
		jQuery("#divFileList").prop("disabled", "disabled").show();
		jQuery("input[name=FileSelect]").prop("checked", "checked");
	}
	else{
		jQuery("#spanAcquireOptionFiles").prop("disabled", "disabled").hide();
		jQuery("#divFileList").prop("disabled", "disabled").hide();
	}
}//--end SetFileAcquireOption

/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: SetAcquireOptionFiles
 * sets the display and selection defaults in the acquire options section
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function SetAcquireOptionFiles()
{
	if(jQuery("input[name=AcquireOptionFiles][value=S]:checked").length > 0){
		//allow selection
		jQuery("#divFileList").prop("disabled", "").show();
	}

	if(jQuery("input[name=AcquireOptionFiles][value=A]:checked").length > 0){
		//enable all files
		jQuery("input[name=FileSelect]").prop("checked", "checked");
		//dispable selection
		jQuery("#divFileList").prop("disabled", "disabled").show();
	}	
}//--SetAcquireOptionFiles


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: GetEntryInfo
 * collects information about the selected (highlighted ) entry
 * Inputs: id - string - unid of selected mail record
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function GetEntryInfo(id)
{
	var curEntry = xmlMailDocs.selectSingleNode("viewentries/viewentry[id='" + id + "']");

	//---------------------------------------------
	var fileNodeList = curEntry.selectNodes("attachments/attachment");
	if(fileNodeList.length == 0) {
		return false;
	}
	entryListNode = 	curEntry.selectSingleNode("attachments");
	//---------------------------------------------
	// get style sheet
	if (window.DOMParser)
	{
  		var parser=new DOMParser();
  		xmlMailAttachmentStyle=parser.parseFromString(jQuery("#xmlMailAttachmentStyle").text(),"text/xml");
	 }else{
		return false;
	 }
	// create an instance of XSLTProcessor
	var processor = new XSLTProcessor();
	// configure the processor to use our stylesheet 
	processor.importStylesheet(xmlMailAttachmentStyle);
	// transform and insert into existing element
	var newNode = processor.transformToFragment(entryListNode, document);
	jQuery("#divFileList").get(0).appendChild(newNode);
}//--end GetEntryInfo


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: GetMessageUrl
 * pre-processesses the selected entry and computes the base url (without query string) to the resulting temp document
 * Returns: string - url of resulting document, or boolean false if failed
 *------------------------------------------------------------------------------------------------------------------------------------------- */
 function GetMessageUrl()
{

	if(! selectedEntry){return false};
	
	var selectedEntryUNID = "";
	var row = parseInt(jQuery(selectedEntry).find("input[datafld=id]").attr("record")); //get row number
	if(!isNaN(row)){		
		recordset = xmlMailViewData.recordset;	
		recordset.AbsolutePosition(row);
		recordset.Fields("Selected").setValue("1");
		selectedEntryUNID = recordset.Fields("id").getValue();
		selectedEntryUNID = selectedEntryUNID.replace(/^\s+|\s+$/g, '');
	}	

	if(selectedEntryUNID=="") {return false;} //no document selected
	
	//------------------------------------------------------------------------------------------------	
	// create temp message doc
	ShowProgressMessage("{% trans %}Retrieving message from mail sever. Please wait{% endtrans %}...");
	var url = "/" + docInfo.NsfName + "/MailServices?OpenAgent";
	var request="";
	
	//--build the request
	request += "<Request>";
	request += "<Action>CREATETEMPMESSAGE</Action>";
	request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "<mailserver><![CDATA[" + docInfo.MailServer + "]]></mailserver>";
	request += "<mailserverurl><![CDATA[" + docInfo.MailServerUrl + "]]></mailserverurl>";
	request += "<mailfile>" + docInfo.MailFile + "</mailfile>";
	if(srcDocInfo.DocumentNumber){ //Importing messages from a document
		request += "<DocKey>" + srcDocInfo.DocKey + "</DocKey>";
		request += "<DocID>" + srcDocInfo.DocID + "</DocID>";		
		request += "<ImportOrigin>" + "Document" + "</ImportOrigin>";
	}else{ //Importing messages from a folder view
		request += "<LibraryKey>" + srcDocInfo.LibraryKey + "</LibraryKey>";
		request += "<FolderID>" + srcDocInfo.FolderID + "</FolderID>";	
		request += "<FolderUnid>" + srcDocInfo.FolderID + "</FolderUnid>";
		request += "<ImportOrigin>" + "Folder" + "</ImportOrigin>";
	}
	request += "<Unid>" + selectedEntryUNID + "</Unid>";
	request += "<viewname>" + currentView + "</viewname>";
/*
	request +="<Subject>" + selectedEntryUNID['subject'] + "</Subject>";
	request +="<Date>" + selectedEntryUNID['date'] + "</Date>";
	request +="<Time>" + selectedEntryUNID['time'] + "</Time>";
*/
	request += "</Request>";

	var output = false;
	$.ajax({
		'url': url,
		'type': 'POST',
		'processData': false,
		'data': request,
		'async': false,
		'success' : function(response) {
			if (response.Result == 'OK' && response.Ret1) {
				output = response.Ret1;
				tempDocUNID = output.docid;
			}
			HideProgressMessage();
		},
		'error' : function() {
			HideProgressMessage();
		}
	});
	return output;
}


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: CleanupTempData
 * cleans up any temporary documents created by the acquire process
 * Inputs: docUNID - string - unid of temp document created
 * Returns: boolean - true if successful, false otherwise
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function CleanupTempData(docUNID)
{
	//------------------------------------------------------------------------------------------------	
	// RPC processing
	ShowProgressMessage("{% trans %}Completing  acquire process. Please wait{% endtrans %}...");
	var url = "/" + docInfo.NsfName + "/MailServices?OpenAgent";
	var request="";
	
	//--build the request
	request += "<Request>";
	request += "<Action>DELETETEMPMESSAGE</Action>";
	request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	if(docUNID){
		request += "<Unid>" + docUNID + "</Unid>";
		}
	request += "</Request>";
	
	var httpObj = new objHTTP();
		
	if((!httpObj.PostData(request, url)) || (httpObj.status!="OK") || (!httpObj.results[0])) {
			HideProgressMessage();
			return false;
		}

		return true;
}//--end CleanupTempData



/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: CompleteDialog
 * imports any selected entries and returns the total imported record count
 * Returns: integer or boolean - false if no records imported, otherwise integer containing total imported 
 *                  record count
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function CompleteDialog()
{
	tempDocUNID = ""; //--clear out any existing value to be sure we are retreiving a current copy
	
	//-- selection of components/elements within a single email
	if(docInfo.AcquireType == "S"){
		if(!selectedEntry){
			window.top.Docova.Utils.messageBox( {prompt: "Please select the message to acquire.", title: "Mail Acquire", width: 400});
			return false;
		}	

		if((jQuery("input[name=AcquireSubject]:checked").length == 0) && (jQuery("input[name=AcquireBody]:checked").length == 0) && (jQuery("input[name=AcquireFiles]:checked").length == 0)){
			window.top.Docova.Utils.messageBox( {prompt: "Please select the message elements you wish to acquire.", title: "Mail Acquire", width: 400});
			return false;
		}

		var msgDetails = GetMessageUrl();
		if(!msgDetails){
			window.top.Docova.Utils.messageBox({prompt: "Could not access the selected mail message. Operation cancelled.", title: "Mail Acquire", icontype: 3, width: 400});
			DeselectEntry();
			CleanupTempData(tempDocUNID);
			return false;
		}

		//@todo: msgDetails contains subject, body and attachments. Change th acquire process for each one below
		
		var allOK = true;
		allOK = allOK && AcquireMessageFiles(msgDetails);
		allOK = allOK && AcquireMessageSubject();
		allOK = allOK && AcquireMessageBody(msgDetails);
		CleanupTempData(tempDocUNID);
		tempDocUNID="";
		if(!allOK) {return false;}			
		DeselectEntry();

		//--- record acquire event in audit log
		var request="";
		request += "<Request>";
		request += "<Action>ACQUIREEMAIL</Action>";
		request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
		request += "<Unid>" + srcDocInfo.DocID + "</Unid>";
		request += "</Request>";

		if (srcDocInfo.isNewDoc) {
			jQuery("#tmpEmailAuditDataXml", srcDoc).val(request);
		} else {
			var url = srcDocInfo.ServerUrl + "/" + srcDocInfo.NsfName + "/DocumentServices?OpenAgent";
			var httpObj = new objHTTP();
		
			if(httpObj.PostData(request, url)){
				if(httpObj.status!="OK"){
					return false;
				} else {
					return true;
				}
			}
		}
		
		return true;
	
	}else{  //-- selection of entire emails rather than components/elements of a single email
		var selUnids = GetSelectedUNIDs();
		if(selUnids.length==0){
			return false;
		}
		ImportSelected();
	
		return importedCount;
	}
}//--end CompleteDialog

/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: GetImportCount
 * returns the total number of records imported
 * Returns: integer - total number of records imported
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function GetImportCount(){
	return importedCount;
}//--end GetImportCount


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: convertInlineImgReferences
 * Given an HTML text string searches for inline images in the format of 
 * <img src="cid:someimag.jpg@01939.8383"> 
 * <img src="somepath/somefield/0.E6?OpenElement&FieldElemFormat=gif">
 * and converts to just the base image name
 * Inputs: msgText - string - html message body
 * Returns: text - html message body with any inline images converted
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function convertInlineImgReferences(msgText){
	var convertedMsg = msgText;
	convertedMsg = convertedMsg.replace(/(<img.+src=")cid:(.*?)@(.*?)"/g, '$1$2"');
     convertedMsg = convertedMsg.replace(/(<img .*?src=")(.*?)\/Body\/(\d)\.(.*?)\?[O|o]pen[E|e]lement.*?"/g, '$1image$3$4.gif"');
	convertedMsg = convertedMsg.replace(/(href=")(.*?)\/\$[F|f][I|i][L|l][E|e]\/(.*?)"/g, '$1$3"');
	return convertedMsg;
}//--end convertInlineImgReferences


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: retrieveInlineImages
 * Scans html text string for specific references to inline image formats. If found downloads those images
 * and attaches them to the new document
 * Inputs: msgText - string - html body text of message being imported
 * Returns: true - if images imported successfully, false otherwise
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function retrieveInlineImages(msgText){
    var result = false;
    if(! srcDocInfo.HasAttachmentsSection){
    	return result; //-- quit early since no attachment section available to store image files
    }
    var re = /(<img .*?src=")(.*?)\/Body\/(\d)\.(.*?)\?[O|o]pen[E|e]lement.*?"/g;
    var matches;
    while ((matches = re.exec(msgText)) != null){
         var oldurl = docInfo.ServerUrl + matches[2] + "/Body/" + matches[3] + "." + matches[4] + "?OpenElement";
         var newname = "image" + matches[3] + matches[4] + ".gif";
         var tempFile = srcWindow.DownloadAndAttach(oldurl, newname);         
         if(tempFile){
         		result = true;
         }
    }    
    return result;
}//--end retrieveInlineImages
</script>
<style type="text/css">
   #tblContainer {
         width:100%; 
         border-spacing: 0;
         border: solid 1px silver;
   }
   #tblContainer tr.viewHeader{
         background-color: #ECE9D8;
   }
   #tblContainer td.Folders {
        width: 200px;
         border-right: solid 1px silver;
  }
   #divDocCount {
         display: inline;
         line-height:25px;
   }
   #divScrollButtons {
         float: right; 
         color:black;
         display: table;
         padding-right: 5px;
   }
   #divScrollButtons SPAN {
   		font-size: 15px;
   		padding-left: 5px;
   		cursor: pointer;
   		display: table-cell;
   		vertical-align: middle;
   	}
   #divSearch {
        display: inline; 
   }
    #inpQuery{
        width: 200px;
        height: 14px;
    }
   button {
      height: 20px;
   }
   #btnFTSearch > span{
    display: inline !important;
   }
   #btnFTClear > span {
    display: inline !important;
   }
   #divSection1 {
      width:200px; 
      height:380px;
   }
   #divMailRecords {
        width:100%; 
        height:380px;  
        overflow-x:none; 
        overflow-y:auto;
   }
   #tblMailRecords th {
         border-right: solid 1px silver;
   }
   #tblMailRecords th.col1{	/*selection column*/
         width: 20px;
   }
   #tblMailRecords th.col2{       /*who column*/
         width: 100px;
   }
   #tblMailRecords th.col3{         /*date column*/
         width: 70px;
   }
   #tblMailRecords th.col4{         /*time column*/
         width: 55px;
   }
   #tblMailRecords th.col5{        /*size column*/
         width: 50px;
   }
   #tblMailRecords th.col6{        /*attachment icon column*/
         width: 20px;
   }
   #tblMailRecords th.col7{        /*subject column*/
   }
   #tblMailRecords td.col1{
         border-right: solid 1px silver;
         margin: 0;
         padding: 0;
   }
   #tblAcquireOptions {
         width:100%; 
         border: solid 1px silver;
         margin-top: 5px;
         height: 80px;
   }
   #tblAcquireOptions td{
         vertical-align: top;
   }
   #divAcquireOptionAll {
        display: inline;
   }
   .boldtext {
         font-weight: bold;
   }
</style>

</head>
<body text="#000000" bgcolor="#FFFFFF" class="dlgBody" SCROLL="no" onload="InitDialog();">
<script type="text/javascript">
  var foldercontrolconfig = {
	"MaxHeight" : 414,
	"LoadAllAtStartup" : false,
	"LibraryUrl" : "",
	"LoadUrl" : "",
	"LoadUrlPartial" : "",
	"LoadDocsUrl" : "",
	"DocumentService" : "",
	"FolderService" : "",
	"FolderAccessUrl" : "",
	"FolderPropertiesUrl" : "",
	"FavoritesUrl" : "",
	"FavoritesService" : "",
	"UrlType" : 1,
	"ReadLimit" : 1000,
	"onFoldersReady" : "openDefaultFolder",
	"onClick" : "OpenView",
	"onDoubleClick" : "",
	"onContextMenu" : "",
	"onBeforeFolderCreate" : "",
	"onFolderCreate" : "",
	"onAfterFolderCreate" : "",
	"onBeforeDocumentCreate" : "",
	"onDocumentCreate" : "",
	"onBeforeFolderRename" : "",
	"onFolderRename" : "",
	"onAfterFolderRename" : "",
	"onBeforeFolderDelete" : "",
	"onFolderDelete" : "",
	"onAfterFolderDelete" : "",
	"onBeforeDocumentDelete" : "",
	"onDocumentDelete" : "",
	"onAfterDocumentDelete" : "",
	"onBeforeAddFavorite" : "",
	"onAddFavorite" : "",
	"onAfterAddFavorite" : "",
	"onBeforeDeleteFavorite" : "",
	"onDeleteFavorite" : "",
	"onAfterDeleteFavorite" : "",
	"onBeforeOpenInNewTab" : "",
	"onOpenInNewTab" : "",
	"onAfterOpenInNewTab" : "",
	"onBeforeAddFiles" : "",
	"onAddFiles" : "",
	"onAfterAddFiles" : "",
	"onBeforeFileExport" : "",
	"onFileExport" : "",
	"onAfterFileExport" : "",
	"onBeforeFolderCopy" : "",
	"onFolderCopy" : "",
	"onAfterFolderCopy" : "",
	"onBeforeFolderCut" : "",
	"onFolderCut" : "",
	"onAfterFolderCut" : "",
	"onBeforeFolderPaste" : "",
	"onFolderPaste" : "",
	"onAfterFolderPaste" : "",
	"onPropertiesMenu" : "",
	"onSubscriptionClick" : "",
	"onBeforeExpandAll" : "",
	"onAfterExpandAll" : "",
	"onBeforeCopyFolderLink" : "",
	"onCopyFolderLink" : "",
	"onAfterCopyFolderLink" : ""
 }
</script>
<script id="xmlMailViewData" type="text/xml"></script>
<!------ attachment list style sheet -------->
<script id="xmlMailAttachmentStyle" type="text/xml">
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" >
<xsl:output method="html" encoding="utf-8" indent="no"/>
<xsl:template match="attachments">
        <div>
	<xsl:apply-templates select="attachment"/>
         </div>
</xsl:template>
<xsl:template match="attachment">
	<xsl:apply-templates select="filename"/>
</xsl:template>
<xsl:template match="filename">
          <input name="FileSelect" type="checkbox">
             <xsl:attribute name="value">
                <xsl:value-of select="."/>              
             </xsl:attribute>
          </input>
          <xsl:value-of select="."/>
    &#xa0;&#xa0;
</xsl:template>
</xsl:stylesheet>
</script>
<!------ folder navigation style sheet -------->
<script id="xmlFolderStyle" type="text/xml">
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="xml" encoding="utf-8" indent="no"/>
<xsl:template match="/">
<viewentries>
    <viewentry unid="INBOX">
        <entrydata columnnumber="0" name="FolderName">
            <text>{% trans %}Inbox{% endtrans %}</text>
        </entrydata>
        <entrydata columnnumber="2" name="FolderIcon">
            <text>{{ asset('bundles/docova/images/FIcon_Inbox2.png') }}</text>
        </entrydata>
        <entrydata columnnumber="4" name="SortOrder">
            <text>1</text>
        </entrydata>
    </viewentry>
    <viewentry unid="($Drafts)">
        <entrydata columnnumber="0" name="FolderName">
            <text>{% trans %}Drafts{% endtrans %}</text>
        </entrydata>
        <entrydata columnnumber="2" name="FolderIcon">
            <text>{{ asset('bundles/docova/images/FIcon_Notepad2.png') }}</text>
        </entrydata>
        <entrydata columnnumber="4" name="SortOrder">
            <text>2</text>
        </entrydata>
    </viewentry>
    <viewentry unid="($Sent)">
        <entrydata columnnumber="0" name="FolderName">
            <text>{% trans %}Sent{% endtrans %}</text>
        </entrydata>
        <entrydata columnnumber="2" name="FolderIcon">
            <text>{{ asset('bundles/docova/images/FIcon_MailSend.png') }}</text>
        </entrydata>
        <entrydata columnnumber="4" name="SortOrder">
            <text>3</text>
        </entrydata>
    </viewentry>
    <viewentry unid="($All)">
        <entrydata columnnumber="0" name="FolderName">
            <text>{% trans %}All Documents{% endtrans %}</text>
        </entrydata>
        <entrydata columnnumber="2" name="FolderIcon">
            <text>{{ asset('bundles/docova/images/FIcon_Docs.png') }}</text>
        </entrydata>
        <entrydata columnnumber="4" name="SortOrder">
            <text>4</text>
        </entrydata>
    </viewentry>
<xsl:apply-templates select="Results/Result/viewentries/viewentry[entrydata[@columnnumber='2']/text='0']"/>
</viewentries>
</xsl:template>
<xsl:template match="viewentry">
    <viewentry><xsl:attribute name="unid"><xsl:value-of select="entrydata[@columnnumber='0']"/></xsl:attribute>
        <entrydata columnnumber="0" name="FolderName">
            <text><xsl:value-of select="entrydata[@columnnumber='0']"/></text>
        </entrydata>
        <entrydata columnnumber="2" name="FolderIcon">
            <text></text>
        </entrydata>
    </viewentry>
</xsl:template>
</xsl:stylesheet>
</script>
<!------ dialog content -------->
<div id="dlgContentNh" class="ui-widget">
	<div class="viewHeader">{%trans with {'%mailfor%' : user.getUserNameDnAbbreviated, '%onserver%' : app.request.server.get('HTTP_HOST')} %}Mail for %mailfor% on server %onserver%{% endtrans %}</div>
	<table id="tblContainer">
	  <tr class="viewHeader">
	    <td class="Folders">
	       <br><br>
	       <div>{% trans %}Folders and Views{% endtrans %}</div>
	    </td>
	    <td class="Documents">
	       <div>
	           <div id="divDocCount">{% trans %}Documents{% endtrans %} <span id="spanRecCount"></span></div>
	           <div id="divScrollButtons" >
	               <span class="far fa-fast-backward" id="spanScrollFirst" onmouseover="this.style.color='#0050D1';" onmouseout="this.style.color='';" title="{% trans %}First page{% endtrans %}" onclick="ScrollView(this);"></span> 
	               <span class="far fa-backward" id="spanScrollFastBack" title="{% trans %}Previous page group{% endtrans %}" onmouseover="this.style.color='#0050D1';" onmouseout="this.style.color='';" onclick="ScrollView(this);"></span> 
	               <span class="far fa-caret-left" id="spanScrollBack" style="font-size: 19px;" title="{% trans %}Previous page{% endtrans %}" onmouseover="this.style.color='#0050D1';" onmouseout="this.style.color='';" onclick="ScrollView(this);"></span> 
	               <span class="far fa-caret-right" id="spanScrollFwd" style="font-size: 19px;" title="{% trans %}Next page{% endtrans %}" onmouseover="this.style.color='#0050D1';" onmouseout="this.style.color='';" onclick="ScrollView(this);"></span> 
	               <span class="far fa-forward" id="spanScrollFastFwd" title="{% trans %}Next page group{% endtrans %}" onmouseover="this.style.color='#0050D1';" onmouseout="this.style.color='';" onclick="ScrollView(this);"></span> 
	               <span class="far fa-fast-forward" id="spanScrollLast" onmouseover="this.style.color='#0050D1';" onmouseout="this.style.color='';" title="{% trans %}Last page{% endtrans %}" onclick="ScrollView(this);"></span> 
	             </div>
	         </div>
	         <div id="divSearch">
	         	<span>{% trans %}Search for{% endtrans %}:</span>
	         	<input id="inpQuery" type="text"/>&nbsp;<button id="btnFTSearch" onclick="ViewFTSearch();">{% trans %}Search{% endtrans %}</button>&nbsp;<button id="btnFTClear"  onclick="ViewFTClear();">{% trans %}Clear{% endtrans %}</button>
	         </div>
	     </td>
	   </tr>
	   <tr>
	     <td class="Folders resizable">
	         <!-------------- Folder control for mail folder navigation ----------------->
	         <div id="divSection1" style="overflow:auto;">
	             <script src="{{ asset('bundles/docova/js/loaderFolderControlMailAcquire.js') }}" language="javascript"></script>
	         </div>
	     </td>
	     <td class="Documents">
	         <!------ mail view data table -------->
	         <div id="divMailRecords">
	             <table id="tblMailRecords" class="viewTable"  datasrc="#xmlMailViewData" cellspacing="0" cellpadding="0">
	               <thead>
	                   <tr>
	                       <th class="col1">&nbsp</th>
	                       <th class="col2">{% trans %}Who{% endtrans %}</th>
	                       <th class="col3">{% trans %}Date{% endtrans %}</th>
	                       <th class="col5">{% trans %}Size{% endtrans %}</th>
	                       <th class="col6">&nbsp;</th>
	                       <th class="col7">{% trans %}Subject{% endtrans %}</th>
	                  </tr>
	               </thead>
	              <tbody id="otblMailRecords">
	                <tr onclick="SelectEntry(this)">
	                  <td class="col1"><input class="selectioncheckbox" type="checkbox" datafld="id" /></td>
	                  <td class="col2"><span datafld="who"></span></td>
	                  <td class="col3"><span datafld="date"></span></td>
	                  <td class="col5"><span datafld="size"></span></td>
	                  <td class="col6"><span datafld="icon" dataformatas="html"></span></td>
	                  <td class="col7"><span datafld="subject"></span></td>
	                </tr>
	             </tbody>
	          </table>
	       </div>
	     </td>
	   </tr>
	</table>
	<!-- Selected message acquire options -->
  	<div id="divAcquireOptions" style="display:none;">
  	<table id="tblAcquireOptions">
	    <tr>
	       <td>
	         <span class="boldtext">{% trans %}Acquire{% endtrans %}:</span>&nbsp; &nbsp;
	         <div id="divAcquireOptionAll">
	            <label><span id="spanAcquireSubject" disabled="disabled"><input type="checkbox" name="AcquireSubject" value="Subject"/>{% trans %}Subject{% endtrans %}</span></label>&nbsp;
	            <label><span id="spanAcquireBody" disabled="disabled"><input type="checkbox" name="AcquireBody" value="Body" />{% trans %}Text{% endtrans %}</span></label>&nbsp;
	            <label><span id="spanAcquireFiles" disabled="disabled"><input type="checkbox" name="AcquireFiles" value="Files" onclick="SetFileAcquireOption(this);"/>{% trans %}Files{% endtrans %}</span></label>&nbsp;
	            <span id="spanAcquireOptionFiles" style="display:none;" disabled="disabled">(<label><input type="radio" name="AcquireOptionFiles" value="A" checked=true onclick="SetAcquireOptionFiles();"/>{% trans %}All{% endtrans %}</label>
	            	<label><input type="radio" name="AcquireOptionFiles" value="S" onclick="SetAcquireOptionFiles();"/>{% trans %}Selected{% endtrans %}</label>)
	            </span>
	        </div>
	       </td>
	   </tr>
	   <tr>
	      <td>
            <div id="divFileList" disabled="disabled" class="fileList"></div>
	      </td>
	   </tr>
	</table>
	</div>
</div>
	<!------------------ SUBFORM sfKillCache ------------>
	<!------------------Microsoft suggestion to force no cacheing of documents------------>
<HEAD>
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="CACHE-CONTROL" CONTENT="0">
<META HTTP-EQUIV="EXPIRES" CONTENT="0">
</HEAD>
<!------------------END SUBFORM sfKillCache  ------------>
</body>
</html>
