<!doctype html>
<html>
<head>
<title>DOCOVA SE</title>
<META content="0" http-equiv="expires">
<META content="0" http-equiv="cache-control">
<META content="no-cache" http-equiv="Pragma">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/' ~ user.getUserProfile.getTheme ~'/jquery-ui.css') }}">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/styleNavigationTop.css') }}" type="text/css" />
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/regionalSettings.js') }}"></script>
<link rel="stylesheet" href="{{ asset('bundles/docova/font-awesome/css/all.min.css') }}">
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/commonFunctions.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/jquery/jquery.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/jquery/jquery-ui.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/Docova.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/tutorials/tutorial_engine.js') }}"></script>
{% include 'DocovaBundle:Default:scriptMessagesTranslation.html.twig' %}
<script language="JavaScript" type="text/javascript">
var btnSelectedObj = null;
var doc = null;
var userTheme = "";
var toptabs = null;
var dlgUserProfile;
var isipad = false;
var info = {
  "UserName" : "{{ user.getUserNameDn|replace({'\\': '\\\\'}) }}",
  "UserNameAB" : "{{ user.getUserNameDnAbbreviated|replace({'\\': '\\\\'}) }}",
  "UserNameCN" : "{{ f_Name("[CN]", user.getUserNameDnAbbreviated)|replace({'\\': '\\\\'}) }}",
  "UserRoles" : "$$WebClient;[Administration]",
  "HTTP_Referer" : "{{ url('docova_homepage') }}",
  "Query_String" : "ReadForm",
  "Query_String_Decoded" : "ReadForm",
  "Path_Info_Decoded" : "{{ path('docova_hometop') }}",
  "ServerName" : "{{ app.request.server.get('HTTP_HOST') }}",
  "NsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
  "ServerUrl" : "{{ app.request.getscheme }}://{{ app.request.server.get('HTTP_HOST') }}",
  "PortalWebPath" : "{{ url('docova_homepage') }}",
  "PortalNsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
  "CurrentSessionTime" : "{{ 'now'|date('Y,m,d,h,i,s') }}",
  "UserTheme" : "{{ user.getUserProfile.getTheme }}-",
  "LogOutURL" : "{{ path('docova_logout') }}",
  "Version" : "4.0.0 SE",
  "IncompleteEdits" : "{{ incompleteEdits }}",
  "GoToParam" : "{{ app.request.query.get('goto') }}",
  "RMEUrl" : "",
  "PinnedTabs" : "{{ workspace ? workspace.getPinnedTabs|raw : '' }}",
  "DefaultOpenApp" : "{{ workspace ? workspace.getDefaultOpenApp : '' }}",
  "FullScreen" : {{ app.request.query.get('fullscreen') == 1 ? 'true' : 'false' }}
};

function getinfovar(){
	return info;
}		

$(document).ready(function(){
	InitVars(info);
    isipad = (/iphone|ipad/i.test(navigator.userAgent.toLowerCase()));
 	
	$(document).on("contextmenu", function(e){ e.preventDefault(); e.stopPropagation();});

	var tabindex = 0;
	toptabs = $( "#tabs" ).tabs({
		"activate" : function(event, ui){
			var tabid = ui.newTab.prop('id');
			OpenFrame(tabid);
		}
	});
	
	$( "#tabs" ).css({ 'border': '0', 'background': 'white' });	
	
	toptabs.find( ".ui-tabs-nav" ).sortable({
		containment: "parent",
		stop: function() {
			toptabs.tabs( "refresh" );
		}
	});	
	jQuery("#tabContainer").show();
			
	$( "#btn-PinTabs" ).button({
		text: false,
		label: "{% trans %}Pin tab state{% endtrans %}",
		icons: {primary: "fas fa-thumbtack"}
	})
	.click(function( event ) {
		event.preventDefault();
		PinTabs();
	});	
	
	$( "#btn-UserProfile" ).button({
		icons: {primary:  "fas fa-user"}
	})
	.click(function( event ) {
		event.preventDefault();
		var profileURL = '{{ path('docova_admin_editdocument', {'view_name' : 'wAdminUserProfiles', 'doc_id' : user.getId}) }}?uType=user';
		OpenUserProfile(profileURL);
	});	
	
	$( "#btn-ShowHelp" ).button({
		text:false,
		label: "{% trans %}Show User help.{% endtrans %}",
		icons: {primary: "far fa-question"}
	})
	.click(function( event ) {
		event.preventDefault();
		ShowHelpDialog();	
	});

	$( "#btn-Logout" ).button({
		text: false,
		label: "{% trans %}Logout{% endtrans %}",
		icons: {primary: "fas fa-power-off"}
	})
	.click(function( event ) {
		event.preventDefault();
		var logoutURL = "{{ path('docova_logout') }}";
		//var logoutURL = "/" + docInfo.NsfName + "?logout&redirectto=/" + docInfo.NsfName + "/logOutDocova?OpenPage";
		window.top.document.location = logoutURL;
	});	
	
	jQuery( "#btn-PluginStatus" ).button({
		text: false,
		label: "{% trans %}Docova Plugin Status{% endtrans %} : {% trans %}checking status{% endtrans %}...",
		icons: {primary: "fas fa-wifi-slash"}
	})
	.click(function( event ) {
		event.preventDefault();
		alert(	$( "#btn-PluginStatus" ).text());	
	});
	

	
	$( "#btn-Logo" ).button({
		text: false,
		label: "{% trans %}About{% endtrans %}",
		icons: {primary: "ui-icon-custom-logo"}
	})
	.click(function( event ) {
		event.preventDefault();
		AboutDocova();
	});
	

	var defaultApp = "";
	if(docInfo.GoToParam.substring(0, 9).toLowerCase()=="dashboard"){
		defaultApp = "Dashboard";
	}else if(docInfo.GoToParam.substring(0, 7).toLowerCase() == "library" || docInfo.GoToParam.substring(0, 9).toLowerCase() == "libraries"){
		defaultApp = "Libraries";
	}else if(docInfo.GoToParam.substring(0, 9).toLowerCase() == "workspace"){
		defaultApp = "Workspace";		
	}else if(docInfo.GoToParam.substring(0, 6).toLowerCase() == "search"){
		defaultApp = "Search";
	}else if(docInfo.GoToParam.substring(0, 8).toLowerCase() == "designer"){
		defaultApp = "Designer";
	}else if(docInfo.GoToParam.substring(0, 3).toLowerCase() == "rme"){
		defaultApp = "rme";
	}else if(docInfo.GoToParam.substring(0, 5).toLowerCase() == "admin"){
		defaultApp = "Admin";
	}else if(docInfo.GoToParam.substring(0, 10).toLowerCase() == "appbuilder"){
		defaultApp = "AppBuilder";
	}else if(docInfo.GoToParam != ""){
		defaultApp = docInfo.GoToParam;
	}else{
		defaultApp = docInfo.DefaultOpenApp;
	}	
	
	var apptabopen = false;
	var pinnedTabArray = (docInfo.PinnedTabs).split("~");
	if(docInfo.PinnedTabs != ""){
		for(var x=0; x<pinnedTabArray.length;x++){
			var AppArray = pinnedTabArray[x].split(";");
			var appUnid = AppArray[0];
			var appTitle = AppArray[1];
			var appPath = AppArray[2];
			AddAppTab(appUnid, appTitle, appPath);
			
			if(defaultApp != "" && (defaultApp == appUnid || defaultApp == appTitle)){
				apptabopen = true;
			}
		}
	}

	if(defaultApp != ""){
		if(!apptabopen){
			defaultApp = AddAppTab(defaultApp);			
		}
		OpenFrame(defaultApp)
	}	
	
	checkPluginStatus();	
	setInterval( checkPluginStatus,  15000);
	window.setInterval( function(){StayAlive()}, 300000);
	InitSessionCookie();
	checkAttachRecovery();

});

function checkPluginStatus(){
	window.top.Docova.checkPluginAlive({
		onSuccess: function () {
			showPluginRunning();
		},
		onFailure: function() {
			showPluginNotRunning();
		}
	});
}

function showPluginRunning(){

	$("#btn-PluginStatus").button("option", "label", "{% trans %}Docova Plugin Status{% endtrans %} : {% trans %}Running{% endtrans %}");
	window.top.Docova.IsPluginAlive = true;
	
	$("#btn-PluginStatus").find(".ui-icon").removeClass("fa-wifi-slash").addClass("fa-wifi");

	$("#btn-PluginStatus").css("color", "green");
	
}

function showPluginNotRunning(){
	$("#btn-PluginStatus").button("option", "label", "{% trans %}Docova Plugin Status{% endtrans %} : {% trans %}NOT Running{% endtrans %}");
	window.top.Docova.IsPluginAlive = false
	$("#btn-PluginStatus").find(".ui-icon").removeClass("fa-wifi-slash").addClass("fa-wifi");
	$("#btn-PluginStatus").css("color", "red");
}

function checkAttachRecovery() {
	//checks for Attachment EDIT log files. Note only the first one is processed. 
	var unidDB = docInfo.IncompleteEdits;
	if(unidDB) {
		window.top.Docova.Utils.messageBox({
			width: 400,
			title: "{% trans %}Edited Attachment Recovery{% endtrans %}",
			prompt: "{% trans %}One or more log files were found, indicating there are recoverable attachments available.<br><br>Recover now?{% endtrans %}",
			icontype : 2,
			msgboxtype : 4,
			onYes: function() { 
				var arr = unidDB.split(";");
//				var docID = arr[0].split("~");
				var docID = arr[0];
				var curUrl = docInfo.ServerUrl + "/" + docInfo.NsfName+ "/EditDocument/" + docID + '?EditDocument&mode=window';
				var uiw = window.top.Docova.getUIWorkspace(document);
				if(uiw){
					uiw.openDocument({"docurl" : curUrl, "title" : "{% trans %}Attachment Recovery{% endtrans %}"});
				}else{
					alert("{% trans %}Error creating new uiworkspace object.{% endtrans %}");
				}
			}
    	});
	}
}

function InitSessionCookie(){
   var SessionCookieName = "SessionCookie";
   var flag = Docova.Utils.setCookie({
   		keyname : SessionCookieName,
		keyvalue : docInfo.CurrentSessionTime
   });
}

function StayAlive(){
	var randomstring;
	 if (!Date.now) { 
		randomstring = new Date().valueOf();
	} else { 
	    randomstring = Date.now();
	}
	var pingPage =  docInfo.ServerUrl + "/" + docInfo.NsfName + "/LoginConfirmation.xml?OpenPage&" + randomstring;
	var worked = false;
	var jqxhr = $.get( pingPage, function() {
  		worked = true;
	})
  	.done(function(data) {
  		var t = $(data).find( "login").find("status");
  		if ( t.length == 0 ) {
  			alert("{% trans %}Your session has timed out.  Please press F5 to login again.{% endtrans %}");
  		}
  	});
}

function ShowHelpDialog()
{
	var dlgUrl = location.protocol + "//www.docova.com/Help";
	var win = window.open(dlgUrl, '_blank');
	if(win){
    	//Browser has allowed it to be opened
		win.focus();
	}else{
    	//Broswer has blocked it
    	alert('{% trans %}Please allow popups for this site{% endtrans %}');
	}
}

function LoadFolder(origin){  //Depricate
	var frame = parent.document.getElementById("fraLeftFrame");
    if (frame.scrollWidth == 0){
		window.parent.fsSubLayout.cols = "251,*";	
    }
	var DlitFolders = window.parent.frames['fraLeftFrame'].document.getElementById("DLITFolderView");
		
	parent.frames['fraLeftFrame'].LoadCurrentFolder();
}

function SetCookie(CookieName, CookieValue){
//--------------- set cookie to cookie file ---------------------------------	
	var flag = Docova.Utils.setCookie({
   		keyname : CookieName,
		keyvalue : CookieValue
   })
	if (flag == false){
			Docova.Utils.messageBox({
			width: 400,
			title: "Cookie Error",
			prompt: "{% trans with {'%cookiename%' : '(" + CookieName + ")<br>'} %}Unable to update SuperCookie %cookiename% Please contact Administrator.{% endtrans %}",
			icontype : 1,
			msgboxtype : 0,
			onYes: function() { 
				var arr = unidDB.split(";");
				var docID = arr[0].split("~");// docID[1] ??
				var curUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/EditDocument/" + docID[0] + "?EditDocument&mode=window";
				window.open(curUrl);
			}
    	});
	}
}

function GetCookie(CookieName){
	//--------------- get cookie from cookie file -----------------------------
	var CookieValue = Docova.Utils.getCookie({
   		keyname : CookieName
	});
	return CookieValue;
}

function OpenLibraries(cb){
	var appUnid = "Libraries";
	var appTitle = "{% trans %}Libraries{% endtrans %}";
	var appWebPath = ""; //Path is blank for System Apps, resolved in AddAppTab function
	var findAppFrame = $("#iFrameMain", window.top.document).contents().find("#fra" + appUnid);
	if(findAppFrame.length == 0){
		AddAppTab(appUnid, appTitle, appWebPath);
		OpenFrame(appUnid)
		window.top.Docova.events.on("FolderControlLoaded", function () { cb (); });
	}else{
		Docova.getUIWorkspace(document).getDocovaFrame('fraToolbar', 'window').OpenFrame(appUnid)
		if (cb)
			cb();
		return;
	}
}

function OpenUserProfile(profileURL){
	dlgUserProfile = window.top.Docova.Utils.createDialog({
		id : "divDlgUserProfile",
		url : profileURL,
		title: "{% trans %}User Profile{% endtrans %}",
		height: 600,
		width: 900,
		useiframe: true,
		sourcewindow: window,
		sourcedocument: document
    });
}

function OpenLib(obj){
	var LibIndex = obj.fraIndex;
	var libkey = obj.libkey;
	var libFrameName = obj.id;

	if(!parent.frames[libFrameName]){ //If the frame does not exist yet, create it
		var fraTaskBar = parent.document.getElementById("fraTaskBar");
		var fsMain = parent.document.getElementById("fsMain");
		var newFrame = parent.document.createElement("frame");
		newFrame.id = libFrameName;
		newFrame.name = libFrameName;
		newFrame.src = docInfo.ServerUrl + "/" + docInfo.NsfName + "/" +  "wLibFrame?ReadForm&libkey=" + libkey;
		fsMain.insertBefore(newFrame, fraTaskBar);
	}
	OpenFrame(LibIndex);
}

function OpenFrame(tabid){
	var cnt = 0;
	var tabindex = 0;
	var rowsindex = (docInfo.FullScreen ? "0" : "70");  //for fsMain frameset rows attribute, 70 is for hometop

	if(tabid == "Workspace"){
		openUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/" +  "wWorkspaceFrame?ReadForm";
	}

	//Get tab item to activate
	$("#tabitems li").each(function(){
		if( $(this).prop("id") == tabid ){
			tabindex = cnt; 
		}
		cnt++;
	});
	
	//Go through frames to determine what fsMain rows list value should be
	var fsMain = $("#iFrameMain", window.top.document).contents().find("#fsMain");
	$(fsMain).find("frame").each(function(){
		if($(this).prop('id') != "fraToolbar"){ //append to fsMain rows only if not first frame which is fraToolbar
			if("fra" + tabid == $(this).prop('id')){
				rowsindex += ",*";
			}else{
				rowsindex += ",0";
			}
		}
	});

	toptabs.tabs( 'option', 'active', tabindex );
	var targetFrame = "fra" + tabid;
	if (tabid == "Workspace"){
		var frameContent = parent[targetFrame].location.href;
		if(frameContent.indexOf("/BlankContent?")!=-1){
			parent[targetFrame].location.href = openUrl;
		}
		if($("#"+tabid).css("display") == "none"){
			$("#"+tabid).css("display", "");
		}
	}
	parent.fsMain.rows = rowsindex;
	
	//this following code finds a body element in one of the frames and appeds a dummy span to it.
	//this is required for Ipad as ipad doesn't seem to refresh the contents of a frame unless you make 
	//a minor change to one of its dom elements.
	if ( isipad ) {
		var ws = Docova.getUIWorkspace(document);
		var appFrameDoc = ws.getDocovaFrame(targetFrame, "document");
		if ( typeof  appFrameDoc  != "undefined" ){
			var tdoc;
			var body = $(appFrameDoc).find("body");
			if ( body.length > 0 ) {
				tdoc = appFrameDoc;
			}else{
				var fset = $(appFrameDoc).find("FRAMESET");
				var frm = fset.find("FRAME");
				for ( var p =0; p < frm.length; p ++ ){
					var tmpfrm = frm[p];
					var body = $(tmpfrm.contentWindow.document).find("body");
					if ( body.length > 0 )
					{
						tdoc = tmpfrm.contentWindow.document;
						break;
					}
				}
			}
			var obj = $("#ipadRefresh", tdoc );
			if ( obj.get(0) ){
				obj.text("newval");
				console.log("got old val" + obj.text() );
			}else{
				$("body", tdoc).append('<span id="ipadRefresh" style="position:absolute; left: -999em">dummy</span>');
				console.log ("creatednew " + $("#ipadRefresh", appFrameDoc).text() )
			}	
		}
	}

	return;
}

function CloseApp(appObj){
	//appObj is the X on an app tab
	var appId = $(appObj).closest("li").prop("id");
	$("#" + appId).remove();
	$("#div" + appId).remove();
	var fraToClose = $("#iFrameMain", window.top.document).contents().find("#fra" + appId);
	fraToClose.remove();
	$( "#tabs").tabs( "refresh" );
	OpenFrame("Workspace");
}

function AddAppTab(appUnid, appTitle, appUrl){
	var result = "";
	
	if(typeof appUnid == "undefined" || appUnid == ""){
		return result;
	}
	
	var appKey = appUnid.split(",")[0];	
	
	if(typeof appTitle == "undefined"){
		var appTitle = "";
	}
	if(typeof appUrl == "undefined"){
		var appUrl = "";
	}	
	
	if(appKey == "Dashboard"){
		appUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/" +  "DocovaDashboard?ReadForm";
		if(appTitle == ""){appTitle = "Dashboard";}
	}else if(appKey == "Libraries"){
		appUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/" +  "wLibrariesFrame?ReadForm&Goto="  + docInfo.GoToParam;
		if(appTitle == ""){appTitle = "Libraries";}
	}else	if(appKey == "Search"){
		appUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/" +  "wSearchFrame?ReadForm";
		if(appTitle == ""){appTitle = "Search";}
	}else if(appKey == "Designer"){
		appUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/" +  "wDesignerFrame?ReadForm";
		if(appTitle == ""){appTitle = "Designer";}
	}else if(appKey == "Admin"){
		appUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/" +  "Admin?ReadForm";
		if(appTitle == ""){appTitle = "Admin";}		
	}else if ( appKey == "AppBuilder" ){
		appUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/" +  "wAppbuilderFrame?ReadForm";
		if(appTitle == ""){appTitle = "App Builder";}			
	}else if( appKey == "Workspace"){
		//Workspace is already loaded
		result = appUnid;
		return result;
	}		
	if(appUrl == ""){
		var agentName = "LibraryServices";
		var request = "<Request><Action>GETLIBRARYINFO</Action>";
		request += "<Document>";
		request += "<InfoType>All</InfoType>";
		request += "<LibraryKey><![CDATA[" + appKey + "]]></LibraryKey>";
		request += "<LibraryName><![CDATA[" + (appKey || appTitle) + "]]></LibraryName>";
		request += "</Document>";
		request += "</Request>";
	
		var xmldata = SubmitRequest(request, agentName, "xml");
		if(typeof xmldata != "undefined" && typeof xmldata != "string"){
			var xmlobj = jQuery(xmldata);
			if(xmlobj.find("Result[ID=Status]").text() == "OK"){
				appUnid = xmlobj.find("Result[ID=Ret1]").find("LibraryKey").text();
				appTitle = xmlobj.find("Result[ID=Ret1]").find("LibraryName").text();
				var appType = xmlobj.find("Result[ID=Ret1]").find("AppType").text();
				var isApp = xmlobj.find("Result[ID=Ret1]").find("IsApp").text();
			
				if(appType == "LG"){
						appUrl = docInfo.PortalWebPath + (docInfo.PortalWebPath.slice(-1) == "/" ? "" : "/") +  "wLibrariesFrame?ReadForm";
						var libList = xmlobj.find("Result[ID=Ret1]").find("LibraryList").text();																
						if(libList != ""){
							appUrl += "&LibList=" + libList;
						}
						appUrl += "&Goto="  + docInfo.GoToParam;
				}else if(isApp == "1"){
					appUrl = docInfo.PortalWebPath + (docInfo.PortalWebPath.slice(-1) == "/" ? "" : "/") + "AppLoader/"+ appKey +"?ReadForm";
					if (docInfo.GoToParam) {
						appUrl += '&goto=' + docInfo.GoToParam;
					}
				}else{
					appTitle = "Libraries";
					appUnid = "Libraries";
					appUrl = docInfo.PortalWebPath + (docInfo.PortalWebPath.slice(-1) == "/" ? "" : "/") +  "wLibrariesFrame?ReadForm&Goto="  + docInfo.GoToParam;				
				}
			}
		}
	}
	if(appUrl == "" || appUnid == "" || appTitle == ""){
		return result;
	}

	var tabHTML = "<li id='" + appUnid + "' tabtype='app'><a href='#div" + appUnid + "'>" + appTitle + "</a><span class='ui-icon ui-icon-close' role='presentation' style='float:right; margin-top:2px;margin-right:2px;'>{% trans %}Close App{% endtrans %}</span></li>";
	var divHTML = "<div id='div" + appUnid + "'></div>";

	var tabs = $("#tabs").tabs();
	var ul = tabs.find("ul");

	var fsMain = $("#iFrameMain", window.top.document).contents().find("#fsMain");
	//Append new tab li to tabs ul
	$( tabHTML ).appendTo( ul );
	//set width of tab so X close icon can be seen
	$('#tabs [tabtype=app]').each(function(){
		if($(this).prop("id") == appUnid){
			var wd = (parseInt($(this).css('width').replace('px',''))+25)+'px';
			$(this).css('width',wd);
		}
	});
	//When X close icon is clicked
	$("#tabs li .ui-icon-close").click(function( event ) {
		CloseApp(this);
		event.preventDefault();
	});
	//When X is hovered over
	$(".ui-icon-close").hover(
		function () {
			$(this).removeClass("ui-icon-close").addClass("ui-icon-circle-close");
        },
		function () {
			$(this).removeClass("ui-icon-circle-close").addClass("ui-icon-close");
		});

	//Append new div in tabs for tabs
	$( divHTML ).appendTo( tabs );
	tabs.tabs( "refresh" );
	
	//Append new frame to DOCOVA fsMain for new app to open into
	var found = false;
	$(fsMain).find("frame").each(function(){
		if($(this).prop('id') == ('fra' + appUnid)){
			found = true;
			return false;
		}
	});
	if (found === false) {
		$("<frame></frame>").appendTo(fsMain).prop({"id" : "fra" + appUnid, "name" : "fra" + appUnid, "src" : appUrl });
	}
	result = appUnid;
	return result;
}

function PinTabs(){
	var tabcnt = 0;
	var tabParams = "";
	var selectedTabID = "";
	var appWebPath = "";
	
	msgtxt = "{% trans %}You are about to 'Pin' the state of your tabs.{% endtrans %}<br>";
	msgtxt += "{% trans %}DOCOVA will also remember the tab you were on.<br><br>Are you sure?{% endtrans %}"
	var choice = window.top.Docova.Utils.messageBox({ 
		prompt: msgtxt, 
		icontype: 2, 
		title: "{% trans %}Pin your tabs.{% endtrans %}", 
		width:400, 
		msgboxtype: 4,
		onNo: function() {return},
		onYes: function() {
			$("#tabs li").each(function(){
			tabcnt = tabcnt + 1
			var appUnid = $(this).prop("id")
			var appTitle = $(this).find("a").text()
			var appDocKey = "DK" + appUnid
				if($(this).attr("aria-selected") == "true"){
					selectedTabID = appUnid
				}

				if(appUnid != "Workspace"){
					if (appUnid == "Dashboard" || appUnid == "Libraries" || appUnid == "Search" || appUnid == "Designer" || appUnid == "Admin"){
						appWebPath = ""; //Path is blank for System Apps, resolved in AddAppTab function
					}else{
						var AppFrame = $("#iFrameMain", window.top.document).contents().find("#fra" + appUnid);
						appWebPath = $(AppFrame).prop("src");
					}
			
					if(tabParams == ""){
						tabParams += appUnid + ";" + appTitle + ";" + appWebPath;
					}else{
						tabParams += "~" + appUnid + ";" + appTitle + ";" + appWebPath;
					}
				}
			}) 

		if(tabcnt == 1){
			//Only Workspace tab, tabParams becomes blank
			tabParams = "";
			selectedTabID = "";
			PinTabState(tabParams, selectedTabID);
		}else{
			PinTabState(tabParams, selectedTabID)
		}
		
		}
	});	
}

function PinTabState(tabParams, selectedTabID){
	//Saves the open tabs state
	var agentName = "WorkspaceServices";
	var request = "<Request><Action>PINTABS</Action><UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "<Document>";
	request += "<TabParams><![CDATA[" + tabParams + "]]></TabParams>";
	request += "<TabSelected><![CDATA[" + selectedTabID + "]]></TabSelected>";
	request += "</Document>";
	request += "</Request>";
	
	var result = SubmitRequest(request, agentName);
	return result;
}

function AboutDocova(){
	var dlgUrl = docInfo.PortalWebPath + "dlgAboutDocova?OpenForm";
	var AboutDocovaDlg = window.top.Docova.Utils.createDialog({
		id: "divAboutDocova", 
		url: dlgUrl,
		title: "{% trans %}About DOCOVA{% endtrans %}",
		height: 550,
		width: 600, 
		useiframe: true,
		buttons: {
        	"{% trans %}Close{% endtrans %}": function() {
				AboutDocovaDlg.closeDialog();
        	}
      	}
	});
}

function SubmitRequest(request, agentName, responsetype){
	//send the request to server
	var processUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/" + agentName  + "?OpenAgent";
	var result;
	var resulttext;
	$.ajax({
		type: "POST",
		url: processUrl,
		data: request,
		cache: false,
		async: false,
		dataType: "xml",
		success: function(xml){
			result = true;
			var xmlobj = $(xml);
			var statustext = xmlobj.find("Result").first().text();
			if(statustext == "OK"){
				if(typeof responsetype != "undefined" && responsetype.toLowerCase() == "xml"){
					resulttext = xml;
				}else{
					resulttext = xmlobj.find("Result[ID=Ret1]").text();
				}
			}
		},
		error: function(){
			result = false;
			resulttext = "FAILED";
			//provide an error message
		}
	});
	return resulttext;
}
</script>

</head>
<body text="#000000" bgcolor="#FFFFFF">
	<div id="LogoBox" style="position: absolute; left: 10px; top: 0px; height:38px; overflow:none; z-index:1;">
		{% if (customLogo is not defined or customLogo is null or customLogo == "") %}
		<img src="{{ asset('bundles/docova/images/DocovaLogo.png') }}" alt="" style="max-height:100%; max-width:100%;" >
		{% else %}
		{{ customLogo|raw }}
		{% endif %}
	</div>
	<div id="ShowUserName" style="position: absolute; right: 20px; top: 5px; font:11px Verdana, Arial; z-index:1;">
		<button id="btn-PinTabs" class="btn-HomeTop ui-widget-header ui-corner-all" ></button>
		<button id="btn-PluginStatus" class="btn-HomeTop ui-widget-header ui-corner-all" style="color:red" ></button>
		<button id="btn-UserProfile" class="btn-HomeTop ui-widget-header ui-corner-all">{{ user.getUserProfile.getDisplayName }}</button>
		<button id="btn-ShowHelp" class="btn-HomeTop ui-widget-header ui-corner-all" style="color:darkblue"></button>
		<button id="btn-Logout" class="btn-HomeTop ui-widget-header ui-corner-all"></button>
		<button id="btn-Logo" class="btn-HomeTop"></button>
	</div>
	<div id="tabContainer" style="display:none;">
		<div id="tabs">
			<ul id="tabitems">
				<li id="Workspace"><a href="#divWorkspace" >{% trans %}Workspace{% endtrans %}</a></li>
			</ul>
			<div id="divWorkspace"></div>
		</div>
	</div>
	<!------------------ SUBFORM sfKillCache ------------>
	<!------------------Microsoft suggestion to force no cacheing of documents------------>
	<HEAD>
	<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
	<META HTTP-EQUIV="CACHE-CONTROL" CONTENT="0">
	<META HTTP-EQUIV="EXPIRES" CONTENT="0">
	</HEAD>
	<!------------------END SUBFORM sfKillCache  ------------>
</body>
</html>
