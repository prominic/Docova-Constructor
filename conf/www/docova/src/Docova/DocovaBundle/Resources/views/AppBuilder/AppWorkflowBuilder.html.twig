<!doctype html>
<html>
<head>
<META content="0" http-equiv="expires">
<META content="0" http-equiv="cache-control">
<META content="no-cache" http-equiv="Pragma">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/smoothness-flat/jquery-ui.css') }}">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/admin/styleNewAppBuilder.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/css/admin/styleWorkflowBuilder.css') }}" type="text/css" />

<link rel="stylesheet" href="{{ asset('bundles/docova/font-awesome/css/all.min.css') }}" type="text/css" />
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/commonFunctions.js') }}" charset="UTF-8"></script>
<script type="text/javascript" language="JavaScript" src="{{ asset('bundles/docova/js/Docova.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/docova/jquery/jquery.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/docova/jquery/jquery-ui.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/jquery/jqueryLayouts.js') }}"></script>
<script type="text/javascript" language="JavaScript" src="{{ asset('bundles/docova/js/admin/sfWorkspaceCommonJsHeader.js') }}"></script>
<script type="text/javascript" language="JavaScript" src="{{ asset('bundles/docova/js/admin/appBuilderJS.js') }}"></script>
<script type="text/javascript" language="JavaScript" src="{{ asset('bundles/docova/js/FormulaLanguage.js') }}"></script>

 <script type="text/javascript">
    mxBasePath = "{{ asset('bundles/docova/mxgraph-js-master/javascript/src') }}";
    mxImageBasePath = "{{ asset('bundles/docova/mxgraph-js-master/javascript/examples/editors') }}";
    var editor = null;
  </script>


  <script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/mxgraph-js-master/javascript/src/js/mxClient.js') }}"></script>
<script language="JavaScript" type="text/javascript">
var defaultVal = null; //hold last val for.inputEntry class fields
//var defaultWorkflow = '<li class="ui-state-default" style="margin:0px 3px 3px 3px; padding:0.4em; padding-left:1.5em; text-align:left;" wfStepAction="Review" wfStepKey="" wfStepNo="1" wfStepTitle="Untitled"><span class="fa fa-arrow-circle-down fa-1x" style="position:absolute; margin-left:-1.3em;" iconTitle=""></span><div class="itemlabel" style="font-weight: normal;">Untitled</div></li>'
var defaultWorkflow = '<li class="ui-state-default" style="margin:0px 3px 3px 3px; padding:0.4em; padding-left:1.5em; text-align:left; border-radius:15px;" ';
defaultWorkflow += 'wfStepAction="Review" ';
defaultWorkflow += 'wfStepKey="" ';
defaultWorkflow += 'wfStepNo="1" ';
defaultWorkflow += 'wfStepTitle="Untitled" ';
defaultWorkflow += 'wfDocStatus="In Review" ';
defaultWorkflow += 'wfType="Serial"';
defaultWorkflow += 'wfEnableAuthorParticipant="1" ';
defaultWorkflow += 'tmpwfReviewerApproverListSingle="" ';
defaultWorkflow += 'tmpwfReviewerApproverListMulti=""';
defaultWorkflow += 'wfReviewerApproverSelect="1" ';
defaultWorkflow += 'wfCompleteAny="0" ';
defaultWorkflow += 'wfCompleteCount="0" ';
defaultWorkflow += 'wfApproverEdit="No" ';
defaultWorkflow += 'wfOptionalComments="" ';
defaultWorkflow += 'wfCustomReviewButtonLabel="" ';
defaultWorkflow += 'wfCustomApproveButtonLabel="" ';
defaultWorkflow += 'wfCustomDeclineButtonLabel="" ';
defaultWorkflow += 'wfHideButtons="" ';
defaultWorkflow += 'wfCustomButtonsHideWhen="" ';
defaultWorkflow += 'wfEnableActivateMsg="1" ';
defaultWorkflow += 'wfActivateMsg="ACTIVATE" ';
defaultWorkflow += 'wfActivateNotifyParticipants="P" ';
defaultWorkflow += 'wfActivateNotifyList="" ';
defaultWorkflow += 'wfEnableCompleteMsg="" ';
defaultWorkflow += 'wfCompleteMsg="COMPLETE" ';
defaultWorkflow += 'wfCompleteNotifyParticipants="" ';
defaultWorkflow += 'wfCompleteNotifyList="" ';
defaultWorkflow += 'wfDeclineAction="1" ';
defaultWorkflow += 'wfDeclineBacktrack="" ';
defaultWorkflow += 'wfEnableDeclineMsg="" ';
defaultWorkflow += 'wfDeclineNotifyParticipants="" ';
defaultWorkflow += 'wfDeclineNotifyList="" ';
defaultWorkflow += 'wfDeclineMsg="DECLINE" ';
defaultWorkflow += 'wfEnablePauseMsg="" ';
defaultWorkflow += 'wfPauseMsg="PAUSE" ';
defaultWorkflow += 'wfPauseNotifyParticipants="" ';
defaultWorkflow += 'wfPauseNotifyList="" ';
defaultWorkflow += 'wfEnableCancelMsg="" ';
defaultWorkflow += 'wfCancelMsg="CANCEL" ';
defaultWorkflow += 'wfCancelNotifyParticipants="" ';
defaultWorkflow += 'wfCancelNotifyList="" ';
defaultWorkflow += 'wfDelayCompleteThreshold="3" ';
defaultWorkflow += 'wfEnableDelayMsg="" ';
defaultWorkflow += 'wfDelayMsg="DELAY" ';
defaultWorkflow += 'wfDelayNotifyParticipants="" ';
defaultWorkflow += 'wfDelayNotifyList="" ';
defaultWorkflow += 'wfDelayEsclThreshold="3" ';
defaultWorkflow += 'wfEnableDelayEsclMsg="" ';
defaultWorkflow += 'wfDelayEsclMsg="DELAYESCL" ';
defaultWorkflow += 'wfDelayEsclNotifyParticipants="" ';
defaultWorkflow += 'wfDelayEsclNotifyList="" ';
defaultWorkflow += '>';
//defaultWorkflow += '<span class="fa fa-arrow-circle-down fa-1x" style="position:absolute; margin-left:-1.3em; margin-top:0.1em;" iconTitle=""></span>'
defaultWorkflow += '<span class="far fa-sync fa-1x stepIcon" iconTitle=""></span>';
defaultWorkflow += '<div class="itemlabel" style="font-weight: normal;">Untitled</div>';
defaultWorkflow += '</li>';
var currWFStep;
var currCell;
var wfrunjson  = "";
var currWFStepLabel;
var iscellclicked = false;
var graph;
var editor;
var formID;
var info = {
  "UserName" : "{{ user.getUserNameDn|replace({'\\': '\\\\'}) }}",
  "UserNameAB" : "{{ user.getUserNameDnAbbreviated|replace({'\\': '\\\\'}) }}",
  "UserNameCN" : "{{ f_Name("[CN]", user.getUserNameDnAbbreviated)|replace({'\\': '\\\\'}) }}",
  "UserNamesList" : "",
  "UserRoles" : "[Administration]",
  "isNewDoc" : "{{ workflow ? '' : 'true' }}",
  "HTTP_Referer" : "{{ url('docova_appbuilderframes') }}",
  "Query_String" : "openForm&AppID={{ app.request.query.get('AppID') }}{% if workflow %}&wfID={{ workflow }}{% endif %}",
  "Query_String_Decoded" : "openForm&AppID={{ app.request.query.get('AppID') }}{% if workflow %}&wfID={{ workflow }}{% endif %}",
  "Path_Info_Decoded" : "{{ path('docova_workflowbuilder') }}?openForm&AppID={{ app.request.query.get('AppID') }}",
  "ServerName" : "{{ app.request.server.get('HTTP_HOST') }}",
  "ServerUrl" : "{{ app.request.getscheme }}://{{ app.request.server.get('HTTP_HOST') }}",
  "NsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
  "PortalWebPath" : "{{ path('docova_homepage')[:path('docova_homepage')|length -1] }}",
  "PortalNsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length-2] }}",
  "HomePageWeb" : "{{ path('docova_homepage') }}",
  "AppID" : "{{ app.request.query.get('AppID') }}",
  "SSLState" : "{{ 'https' in app.request.getscheme|lower ? 'ON' : 'OFF' }}",
  "WorkflowID" : "{{ workflow }}"
};
function getinfovar(){
   return info;
}
InitVars(info);


$(function(){
	//Disable context menu
	$(document).on("contextmenu", function(e){ e.preventDefault(); e.stopPropagation();});
	
	$( ".WorkflowItems" ).sortable({
		update: function( event, ui ) {
			RenumberSteps();
			//Re-get current step property
			$("#wfOrder").val($(currWFStep).attr("wfStepNo"));
			//Re-set the decline backtrack options
			SetDeclineBacktrackOptions();
		}
	});
		
    $( ".WorkflowItems" ).disableSelection();
    $("#divStartStep").disableSelection();
    $("#divEndStep").disableSelection();
    $( "#tabs" ).tabs({
		beforeActivate: function(event, ui){ //hide update buttons when tabs are changed
			$("#updateButtons").css("display", "none");
		}	
	});
    
    $(".ui-layout-east").resizable({
		handles: 'w',
 		ghost: true,
 		resize:function( e,ui ){
 			$(".ui-resizable-helper").css("border-left", " 8px solid  rgb(221,221,221)");
 		},
 		stop: function(e, ui){
 			resizeNewPanelHorizontal(ui);	
				
		}
	});
	//calculate the widths of the panels - horizontal
	$("#eastpane").width("414px").css({
		'left' : 'auto',
		'right' : '0'
	});
	$("#inner-center").width($("#divContentSection").width() - $("#eastpane").outerWidth() - 15);
	
	$(window ).resize(function(e) {
		e = e || event;
		if (e.target == window) {
			$("#inner-center").width($("#divContentSection").width() - $(".ui-layout-east").outerWidth() - 15);
			$(".ui-layout-east").css("left", "");
		}
	});

	$('#right-panel-tabs').tabs({
		collapsible: true,
		activate: function(e, ui) {
			if (!ui.newPanel.html()) {
				$('#eastpane').width($('#vertical-tabs').width() + 10).css({
					'left' : 'auto',
					'right' : '0'
				});
			}
			else {
				$('#eastpane').width(414).css({
					'left' : 'auto',
					'right' : '0'
				});
			}
			$("#inner-center").width($("#divContentSection").width() - $(".ui-layout-east").outerWidth() - 15);
			$(".ui-layout-east").css("left", "");
		}
	});
	
    $("#inner-center").click(function(event){ //on click of inner-center div, show/change to workflow definition properties

    	$('#right-panel-tabs').tabs({ active: 0 });

    	if ( iscellclicked ) {
    		iscellclicked = false;
    		return;
    	}
        event.stopPropagation();
        $("#tabs").css("display", "none");
        
		$("#tabsDefinitionProperties").css("display", "");
		$(".WorkflowItems li").removeClass("ui-state-focus");
		$("#divStartStep li").removeClass("ui-state-focus");
		$("#divEndStep li").removeClass("ui-state-focus");		
    });

    var all$$funcs =  getAll$$Functions();
	$('span.longtext_values').on('click', function() {
		var $this = $(this);
		var target = $this.attr('target');
		var value = $('#'+target).val();
		if ($.trim(value) != '') {
			$('#divMultiLinePopup #multilineinput').text(value);
		}
		else {
			value = '';
			$('#divMultiLinePopup #multilineinput').text('');
		}
		var html = $('#divMultiLinePopup').html();
		var dlgTextInput = window.top.Docova.Utils.createDialog({
			id: "divDlgMultiLineInput",
			title: "{% trans %}Enter Script/Value{% endtrans %}",
			height: 313,
			width: 800,
			dlghtml: html,
			resizable: true,
			sourcewindow: window,
			sourcedocument: document,
			onOpen : function () 
			{
				
				var obj = $( "#divDlgMultiLineInput #docova_formula_helper" , window.top.document);
				var dlg = $("#divDlgMultiLineInput", window.top.document);
				var tbox = $("#divDlgMultiLineInput #multilineinput", window.top.document);
				var btn = $( "#divDlgMultiLineInput #btnInsertFormula", window.top.document );
				obj.autocomplete({
  					source: all$$funcs,
  					appendTo: dlg,
  					open : function () {
  						$("#divDlgMultiLineInput ul.ui-menu", window.top.document).width( $(this).innerWidth() ); 
  						$("#divDlgMultiLineInput ul.ui-menu", window.top.document).height( dlg.height() -30 ); 
  						$("#divDlgMultiLineInput ul.ui-menu", window.top.document).css("overflow-x", "hidden")
  					},
  					select : function(e, ui) {
  	  					if ($.trim(ui.item.value) != '')
  	  	  				{
      						if (tbox.val() != "" ){
      				  			tbox.val(tbox.val() + "\n" + $.trim(ui.item.value));
      				  		}else{
      				  			tbox.val($.trim(ui.item.value));
      				  		}
  	  	  				}
  	  				}
				});

				btn.on('click', function()
				{
					if ( trim(obj.val()) == "" ) return;

					if ( tbox.val() != "" ){
			  			tbox.val (tbox.val() + "\n" + $.trim(obj.val()) );
			  		}else{
			  			tbox.val ($.trim(obj.val()));
			  		}
				});

			},

			buttons: {
				"{% trans %}OK{% endtrans %}": function (){
					var tbox = $("#divDlgMultiLineInput #multilineinput", window.top.document);
					var input_value = tbox.val();
					$('#'+target).val(input_value);
					$this.text(input_value);
					setProperties();
					dlgTextInput.closeDialog();
				},
				"{% trans %}Cancel{% endtrans %}": function(){
					dlgTextInput.closeDialog();
				}
			}
		});
	});
    
	//---update buttons for manual attribute/prop updates initially hidden---
	$("#updateButtons").css("display", "none");
	$(".manualEntry").focus( function(event){
		//event.preventDefault();
		//event.stopPropagation();
		setProperties();
		$("#updateButtons").css("display", "");
		$(this).prop("defaultValue", $(this).val());
		currManualEntry = $(this);
		var posleft = parseInt($(this).offset().left, 10) + parseInt($(this).outerWidth(),10);
		var postop = parseInt($(this).offset().top, 10) + 3;
		$("#updateButtons").offset({
			left: posleft,
			top: postop
		});
	}).blur(function(event){
		$("updateButtons").hide();
	});
	
	$(".inputEntry").on('keypress', function(e) {
		if (e.keyCode == 13) {
			var inputs = $('form[name=_WorkflowBuilder]').find(":input:visible");
            		var idx = inputs.index(this);

            		if (idx == inputs.length - 1) {
                		inputs[0].select()
            		} else {
                		inputs[idx + 1].focus();
                		inputs[idx + 1].select()
            		}
            		return false;
		}
	})
	.on('focus', function(e) {
		if (typeof $(this).val() == typeof undefined) {
			defaultVal = '';
		}
		else {
			defaultVal = $(this).val();
		}
	})
	.on ('blur', function(e){
		if ($(this).val() != defaultVal) {
       		$(this).effect("highlight", {color: "#008000"}, 1000);
    		setProperties();
		}
		defaultVal = null;
	});
	
	$("#btn-Apply").click(function(event){
		setProperties();
		$("#updateButtons").hide();
	});
	
	$("#btn-Cancel").click(function(event){
		$(currManualEntry).val( $(currManualEntry).prop("defaultValue"));
		$("#updateButtons").hide();
	});


    $('h3.tool_box_header').on('click', function(){
		var header = '';
		var showTarget = $(this).attr('target');
		if ($('#'+showTarget).is(':hidden')) {
				$('#'+showTarget).slideDown();
		}
		else {
			$('#'+showTarget).slideUp();
		}
	});

	//Set properties triggers
	setPropertiesTriggers();
		
    //Address dialog buttons
	$("#btntmpwfReviewerApproverListSingle").button({
		text: false,
		icons: { 
        	primary: "fas fa-user" 
    	}
	}).click(function(event){
    	window.top.Docova.Utils.showAddressDialog({ fieldname: "tmpwfReviewerApproverListSingle", dlgtype: "multi", cb: setProperties, sourcedocument: document });
    	event.preventDefault();
	});
		
    $("#btntmpwfReviewerApproverListMulti").button({
		text: false,
		icons: { 
        	primary: "fas fa-users" 
    	}
	}).click(function(event){
		window.top.Docova.Utils.showAddressDialog({ fieldname: "tmpwfReviewerApproverListMulti", dlgtype: "multi", cb: setProperties, sourcedocument: document });
		event.preventDefault();
	});
    $("#btnwfActivateNotifyList").button({
		text: false,
		icons: { 
        	primary: "fas fa-users" 
    	}
	}).click(function(event){
		window.top.Docova.Utils.showAddressDialog({ fieldname: "wfActivateNotifyList", dlgtype: "multi", cb: setProperties, sourcedocument: document});
		event.preventDefault();
	});	

    $("#btnwfCompleteNotifyList").button({
		text: false,
		icons: { 
        	primary: "fas fa-users" 
    	}
	}).click(function(event){
		window.top.Docova.Utils.showAddressDialog({ fieldname: "wfCompleteNotifyList", dlgtype: "multi", cb: setProperties, sourcedocument: document});
		event.preventDefault();
	});
	
    $("#btnwfDeclineNotifyList").button({
		text: false,
		icons: { 
        	primary: "fas fa-users" 
    	}
	}).click(function(event){
		window.top.Docova.Utils.showAddressDialog({ fieldname: "wfDeclineNotifyList", dlgtype: "multi", cb: setProperties, sourcedocument: document});
		event.preventDefault();
	});

    $("#btnwfPauseNotifyList").button({
		text: false,
		icons: { 
        	primary: "fas fa-users" 
    	}
	}).click(function(event){
		window.top.Docova.Utils.showAddressDialog({ fieldname: "wfPauseNotifyList", dlgtype: "multi", cb: setProperties, sourcedocument: document});
		event.preventDefault();
	});					
	
    $("#btnwfCancelNotifyList").button({
		text: false,
		icons: { 
        	primary: "fas fa-users" 
    	}
	}).click(function(event){
		window.top.Docova.Utils.showAddressDialog({ fieldname: "wfCancelNotifyList", dlgtype: "multi", cb: setProperties, sourcedocument: document});
		event.preventDefault();
	});
	
    $("#btnwfDelayNotifyList").button({
		text: false,
		icons: { 
        	primary: "fas fa-users" 
    	}
	}).click(function(event){
		window.top.Docova.Utils.showAddressDialog({ fieldname: "wfDelayNotifyList", dlgtype: "multi", cb: setProperties, sourcedocument: document});
		event.preventDefault();
	});					
	
    $("#btnwfDelayEsclNotifyList").button({
		text: false,
		icons: { 
        	primary: "fas fa-users" 
    	}
	}).click(function(event){
		window.top.Docova.Utils.showAddressDialog({ fieldname: "wfDelayEsclNotifyList", dlgtype: "multi", cb: setProperties, sourcedocument: document});
		event.preventDefault();
	});

	$( "button" ).button().click(function( event ) {
		event.preventDefault();
	});	


	main(document.getElementById('graphContainer'),
      document.getElementById('outlineContainer'),
      document.getElementById('toolbarContainer'),
      document.getElementById('sidebarContainer'),
      document.getElementById('statusContainer'));

	var swimlane = $("#docova_createswimlane");
	mxEvent.addListener(swimlane[0], 'click', function(evt)
	{
	  	evt.preventDefault();
	    editor.execute('groupOrUngroup');
	});

	var remove = $("#docova_remove");
	mxEvent.addListener(remove[0], 'click', function(evt)
	{
	  	evt.preventDefault();
	    editor.execute('delete');
	});

	var remove = $("#docova_undo");
	mxEvent.addListener(remove[0], 'click', function(evt)
	{
	  	evt.preventDefault();
	    editor.execute('undo');
	});

	var remove = $("#docova_redo");
	mxEvent.addListener(remove[0], 'click', function(evt)
	{
	  	evt.preventDefault();
	    editor.execute('redo');
	});

	
	if(docInfo.WorkflowID != ""){
		LoadWorkflow(docInfo.WorkflowID)
	}else{
		createInitVertext(graph);
	}
});

function resizeNewPanelHorizontal( ui )
{
	var elem = ui.element.parent();
	var parentWidth = ui.element.parent().width();
	var divTwo = ui.element.prev();
	var id = ui.element.attr("id");
	var remainingSpace = parentWidth - ( ui.element.width() + 15);
	if (remainingSpace < 710) {
		remainingSpace = 710;
		ui.element.width(parentWidth - 690);
		$(".ui-layout-east").resizable();
	}
	else if (ui.element.width() <= 414) {
		$("#eastpane").width("414px").css({
			'left' : 'auto',
			'right' : '0'
		});
		$("#inner-center").width($("#divContentSection").width() - $("#eastpane").outerWidth() - 15);
		$(".ui-layout-east").resizable();
	}
    divTwo.width(remainingSpace);
	if ($("#inner-center").width() > ($("#divContentSection").outerWidth() - $("#eastpane").outerWidth() - 40))
	{
		$("#inner-center").width($("#divContentSection").width() - $("#eastpane").width() - 15);
	}
}

function cellClicked(stype)

{
	
	iscellclicked = true;

	
	$("#tabsDefinitionProperties").css("display", "none");

	if ( stype == "Start" || stype == "End" || stype== "Decision" || stype == "Stop" || stype=="Cancel")
		$("[name=wfAction]").prop("disabled", true)
	else{
		$("[name=wfAction]").prop("disabled", false)
	}

	$("#tabs").css("display", "");

		
	getProperties();
	


}

function editStepFormula(curformula, wfnode){
	
	var target = wfnode;
	var value = curformula && curformula != ""? curformula : "";
	
	
	var tmpdoc = document;

	var htmlstr = '<div id="divMultiLinePopupFormula" style="width:100%; height:100%" ><span style="color:gray; font-size:9px"> Entere JS code below that returns a string. <br>  e.g. return "Test User/DOCOVA"</span>';
	htmlstr += '<textarea id="multilineinputwf" style="width:99%; height:99%; outline:none; border:1px #CCC solid; border-radius:3px;">';
	htmlstr += value + '</textarea></div>';
	
	var dlgTextInput = window.top.Docova.Utils.createDialog({
		id: "divDlgMultiLineInput",
		title: "Enter Script/Value",
		height: 250,
		width: 450,
		dlghtml: htmlstr,
		resizable: true,
		sourcewindow: window,
		sourcedocument: document,
		buttons: {
			"OK": function (){
				var g = $("#multilineinputwf", window.top.document);
				var input_value = g.val();
				
				wfnode.attr("wfParticipantFormula", btoa(input_value));
				dlgTextInput.closeDialog();
				setProperties();
			},
			"Cancel": function(){
				dlgTextInput.closeDialog();
			}
		}
	});


	$("#multilineinput", window.top.document).keydown(function(e) {
	    if(e.keyCode === 9) { // tab was pressed
	        // get caret position/selection
	        var start = this.selectionStart;
	        var end = this.selectionEnd;

	        var $this = $(this);
	        var value = $this.val();

	        // set textarea value to: text before caret + tab + text after caret
	        $this.val(value.substring(0, start)
	                    + "\t"
	                    + value.substring(end));

	        // put caret at right position again (add one for the tab)
	        this.selectionStart = this.selectionEnd = start + 1;

	        // prevent the focus lose
	        e.preventDefault();
	    }
	});
}


function main(container, outline, toolbar, sidebar, status)
    {
      // Checks if the browser is supported
      if (!mxClient.isBrowserSupported())
      {
        // Displays an error message if the browser is not supported.
        mxUtils.error('Browser is not supported!', 200, false);
      }
      else
      {
        // Assigns some global constants for general behaviour, eg. minimum
        // size (in pixels) of the active region for triggering creation of
        // new connections, the portion (100%) of the cell area to be used
        // for triggering new connections, as well as some fading options for
        // windows and the rubberband selection.
        mxConstants.MIN_HOTSPOT_SIZE = 16;
        mxConstants.DEFAULT_HOTSPOT = 1;
        
        // Enables guides
        mxGraphHandler.prototype.guidesEnabled = true;
          // Alt disables guides
          mxGuide.prototype.isEnabledForEvent = function(evt)
        {
          return !mxEvent.isAltDown(evt);
        };
        // Enables snapping waypoints to terminals
        mxEdgeHandler.prototype.snapToTerminals = true;
        // Workaround for Internet Explorer ignoring certain CSS directives
        if (mxClient.IS_QUIRKS)
        {
          document.body.style.overflow = 'hidden';
          new mxDivResizer(container);
          new mxDivResizer(outline);
          new mxDivResizer(toolbar);
          new mxDivResizer(sidebar);
          new mxDivResizer(status);
        }
        
        // Creates a wrapper editor with a graph inside the given container.
        // The editor is used to create certain functionality for the
        // graph, such as the rubberband selection, but most parts
        // of the UI are custom in this example.
       editor = new mxEditor();
        graph = editor.graph;
        var model = graph.getModel();
        // Disable highlight of cells when dragging from toolbar
        graph.setDropEnabled(false);



        // Uses the port icon while connections are previewed
        graph.connectionHandler.getConnectImage = function(state)
        {
          return new mxImage(state.style[mxConstants.STYLE_IMAGE], 16, 16);
        };
        // Centers the port icon on the target port
        graph.connectionHandler.targetConnectImage = true;
        // Does not allow dangling edges
        graph.setAllowDanglingEdges(false);
        // Sets the graph container and configures the editor
        editor.setGraphContainer(container);
       


        graph.setCellsEditable(true);
        // Defines the default group to be used for grouping. The
        // default group is a field in the mxEditor instance that
        // is supposed to be a cell which is cloned for new cells.
        // The groupBorderSize is used to define the spacing between
        // the children of a group and the group bounds.
        var group = new mxCell('Group', new mxGeometry(), 'group');
        group.setVertex(true);
        group.setConnectable(false);
        editor.defaultGroup = group;
        editor.groupBorderSize = 20;
        // Disables drag-and-drop into non-swimlanes.
        graph.isValidDropTarget = function(cell, cells, evt)
        {
          return this.isSwimlane(cell);
        };
        
        // Disables drilling into non-swimlanes.
        graph.isValidRoot = function(cell)
        {
          return this.isValidDropTarget(cell);
        }
        // Does not allow selection of locked cells
        graph.isCellSelectable = function(cell)
        {
          return !this.isCellLocked(cell);
        };
        // Returns a shorter label if the cell is collapsed and no
        // label for expanded groups
        graph.getLabel = function(cell)
        {
          var tmp = mxGraph.prototype.getLabel.apply(this, arguments); // "supercall"
          
          
          return tmp;
        }
        // Disables HTML labels for swimlanes to avoid conflict
        // for the event processing on the child cells. HTML
        // labels consume events before underlying cells get the
        // chance to process those events.
        //
        // NOTE: Use of HTML labels is only recommended if the specific
        // features of such labels are required, such as special label
        // styles or interactive form fields. Otherwise non-HTML labels
        // should be used by not overidding the following function.
        // See also: configureStylesheet.
        graph.isHtmlLabel = function(cell)
        {
          return !this.isSwimlane(cell);
        }

        // Defines a new action for deleting or ungrouping
		editor.addAction('groupOrUngroup', function(editor, cell)
		{
			cell = cell || editor.graph.getSelectionCell();
			if (cell != null && editor.graph.isSwimlane(cell))
			{
				editor.execute('ungroup', cell);
			}
			else
			{
				editor.execute('group');
			}
		});


        function validateConnection ( source, target)
        {
        	var validsources = ["Started", "Approved", "Denied", "True", "False", "Reviewed"];
        	var validtargets = ["Start", "Approve", "Decision", "Review", "End", "Stop", "Cancel"];

        	if ( ! ( validsources.indexOf(source) >= 0))
        		return false;

        	if ( ! (validtargets.indexOf(target) >= 0))
        		return false;

        	return true;

        }


        graph.getEdgeValidationError = function(edge, source, target)
        {
          if (source != null && target != null &&
            this.model.getValue(source) != null &&
            this.model.getValue(target) != null)
          {
           
            if (source != target )
            {

              // Checks if the connection is generally allowed
              if (! this.isValidConnection(source, target))
              {
                return "";
              }



              if ( source.parent == target.parent ) return "";

              if ( ! validateConnection(source.value, target.value) )
              	return "";

               /*if ( (source.value == "Started" || source.value == "Reviewed" || source.value == "Approved" || source.value == "Decision" )&& (target.value != "Review" && target.value != "Approve" && target.value != "End" && target.value != "Decision") )
              {
                   return "";
             
              }

              if (source.value == "Denied" && (target.value != "Review" && target.value != "Approve" && target.value != "End" && target.value != "Start"  && target.value != "Decision") ){
                  return "";
              }

				*/

             
              var tmp = this.model.getOutgoingEdges(source);

              //check if we already have a connection to the target
              if (tmp[0] && tmp[0].target && tmp[0].target == target ) return "";
              var parent = this.getDefaultParent();
              this.model.beginUpdate();
              try {
                for ( var p =0 ; p < tmp.length; p ++) {
                    this.model.remove(tmp[p]);
                }
                this.insertEdge(target, null, "", source, target);
              }finally {
                     // layout supporting parallel edges
                    var layout = new mxParallelEdgeLayout(this);
                    layout.spacing = 10;

                   
                    this.model.endUpdate();
              }

            }
          }

          // "Supercall"
          return mxGraph.prototype.getEdgeValidationError.apply(this, arguments);
        }

         graph.addListener(mxEvent.CLICK, function (sender, evt) {
         	
		     var cell = evt.getProperty("cell");
		     if ( !cell ) return;
		     if (  (cell.parent.value && cell.parent.value != ""  && cell.parent.style != "group" ) || cell.edge ) return;
		     currCell = cell;
		   //  var id = $(cell.value).attr("id");
		   	 var snode = graph.getModel().getValue(cell);
		  
		     currWFStep = $(snode);

		     var stype = currWFStep.attr("wfstepaction")
		     
		     cellClicked(stype);
		});

        // To disable the folding icon, use the following code:
        /*graph.isCellFoldable = function(cell)
        {
          return false;
        }*/
        // Shows a "modal" window when double clicking a vertex.
        graph.dblClick = function(evt, cell)
        {
          // Do not fire a DOUBLE_CLICK event here as mxEditor will
          // consume the event and start the in-place editor.
          if (this.isEnabled() &&
            !mxEvent.isConsumed(evt) &&
            cell != null &&
            this.isCellEditable(cell))
          {
            if (this.model.isEdge(cell) ||
              !this.isHtmlLabel(cell))
            {
              this.startEditingAtCell(cell);
            }
            else
            {
              var content = document.createElement('div');
              content.innerHTML = this.convertValueToString(cell);
              showModalWindow(this, 'Properties', content, 400, 300);
            }
          }
          // Disables any default behaviour for the double click
          mxEvent.consume(evt);
        };
        // Enables new connections
        graph.setConnectable(true);
        // Adds all required styles to the graph (see below)
        configureStylesheet(graph);
        // Adds sidebar icons.
        //
        // NOTE: For non-HTML labels a simple string as the third argument
        // and the alternative style as shown in configureStylesheet should
        // be used. For example, the first call to addSidebar icon would
        // be as follows:
        // addSidebarIcon(graph, sidebar, 'Website', 'images/icons48/earth.png');
        var dist = " wftype ='Serial' ";

        var reviewstr = '<h3 ' + 'wfstepaction="Review" wfstepkey="" wfstepno="1" wfsteptitle="Review" wfdocstatus="In Review" ' + dist + ' wfenableauthorparticipant="1" tmpwfreviewerapproverlistsingle="" tmpwfreviewerapproverlistmulti="" wfreviewerapproverselect="1" wfcompleteany="0" wfcompletecount="0" wfapproveredit="No" wfoptionalcomments="" wfcustomreviewbuttonlabel="" wfcustomapprovebuttonlabel="" wfcustomdeclinebuttonlabel="" wfhidebuttons="" wfcustombuttonshidewhen="" wfenableactivatemsg="1" wfactivatemsg="ACTIVATE" wfactivatenotifyparticipants="P" wfactivatenotifylist="" wfenablecompletemsg="" wfcompletemsg="COMPLETE" wfcompletenotifyparticipants="" wfcompletenotifylist="" wfdeclineaction="1" wfdeclinebacktrack="" wfenabledeclinemsg="" wfdeclinenotifyparticipants="" wfdeclinenotifylist="" wfdeclinemsg="DECLINE" wfenablepausemsg="" wfpausemsg="PAUSE" wfpausenotifyparticipants="" wfpausenotifylist="" wfenablecancelmsg="" wfcancelmsg="CANCEL" wfcancelnotifyparticipants="" wfcancelnotifylist="" wfdelaycompletethreshold="3" wfenabledelaymsg="" wfdelaymsg="DELAY" wfdelaynotifyparticipants="" wfdelaynotifylist="" wfdelayesclthreshold="3" wfenabledelayesclmsg="" wfparticipanttokens="[Author]" wfdelayesclmsg="DELAYESCL" wfdelayesclnotifyparticipants="" wfdelayesclnotifylist=""> Review </h3>';

        

      

        addSidebarIcon(graph, sidebar, reviewstr ,'', 'Review');
        dist = " wftype ='Parallel' ";

        reviewstr = '<h3 ' + 'wfstepaction="Review" wfstepkey="" wfstepno="1" wfsteptitle="Review" wfdocstatus="In Review" ' + dist + ' wfenableauthorparticipant="1" tmpwfreviewerapproverlistsingle="" tmpwfreviewerapproverlistmulti="" wfreviewerapproverselect="1" wfcompleteany="0" wfcompletecount="0" wfapproveredit="No" wfoptionalcomments="" wfcustomreviewbuttonlabel="" wfcustomapprovebuttonlabel="" wfcustomdeclinebuttonlabel="" wfhidebuttons="" wfcustombuttonshidewhen="" wfenableactivatemsg="1" wfactivatemsg="ACTIVATE" wfactivatenotifyparticipants="P" wfactivatenotifylist="" wfenablecompletemsg="" wfcompletemsg="COMPLETE" wfcompletenotifyparticipants="" wfcompletenotifylist="" wfdeclineaction="1" wfdeclinebacktrack="" wfenabledeclinemsg="" wfdeclinenotifyparticipants="" wfdeclinenotifylist="" wfdeclinemsg="DECLINE" wfenablepausemsg="" wfpausemsg="PAUSE" wfpausenotifyparticipants="" wfpausenotifylist="" wfenablecancelmsg="" wfcancelmsg="CANCEL" wfcancelnotifyparticipants="" wfcancelnotifylist="" wfdelaycompletethreshold="3" wfenabledelaymsg="" wfdelaymsg="DELAY" wfdelaynotifyparticipants="" wfdelaynotifylist="" wfdelayesclthreshold="3" wfenabledelayesclmsg=""  wfparticipanttokens="[Author]" wfdelayesclmsg="DELAYESCL" wfdelayesclnotifyparticipants="" wfdelayesclnotifylist=""> Review </h3>';

        addSidebarIcon(graph, sidebar, reviewstr ,'', 'ReviewP');


        dist = " wftype ='Serial' ";

        approvestr = '<h3 ' +  'wfstepaction="Approve" wfstepkey="" wfstepno="2" wfsteptitle="Approve" wfdocstatus="In Review" ' + dist + ' wfenableauthorparticipant="1" tmpwfreviewerapproverlistsingle="" tmpwfreviewerapproverlistmulti="" wfreviewerapproverselect="1" wfcompleteany="0" wfcompletecount="0" wfapproveredit="No" wfoptionalcomments="" wfcustomreviewbuttonlabel="" wfcustomapprovebuttonlabel="" wfcustomdeclinebuttonlabel="" wfhidebuttons="" wfcustombuttonshidewhen="" wfenableactivatemsg="1" wfactivatemsg="ACTIVATE" wfactivatenotifyparticipants="P" wfactivatenotifylist="" wfenablecompletemsg="" wfcompletemsg="COMPLETE" wfcompletenotifyparticipants="" wfcompletenotifylist="" wfdeclineaction="1" wfenabledeclinemsg="" wfdeclinenotifyparticipants="" wfdeclinenotifylist="" wfdeclinemsg="DECLINE" wfenablepausemsg="" wfpausemsg="PAUSE" wfpausenotifyparticipants="" wfpausenotifylist="" wfenablecancelmsg="" wfcancelmsg="CANCEL" wfcancelnotifyparticipants="" wfcancelnotifylist="" wfdelaycompletethreshold="3" wfenabledelaymsg="" wfdelaymsg="DELAY" wfdelaynotifyparticipants="" wfdelaynotifylist="" wfdelayesclthreshold="3" wfenabledelayesclmsg="" wfdelayesclmsg="DELAYESCL" wfparticipanttokens="[Author]" wfdelayesclnotifyparticipants="" ;wfdelayesclnotifylist=""> Approve </h3>';


        addSidebarIcon(graph, sidebar, approvestr,'', "Approve");


        dist = " wftype ='Parallel' ";

        approvestr = '<h3 ' +  'wfstepaction="Approve" wfstepkey="" wfstepno="2" wfsteptitle="Approve" wfdocstatus="In Review" ' + dist + ' wfenableauthorparticipant="1" tmpwfreviewerapproverlistsingle="" tmpwfreviewerapproverlistmulti="" wfreviewerapproverselect="1" wfcompleteany="0" wfcompletecount="0" wfapproveredit="No" wfoptionalcomments="" wfcustomreviewbuttonlabel="" wfcustomapprovebuttonlabel="" wfcustomdeclinebuttonlabel="" wfhidebuttons="" wfcustombuttonshidewhen="" wfenableactivatemsg="1" wfactivatemsg="ACTIVATE" wfactivatenotifyparticipants="P" wfactivatenotifylist="" wfenablecompletemsg="" wfcompletemsg="COMPLETE" wfcompletenotifyparticipants="" wfcompletenotifylist="" wfdeclineaction="1" wfenabledeclinemsg="" wfdeclinenotifyparticipants="" wfdeclinenotifylist="" wfdeclinemsg="DECLINE" wfenablepausemsg="" wfpausemsg="PAUSE" wfpausenotifyparticipants="" wfpausenotifylist="" wfenablecancelmsg="" wfcancelmsg="CANCEL" wfcancelnotifyparticipants="" wfcancelnotifylist="" wfdelaycompletethreshold="3" wfenabledelaymsg="" wfdelaymsg="DELAY" wfdelaynotifyparticipants="" wfdelaynotifylist="" wfdelayesclthreshold="3" wfenabledelayesclmsg="" wfdelayesclmsg="DELAYESCL" wfparticipanttokens="[Author]" wfdelayesclnotifyparticipants="" ;wfdelayesclnotifylist=""> Approve </h3>';
        addSidebarIcon(graph, sidebar, approvestr,'', "ApproveP");


        var decision = "<h3 wfsteptitle='Decision' wfstepaction='Decision'>Decision</h3>"
        addSidebarIcon(graph, sidebar, decision,'', "Decision");

        var stopwf = '<h3 id="meta_21d330cf-696e-467b-be13-86695d2dc2ec" wfstepaction="Stop" wfstepkey="" wfsteptitle="Stop Workflow" wfdocstatus="Stopped" wfenableauthorparticipant="1" tmpwfreviewerapproverlistsingle="" wfreviewerapproverselect="1" wfenablecompletemsg="" wfcompletemsg="COMPLETE" wfcompletenotifyparticipants="" wfcompletenotifylist=""> Stop Workflow</h3>';
       
        addSidebarIcon(graph, sidebar, stopwf,'', "Stop");

       
        // Fades-out the splash screen after the UI has been loaded.
        var splash = document.getElementById('splash');
        if (splash != null)
        {
          try
          {
            mxEvent.release(splash);
            mxEffects.fadeOut(splash, 100, true);
          }
          catch (e)
          {
          
            // mxUtils is not available (library not loaded)
            splash.parentNode.removeChild(splash);
          }
        }

       
      }
    };


    

    function getOutputNode (cell, direction,  type)
    {

    if ( !cell) return; 

    var outnode = null;
    var parent = cell.getParent();

    var nodesearchstr = "";
    if ( type == "Approve" && direction == "true")
    	nodesearchstr = "Approved";
    else if ( type == "Approve" && direction == "false")
        nodesearchstr = "Denied"
   	else if ( type == "Decision" && direction == "true")
   		nodesearchstr = "True"
   	else if ( type == "Decision" && direction == "false")
   		nodesearchstr = "False"
   	
   	else if ( type == "Review" && direction == "true")
   	 	nodesearchstr = "Reviewed"

    var childcount = parent.getChildCount();
    for ( var k = 0; k < childcount; k ++){
        var node = parent.getChildAt(k);
        if ( node.value ==  nodesearchstr)
        {
          outnode = node;
          break;
        }
    }
    return outnode;
    }

    function updateEndNode( injson){
    	if ( injson.stype == "End")
    		injson.cellNo = maxindex;

    	if ( injson.trueside)
    		updateEndNode(injson.trueside, maxindex);

    	if ( injson.falseside )
    		updateEndNode(injson.falseside, maxindex);
    }

 
    var wfjsonarr = [];
    var maxindex = 0;
    function wfTraverse ( editor, cell, visited)
    {
     
		var truebranch = cell;
		var falsebranch = null;

		visited = visited || [];
		var jsonobj =  {};
		
		jsonobj.attrStr = cell.getParent().value
		jsonobj.id = cell.getParent().id;
		jsonobj.stype = cell.value;
		
		if ( cell.getParent().id in visited ) {
			return;
		}

		if ( cell.value == "Decision")
		{
			var frm = $(jsonobj.attrStr).attr("wfFormula");
			if ( frm && frm != "")
				jsonobj.formula = frm;
		}
		

		if ( cell.value == "Started")
		{
			maxindex = 0;
			truebranch = cell;
			falsebranch = null;

	   	}else if ( cell.value == "Approve")
	    {
	        truebranch = getOutputNode(cell, "true", "Approve");
	        falsebranch = getOutputNode(cell, "false", "Approve")
	        maxindex ++;
		}else if ( cell.value == "Review"){
			truebranch = getOutputNode(cell, "true", "Review");
	        falsebranch = null;
	        maxindex ++;
	    }else if ( cell.value == "Decision")
	    {
	    	truebranch = getOutputNode(cell, "true", "Decision");
	        falsebranch = getOutputNode(cell, "false", "Decision");

		}else if ( cell.value == "Stop"){
			truebranch = null;
			falsebranch = null;
			maxindex ++;
		}else if ( cell.value == "End"){
	         truebranch = null;
	         falsebranch = null;
	         maxindex ++;
	    }

	    if ( cell.value == "Decision"){
	    	jsonobj.cellNo = "";	   	
	    }else{
	    	jsonobj.cellNo = maxindex;	   	
	    }
	    

		visited[cell.getParent().id] = maxindex;


	    //traverse tree to left
	    var edge = editor.graph.getModel().getOutgoingEdges(truebranch);
	    edge = edge && edge[0] ? edge[0] : null;
	    if ( edge )
	    {
	      jsonobj.trueside = edge.target.getParent().id;
	      wfTraverse(editor, edge.target, visited);
	    }

	    //traverse tree to right

	    edge = editor.graph.getModel().getOutgoingEdges(falsebranch);
	    edge = edge && edge[0] ? edge[0] : null;
	    if ( edge )
	    {
	    	jsonobj.falseside = edge.target.getParent().id;
	      	wfTraverse(editor, edge.target, visited);
	    }


	    if ( cell.value == "Started")
	    {
	    	maxindex++;
	   		updateEndNode ( jsonobj);
	    }

	    wfjsonarr.push(jsonobj);
 }
    
    function addToolbarButton(editor, toolbar, action, label, image, isTransparent)
    {
      var button = document.createElement('button');
      button.style.fontSize = '10';
      if (image != null)
      {
        var img = document.createElement('img');
        img.setAttribute('src', image);
        img.style.width = '16px';
        img.style.height = '16px';
        img.style.verticalAlign = 'middle';
        img.style.marginRight = '2px';
        button.appendChild(img);
      }
      if (isTransparent)
      {
        button.style.background = 'transparent';
        button.style.color = '#FFFFFF';
        button.style.border = 'none';
      }
      mxEvent.addListener(button, 'click', function(evt)
      {
      	evt.preventDefault();
        editor.execute(action);
      });
      mxUtils.write(button, label);
      toolbar.appendChild(button);
    };
    
	function uuidv4() {
	    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
	        var r = parseFloat('0.' + Math.random().toString().replace('0.', '') + new Date().getTime()) * 16 | 0,
	            v = c == 'x' ? r : (r & 0x3 | 0x8);
	        return v.toString(16);
	    });
	}

    function createInitVertext(graph)
    {
        var parent = graph.getDefaultParent();
        var model = graph.getModel();
        
        var v1 = null;
        var xval = $("#graphContainer").width()/4;
        model.beginUpdate();

        var ght =  $("#graphContainer").height();
        
        try { 

        	var doc = mxUtils.createXmlDocument();
       		var id = uuidv4();

       		var portwidth = 44;
       		var portheight = 14;
       		var offx = -1 * ( portwidth /2 );
       		var offy1 = -4;
       		var offy2 = -10;

       		var xval1 = 0.5;
       		var xval2 = 0.5;
       		var yval1 = 0;
       		var yval2 = 1;

       		

		  	var startStr = '<h3 id="meta_' + id +  '" '  + 'wfStepAction="Start" wfStepKey=""  wfStepTitle="Start" wfDocStatus="Draft" wfEnableAuthorParticipant="1" tmpwfReviewerApproverListSingle="" wfReviewerApproverSelect="1" wfEnableCompleteMsg="" wfCompleteMsg="COMPLETE" wfCompleteNotifyParticipants="" wfCompleteNotifyList="" > Start </h3>';

	          v1 = graph.insertVertex(parent, id, startStr , xval, 40, 120, 60, 'start');
	          v1.setConnectable(false);
	          var port = graph.insertVertex(v1, 'Start', 'Start', xval1, yval1, portwidth, portheight, 'port', true);
	          port.geometry.offset = new mxPoint(offx, offy1); 
	          var port2 = graph.insertVertex(v1, "Started", 'Started', xval2, yval2, portwidth, portheight, 'port', true);
	          port2.geometry.offset = new mxPoint(offx,offy2); 

	        id = uuidv4();

          	var endstr = '<h3 id="meta_' + id + '" ' + 'wfstepaction="End" wfstepkey=""  wfsteptitle="End" wfdocstatus="Release" wftype="Serial" wfenableauthorparticipant="1" mpwfreviewerapproverlistsingle="" tmpwfreviewerapproverlistmulti="" wfreviewerapproverselect="1" wfcompleteany="0" wfcompletecount="0" wfcustomdeclinebuttonlabel="" wfcustomreleasebuttonlabel="" wfhidebuttons="" wfcustombuttonshidewhen="" wfenableactivatemsg="1" wfactivatemsg="ACTIVATE" wfactivatenotifyparticipants="P" wfactivatenotifylist="" wfenablecompletemsg="" wfcompletemsg="COMPLETE" wfcompletenotifyparticipants="" wfcompletenotifylist="" wfdeclineaction="1" wfdeclinebacktrack="" wfenabledeclinemsg="" wfdeclinenotifyparticipants="" wfdeclinenotifylist="" wfdeclinemsg="" wfenablepausemsg="" wfpausemsg="PAUSE" wfpausenotifyparticipants="" wfpausenotifylist="" wfenablecancelmsg="" wfcancelmsg="CANCEL" wfcancelnotifyparticipants="" wfcancelnotifylist="" wfdelaycompletethreshold="3" wfenabledelaymsg="" wfdelaymsg="DELAY" wfdelaynotifyparticipants="" wfdelaynotifylist="" wfdelayesclthreshold="3" wfenabledelayesclmsg="" wfdelayesclmsg="DELAYESCL" wfparticipanttokens="[Author]" wfdelayesclnotifyparticipants="" wfdelayesclnotifylist=""> End </h3>';

          v2 = graph.insertVertex(parent, id,  endstr , xval , parseInt(ght-200), 120, 60, 'start');
          v2.setConnectable(false);
          var port = graph.insertVertex(v2, null, 'End', xval1,yval1, portwidth, portheight, 'port', true);
          port.geometry.offset = new mxPoint(offx, offy1); 
          
          graph.insertEdge(parent, null, "", port2, port);
        }  
        finally
        {
          model.endUpdate();
        }
        
       

    }
    
    function addSidebarIcon(graph, sidebar, label, image, stype)
    {
      // Function that is executed when the image is dropped on
      // the graph. The cell argument points to the cell under
      // the mousepointer if there is one.
      var funct = function(graph, evt, cell, x, y)
      {
        var parent = graph.getDefaultParent();
        var model = graph.getModel();
        
        var v1 = null;
        
        model.beginUpdate();
        try
        {
          // NOTE: For non-HTML labels the image must be displayed via the style
          // rather than the label markup, so use 'image=' + image for the style.
          // as follows: v1 = graph.insertVertex(parent, null, label,
          // pt.x, pt.y, 120, 120, 'image=' + image);


        var portwidth = 44;
   		var portheight = 14;
   		var offx = -1 * ( portwidth /2 );
   		var offy1 = -4;
   		var offy2 = -10;

   		var xval1 = 0.5;
   		var xval2 = 0.5;
   		var yval1 = 0;
   		var yval2 = 1;

   		if ( false ){
   			xval1 = 0;
   			yval1 = 0.5;
   			xval2 = 1;
   			yval2 = 0.5;

   			offy1 = -4;
   			offy2 = -4;

   		}
         
         
	      if ( stype == "Approve" || stype == "ApproveP")
	      {


	          // Adds the ports at various relative locations
	        v1 = graph.insertVertex(parent, null, label, x, y, 120, 60, stype);
	      	v1.setConnectable(false);
	     

	        var port = graph.insertVertex(v1, null, 'Approve', xval1, yval1, portwidth, portheight, 'port', true);
	        port.geometry.offset = new mxPoint(offx, offy1);
	  

	        var port = graph.insertVertex(v1, null, 'Approved', 0, 0.5, portwidth, portheight,
	            'port', true);
	        port.geometry.offset = new mxPoint(-25, -4);
	        var port = graph.insertVertex(v1, null, 'Denied', 1, 0.5, portwidth, portheight,
	            'port', true);
	        port.geometry.offset = new mxPoint(-16, -4);

	      }else if (  stype == "Review" || stype == "ReviewP"){
	      	   // Adds the ports at various relative locations
	        v1 = graph.insertVertex(parent, null, label, x, y, 120, 60, stype);
	      	v1.setConnectable(false);
	     
	         // Adds the ports at various relative locations
	        var port = graph.insertVertex(v1, null, 'Review', xval1, yval1, portwidth, portheight, 'port', true);
	        port.geometry.offset = new mxPoint(offx, offy1);

	        // Adds the ports at various relative locations
	        var port = graph.insertVertex(v1, null, 'Reviewed', xval2, yval2, portwidth, portheight, 'port', true);
	        port.geometry.offset = new mxPoint(offx, offy2);

	     }else if (  stype == "Stop" || stype == "Cancel"){
	      	   // Adds the ports at various relative locations
	        v1 = graph.insertVertex(parent, null, label, x, y, 120, 60, stype);
	      	v1.setConnectable(false);
	     
	        // Adds the ports at various relative locations
	        var port = graph.insertVertex(v1, null, stype, xval1, yval1, portwidth, portheight, 'port', true);
	        port.geometry.offset = new mxPoint(offx, offy1);
	  
	      }else{
	                
	        // Adds the ports at various relative locations
	        v1 = graph.insertVertex(parent, null, label, x, y, 120, 60, 'decision');
	      	v1.setConnectable(false);
	     
	         // Adds the ports at various relative locations
	        var port = graph.insertVertex(v1, null, 'Decision', xval1, yval1, portwidth, portheight, 'port', true);
	        port.geometry.offset = new mxPoint(offx, offy1);

	       var port = graph.insertVertex(v1, null, 'True', 0, 0.5,  portwidth, portheight,
	            'port', true);
	        port.geometry.offset = new mxPoint(-25,-9);
	        var port = graph.insertVertex(v1, null, 'False', 1, 0.5, portwidth, portheight,
	            'port', true);
	         port.geometry.offset = new mxPoint(-25, -9	);
	      }
	    }
	    finally
	    {
	      model.endUpdate();
	    }
	    
	    graph.setSelectionCell(v1);
	  }
      
      // Creates the image which is used as the sidebar icon (drag source)
     /* var img = document.createElement('img');
      img.setAttribute('src', image);
      img.style.width = '48px';
      img.style.height = '48px';
      img.title = 'Drag this to the diagram to create a new vertex';
      sidebar.appendChild(img);*/

    var img = document.createElement('div');
     

    img.className = "classified"

     var imgstr = "far fa-edit";
     if ( stype == "Review")
      	imgstr = "fas fa-user";
     else if ( stype == "ReviewP")
     	imgstr = "far fa-users";
  	 else if ( stype == "Approve")
  	 	imgstr = "far fa-user-check"
  	 else if ( stype == "ApproveP")
  	 	imgstr = "fas fa-user-check"
  	 else if ( stype == "Stop")
  	 	imgstr = "fas fa-stop-circle"
  	 else if ( stype == "Cancel")
  	 	imgstr = "fas fa-undo-alt"
  	 else
  	 	imgstr = "far fa-code-merge"

  	 var stypestr = stype;
  	 if ( stype == "ReviewP") stypestr = "Parallel Review";
  	 if ( stype == "ApproveP") stypestr = "Parallel Approve";
  	 if ( stype == "Stop") stypestr = "Stop Workflow";
     if ( stype == "Cancel") stypestr = "Cancel Workflow"

      var tmphtml =  '<a href="#" elem="text" eltype="field" class="newElement" ><i class="' + imgstr + ' "></i><span class="elemLabel">' + stypestr + '</span></a>';
      $(img).html(tmphtml);
      sidebar.appendChild(img);

      
      var dragElt = document.createElement('div');
      dragElt.style.border = 'dashed black 1px';
      dragElt.style.width = '120px';
      dragElt.style.height = '120px';
                  
      // Creates the image which is used as the drag icon (preview)
      var ds = mxUtils.makeDraggable(img, graph, funct, dragElt, 0, 0, true, true);
      ds.setGuidesEnabled(true);
    };
    
    function configureStylesheet(graph)
    {
      var style = new Object();
      style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;
      style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;
      style[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;
      style[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;
      style[mxConstants.STYLE_GRADIENTCOLOR] = '#41B9F5';
      style[mxConstants.STYLE_FILLCOLOR] = '#8CCDF5';
      style[mxConstants.STYLE_STROKECOLOR] = '#1B78C8';
      style[mxConstants.STYLE_FONTCOLOR] = '#000000';
      style[mxConstants.STYLE_ROUNDED] = true;
      style[mxConstants.STYLE_OPACITY] = '80';
      style[mxConstants.STYLE_FONTSIZE] = '12';
      style[mxConstants.STYLE_FONTSTYLE] = 0;
      style[mxConstants.STYLE_IMAGE_WIDTH] = '48';
      style[mxConstants.STYLE_IMAGE_HEIGHT] = '48';
      graph.getStylesheet().putDefaultVertexStyle(style);

      


      style = new Object();
      style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_SWIMLANE;
      style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;
      style[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;
      style[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_TOP;
      style[mxConstants.STYLE_FILLCOLOR] = '#FF9103';
      style[mxConstants.STYLE_GRADIENTCOLOR] = '#F8C48B';
      style[mxConstants.STYLE_STROKECOLOR] = '#E86A00';
      style[mxConstants.STYLE_FONTCOLOR] = '#000000';
      style[mxConstants.STYLE_ROUNDED] = true;
      style[mxConstants.STYLE_HORIZONTAL] = false;
      style[mxConstants.STYLE_OPACITY] = '80';
      style[mxConstants.STYLE_STARTSIZE] = '30';
      style[mxConstants.STYLE_FONTSIZE] = '16';
      style[mxConstants.STYLE_FONTSTYLE] = 1;
      graph.getStylesheet().putCellStyle('group', style);
      
      style = new Object();
      style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_LABEL;
     
      style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;
      style[mxConstants.STYLE_PERIMETER_SPACING] = '2';
      style[mxConstants.STYLE_FILLCOLOR] = '#403e3e';
       style[mxConstants.STYLE_GRADIENTCOLOR] = '#403e3e';
       style[mxConstants.STYLE_STROKECOLOR] = 'lightgray';
      style[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;
     
      style[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;
      style[mxConstants.STYLE_FONTSIZE] = '10';
      style[mxConstants.STYLE_FONTSTYLE] = 2;
       style[mxConstants.STYLE_FONTCOLOR] = 'white';
     
      graph.getStylesheet().putCellStyle('port', style);


      style = new Object();
      style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_LABEL;
   
      style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;
      style[mxConstants.STYLE_PERIMETER_SPACING] = '2';
      style[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;
     
      style[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;
      style[mxConstants.STYLE_FONTSIZE] = '10';
      style[mxConstants.STYLE_FONTSTYLE] = 1;
     
      graph.getStylesheet().putCellStyle('Approve', style);

      style = new Object();
      style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_LABEL;
   
      style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;
      style[mxConstants.STYLE_PERIMETER_SPACING] = '2';
      style[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;
      style[mxConstants.STYLE_STROKEWIDTH] = 4;
      style[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;
      style[mxConstants.STYLE_FONTSIZE] = '10';
      style[mxConstants.STYLE_FONTSTYLE] = 1;
     
      graph.getStylesheet().putCellStyle('ApproveP', style);


      style = new Object();
      style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_ELLIPSE;
   
      style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;
      style[mxConstants.STYLE_PERIMETER_SPACING] = '2';
      style[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;
     
      style[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;
      style[mxConstants.STYLE_FONTSIZE] = '10';
      style[mxConstants.STYLE_FONTSTYLE] = 1;
      style[mxConstants.STYLE_GRADIENTCOLOR] = '';
      //style[mxConstants.STYLE_FILLCOLOR] = '#FF9103';
     
      graph.getStylesheet().putCellStyle('start', style);



      style = new Object();
      style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;
   
      style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;
      style[mxConstants.STYLE_PERIMETER_SPACING] = '2';
      style[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;
     
      style[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;
      style[mxConstants.STYLE_FONTSIZE] = '10';
      style[mxConstants.STYLE_FONTSTYLE] = 1;
     
      graph.getStylesheet().putCellStyle('Review', style);

      style = new Object();
      style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;
   
      style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;
      style[mxConstants.STYLE_PERIMETER_SPACING] = '2';
      style[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;
      
      style[mxConstants.STYLE_STROKEWIDTH] = 4;
      style[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;
      style[mxConstants.STYLE_FONTSIZE] = '10';
      style[mxConstants.STYLE_FONTSTYLE] = 1;
     
      graph.getStylesheet().putCellStyle('ReviewP', style);




      style = new Object();
      style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RHOMBUS;
     
      style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;
      style[mxConstants.STYLE_PERIMETER_SPACING] = '2';
      style[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;
     
      style[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;
      style[mxConstants.STYLE_FONTSIZE] = '10';
      style[mxConstants.STYLE_FONTSTYLE] = 2;
     
      graph.getStylesheet().putCellStyle('decision', style);
      
      style = graph.getStylesheet().getDefaultEdgeStyle();
      style[mxConstants.STYLE_LABEL_BACKGROUNDCOLOR] = '#FFFFFF';
      style[mxConstants.STYLE_STROKEWIDTH] = '2';
      style[mxConstants.STYLE_ROUNDED] = true;
      style[mxConstants.STYLE_EDGE] = mxEdgeStyle.SegmentConnector;
    };







function resizePanelVertical ( ui ){
	var minWidth = 20;
	var parentHeight = ui.element.parent().height();
	var divTwo = ui.element.next();
	var remainingSpace = parentHeight - ( ui.element.outerHeight()  + 30);
	ui.element.css('width','auto');
	divTwo.height(remainingSpace);
    divTwo.css('width','auto');
}

function LoadWorkflow(WorkflowID){
	var TargetApplication = $("#TargetApplication").val();
	var elementURL = docInfo.PortalWebPath + "/ReadContent/" + WorkflowID + "?OpenDocument&DesignElement=Workflow&AppID=" + TargetApplication + '&' + (new Date()).valueOf();

	$.get(elementURL, function(results){
		$("#WorkflowName").val($(results).find("#WorkflowName").text())
		$("#WorkflowDescription").val($(results).find("#WorkflowDescription").text())
		$("#WorkflowKey").val($(results).find("#WorkflowKey").text())
		$("#WorkflowDocKey").val($(results).find("#WorkflowDocKey").text())
		var resultCustomizeAction = $(results).find("#CustomizeAction").text()
		var resultEnableImmediateRelease = $(results).find("#EnableImmediateRelease").text()
		var resultDefaultWorkflow = $(results).find("#DefaultWorkflow").text()
		if(resultCustomizeAction == "" || resultCustomizeAction == "undefined"){
			resultCustomizeAction = "0";
		}else{
			resultCustomizeAction = "1";
		}
		if(resultEnableImmediateRelease == "" || resultEnableImmediateRelease == "undefined"){
			resultEnableImmediateRelease = "0";
		}else{
			resultEnableImmediateRelease = "1";
		}
		if(resultDefaultWorkflow == "" || resultDefaultWorkflow == "undefined"){
			resultDefaultWorkflow = "0";
		}else{
			resultDefaultWorkflow = "1";
		}
		$("input[name=CustomizeAction][value='" + resultCustomizeAction + "']").prop('checked', true);
		$("input[name=EnableImmediateRelease][value='" + resultEnableImmediateRelease + "']").prop('checked', true);	
		$("input[name=DefaultWorkflow][value='" + resultDefaultWorkflow + "']").prop('checked', true);

		var xml = $(results).find(".WorkflowItems").html();
		var xml = atob(decodeURIComponent(xml));
		var doc = mxUtils.parseXml(xml);
		//var xml = mxUtils.load("/bundles/docova/mxgraph-js-master/javascript/examples/editors/diagrams/swimlanes.xml").getXml();
		 var dec = new mxCodec(doc.documentElement.ownerDocument);
     	dec.decode(doc.documentElement, graph.getModel());

		/*$("#divStartStep").html($(results).find("#divStartStep").html())
		$(".WorkflowItems").html($(results).find(".WorkflowItems").html())
		$("#divEndStep").html($(results).find("#divEndStep").html())	
		reAddLIClick();*/
	});
}

function loadWFParticipant(pstring)
{

	var parr = pstring.split(",");
	$(".docova_wfpcontainer").html ("");
	for ( var k =0; k < parr.length ; k ++)
	{
		if ( parr[k].trim() == "[Author]" ){
			var spstr = '<span class="docova_wf_author"> <span id="docova_wfpA" class="docova_wfp">[Author]</span>';
			spstr += '<span id="docova_wfpA_remove" class="docova_wfp_del"><i class="fas fa-times-circle"></i></span></span>';
			$(".docova_wfpcontainer").append (spstr);
		}else if ( parr[k].trim() == "[Formula]" ) 
		{
			var curformula = $(currWFStep).attr("wfParticipantFormula");
			var forstr = ' wfParticipantFormula = "' + curformula + '" ';
			var spstr = '<span class="docova_wf_formula"> <span id="docova_wfpF" ' + forstr + ' class="docova_wfp">[Formula]</span>';
			spstr += '<span id="docova_wfpF_remove" class="docova_wfp_del"><i class="fas fa-times-circle"></i></span></span>';
			$(".docova_wfpcontainer").append (spstr);
		}else{

			var spstr = '<span class="docova_wfptoken docova_wf_user" > <span class="docova_wfp">' + parr[k].trim() + '</span>';
			spstr += '<span id="docova_wfpA_remove" class="docova_wfp_del"><i class="fas fa-times-circle"></i></span></span>';
			$(".docova_wfpcontainer").append (spstr);
		}

	}

}

function getProperties(){
	var wfAction = $(currWFStep).attr("wfStepAction");


	if ( wfAction == "Decision" )
	{

		var fval =  currWFStep.attr("wfFormula");

		if ( fval && fval != "") {
			$("#wfFormula").val( atob (fval) );
			
		}
		$("#wfTitleD").val($(currWFStep).attr("wfStepTitle"));
		
	}

	//---Get common properties
	$("#wfTitle").val($(currWFStep).attr("wfStepTitle"));
	$("input[name=wfAction][value='" + wfAction + "']").prop("checked", true);
	$("#DocKey").val($(currWFStep).attr("wfStepKey"));
	$("#wfDocStatus").val($(currWFStep).attr("wfDocStatus"));
	$("#wfOrder").val($(currWFStep).attr("wfStepNo"));
	
	//---Set/reset the decline backtrack options
	SetDeclineBacktrackOptions();
	
	//Set attributes for Start step	
	if(wfAction == "Start"){
		Docova.Utils.setField({ field: "wfEnableAuthorParticipant", value: $(currWFStep).attr("wfEnableAuthorParticipant") });	
		$("#tmpwfReviewerApproverListSingle").val($(currWFStep).attr("tmpwfReviewerApproverListSingle"));
		Docova.Utils.setField({ field: "wfReviewerApproverSelect", value: $(currWFStep).attr("wfReviewerApproverSelect") });
		Docova.Utils.setField({ field: "wfEnableCompleteMsg", value: $(currWFStep).attr("wfEnableCompleteMsg") });
		$("#wfCompleteMsg").val($(currWFStep).attr("wfCompleteMsg"));
		Docova.Utils.setField({ field: "wfCompleteNotifyParticipants", value: $(currWFStep).attr("wfCompleteNotifyParticipants"), separator: "," });
		$("#wfCompleteNotifyList").val($(currWFStep).attr("wfCompleteNotifyList"));
	}else{
		//End, Review and Approve have mostly the same properties except for a few
		$("input[name=wfType][value='" + $(currWFStep).attr("wfType") + "']").prop("checked", true);
		Docova.Utils.setField({ field: "wfEnableAuthorParticipant", value: $(currWFStep).attr("wfEnableAuthorParticipant") });	
		$("#tmpwfReviewerApproverListSingle").val($(currWFStep).attr("tmpwfReviewerApproverListSingle"));
		$("#tmpwfReviewerApproverListMulti").val($(currWFStep).attr("tmpwfReviewerApproverListMulti"));
		Docova.Utils.setField({ field: "wfReviewerApproverSelect", value: $(currWFStep).attr("wfReviewerApproverSelect") });
		$("input[name=wfCompleteAny][value='" + $(currWFStep).attr("wfCompleteAny") + "']").prop("checked", true);
		$("wfCompleteCount").val($(currWFStep).attr("wfCompleteCount"));
		$("wfCustomDeclineButtonLabel").val($(currWFStep).attr("wfCustomDeclineButtonLabel"));
		Docova.Utils.setField({ field: "wfHideButtons", value: $(currWFStep).attr("wfHideButtons"), separator: "," });
		$("wfCustomButtonsHideWhen").val($(currWFStep).attr("wfCustomButtonsHideWhen"));
		Docova.Utils.setField({ field: "wfEnableActivateMsg", value: $(currWFStep).attr("wfEnableActivateMsg") });
		$("#wfActivateMsg").val($(currWFStep).attr("wfActivateMsg"));
		Docova.Utils.setField({ field: "wfActivateNotifyParticipants", value: $(currWFStep).attr("wfActivateNotifyParticipants"), separator: "," });
		$("#wfActivateNotifyList").val($(currWFStep).attr("wfActivateNotifyList"));
		Docova.Utils.setField({ field: "wfEnableCompleteMsg", value: $(currWFStep).attr("wfEnableCompleteMsg") });
		$("#wfCompleteMsg").val($(currWFStep).attr("wfCompleteMsg"));
		Docova.Utils.setField({ field: "wfCompleteNotifyParticipants", value: $(currWFStep).attr("wfCompleteNotifyParticipants"), separator: "," });
		$("#wfCompleteNotifyList").val($(currWFStep).attr("wfCompleteNotifyList"));
		$("#wfDeclineAction").val($(currWFStep).attr("wfDeclineAction"));
		$("#wfDeclineBacktrack").val($(currWFStep).attr("wfDeclineBacktrack"));
		Docova.Utils.setField({ field: "wfEnableDeclineMsg", value: $(currWFStep).attr("wfEnableDeclineMsg") });
		Docova.Utils.setField({ field: "wfDeclineNotifyParticipants", value: $(currWFStep).attr("wfDeclineNotifyParticipants"), separator: "," });
		$("#wfDeclineNotifyList").val($(currWFStep).attr("wfDeclineNotifyList"));
		$('#wfDeclineMsg').val($(currWFStep).attr('wfDeclineMsg'));		
		Docova.Utils.setField({ field: "wfEnablePauseMsg", value: $(currWFStep).attr("wfEnablePauseMsg") });
		$("#wfPauseMsg").val($(currWFStep).attr("wfPauseMsg"));
		Docova.Utils.setField({ field: "wfPauseNotifyParticipants", value: $(currWFStep).attr("wfPauseNotifyParticipants"), separator: "," });
		$("#wfPauseNotifyList").val($(currWFStep).attr("wfPauseNotifyList"));
		Docova.Utils.setField({ field: "wfEnableCancelMsg", value: $(currWFStep).attr("wfEnableCancelMsg") });
		$("#wfCancelMsg").val($(currWFStep).attr("wfCancelMsg"));
		Docova.Utils.setField({ field: "wfCancelNotifyParticipants", value: $(currWFStep).attr("wfCancelNotifyParticipants"), separator: "," });
		$("#wfCancelNotifyList").val($(currWFStep).attr("wfCancelNotifyList"));
		$("#wfDelayCompleteThreshold").val($(currWFStep).attr("wfDelayCompleteThreshold"));
		Docova.Utils.setField({ field: "wfEnableDelayMsg", value: $(currWFStep).attr("wfEnableDelayMsg") });
		$("#wfDelayMsg").val($(currWFStep).attr("wfDelayMsg"));
		Docova.Utils.setField({ field: "wfDelayNotifyParticipants", value: $(currWFStep).attr("wfDelayNotifyParticipants"), separator: "," });
		$("#wfDelayNotifyList").val($(currWFStep).attr("wfDelayNotifyList"));		
		$("#wfDelayEsclThreshold").val($(currWFStep).attr("wfDelayEsclThreshold"));
		Docova.Utils.setField({ field: "wfEnableDelayEsclMsg", value: $(currWFStep).attr("wfEnableDelayEsclMsg") });
		$("#wfDelayEsclMsg").val($(currWFStep).attr("wfDelayEsclMsg"));
		Docova.Utils.setField({ field: "wfDelayEsclNotifyParticipants", value: $(currWFStep).attr("wfDelayEsclNotifyParticipants"), separator: "," });
		$("#wfDelayEsclNotifyList").val($(currWFStep).attr("wfDelayEsclNotifyList"));	

		if ( $(currWFStep).attr("wfparticipanttokens") )
		{
			var sval = $(currWFStep).attr("wfparticipanttokens");
			loadWFParticipant(sval);
		}
		
		//Properties specific to Review and Approve only
		if(wfAction == "Review" || wfAction == "Approve"){ //End step doesn't have/need
			$("input[name=wfApproverEdit][value='" + $(currWFStep).attr("wfApproverEdit") + "']").prop("checked", true);
			Docova.Utils.setField({ field: "wfOptionalComments", value: $(currWFStep).attr("wfOptionalComments") });
			$("#wfCustomReviewButtonLabel").val($(currWFStep).attr("wfCustomReviewButtonLabel"));
			$("#wfCustomApproveButtonLabel").val($(currWFStep).attr("wfCustomApproveButtonLabel"));
		}
		//Properties specific to End only
		if(wfAction == "End"){ //Review and Approve step don't have/need
			$("#wfCustomReleaseButtonLabel").val($(currWFStep).attr("wfCustomReleaseButtonLabel"));
		}
	}


	showHideSections(wfAction);

	if ( wfAction == "Decision") return;
	//called in onClick of wfType

	hideShowParallelOption($("[name=wfType]:checked").val());
	//called in onClick of wfEnableAuthorParticipant
	
	//called in onClick of wfCompleteAny
	hideShowWfCompleteAny($("[name=wfCompleteAny]:checked").val());
	//called in onClick of wfHideButtons
	hideShowWfHideButtons();
	//called in onClick of wfDeclineAction
	//hideShowWfDeclineBackTrack(document.getElementById("wfDeclineAction").value);
}

function setPropertiesTriggers(){
	//wfAction radio button
	var prevAction = "";
	var currAction = "";


	$("#wfFormula").on( "change", function(){ //if user clicked on wfAction on Start or End flip it back to prevAction
		
		setProperties();

	});	
	
	$("[name=wfAction]").mousedown( function(){
		prevAction = $("input[name=wfAction]:checked").val(); //get the previous action for setting back in next chunk of code below.
	});

	$("[name=wfAction]").on( "change", function(){ //if user clicked on wfAction on Start or End flip it back to prevAction
		currAction = $("[name=wfAction]:checked").val();
		if(currAction == "Start" || currAction == "End"){
			//set it back to prevAction
			$("[name=wfAction][value='" + prevAction + "']").prop("checked", true);
			showHideSections(prevAction); //reset hide/show
		}else{
			setProperties();
		}
	});	
	
//	$("[name=wfAction]").on("change", function(){
//		setProperties();
//	});

	$(".docova_wfpcontainer").on("click", "#docova_wfpF", function () 
	{

		var formattr = $(this).attr("wfParticipantFormula");
		var formulastr =  formattr !== "undefined" && formattr != "" ? formattr : '';
		if ( formulastr && formulastr != "" ){
			try {
				formulastr = atob(formulastr);
			}catch(e){}
		}
		var curformula = formulastr;
		editStepFormula(curformula, $(this));

	} );

	$(".docova_wfpcontainer").on("click", ".docova_wfp_del", function () 
	{
		if ( $(".docova_wfpcontainer").children().length == 1 ) {
			alert ( "Each step must have at least one participant.");
			return;
		}

		$(this).parent().remove();
		
	} );

	//wfType radio button
	$("[name=wfType]").on("change", function(){
		setProperties();
	});
	//wfEnableAuthorParicipant
	$("#wfEnableAuthorParticipant").on("change", function(){
		setProperties();
	});
	//wfReviewerApproverSelect
	$("#wfReviewerApproverSelect").on("change", function(){
		setProperties();
	});
	//wfCompleteAny
	$("#wfCompleteAny").on("change", function(){
		setProperties();
	});
	//wfApproverEdit
	$("#wfApproverEdit").on("change", function(){
		setProperties();
	});
	$("[name=wfOptionalComments]").on("change", function(){
		setProperties();
	});
	$("[name=wfHideButton]").on("change", function(){
		setProperties();
	});
	$("#wfEnableActivateMsg").on("change", function(){
		setProperties();
	});
	$("#wfActivateMsg").on("change", function(){
		setProperties();
	});
	$("[name=wfActivateNotifyParticipants]").on("change", function(){
		setProperties();
	});
	$("#wfActivateNotifyList").on("change", function(){
		setProperties();
	});
	$("#wfEnableCompleteMsg").on("change", function(){
		setProperties();
	});
	$("#wfCompleteMsg").on("change", function(){
		setProperties();
	});
	$("[name=wfCompleteNotifyParticipants]").on("change", function(){
		setProperties();
	});
	$("#wfCompleteNotifyList").on("change", function(){
		setProperties();
	});
	$("#wfDeclineAction").on("change", function(){
		setProperties();
	});		
	$("#wfDeclineBacktrack").on("change", function(){
		setProperties();
	});
	$("#wfEnableDeclineMsg").on("change", function(){
		setProperties();
	});
	$("#wfDeclineMsg").on("change", function(){
		setProperties();
	});
	$("[name=wfDeclineNotifyParticipants]").on("change", function(){
		setProperties();
	});
	$("#wfDeclineNotifyList").on("change", function(){
		setProperties();
	});
	$("#wfEnablePauseMsg").on("change", function(){
		setProperties();
	});
	$("#wfPauseMsg").on("change", function(){
		setProperties();
	});
	$("[name=wfPauseNotifyParticipants]").on("change", function(){
		setProperties();
	});
	$("#wfPauseNotifyList").on("change", function(){
		setProperties();
	});
	$("#wfEnableCancelMsg").on("change", function(){
		setProperties();
	});
	$("#wfCancelMsg").on("change", function(){
		setProperties();
	});
	$("[name=wfCancelNotifyParticipants]").on("change", function(){
		setProperties();
	});
	$("#wfCancelNotifyList").on("change", function(){
		setProperties();
	});
	$("#wfEnableDelayMsg").on("change", function(){
		setProperties();
	});
	$("#wfDelayMsg").on("change", function(){
		setProperties();
	});
	$("[name=wfDelayNotifyParticipants").on("change", function(){
		setProperties();
	});
	$("#wfDelayNotifyList").on("change", function(){
		setProperties();
	});
	$("#wfEnableDelayEsclMsg").on("change", function(){
		setProperties();
	});
	$("#wfDelayEsclMsg").on("change", function(){
		setProperties();
	});
	$("[name=wfDelayEsclNotifyParticipants]").on("change", function(){
		setProperties();
	});	
}


function docova_addwfp ( stype )
{

	var wftype = $("input[name=wfType]:checked").val()

	if ( wftype == "Serial"  && stype != "U"){
		$(".docova_wfpcontainer").html("");		
	}else{
		if ( stype != "F" ){
			$(".docova_wfpcontainer").find("#docova_wfpF").each ( function () {
				$(this).parent().remove();
			})
		}else{
			$(".docova_wfpcontainer").html("");	
		}
	}

	if ( stype == "A" && $(".docova_wfpcontainer").find("#docova_wfpA").length > 0 )
		return;
	if (stype == "F" && $(".docova_wfpcontainer").find("#docova_wfpF").length > 0  )
		return;

	if ( stype == "A" )
	{
		
		var spstr = '<span class="docova_wf_author"> <span id="docova_wfpA" class="docova_wfp">[Author]</span>';
		spstr += '<span id="docova_wfpA_remove" class="docova_wfp_del"><i class="fas fa-times-circle"></i></span></span>';
		$(".docova_wfpcontainer").append (spstr);
		setProperties();
	}else if (stype == "F" ){
		
		var spstr = '<span class="docova_wf_formula"> <span id="docova_wfpF" class="docova_wfp">[Formula]</span>';
		spstr += '<span id="docova_wfpF_remove" class="docova_wfp_del"><i class="fas fa-times-circle"></i></span></span>';
		$(".docova_wfpcontainer").append (spstr);
		setProperties();
	}else{

		window.top.Docova.Utils.showAddressDialog({ 
			fieldname: "", 
			dlgtype: "multi", 
			cb: function (result) 
				{


					if ( !result || result == "")
						return;
					
					var resarray = result.split(",");
					
					if ( wftype == "Serial"){
						$(".docova_wfpcontainer").html("");		
					}else{
						var tmparr = [];
						for ( var l = 0; l < resarray.length; l ++)
						{
							var searchstr = ".docova_wfp:contains('" + resarray[l] + "')" ;
							if ($(searchstr).length == 0 ){
								tmparr.push(resarray[l]);
							}
						}
						resarray = tmparr;
					}

					for ( var k =0; k < resarray.length; k ++ ){
						var spstr = '<span class="docova_wfptoken docova_wf_user" > <span class="docova_wfp">' + resarray[k] + '</span>';
						spstr += '<span id="docova_wfpA_remove" class="docova_wfp_del"><i class="fas fa-times-circle"></i></span></span>';
						$(".docova_wfpcontainer").append (spstr);

					}
					setProperties();
				}
			, 
			sourcedocument: document });
	}


}

function getParticipantTokens()
{
	var outarr = [];
	$(".docova_wfpcontainer > span").each( function () {
		if ( $(this).hasClass("docova_wf_author") ){
			outarr.push("[Author]" );
		}else if ( $(this).hasClass("docova_wf_formula")){
			outarr.push("[Formula]" );
			currWFStep.attr("wfParticipantFormula", $(this).children(":first").attr("wfParticipantFormula") );

		}else if ( $(this).hasClass("docova_wf_user")){
			outarr.push($(this).children(":first").text() );
		}
	})

	
	return  outarr.join(",");
}

function setProperties()
{
	
	if ( currWFStep.attr("wfStepAction") == "Decision" )
	{
		var fval =  $("#wfFormula").val();

		var modded = false;
		if ( fval && fval != "") {
			currWFStep.attr("wfFormula", btoa(fval));
			modded = true;
		}

		if($.trim($("#wfTitleD").val()) != ""){
			currWFStep.attr("wfStepTitle", $("#wfTitleD").val());
			modded = true;
		}

		if ( modded ){
			currWFStep.html( $("#wfTitleD").val() );
			graph.getModel().setValue(currCell, $("<div></div>").append(currWFStep).html());
		}
		return;
		
	}

	if($.trim($("#wfTitle").val()) == ""){
		$("#wfTitle").val("Untitled"); //if step title is blank, set it to default of Untitled
	}
	if($.trim($("#wfDocStatus").val()) == ""){
		$("#wfDocStatus").val("In Review"); //if doc status is blank, set it to default of In Review
	}

	//Validate before setting attributes
	if(!ValidateWFStep()){
		return;
	}

	var wfAction = $("input[name=wfAction]:checked").val();
	
	//Set common properties
	currWFStep.attr("wfStepTitle", $("#wfTitle").val());
	currWFStep.find("div").text($("#wfTitle").val()) //Also set the text in the div of the step LI
	currWFStep.attr("wfStepAction", wfAction)
	currWFStep.attr("wfDocStatus", $("#wfDocStatus").val())


	var pstring = getParticipantTokens();
	if ( pstring && pstring != ""){
		currWFStep.attr("wfParticipantTokens", pstring);
	}
	
	//Set the icon for the workflow step
	if(wfAction == "Review"){
		//icon = fa-refresh
		var stepIcon = currWFStep.find(".stepIcon");
		$(stepIcon).removeClass();
		$(stepIcon).addClass("far fa-sync fa-1x stepIcon");
	}
	if(wfAction == "Approve"){
		//icon = fa-check-square-o
		var stepIcon = currWFStep.find(".stepIcon");
		$(stepIcon).removeClass();
		$(stepIcon).addClass("far fa-check-square-o fa-1x stepIcon");
	}
	
	//Set attributes that pertain to the Start step
	if(wfAction == "Start"){
		currWFStep.attr("wfEnableAuthorParticipant", Docova.Utils.getField({ field: "wfEnableAuthorParticipant" }));
		currWFStep.attr("tmpwfReviewerApproverListSingle", $("#tmpwfReviewerApproverListSingle").val());
		currWFStep.attr("wfReviewerApproverSelect", Docova.Utils.getField({ field: "wfReviewerApproverSelect" }));
		currWFStep.attr("wfEnableCompleteMsg", Docova.Utils.getField({ field: "wfEnableCompleteMsg" }));
		currWFStep.attr("wfCompleteMsg", $("#wfCompleteMsg").val());
		currWFStep.attr("wfCompleteNotifyParticipants", Docova.Utils.getField({field: "wfCompleteNotifyParticipants", separator: ","}));
		currWFStep.attr("wfCompleteNotifyList", $("#wfCompleteNotifyList").val());
	}else{ //End, Review and Approve have mostly the same properties except for a few
		currWFStep.attr("wfType", $("input[name=wfType]:checked").val());
		currWFStep.attr("wfEnableAuthorParticipant", Docova.Utils.getField({ field: "wfEnableAuthorParticipant" }));
		currWFStep.attr("tmpwfReviewerApproverListSingle", $("#tmpwfReviewerApproverListSingle").val());
		currWFStep.attr("tmpwfReviewerApproverListMulti", $("#tmpwfReviewerApproverListMulti").val());
		currWFStep.attr("wfReviewerApproverSelect", Docova.Utils.getField({ field: "wfReviewerApproverSelect" }));
		currWFStep.attr("wfCompleteAny", Docova.Utils.getField({ field: "wfCompleteAny" }));
		currWFStep.attr("wfCompleteCount", $("wfCompleteCount").val());
		currWFStep.attr("wfCustomDeclineButtonLabel", $("wfCustomDeclineButtonLabel").val());
		currWFStep.attr("wfHideButtons", Docova.Utils.getField({ field: "wfHideButtons", separator: "," }));
		currWFStep.attr("wfCustomButtonsHideWhen", $("wfCustomButtonsHideWhen").val());
		currWFStep.attr("wfEnableActivateMsg", Docova.Utils.getField({ field: "wfEnableActivateMsg" }));
		currWFStep.attr("wfActivateMsg", $("#wfActivateMsg").val());
		currWFStep.attr("wfActivateNotifyParticipants", Docova.Utils.getField({ field: "wfActivateNotifyParticipants", separator: "," }));
		currWFStep.attr("wfActivateNotifyList", $("#wfActivateNotifyList").val());
		currWFStep.attr("wfEnableCompleteMsg", Docova.Utils.getField({ field: "wfEnableCompleteMsg" }));
		currWFStep.attr("wfCompleteMsg", $("#wfCompleteMsg").val());
		currWFStep.attr("wfCompleteNotifyParticipants", Docova.Utils.getField({ field: "wfCompleteNotifyParticipants", separator: "," }));
		currWFStep.attr("wfCompleteNotifyList", $("#wfCompleteNotifyList").val());
		currWFStep.attr("wfDeclineAction", $("#wfDeclineAction").val());
		currWFStep.attr("wfDeclineBacktrack", $("#wfDeclineBacktrack").val());
		currWFStep.attr("wfEnableDeclineMsg", Docova.Utils.getField({ field: "wfEnableDeclineMsg" }));
		currWFStep.attr("wfDeclineNotifyParticipants", Docova.Utils.getField({ field: "wfDeclineNotifyParticipants", separator: "," }));
		currWFStep.attr("wfDeclineNotifyList", $("#wfDeclineNotifyList").val());
		currWFStep.attr("wfDeclineMsg", $('#wfDeclineMsg').val());
		currWFStep.attr("wfEnablePauseMsg", Docova.Utils.getField({ field: "wfEnablePauseMsg" }));
		currWFStep.attr("wfPauseMsg", $("#wfPauseMsg").val());
		currWFStep.attr("wfPauseNotifyParticipants", Docova.Utils.getField({ field: "wfPauseNotifyParticipants", separator: "," }));
		currWFStep.attr("wfPauseNotifyList", $("#wfPauseNotifyList").val());
		currWFStep.attr("wfEnableCancelMsg", Docova.Utils.getField({ field: "wfEnableCancelMsg" }));
		currWFStep.attr("wfCancelMsg", $("#wfCancelMsg").val());
		currWFStep.attr("wfCancelNotifyParticipants", Docova.Utils.getField({ field: "wfCancelNotifyParticipants", separator: "," }));
		currWFStep.attr("wfCancelNotifyList", $("#wfCancelNotifyList").val());
		currWFStep.attr("wfDelayCompleteThreshold", $("#wfDelayCompleteThreshold").val());
		currWFStep.attr("wfEnableDelayMsg", Docova.Utils.getField({ field: "wfEnableDelayMsg" }));
		currWFStep.attr("wfDelayMsg", $("#wfDelayMsg").val());
		currWFStep.attr("wfDelayNotifyParticipants", Docova.Utils.getField({ field: "wfDelayNotifyParticipants", separator: "," }));
		currWFStep.attr("wfDelayNotifyList", $("#wfDelayNotifyList").val());
		currWFStep.attr("wfDelayEsclThreshold", $("#wfDelayEsclThreshold").val());
		currWFStep.attr("wfEnableDelayEsclMsg", Docova.Utils.getField({ field: "wfEnableDelayEsclMsg" }));
		currWFStep.attr("wfDelayEsclMsg", $("#wfDelayEsclMsg").val());
		currWFStep.attr("wfDelayEsclNotifyParticipants", Docova.Utils.getField({ field: "wfDelayEsclNotifyParticipants", separator: "," }));
		currWFStep.attr("wfDelayEsclNotifyList", $("#wfDelayEsclNotifyList").val());
		//Properties specific to Review and Approve only
		if(wfAction == "Review" || wfAction == "Approve"){ //End step doesn't have/need
			currWFStep.attr("wfApproverEdit", Docova.Utils.getField({ field: "wfApproverEdit" }));
			currWFStep.attr("wfOptionalComments", Docova.Utils.getField({ field: "wfOptionalComments" }));
			currWFStep.attr("wfCustomReviewButtonLabel", $("#wfCustomReviewButtonLabel").val());
			currWFStep.attr("wfCustomApproveButtonLabel", $("#wfCustomApproveButtonLabel").val());
		}
		//Properties specific to End only
		if(wfAction == "End"){ //Review and Approve step don't have/need
			currWFStep.attr("wfCustomReleaseButtonLabel", $("#wfCustomReleaseButtonLabel").val());
		}
	}
	currWFStep.html( $("#wfTitle").val() );

	graph.getModel().setValue(currCell, $("<div></div>").append(currWFStep).html());
}

function SaveWorkflowDesign(andClose){
	var WorkflowName = $("#WorkflowName").val();
	var WorkflowDescription = $("#WorkflowDescription").val();
	var WorkflowKey = $("#WorkflowKey").val();
	var WorkflowDocKey = $("#WorkflowDocKey").val();
	var WorkflowCustomizeAction = $("input[name=CustomizeAction]:checked").val();
	var WorkflowEnableImmediateRelease = $("input[name=EnableImmediateRelease]:checked").val();
	var WorkflowDefaultWorkflow = $("input[name=DefaultWorkflow]:checked").val();
	//Before getting workflow html...remove the ui-state-focus class
	$("li").removeClass("ui-state-focus");
	//var StartStepHTML = $("#divStartStep").html();
	//var WorkflowHTML = $(".WorkflowItems").html();	

	var enc = new mxCodec(mxUtils.createXmlDocument());
    var node = enc.encode(editor.graph.getModel());
         
    var WorkflowHTML =  mxUtils.getPrettyXml(node) ; 

   	WorkflowHTML = encodeURIComponent(btoa(WorkflowHTML));

	//var EndStepHTML = $("#divEndStep").html();
	var TargetApplication = $("#TargetApplication").val();

	var agentName = "DesignServices";
	var request = "<Request><Action>SAVEWORKFLOWDESIGN</Action><UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "<Document>";
	request += "<WorkflowName><![CDATA[" + WorkflowName + "]]></WorkflowName>";
	request += "<WorkflowKey><![CDATA[" + WorkflowKey + "]]></WorkflowKey>";
	request += "<WorkflowDescription><![CDATA[" + WorkflowDescription + "]]></WorkflowDescription>";
	request += "<WorkflowDocKey><![CDATA[" + WorkflowDocKey + "]]></WorkflowDocKey>";
	request += "<WorkflowCustomizeAction>" + WorkflowCustomizeAction + "</WorkflowCustomizeAction>";
	
	request += "<WorkflowEnableImmediateRelease>" + WorkflowEnableImmediateRelease + "</WorkflowEnableImmediateRelease>";
	request += "<WorkflowDefaultWorkflow>" + WorkflowDefaultWorkflow + "</WorkflowDefaultWorkflow>";
	//request += "<StartStepHTML><![CDATA[" + StartStepHTML + "]]></StartStepHTML>";
	request += "<WorkflowHTML><![CDATA[" + WorkflowHTML + "]]></WorkflowHTML>";
	//request += "<EndStepHTML><![CDATA[" + EndStepHTML + "]]></EndStepHTML>";
	request += "<TargetApplication>" + TargetApplication + "</TargetApplication>";	
	request += "</Document>";
	request += "</Request>";
				
	var resulttext = SubmitRequest(request, agentName);
	if(resulttext == "WORKFLOWDESIGNSAVED"){
		window.top.Docova.Utils.messageBox({
			title: "{% trans %}Workflow Design Saved{% endtrans %}",
			prompt: "{% trans %}The workflow design was saved.{% endtrans %}",
			icontype: 4,
			msgboxtype: 0,
			width: 300
		});
		//return;
	}else{
		$("#WorkflowKey").val(resulttext)
		window.top.Docova.Utils.messageBox({
			title: "{% trans %}Workflow Design Saved{% endtrans %}",
			prompt: "{% trans %}The workflow design was saved.{% endtrans %}",
			icontype: 4,
			msgboxtype: 0,
			width: 300
		});		
	}
	
	if(andClose == true){ 
		closeDocument();
	}		
}

function createSteps(jsonarr, wfdockey, visited)
{

	for ( var l = jsonarr.length -1; l >=0 ; l --)
	{
		injson = jsonarr[l];
		if ( injson.stype != "Decision")
		{

			var attrobj = $(injson.attrStr);
			var sindex = injson.cellNo;
			var id = injson.id;
			retattr = SaveStep(attrobj, wfdockey, sindex);
			var cell = graph.getModel().getCell(injson.id);
			graph.getModel().setValue(cell, $("<div></div>").append(retattr).html());
		}
	}


}



function SaveWorkflow(andClose){
	//validate the workflow has a name
	var wfname = $.trim($("#WorkflowName").val());
	if(wfname == ""){
			alert("{% trans %}Error: Please provide a Workflow Name{% endtrans %}");
			$("#WorkflowName").focus();
			$("#tabsDefinitionProperties").css("display", "block");
			$("#tabs").css("display", "none");			
			return false;			
	}
	if (docInfo.WorkflowID == '' && formExists(wfname, null, 'workflow')) {
		var msg = "{% trans %}A workflow with that name already exists. Please use a different name.{% endtrans %}";
		alert(msg);
		return false;		
	}
	wfrunjson  = "";

	var cell = editor.graph.getModel().getCell("Started");
    var jobj = wfTraverse(editor, cell);
    jobj = wfjsonarr;
    wfrunjson = JSON.stringify(jobj);

  
	var WorkflowName = $("#WorkflowName").val();
	var WorkflowDescription = $("#WorkflowDescription").val();
	var WorkflowDocKey = $("#WorkflowDocKey").val();
	var WorkflowCustomizeAction = $("input[name=CustomizeAction]:checked").length ? $("input[name=CustomizeAction]:checked").val() : '';
	var WorkflowEnableImmediateRelease = $("input[name=EnableImmediateRelease]:checked").length ? $("input[name=EnableImmediateRelease]:checked").val() : '';
	var WorkflowDefaultWorkflow = $("input[name=DefaultWorkflow]:checked").length ? $("input[name=DefaultWorkflow]:checked").val() : '';
	
	var agentName = "AppWorkflowServices";
	var request = "<Request><Action>SAVEWORKFLOWDEFINITION</Action><UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "<Document>";
	request += "<WorkflowName><![CDATA[" + WorkflowName + "]]></WorkflowName>";
	request += "<WorkflowDescription><![CDATA[" + WorkflowDescription + "]]></WorkflowDescription>";
	request += "<WorkflowDocKey><![CDATA[" + WorkflowDocKey + "]]></WorkflowDocKey>";
	request += "<WorkflowCustomizeAction>" + WorkflowCustomizeAction + "</WorkflowCustomizeAction>";
	request += "<WorkflowEnableImmediateRelease>" + WorkflowEnableImmediateRelease + "</WorkflowEnableImmediateRelease>";
	request += "<WorkflowDefaultWorkflow>" + WorkflowDefaultWorkflow + "</WorkflowDefaultWorkflow>";
	request += "</Document>";
	request += "</Request>";
	
	var resulttext = SubmitRequest(request, agentName);
	$("#WorkflowDocKey").val(resulttext);

	//Get WorkflowDocKey again, if the WF is new, then a new key would have been returned
	WorkflowDocKey = $("#WorkflowDocKey").val();  //This is the workflow definition dockey, it is needed to make the wf steps responses/children to it
	
	createSteps(jobj, WorkflowDocKey);
	SaveWorkflowDesign(andClose, wfrunjson);
}

function RenumberSteps(){
	//Start step is always 0
	var cnt = 1;
	$(".WorkflowItems li").each(function(){
		$(this).attr("wfStepNo", cnt);
		cnt++;
	});
	$("#endstep").attr("wfStepNo", cnt);
	return;
}

function SetDeclineBacktrackOptions(){
	var currstepno = $(currWFStep).attr("wfStepNo");
	var elem = $("#wfDeclineBacktrack");
	var stepval = "";
	var steptitle = "";
	var cnt = 1;

	//clear wfDeclineBacktrack options
	elem.empty();

	//if current step is the start step, then exit, otherwise, add it as the first option
	//Don't need to get the end step because it will never be in the list
	if (currstepno == 0){ // start step...so backtrack options are not available, so exit
		return;
	}else{
		var startsteptitle = $("#startstep").attr("wfStepTitle");
		var startstepval = "0";
		elem.append($("<option></option>").attr("value", startstepval).text(startsteptitle));
	}
	//For all other steps other than the start step
	$(".WorkflowItems li").each(function(){
		if($(this).attr("wfStepNo") < currstepno){
			stepval = $(this).attr("wfStepNo");
			steptitle = $(this).attr("wfStepTitle");
			elem.append($("<option></option>").attr("value", stepval).text(steptitle));
		}
	});
	
	return;
}

function SaveStep(wfStep, WorkflowDocKey, stepno){
	var wfStepAction = wfStep.attr("wfStepAction");
	var wfStepKey = wfStep.attr("wfStepKey");
	var wfStepNo = stepno;
	var wfStepTitle = wfStep.attr("wfStepTitle");
	
	var agentName = "AppWorkflowServices";
	//-----Build step request
	if(wfStepAction == "Start"){
		var request = "<Request><Action>SAVESTEP</Action><UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
		request += "<Document>";
		request += "<WorkflowDocKey><![CDATA[" + WorkflowDocKey + "]]></WorkflowDocKey>";
		request += "<wfStepAction>" + wfStepAction + "</wfStepAction>";
		request += "<wfStepKey>" + wfStepKey + "</wfStepKey>";
		request += "<wfStepNo>" + wfStepNo + "</wfStepNo>";
		request += "<wfStepTitle><![CDATA[" + wfStepTitle + "]]></wfStepTitle>";
		//---
		request += "<tmpwfReviewerApproverListSingle><![CDATA[" + wfStep.attr("tmpwfReviewerApproverListSingle") + "]]></tmpwfReviewerApproverListSingle>";
		request += "<wfReviewerApproverSelect>" + wfStep.attr("wfReviewerApproverSelect") + "</wfReviewerApproverSelect>";
		request += "<wfEnableCompleteMsg>" + wfStep.attr("wfEnableCompleteMsg") + "</wfEnableCompleteMsg>";
		request += "<wfrunjson><![CDATA[" + wfrunjson + "]]></wfrunjson>";
		request += "<wfCompleteMsg><![CDATA[" + wfStep.attr("wfCompleteMsg") + "]]></wfCompleteMsg>";
		request += "<wfCompleteNotifyParticipants>" + wfStep.attr("wfCompleteNotifyParticipants") + "</wfCompleteNotifyParticipants>";
		request += "<wfCompleteNotifyList><![CDATA[" + wfStep.attr("wfCompleteNotifyList") + "]]></wfCompleteNotifyList>";
		//---
		request += "</Document>";
		request += "</Request>";
	}else{



		var request = "<Request><Action>SAVESTEP</Action><UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
		request += "<Document>";
		request += "<WorkflowDocKey><![CDATA[" + WorkflowDocKey + "]]></WorkflowDocKey>";
		request += "<wfStepAction>" + wfStepAction + "</wfStepAction>";
		request += "<wfStepKey>" + wfStepKey + "</wfStepKey>";
		request += "<wfStepNo>" + wfStepNo + "</wfStepNo>";
		request += "<wfParticipantTokens>" + (wfStep.attr("wfparticipanttokens") ? wfStep.attr("wfparticipanttokens") : '') + "</wfParticipantTokens>";
		request += "<wfParticipantFormula>" + (wfStep.attr("wfParticipantFormula") ? wfStep.attr("wfParticipantFormula") : '') + "</wfParticipantFormula>";
		request += "<wfStepTitle><![CDATA[" + wfStepTitle + "]]></wfStepTitle>";
		//---
		request += "<wfType>" + (wfStep.attr("wfType") ? wfStep.attr("wfType") : '') + "</wfType>";
		request += "<wfDocStatus><![CDATA[" + (wfStep.attr("wfDocStatus") ? wfStep.attr("wfDocStatus") : '') + "]]></wfDocStatus>";

		request += "<wfReviewerApproverSelect>" + (wfStep.attr("wfReviewerApproverSelect") ? wfStep.attr("wfReviewerApproverSelect") : 0) + "</wfReviewerApproverSelect>";
		request += "<wfCompleteAny>" + (wfStep.attr("wfCompleteAny") ? wfStep.attr("wfCompleteAny") : 0) + "</wfCompleteAny>";
		request += "<wfCompleteCount>" + (wfStep.attr("wfCompleteCount") ? wfStep.attr("wfCompleteCount") : 0) + "</wfCompleteCount>";
		request += "<wfCustomDeclineButtonLabel><![CDATA[" + (wfStep.attr("wfCustomDeclineButtonLabel") ? wfStep.attr("wfCustomDeclineButtonLabel") : '') + "]]></wfCustomDeclineButtonLabel>";
		request += "<wfHideButtons>" + (wfStep.attr("wfHideButtons") ? wfStep.attr("wfHideButtons") : '') + "</wfHideButtons>";
		request += "<wfCustomButtonsHideWhen><![CDATA[" + (wfStep.attr("wfCustomButtonsHideWhen") ? wfStep.attr("wfCustomButtonsHideWhen") : '') + "]]></wfCustomButtonsHideWhen>";
		request += "<wfEnableActivateMsg>" + (wfStep.attr("wfEnableActivateMsg") ? wfStep.attr("wfEnableActivateMsg") : '') + "</wfEnableActivateMsg>";
		request += "<wfActivateMsg><![CDATA[" + (wfStep.attr("wfActivateMsg") ? wfStep.attr("wfActivateMsg") : '') + "]]></wfActivateMsg>";
		request += "<wfActivateNotifyParticipants>" + (wfStep.attr("wfActivateNotifyParticipants") ? wfStep.attr("wfActivateNotifyParticipants") : '') + "</wfActivateNotifyParticipants>";
		request += "<wfActivateNotifyList><![CDATA[" + (wfStep.attr("wfActivateNotifyList") ? wfStep.attr("wfActivateNotifyList") : '') + "]]></wfActivateNotifyList>";
		request += "<wfEnableCompleteMsg>" + (wfStep.attr("wfEnableCompleteMsg") ? wfStep.attr("wfEnableCompleteMsg") : '') + "</wfEnableCompleteMsg>";
		request += "<wfCompleteMsg><![CDATA[" + (wfStep.attr("wfCompleteMsg") ? wfStep.attr("wfCompleteMsg") : '') + "]]></wfCompleteMsg>";
		request += "<wfCompleteNotifyParticipants>" + (wfStep.attr("wfCompleteNotifyParticipants") ? wfStep.attr("wfCompleteNotifyParticipants") : '') + "</wfCompleteNotifyParticipants>";
		request += "<wfCompleteNotifyList><![CDATA[" + (wfStep.attr("wfCompleteNotifyList") ? wfStep.attr("wfCompleteNotifyList") : '') + "]]></wfCompleteNotifyList>";
		request += "<wfDeclineAction>" + (wfStep.attr("wfDeclineAction") ? wfStep.attr("wfDeclineAction") : '') + "</wfDeclineAction>";
		request += "<wfDeclineBacktrack>" + (wfStep.attr("wfDeclineBacktrack") ? wfStep.attr("wfDeclineBacktrack") : '') + "</wfDeclineBacktrack>";
		request += "<wfEnableDeclineMsg><![CDATA[" + (wfStep.attr("wfEnableDeclineMsg") ? wfStep.attr("wfEnableDeclineMsg") : '') + "]]></wfEnableDeclineMsg>";
		request += "<wfDeclineNotifyParticipants>" + (wfStep.attr("wfDeclineNotifyParticipants") ? wfStep.attr("wfDeclineNotifyParticipants") : '') + "</wfDeclineNotifyParticipants>";
		request += "<wfDeclineNotifyList><![CDATA[" + (wfStep.attr("wfDeclineNotifyList") ? wfStep.attr("wfDeclineNotifyList") : '') + "]]></wfDeclineNotifyList>";
		request += "<wfDeclineMsg><![CDATA[" + (wfStep.attr("wfDeclineMsg") ? wfStep.attr("wfDeclineMsg") : '') + "]]></wfDeclineMsg>";
		request += "<wfEnablePauseMsg>" + (wfStep.attr("wfEnablePauseMsg") ? wfStep.attr("wfEnablePauseMsg") : '') + "</wfEnablePauseMsg>";
		request += "<wfPauseMsg><![CDATA[" + (wfStep.attr("wfPauseMsg") ? wfStep.attr("wfPauseMsg") : '') + "]]></wfPauseMsg>";
		request += "<wfPauseNotifyParticipants>" + (wfStep.attr("wfPauseNotifyParticipants") ? wfStep.attr("wfPauseNotifyParticipants") : '') + "</wfPauseNotifyParticipants>";
		request += "<wfPauseNotifyList><![CDATA[" + (wfStep.attr("wfPauseNotifyList") ? wfStep.attr("wfPauseNotifyList") : '') + "]]></wfPauseNotifyList>";
		request += "<wfEnableCancelMsg>" + (wfStep.attr("wfEnableCancelMsg") ? wfStep.attr("wfEnableCancelMsg") : '') + "</wfEnableCancelMsg>";
		request += "<wfCancelMsg><![CDATA[" + (wfStep.attr("wfCancelMsg") ? wfStep.attr("wfCancelMsg") : '') + "]]></wfCancelMsg>";
		request += "<wfCancelNotifyParticipants>" + (wfStep.attr("wfCancelNotifyParticipants") ? wfStep.attr("wfCancelNotifyParticipants") : '') + "</wfCancelNotifyParticipants>";
		request += "<wfCancelNotifyList><![CDATA[" + (wfStep.attr("wfCancelNotifyList") ? wfStep.attr("wfCancelNotifyList") : '') + "]]></wfCancelNotifyList>";
		request += "<wfDelayCompleteThreshold>" + (wfStep.attr("wfDelayCompleteThreshold") ? wfStep.attr("wfDelayCompleteThreshold") : '') + "</wfDelayCompleteThreshold>";
		request += "<wfEnableDelayMsg>" + (wfStep.attr("wfEnableDelayMsg") ? wfStep.attr("wfEnableDelayMsg") : '') + "</wfEnableDelayMsg>";
		request += "<wfDelayMsg><![CDATA[" + (wfStep.attr("wfDelayMsg") ? wfStep.attr("wfDelayMsg") : '') + "]]></wfDelayMsg>";
		request += "<wfDelayNotifyParticipants>" + (wfStep.attr("wfDelayNotifyParticipants") ? wfStep.attr("wfDelayNotifyParticipants") : '') + "</wfDelayNotifyParticipants>";
		request += "<wfDelayNotifyList><![CDATA[" + (wfStep.attr("wfDelayNotifyList") ? wfStep.attr("wfDelayNotifyList") : '') + "]]></wfDelayNotifyList>";
		request += "<wfDelayEsclThreshold>" + (wfStep.attr("wfDelayEsclThreshold") ? wfStep.attr("wfDelayEsclThreshold") : '') + "</wfDelayEsclThreshold>";
		request += "<wfEnableDelayEsclMsg>" + (wfStep.attr("wfEnableDelayEsclMsg") ? wfStep.attr("wfEnableDelayEsclMsg") : '') + "</wfEnableDelayEsclMsg>";
		request += "<wfDelayEsclMsg><![CDATA[" + (wfStep.attr("wfDelayEsclMsg") ? wfStep.attr("wfDelayEsclMsg") : '') + "]]></wfDelayEsclMsg>";
		request += "<wfDelayEsclNotifyParticipants>" + (wfStep.attr("wfDelayEsclNotifyParticipants") ? wfStep.attr("wfDelayEsclNotifyParticipants") : '') + "</wfDelayEsclNotifyParticipants>";
		request += "<wfDelayEsclNotifyList><![CDATA[" + (wfStep.attr("wfDelayEsclNotifyList") ? wfStep.attr("wfDelayEsclNotifyList") : '') + "]]></wfDelayEsclNotifyList>";
		//Properties specific to Review and Approve only
		if(wfStepAction == "Review" || wfStepAction == "Approve"){ //End step doesn't have/need
			request += "<wfApproverEdit>" + (wfStep.attr("wfApproverEdit") ? wfStep.attr("wfApproverEdit") : 'No') + "</wfApproverEdit>";
			request += "<wfOptionalComments>" + (wfStep.attr("wfOptionalComments") ? wfStep.attr("wfOptionalComments") : '') + "</wfOptionalComments>";
			request += "<wfCustomReviewButtonLabel><![CDATA[" + (wfStep.attr("wfCustomReviewButtonLabel") ? wfStep.attr("wfCustomReviewButtonLabel") : '') + "]]></wfCustomReviewButtonLabel>";
			request += "<wfCustomApproveButtonLabel><![CDATA[" + (wfStep.attr("wfCustomApproveButtonLabel") ? wfStep.attr("wfCustomApproveButtonLabel") : '') + "]]></wfCustomApproveButtonLabel>";
		}
		//Properties specific to End only
		if(wfStepAction == "End"){ //Review and Approve step don't have/need
			request += "<wfCustomReleaseButtonLabel><![CDATA[" + (wfStep.attr("wfCustomReleaseButtonLabel") ? wfStep.attr("wfCustomReleaseButtonLabel") : '') + "]]></wfCustomReleaseButtonLabel>";
		}		
		//--
		request += "</Document>";
		request += "</Request>";
	}
	
	var resulttext = SubmitRequest(request, agentName);
	wfStep.attr("wfStepKey", resulttext) //ensure the design li attribute gets the new or existing dockey for the step
	return wfStep;
}

function StepAdd(){
	//var oItem = $(".WorkflowItems .ui-state-focus")
	$(currWFStep).after(defaultWorkflow);
	RenumberSteps();
	reAddLIClick();
}

function StepDelete(){
	//var oItem = $(".WorkflowItems .ui-state-focus")
	var wfStepAction = $(currWFStep).attr("wfStepAction");
	var wfStepKey = $(currWFStep).attr("wfStepKey");
	var wfStepNo = $(currWFStep).attr("wfStepNo");
	//---if the step is a start or end step, then don't delete it in this manner. Will only be deleted if wf is set as a fragment
	if(wfStepAction == "Start" || wfStepAction == "End"){
		window.top.Docova.Utils.messageBox({
			title: "{% trans %}Delete{% endtrans %}",
			prompt: "{% trans %}Sorry, you cannot delete Start or Stop steps.{% endtrans %}",
			icontype: 1,
			msgboxtype: 0,
			width: 300
		});					
		return;
	}
	if(wfStepNo == "1"){
		window.top.Docova.Utils.messageBox({
			title: "{% trans %}Delete{% endtrans %}",
			prompt: "{% trans %}Sorry, you must have at least one workflow step.{% endtrans %}",
			icontype: 1,
			msgboxtype: 0,
			width: 300
		});							
		return;
	}
	if(wfStepKey == ""){ //---if the step key is blank, then the WF hasn't been saved yet and no backend doc exists so just delete the li
		$(currWFStep).remove();
		return;
	}
	
	var agentName = "AppWorkflowServices";
	//-----Build step delete request
	var request = "<Request><Action>DELETESTEP</Action><UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "<Document>";
	request += "<wfStepKey>" + wfStepKey + "</wfStepKey>";
	request += "</Document>";
	request += "</Request>";
	
	var resulttext = SubmitRequest(request, agentName);
	if(resulttext == "FAILED"){
		alert("{% trans %}Could not delete the workflow step.{% endtrans %}");
		return;
	}
	if(resulttext == "OK"){
		$(currWFStep).remove();
		SaveWorkflow();
	}		
}

function reAddLIClick(){
    $(".WorkflowItems li").click(function(event){
        event.stopPropagation();
        $("#tabs").css("display", "");
		$("#tabsDefinitionProperties").css("display", "none");
		$(".WorkflowItems li").removeClass("ui-state-focus");
		$("#divStartStep li").removeClass("ui-state-focus");
		$("#divEndStep li").removeClass("ui-state-focus");
		$(this).addClass("ui-state-focus");
		currWFStep = this;
		currWFStepLabel = $(this).find(".itemlabel")
		$("[name=wfAction]").prop("disabled", false)
		getProperties();		
	});
	$("#divStartStep li").click(function(event){
		event.stopPropagation();
		$("#tabs").css("display", "");
		$("#tabsDefinitionProperties").css("display", "none");
		$(".WorkflowItems li").removeClass("ui-state-focus");
		$("#divStartStep li").removeClass("ui-state-focus");
		$("#divEndStep li").removeClass("ui-state-focus");
		$(this).addClass("ui-state-focus");
		currWFStep = this;
		currWFStepLabel = $(this).find(".itemlabel");
		$("[name=wfAction]").prop("disabled", true);
		getProperties();
	});
	$("#divEndStep li").click(function(event){
		event.stopPropagation();
		$("#tabs").css("display", "");
		$("#tabsDefinitionProperties").css("display", "none");
		$(".WorkflowItems li").removeClass("ui-state-focus");
		$("#divStartStep li").removeClass("ui-state-focus");
		$("#divEndStep li").removeClass("ui-state-focus");
		$(this).addClass("ui-state-focus");
		currWFStep = this;
		currWFStepLabel = $(this).find(".itemlabel");
		$("[name=wfAction]").prop("disabled", true);
		getProperties();
	});
}

function UpdateElement(){
	var oItem = $(".WorkflowItems .ui-state-focus");
	$(oItem).find(".itemlabel").text($("#StepLabel").val());
	reAddLIClick();
}

function SubmitRequest(request, agentName){
	//send the request to server
	var processUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/" + agentName  + "?OpenAgent&AppID=" + docInfo.AppID;
	var result;
	var resulttext;
	$.ajax({
		type: "POST",
		url: processUrl,
		data: request,
		cache: false,
		async: false,
		dataType: "xml",
		success: function(xml){
			result = true;
			var xmlobj = $(xml);
			var statustext = xmlobj.find("Result").first().text();
			if(statustext == "OK"){
				resulttext = xmlobj.find("Result[ID=Ret1]").text();
			}
		},
		error: function(){
			result = false
			resulttext = "FAILED"
			//provide an error message
		}
	});
	return resulttext;
}

//====== WORKFLOW VALIDATION=====
function ValidateWFStep(){

	//For button labels, if not blank, ensure that double-quotes were used
	//CANT HAVE THIS VALIDATION - if @formula is used, then there won't be quotes around it.
/*	var objWfCustomReviewButtonLabel = $.trim($("#wfCustomReviewButtonLabel").val());
	var objWfCustomApproveButtonLabel = $.trim($("#wfCustomApproveButtonLabel").val());
	var objWfCustomDeclineButtonLabel = $.trim($("#wfCustomDeclineButtonLabel").val());
	var objWfCustomReleaseButtonLabel = $.trim($("#wfCustomReleaseButtonLabel").val());
	var dblQuote = '"';
	
	//Review button
	if(objWfCustomReviewButtonLabel != ""){
		if(objWfCustomReviewButtonLabel.charAt(0) != dblQuote || objWfCustomReviewButtonLabel.charAt(objWfCustomReviewButtonLabel.length-1) != dblQuote){
			window.top.Docova.Utils.messageBox({
				title: "Quotes missing",
				prompt: "Please ensure the Review Button Label is surrounded by double quotes.",
				icontype: 4,
				msgboxtype: 0,
				width: 400
			});
			$("#wfCustomReviewButtonLabel").focus();
			return false;		
		}
	}
	//Approve button
	if(objWfCustomApproveButtonLabel != ""){
		if(objWfCustomApproveButtonLabel.charAt(0) != dblQuote || objWfCustomApproveButtonLabel.charAt(objWfCustomApproveButtonLabel.length-1) != dblQuote){
			window.top.Docova.Utils.messageBox({
				title: "Quotes missing",
				prompt: "Please ensure the Approve Button Label is surrounded by double quotes.",
				icontype: 4,
				msgboxtype: 0,
				width: 400
			});
			$("#wfCustomApproveButtonLabel").focus();
			return false;		
		}
	}
	//Decline button
	if(objWfCustomDeclineButtonLabel != ""){
		if(objWfCustomDeclineButtonLabel.charAt(0) != dblQuote || objWfCustomDeclineButtonLabel.charAt(objWfCustomDeclineButtonLabel.length-1) != dblQuote){
			window.top.Docova.Utils.messageBox({
				title: "Quotes missing",
				prompt: "Please ensure the Decline Button Label is surrounded by double quotes.",
				icontype: 4,
				msgboxtype: 0,
				width: 400
			});
			$("#wfCustomDeclineButtonLabel").focus();
			return false;		
		}
	}	
	//Release button
	if(objWfCustomReleaseButtonLabel != ""){
		if(objWfCustomReleaseButtonLabel.charAt(0) != dblQuote || objWfCustomReleaseButtonLabel.charAt(objWfCustomReleaseButtonLabel.length-1) != dblQuote){
			window.top.Docova.Utils.messageBox({
				title: "Quotes missing",
				prompt: "Please ensure the Release Button Label is surrounded by double quotes.",
				icontype: 4,
				msgboxtype: 0,
				width: 400
			});
			$("#wfCustomReleaseButtonLabel").focus();
			return false;		
		}		
	}*/
	return true;
}

//====== WORKFLOW PROPERTY RELATED FUNCTIONS=====
function showHideSections(wfAction) {
	var hd="none"; // hide
	var sh="block"; // show

	if (wfAction=="Start" || wfAction == "Stop" || wfAction == "Cancel") {
		showHideStartSection();
		$('[href="#tabs-2"]').closest('li').show();
		showHideActionTabSections(hd,sh,hd,hd,hd,hd);
		if ( wfAction == "Stop"){
			$(".trdocstatus").show();
		}
	}
	else if (wfAction=="Review") {
		showHideReviewSection();
		$('[href="#tabs-2"]').closest('li').show();
		showHideActionTabSections(sh,sh,hd,sh,sh,sh);
	}
	else if (wfAction=="Approve") {
		showHideApproveSection();
		$('[href="#tabs-2"]').closest('li').show();
		showHideActionTabSections(sh,sh,sh,sh,sh,sh);
	}
	else if (wfAction=="End"){
		showHideEndSection();
		$('[href="#tabs-2"]').closest('li').show();
		showHideActionTabSections(sh,sh,sh,sh,sh,sh);
	}else if ( wfAction == "Decision"){
		showHideDecisionSection();
		
		$('[href="#tabs-2"]').closest('li').hide();
		$( "#tabs" ).tabs({ active: 0 });
	}
}
//
function hideShowWfDeclineBackTrack(selVal){

	var divParallelOption = $("#spanwfDeclineBacktrack");
	if (selVal==2) 
		divParallelOption.show();
	else
		divParallelOption.hide();

}
//
function hideShowWfHideButtons(){
	var spanObj=document.getElementById("spanWfCustomHideButtons");
	var hidvals = Docova.Utils.getField({ field: "wfHideButtons" })
	if(hidvals.indexOf("C") == -1){
		spanObj.style.display="none";
	}else{
		spanObj.style.display="block";
	}
}
// showHideAction tab section which are triggered by wfAction
function showHideActionTabSections(hideAct,hideCom,hideDec,hidePau,hideCanc,hideDely){
	$("TR.decisionProperties").hide();
	document.getElementById("divActionActivated").style.display=hideAct;
	$("TR.otherProperties").show();	
	document.getElementById("divActionCompleted").style.display=hideCom;	
	document.getElementById("divActionDeclined").style.display=hideDec	
	document.getElementById("divActionPaused").style.display=hidePau
	document.getElementById("divActionCancelled").style.display=hideCanc;	
	document.getElementById("divActionDelayed").style.display=hideDely;	
}

// When "Start"
function showHideStartSection() {
	$("TR.decisionProperties").hide();
	$("TR.otherProperties").show();
	$("TR.divCommonSection").hide();	
	$("#divReviewSection").hide();	
	$("#divApproveSection").hide();	
	$("#divApproveSection2").hide();	
	$("#divApproveReview").hide(); // approve/Review
	$("#divReviewApproveEnd").hide();	
	$("#divApproveEnd").hide();	
	$("#divEnd").hide();	
}
// When "Review"
function showHideReviewSection(){
	$("TR.decisionProperties").hide();
	$("TR.otherProperties").show();
	$("TR.divCommonSection").show();	
	$("#divReviewSection").show(); // hide review section
	$("#divApproveSection").hide();
	$("#divApproveSection2").hide();
	$("#divApproveReview").show(); // approve/Review
	$("#divReviewApproveEnd").show();	
	$("#divApproveEnd").hide();	
	$("#divEnd").hide();		
}

// When "Approve"
function showHideApproveSection(){
	$("TR.decisionProperties").hide();
	$("TR.otherProperties").show();
	$("TR.divCommonSection").show();	
	$("#divReviewSection").hide(); // hide review section
	$("#divApproveSection").show();
	$("#divApproveSection2").show();
	$("#divApproveReview").show(); // approve/Review
	$("#divReviewApproveEnd").show();	
	$("#divApproveEnd").show();	
	$("#divEnd").hide();		
}
// When "End"
function showHideEndSection(){
	$("TR.decisionProperties").hide();
	$("TR.otherProperties").show();
	$("TR.divCommonSection").show();	
	$("#divReviewSection").hide(); // hide review section
	$("#divApproveSection").hide();
	$("#divApproveSection2").hide();
	$("#divApproveReview").hide(); // approve/Review
	$("#divReviewApproveEnd").show();	
	$("#divApproveEnd").show();	
	$("#divEnd").show();	
}

//when Decision
function showHideDecisionSection()
{
	$("TR.decisionProperties").show();	
	$("TR.otherProperties").hide();
	$("TR.divCommonSection").hide();	
	$("#divReviewSection").hide(); // hide review section
	$("#divApproveSection").hide();
	$("#divApproveSection2").hide();
	$("#divApproveReview").hide(); // approve/Review
	$("#divReviewApproveEnd").hide();	
	$("#divApproveEnd").hide();
	$('#divParallelOption').hide();	
	$("#divEnd").hide();	
}

// to show/hide "completed when processed by" section
function hideShowParallelOption(selVal){
	var divParallelOption = $("#divParallelOption");
	if (selVal=="Parallel") 
		divParallelOption.show();
	else
		divParallelOption.hide();
}

function hideShowWfCompleteAny(selVal){
	document.getElementById("spanWfCountFld").style.display="";
	document.getElementById("spanWfCountFldMsg").style.display="";
	if ( selVal =="2") {
		document.getElementById("spanWfCountFld").style.display="inline-block";
		document.getElementById("spanWfCountFldMsg").style.display="block";
	  }
	else {
		document.getElementById("spanWfCountFld").style.display="none";
		document.getElementById("spanWfCountFldMsg").style.display="none";
	}
}

//------------------------------------------------------------------------------------------------------------------------------
function hideShowTmpWfReviewerApproverListSingle(chkObj){
	var wfActionObj=document.getElementById("wfAction");
	var wfTypeObj=document.getElementById("wfType");
	var spanTmpwfReviewerApprovereListSingle=document.getElementById("spanTmpwfReviewerApprovereListSingle");

	if ( (chkObj.checked && this.value=="1") || (wfActionObj.value=="Start") || wfTypeObj.value=="Parallel" ) {
		spanTmpwfReviewerApprovereListSingle.style.display="none";
	}else
		wfEnableAuthorParticipantObj.style.display="block";
}
//------------------------------------------------------------------------------------------------------------------------------
function hideShowTmpWfReviewerApproverListMulti(wfTypeVal, wfTypeChkFlag)
{

	if ( wfTypeVal == "Serial" && $(".docova_wfpcontainer").children().length > 1 ){
		alert ( "Serial step can only have one participant.  Please remove extra participants");
		Docova.Utils.setField({ field: "wfType", value: "Parallel" });	
	}

	return;
	var wfActionRadioVal=getRadioVal("wfAction"); // step type
	var wfTypeRadioVal=getRadioVal("wfType"); // distribution
	//var wfEnableAuthorParticipant=document.getElementById("wfEnableAuthorParticipant");
	var wfEnableAuthorParticipantVal=wfEnableAuthorParticipant.checked ? wfEnableAuthorParticipant.value: "";
	var spanTmpwfReviewerApproverListMulti=document.getElementById("spanTmpwfReviewerApproverListMulti");
	var spanTmpwfReviewerApprovereListSingle=document.getElementById("spanTmpwfReviewerApprovereListSingle");

	if ( wfActionRadioVal=="Start" || wfTypeVal=="Serial"  )  
	{
		if (wfEnableAuthorParticipantVal =="")
			spanTmpwfReviewerApprovereListSingle.style.display="block";
		else
			spanTmpwfReviewerApprovereListSingle.style.display="none";
		spanTmpwfReviewerApproverListMulti.style.display="none";
	}
	else if ( wfActionRadioVal=="Start" || wfTypeVal=="Parallel" || wfEnableAuthorParticipantVal=="1")
	{
		spanTmpwfReviewerApprovereListSingle.style.display="none";
		spanTmpwfReviewerApproverListMulti.style.display="block";
	}
}

//------------------------- get selected radio button val ---------------------------
function getRadioVal(radioName) {
	var rads = document.getElementsByName(radioName);
	for (var i=0;i<rads.length;i++) {
		if(rads[i].checked) {
			return rads[i].value; 
		}
	}
	return null;
}

function closeDocumentPrompt(msgTitle, msgPrompt){
	window.top.Docova.Utils.messageBox({
		width: 400,
		title: msgTitle,
		prompt: msgPrompt,
		msgIcon: "ui-icon-close",
		msgboxtype: 4,
		onYes: function(){ SaveWorkflow(true)},
		onNo: function(){ closeDocument() }
	});
}

function closeDocument(){
	var formKey = $("#WorkflowKey").val();
	formID = formKey.split("DK")[1]
	if(window.parent.fraTabbedTable && window.parent.fraTabbedTable.objTabBar){
		window.parent.fraTabbedTable.objTabBar.RefreshHelper.AddFolderToRefreshList( "appBuilderMainView", formID);
		window.parent.fraTabbedTable.objTabBar.CloseTab(formID, true, "appBuilderMainView");
	}
}

function resetUpdateButtons(){
	//resets the position of the updateButtons for .manualEntry fields when panes are adjusted
	var focusedField = document.activeElement;
	if( $(focusedField).hasClass("manualEntry") ){
	 	var posleft = parseInt($(focusedField).offset().left, 10) + parseInt($(focusedField).outerWidth(),10);
		var postop = parseInt($(focusedField).offset().top, 10) + 3;
		$("#updateButtons").offset({
			left: posleft,
			top: postop
		})
	}
	return;
}


</script>
</head>
<body onload="" style="margin:0px;font : normal 12px Verdana,  Arial, sans-serif;">
	<div id="divMultiLinePopup" style="display:none;">
		<input type="text" id="docova_formula_helper" placeholder = "Search $$DocovaScript functions" style="width:92%; margin-bottom:8px"></input> <i id="btnInsertFormula" title="Add Formula" class="fas fa-check"></i>
		<textarea id="multilineinput" style="width:98%; height:80%; outline:none; border:1px #CCC solid; border-radius:3px;"></textarea>
	</div>
	<form method="post" action="" name="_WorkflowBuilder">
		<div id="divContentSection" class="ui-widget container">
			<div class="ui-layout-center" style="text-align: center" id="inner-center">
				<!-- Creates a container for the sidebar -->
				<div id="actionbar_box" class="ui-widget ui-tabs ui-widget-header" style="height:27px;"></div>
				<!-- Creates a container for the graph -->
				<div id="graphContainer"
					style="height:100%; width:100%; background-image:url('{{ asset('bundles/docova/mxgraph-js-master/javascript/examples/editors/images/grid.gif') }}');cursor:default;">
				</div>
				<!-- end layout-tabs -->
				<ul id="tdActionBar" style="padding-left:0;">
					<li><a onclick="SaveWorkflow(); return false;" href="" primary="ui-icon-disk" secondary="">{% trans %}Save Workflow{% endtrans %}</a></li>
					<li><a onclick="closeDocumentPrompt('{% trans %}Closing workflow{% endtrans %}', '{% trans %}Would you like to save the changes to this workflow?{% endtrans %}'); return false;" href="" primary="ui-icon-close" secondary="">Close</a></li>
					<li><span style='margin-left:20px; margin-right:20px'>|</span></li>
					<li><a id='docova_createswimlane'  href="" primary="fal fa-rectangle-landscape secondary="">{% trans %}Swimlane{% endtrans %}</a></li>
					<li><a id='docova_remove' href="" primary="fas fa-minus" secondary="">{% trans %}Delete{% endtrans %}</a></li>
					<li><a id='docova_undo'  href="" primary="far fa-undo secondary="">{% trans %}Undo{% endtrans %}</a></li>
					<li><a id='docova_redo' href="" primary="fas fa-redo" secondary="">{% trans %}Redo{% endtrans %}</a></li>
				</ul>
			</div><!--- end layout center-->
			<div class="ui-layout-east" id="eastpane" style="right:0;">
				<div id="right-panel-tabs">
					<ul id="vertical-tabs">
						<li title="{% trans %}Properties{% endtrans %}"><a href="#frm-properties" class="far fa-tasks"></a></li>
						<li title="{% trans %}Elements{% endtrans %}"><a href="#frm-elements" class="far fa-th"></a></li>
					</ul>
					<div id="frm-properties">
						<div id="tabsDefinitionProperties">
	       					<h3 class="tool_box_header ui-widget-header" id="element-type">{% trans %}Workflow Properties{% endtrans %}</h3>
							<div class="prp-container">
								
								<table class="tblRows" width="100%" border="0" cellspacing="0" cellpadding="0">
									<tr valign="top">
										<td width="30%" class="frmLabel">{% trans %}Name{% endtrans %}:</td>
										<td width="70%"><input name="WorkflowName" value="" class="inputEntry prp_inputs" id="WorkflowName" ></td>
									</tr>
									<tr valign="top">
										<td width="30%" class="frmLabel">{% trans %}Description{% endtrans %}:</td>
										<td width="70%"><input name="WorkflowDescription" class="inputEntry prp_inputs" value="" id="WorkflowDescription" ></td>
									</tr>
									<tr valign="top">
										<td width="30%" class="frmLabel">{% trans %}Key{% endtrans %}:</td>
										<td width="70%"><input name="WorkflowDocKey" value="" id="WorkflowDocKey" class="inputEntry prp_inputs" readonly="true"></td>
									</tr>
									<tr valign="top">
										<td colspan="2">
											<label> <input type="checkbox" name="CustomizeAction" value="1">{% trans %}Allow document author to customize this process{% endtrans %}</label>&nbsp
										</td>
									</tr>
									<tr valign="top">
										
										<td colspan="2"><label> <input type="checkbox" name="EnableImmediateRelease" value="1">{% trans %}Allow to release bypassing workflow{% endtrans %}</label>&nbsp</td>
									</tr>
									<tr valign="top">
										
										<td colspan="2"><label> <input type="checkbox" name="DefaultWorkflow" value="1">{% trans %}Use as default document workflow if none specified{% endtrans %}</label>&nbsp</td>
									</tr>
								</table>
								<div id="hiddenItems" style="display: none;">
									{% trans %}Workflow Design Key{% endtrans %}:
									<input name="WorkflowKey" value="" id="WorkflowKey" style="width: 300px;"><br>
									{% trans %}Target App{% endtrans %}:
									<input name="TargetApplication" value="{{ app.request.query.get('AppID') }}" id="TargetApplication" style="width: 500px;">
								</div>
								
							</div>
						</div>
						<div id="tabs" style="display: none;">
							<h3 class="tool_box_header ui-widget-header" target="prGeneral">{% trans %}Step Properties{% endtrans %}</h3>
							<div id="prGeneral">
								<div id="tabs-1">
									<table class="tblRows" width="100%" border="0" cellspacing="0" cellpadding="0">
										<tr valign="top" class="decisionProperties" style="display:none;">
											<td width="27%" class="frmLabel">{% trans %}Name{% endtrans %}:</td>
											<td width="73%"><input name="wfTitleD" value="" id="wfTitleD" class="inputEntry" style=""></td>
										</tr>
										<tr valign="top" class="decisionProperties" style="display:none;">
											<td width="27%" class="frmLabel">{% trans %}Formula{% endtrans %}:</td>
											<td >
												<span class="longtext_values" target="wfFormula"></span>
												<span style="display:none;"><textarea id="wfFormula" class="manualEntry"></textarea></span>
												<font>{% trans %} $$DOCOVAScript that returns a boolean value ( true, false).<br> e.g. $$GetField("myfield") > 1000 {% endtrans %}</font>
											</td>
										</tr>
										<tr valign="top" class="otherProperties">
											<td width="27%" class="frmLabel">{% trans %}Name{% endtrans %}:</td>
											<td width="73%"><input name="wfTitle" value="" id="wfTitle" class="inputEntry prp_inputs" style=""></td>
										</tr>
										<tr valign="top" class="otherProperties">
											<td width="27%" class="frmLabel">{% trans %}Type{% endtrans %}:</td>
											<td width="73%">
												<label><input type="radio" name="wfAction" value="Start" onclick="showHideSections(this.value);" id="wfAction" class="inpRadioChkbox">{% trans %}Start{% endtrans %}</label><br>
												<label> <input type="radio" name="wfAction" value="Review" onclick="showHideSections(this.value);" id="wfAction" class="inpRadioChkbox">{% trans %}Review{% endtrans %}</label><br>
												<label> <input type="radio" name="wfAction" value="Approve" onclick="showHideSections(this.value);" id="wfAction" class="inpRadioChkbox">{% trans %}Approve{% endtrans %}</label><br>
												<label> <input type="radio" name="wfAction" value="Stop" onclick="showHideSections(this.value);" id="wfAction" class="inpRadioChkbox">{% trans %}Stop{% endtrans %}</label><br>
												<label> <input type="radio" name="wfAction" value="End" onclick="showHideSections(this.value);" id="wfAction" class="inpRadioChkbox">{% trans %}End{% endtrans %}</label>
											</td>
										</tr>
										<!--shows for Review, Approve & End -->
										<tr valign="top" class="divCommonSection trdocstatus">
											<td width="27%" class="frmLabel sep">{% trans %}Document Status{% endtrans %}:</td>
											<td width="73%" class="sep"><input name="wfDocStatus" value="Draft" id="wfDocStatus" class="inputEntry" style=""></td>
										</tr>
										<tr valign="top" class="divCommonSection">
											<td width="27%" class="frmLabel">{% trans %}Distribution{% endtrans %}:</td>
											<td class="fieldCell" width="73%">
												<label> <input type="radio" name="wfType" value="Serial" checked onclick="hideShowTmpWfReviewerApproverListMulti(this.value, this.checked); hideShowParallelOption(this.value);" id="wfType" class="inpRadioChkbox">{% trans %}Serial{% endtrans %}</label>
												<label> <input type="radio" name="wfType" value="Parallel" onclick="hideShowTmpWfReviewerApproverListMulti(this.value, this.checked); hideShowParallelOption(this.value);" id="wfType" class="inpRadioChkbox">{% trans %}Parallel{% endtrans %}</label>
											</td>
										</tr>
										<tr valign="top" class="divCommonSection">
											<td colspan="2" class="frmLabel">{% trans %}Participants{% endtrans %}:<br>
												<span class="btn" onclick='docova_addwfp("F")'> Formula</span> OR 
												<span class="btn" onclick='docova_addwfp("A")'> Author</span>
												<span class="btn" onclick='docova_addwfp("U")'> User</span></br>
												<div class="docova_wfpcontainer"></div></br>
												<label> <input type="checkbox" name="wfReviewerApproverSelect" value="1" checked id="wfReviewerApproverSelect" class="inpRadioChkbox">{% trans %}Allow author to modify participant names{% endtrans %}</label></br>
											</td>
										</tr>
										<!-- show this if action is not start and its not serial -->
										<tr valign="top" id="divParallelOption" style="display: none">
											<td colspan="2" class="frmLabel">{% trans %}Completed when processed by{% endtrans %}:</br>
												<label> <input type="radio" name="wfCompleteAny" value="0" checked onclick="hideShowWfCompleteAny(this.value);" id="wfCompleteAny" class="inpRadioChkbox">{% trans %}All participants{% endtrans %}</label><br>
												<label> <input type="radio" name="wfCompleteAny" value="1" onclick="hideShowWfCompleteAny(this.value);" id="wfCompleteAny" class="inpRadioChkbox">{% trans %}Any participant{% endtrans %}</label><br>
												<label> <input type="radio" name="wfCompleteAny" value="2" onclick="hideShowWfCompleteAny(this.value);" id="wfCompleteAny" class="inpRadioChkbox">{% trans %}At least{% endtrans %}...</label>
												<span id="spanWfCountFld" style="padding-left:7px;display: none">
													<input name="wfCompleteCount" value="0" id="wfCompleteCount" class="inputEntry" style="width: 30px;">{% trans %}Participants{% endtrans %}
												</span>
												<font color="#808080" id="spanWfCountFldMsg" style="clear:both;display: none">{% trans %}If the number is greater then the number of participants, all will have to complete.{% endtrans %}</font>
											</td>
										</tr>
										<tr><td colspan="2" class="sep"></td></tr>
										<!-- shows for approve -->
										<tr valign="top" id="divApproveSection2" style="display: none">
											<td colspan="2" class="frmLabel">{% trans %}Allow approver to edit document?{% endtrans %}<br>
												<label><input type="radio" name="wfApproverEdit" value="Yes" id="wfApproverEdit" class="inpRadioChkbox">{% trans %}Yes{% endtrans %}</label>
												<label> <input type="radio" name="wfApproverEdit" value="No" checked id="wfApproverEdit" class="inpRadioChkbox">{% trans %}No{% endtrans %}</label>
											</td>
										</tr>
										<!-- shows for approve and Review-->
										<tr valign="top" id="divApproveReview" style="display: none">
											<td colspan="2" class="frmLabel">
											    {% trans %}Optional Review/Approve comments?{% endtrans %}
												<label><input type="checkbox" name="wfOptionalComments" value="1" class="inpRadioChkbox">{% trans %}Yes{% endtrans %}</label>
											</td>
										</tr>
										<!-- shows for Review -->
										<tr valign="top" id="divReviewSection" style="display: none">
											<td colspan="2" class="frmLabel">
											    {% trans %}Complete Review button label{% endtrans %}:<br>
												<span class="longtext_values" target="wfCustomReviewButtonLabel"></span>
												<span style="display:none;"><textarea id="wfCustomReviewButtonLabel" class="manualEntry"></textarea></span>
												<font>{% trans %}Use Text in double quotes or $$DOCOVAScript that returns a text string. 'Complete Review' will be used if left blank.{% endtrans %}</font>
											</td>
										</tr>
										<!-- shows for approve -->
										<tr valign="top" id="divApproveSection" style="display: none">
											<td colspan="2" class="frmLabel">
											    {% trans %}Approve button label{% endtrans %}:</br>
												<span class="longtext_values" target="wfCustomApproveButtonLabel"></span>
												<span style="display:none;"><textarea id="wfCustomApproveButtonLabel" class="manualEntry"></textarea></span>
												<font>{% trans %}Use Text in double quotes or $$DOCOVAScript that returns a text string. 'Approve' will be used if left blank.{% endtrans %}</font>
											</td>
										</tr>
										<!-- shows for approve and end -->
										<tr valign="top" id="divApproveEnd" style="display: none">
											<td colspan="2" class="frmLabel">
											    {% trans %}Decline button label{% endtrans %}:</br>
												<span class="longtext_values" target="wfCustomDeclineButtonLabel"></span>
												<span style="display:none;"><textarea id="wfCustomDeclineButtonLabel" class="manualEntry"></textarea></span>
												<font>{% trans %}Use Text in double quotes or $$DOCOVAScript that returns a text string. 'Decline' will be used if left blank.{% endtrans %}</font>
											</td>
										</tr>
										<!-- to show for End -->
										<tr valign="top" id="divEnd" style="display: none">
											<td colspan="2" class="frmLabel">{% trans %}Release button label{% endtrans %}:</br>
												<span class="longtext_values" target="wfCustomReleaseButtonLabel"></span>
												<span style="display:none;"><textarea id="wfCustomReleaseButtonLabel" class="manualEntry"></textarea></span>
												<font>{% trans %}Use Text in double quotes or $$DOCOVAScript that returns a text string. 'Release Document' will be used if left blank.{% endtrans %}</font>
											</td>
										</tr>
										<tr><td colspan="2" class="sep"></td></tr>
										<!-- shows for Review, Approve and End -->
										<tr valign="top" id="divReviewApproveEnd">
											<td colspan="2" class="frmLabel">{% trans %}Workflow buttons visibility{% endtrans %}:</br>
												{% trans %}Hide workflow buttons when{% endtrans %}: <br>
												<label> <input type="checkbox" name="wfHideButtons" value="R" onclick="var spanObj=document.getElementById('spanWfCustomHideButtons');
												if (this.value=='C' && this.checked) { 
													spanObj.style.display='block'; 
												} else { 
													spanObj.style.display='none'; 
												}" class="inpRadioChkbox">{% trans %}Reading{% endtrans %}</label><br>
												<label> <input type="checkbox" name="wfHideButtons" value="E" onclick="var spanObj=document.getElementById('spanWfCustomHideButtons');
												if (this.value=='C' && this.checked) {
													spanObj.style.display='block';
												} else {
													spanObj.style.display='none';
												}" class="inpRadioChkbox">{% trans %}Editing{% endtrans %}</label><br>
												<label> <input type="checkbox" name="wfHideButtons" value="C" onclick="var spanObj=document.getElementById('spanWfCustomHideButtons');
												if (this.value=='C' && this.checked) {
													spanObj.style.display='block';
												} else {
													spanObj.style.display='none';
												}" class="inpRadioChkbox">{% trans %}Custom{% endtrans %}</label>
												<span id="spanWfCustomHideButtons" style="display: none">
													<p>{% trans %}Custom hide when $$DOCOVAScript{% endtrans %}:</br>
        												<span class="longtext_values" target="wfCustomButtonsHideWhen"></span>
        												<span style="display:none;"><textarea id="wfCustomButtonsHideWhen" class="manualEntry"></textarea></span>
        												<font>{% trans %}$$DOCOVAScript that returns 1 or $$True (hide) or 0 or $$False (show){% endtrans %}.</font>
													</p>
												</span>
											</td>
										</tr>
									</table>
								</div>
							</div>
							<h3 class="tool_box_header ui-widget-header" target="prActions">{% trans %}Actions{% endtrans %}</h3>
							<div id="prActions" style="display:none;">
								<div id="tabs-2">
									<table class="tblRows" width="100%" border="0" cellspacing="0" cellpadding="0">
										<tr valign="top">
											<td class="frmLabel" width="100%">{% trans %}Actions to perform when the step is being{% endtrans %}...</td>
										</tr>
									</table>
									<br>
									<!-- ActionTab: 1. Activated -->
									<span id="divActionActivated" style="display: block;">
										<table class="tblRows" width="100%" border="0" cellspacing="0" cellpadding="0">
											<tr valign="top">
												<td width="27%" class="frmLabel">{% trans %}Activated{% endtrans %}</td>
												<td width="73%"></td>
											</tr>
											<tr valign="top">
												<td width="27%">{% trans %}Actions{% endtrans %}:</td>
												<td width="73%">
													<label> <input type="checkbox" name="wfEnableActivateMsg" value="1" checked id="wfEnableActivateMsg" class="inpRadioChkbox">{% trans %}Send{% endtrans %}</label>
													<select name="wfActivateMsg" id="wfActivateMsg" style="">
														<option selected value="ACTIVATE">{% trans %}Default{% endtrans %}</option>
														{% if messages|length %}
														{% for msg in messages %}
															<option value="{{ msg.getId }}">{{ msg.getMessageName }}</option>
														{% endfor %}
														{% endif %}
													</select>
													{% trans %}message{% endtrans %}
													<p>{% trans %}to{% endtrans %}: 
														<label> <input type="checkbox" name="wfActivateNotifyParticipants" value="P" checked class="inpRadioChkbox">{% trans %}Participants{% endtrans %}</label>
														<label> <input type="checkbox" name="wfActivateNotifyParticipants" value="A" class="inpRadioChkbox">{% trans %}Author{% endtrans %}</label> <br><br>{% trans %}and/or{% endtrans %}: </br>
														<textarea id="wfActivateNotifyList" name="wfActivateNotifyList" class="manualEntry" cols="30" rows="1" readonly="true"></textarea>
														<button type="button" id="btnwfActivateNotifyList" class="ui-icon-group"></button>
													</p>
												</td>
											</tr>
										</table>
									</span>
									<!-- ActionTab: 2. Completed-->
									<span id="divActionCompleted">
										<table class="tblRows" width="100%" border="0" cellspacing="0" cellpadding="0">
											<tr valign="top">
												<td class="frmLabel" width="27%">{% trans %}Completed{% endtrans %}</td>
												<td width="73%"></td>
											</tr>
											<tr valign="top">
												<td width="27%">{% trans %}Actions{% endtrans %}:</td>
												<td width="73%">
													<label><input type="checkbox" name="wfEnableCompleteMsg" value="1" id="wfEnableCompleteMsg" class="inpRadioChkbox">{% trans %}Send{% endtrans %}</label>
													<select name="wfCompleteMsg" id="wfCompleteMsg" style="">
														<option selected value="COMPLETE">{% trans %}Default{% endtrans %}</option>
														{% if messages|length %}
														{% for msg in messages %}
															<option value="{{ msg.getId }}">{{ msg.getMessageName }}</option>
														{% endfor %}
														{% endif %}											
													</select> 
													{% trans %}message{% endtrans %}
													<p>{% trans %}to{% endtrans %}: 
														<label> <input type="checkbox" name="wfCompleteNotifyParticipants" value="P" class="inpRadioChkbox">{% trans %}Participants{% endtrans %}</label>
														<label> <input type="checkbox" name="wfCompleteNotifyParticipants" value="A" class="inpRadioChkbox">{% trans %}author{% endtrans %}</label> <br><br>{% trans %}and/or{% endtrans %}: </br>
														<textarea id="wfCompleteNotifyList" name="wfCompleteNotifyList" cols="30" rows="1" readonly="true"></textarea>
														<button type="button" id="btnwfCompleteNotifyList" class="ui-icon-group"></button>
													</p>
												</td>
											</tr>
										</table>
									</span>
									<!-- ActionTab: 3. Declined-->
									<span id="divActionDeclined" style="display: none">
										<table class="tblRows" width="100%" border="0" cellspacing="0" cellpadding="0">
											<tr valign="top">
												<td class="frmLabel" width="27%">{% trans %}Declined{% endtrans %}</td>
												<td width="73%"></td>
											</tr>
											<tr valign="top">
												<td width="27%">{% trans %}Action{% endtrans %}:</td>
												<td width="73%">
													
													<label><input type="checkbox" name="wfEnableDeclineMsg" value="1" id="wfEnableDeclineMsg" class="inpRadioChkbox">{% trans %}Send{% endtrans %}</label>
													<select name="wfDeclineMsg" id="wfDeclineMsg" style="">
														<option selected value="DECLINE">{% trans %}Default{% endtrans %}</option>
														{% if messages|length %}
														{% for msg in messages %}
															<option value="{{ msg.getId }}">{{ msg.getMessageName }}</option>
														{% endfor %}
														{% endif %}											
													</select> 
													{% trans %}message{% endtrans %}<br>{% trans %}to{% endtrans %}: 
													<label> <input type="checkbox" name="wfDeclineNotifyParticipants" value="P" class="inpRadioChkbox">{% trans %}Participants{% endtrans %}</label>
													<label> <input type="checkbox" name="wfDeclineNotifyParticipants" value="A" class="inpRadioChkbox">{% trans %}author{% endtrans %}</label> <br><br>{% trans %}and/or{% endtrans %}:<br> 
													<textarea id="wfDeclineNotifyList" name="wfDeclineNotifyList" cols="30" rows="1" readonly="true"></textarea>
													<button type="button" id="btnwfDeclineNotifyList" class="ui-icon-group"></button>
												</td>
											</tr>
										</table>
									</span>
									<!-- ActionTab: 4. Paused-->
									<span id="divActionPaused" style="display: block;">
										<table class="tblRows" width="100%" border="0" cellspacing="0" cellpadding="0">
											<tr valign="top">
												<td class="frmLabel" width="27%">{% trans %}Paused{% endtrans %}</td>
												<td width="73%"></td>
											</tr>
											<tr valign="top">
												<td width="27%">{% trans %}Actions{% endtrans %}:</td>
												<td width="73%">
													<label> <input type="checkbox" name="wfEnablePauseMsg" value="1" id="wfEnablePauseMsg" class="inpRadioChkbox">{% trans %}Send{% endtrans %}</label>
													<select name="wfPauseMsg" id="wfPauseMsg" style="">
														<option selected value="PAUSE">{% trans %}Default{% endtrans %}</option>
														{% if messages|length %}
														{% for msg in messages %}
															<option value="{{ msg.getId }}">{{ msg.getMessageName }}</option>
														{% endfor %}
														{% endif %}
													</select> message<br>to: 
													<label> <input type="checkbox" name="wfPauseNotifyParticipants" value="P" class="inpRadioChkbox">{% trans %}Participants{% endtrans %}</label>
													<label> <input type="checkbox" name="wfPauseNotifyParticipants" value="A" class="inpRadioChkbox">{% trans %}author{% endtrans %}</label> <br>
													<br>{% trans %}and/or{% endtrans %}: <br>
													<textarea id="wfPauseNotifyList" name="wfPauseNotifyList" cols="30" rows="1" readonly="true"></textarea>
													<button type="button" id="btnwfPauseNotifyList" class="ui-icon-group"></button>
												</td>
											</tr>
										</table>
									</span>
									<!-- ActionTab: 5. Cancelled-->
									<span id="divActionCancelled" style="display: block;">
										<table class="tblRows" width="100%" border="0" cellspacing="0" cellpadding="0">
											<tr valign="top">
												<td class="frmLabel" width="27%">{% trans %}Cancelled{% endtrans %}</td>
												<td width="73%"></td>
											</tr>
											<tr valign="top">
												<td width="27%">{% trans %}Actions{% endtrans %}:</td>
												<td width="73%">
													<label><input type="checkbox" name="wfEnableCancelMsg" value="1"  id="wfEnableCancelMsg" class="inpRadioChkbox">{% trans %}Send{% endtrans %}</label>
													<select name="wfCancelMsg" id="wfCancelMsg" style="">
														<option selected value="CANCEL">{% trans %}Default{% endtrans %}</option>
														{% if messages|length %}
														{% for msg in messages %}
															<option value="{{ msg.getId }}">{{ msg.getMessageName }}</option>
														{% endfor %}
														{% endif %}
													</select> {% trans %}message{% endtrans %}<br>{% trans %}to{% endtrans %}: 
													<label> <input type="checkbox" name="wfCancelNotifyParticipants" value="P" class="inpRadioChkbox">{% trans %}Participants{% endtrans %}</label>
													<label> <input type="checkbox" name="wfCancelNotifyParticipants" value="A" class="inpRadioChkbox">{% trans %}author{% endtrans %}</label><br><br>{% trans %}and/or{% endtrans %}: <br>
													<textarea id="wfCancelNotifyList" name="wfCancelNotifyList"cols="30" rows="1" readonly="true"></textarea>
													<button type="button" id="btnwfCancelNotifyList" class="ui-icon-group"></button>
												</td>
											</tr>
										</table>
									</span>
									<!-- ActionTab: 6. Delayed-->
									<span id="divActionDelayed" style="display: block;">
										<table class="tblRows" width="100%" border="0" cellspacing="0" cellpadding="0">
											<tr valign="top">
												<td class="frmLabel" width="27%">{% trans %}Delayed{% endtrans %}</td>
												<td width="73%"></td>
											</tr>
											<tr valign="top">
												<td width="27%">{% trans %}Actions{% endtrans %}:</td>
												<td width="73%" >
													{% trans %}If not completed within{% endtrans %}:
													<input name="wfDelayCompleteThreshold" value="3" id="wfDelayCompleteThreshold" class="inputEntry" style="width: 25px;"> {% trans %}day(s){% endtrans %}<br>
													<label> <input type="checkbox" name="wfEnableDelayMsg" value="1" id="wfEnableDelayMsg" class="inpRadioChkbox">{% trans %}Send{% endtrans %}</label>\
													<select name="wfDelayMsg" id="wfDelayMsg" style="">
														<option selected value="DELAY">{% trans %}Default{% endtrans %}</option>
														{% if messages|length %}
														{% for msg in messages %}
															<option value="{{ msg.getId }}">{{ msg.getMessageName }}</option>
														{% endfor %}
														{% endif %}
													</select> 
													{% trans %}message{% endtrans %}<br>{% trans %}to{% endtrans %}: 
													<label> <input type="checkbox" name="wfDelayNotifyParticipants" value="P" class="inpRadioChkbox">{% trans %}Participants{% endtrans %}</label>
													<label> <input type="checkbox" name="wfDelayNotifyParticipants" value="A" class="inpRadioChkbox">{% trans %}author{% endtrans %}</label> <br><br>{% trans %}and/or{% endtrans %}: <br>
													<textarea id="wfDelayNotifyList" name="wfDelayNotifyList" cols="30" rows="1" readonly="true"></textarea>
													<button type="button" id="btnwfDelayNotifyList" class="ui-icon-group"></button><br>
													<p>
														{% trans %}If not completed within further{% endtrans %}: <input name="wfDelayEsclThreshold" value="3" id="wfDelayEsclThreshold" class="inputEntry" style="width: 25px;"> {% trans %}day(s){% endtrans %}<br>
														<label> <input type="checkbox" name="wfEnableDelayEsclMsg" value="1" id="wfEnableDelayEsclMsg" class="inpRadioChkbox">{% trans %}Send{% endtrans %}</label>
														<select name="wfDelayEsclMsg" id="wfDelayEsclMsg" style="">
															<option selected value="DELAYESCL">{% trans %}Default{% endtrans %}</option>
														{% if messages|length %}
														{% for msg in messages %}
															<option value="{{ msg.getId }}">{{ msg.getMessageName }}</option>
														{% endfor %}
														{% endif %}												
														</select>
														{% trans %}escalation message{% endtrans %}<br>{% trans %}to{% endtrans %}: 
														<label> <input type="checkbox" name="wfDelayEsclNotifyParticipants" value="P" class="inpRadioChkbox">{% trans %}participants{% endtrans %}</label>
														<label> <input type="checkbox" name="wfDelayEsclNotifyParticipants" value="A" class="inpRadioChkbox">{% trans %}author{% endtrans %}</label> <br><br>{% trans %}and/or{% endtrans %}: <br>
														<textarea id="wfDelayEsclNotifyList" name="wfDelayEsclNotifyList" cols="30" rows="1" readonly="true"></textarea>
														<button type="button" id="btnwfDelayEsclNotifyList" class="ui-icon-group"></button>
													</p>
												</td>
											</tr>
										</table>
									</span>
								</div>
							</div>




						</div><!--- end tabs-->

					</div><!--- end frm-properties-->

					<div id="frm-elements">
						<div id="sidebarContainer"></div>
					</div>

				</div> <!--- end right-panel-tabs-->
				
				
			</div>
			<!--- end layout east-->
		</div>
		<!---end divContentSection--->
	</form>
</body>
</html>