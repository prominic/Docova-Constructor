<!DOCTYPE HTML>
<html>
<head>
<META content="0" http-equiv="expires">
<META content="0" http-equiv="cache-control">
<META content="no-cache" http-equiv="Pragma">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/smoothness/jquery-ui.css') }}">
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/jquery/jquery.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/jquery/jquery-ui.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/Docova.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/sarissa.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/commonFunctions.js') }}" charset="UTF-8"></script>
{% include 'DocovaBundle:Default:scriptMessagesTranslation.html.twig' %}
<script language="JavaScript" type="text/javascript">
var objView = null, //view object
	currentPerspective="", //current perspective id
	docInfo = null,
	currentEntry = null;

var info = {
  "UserName" : "{{ user.getUserNameDn|replace({'\\': '\\\\'}) }}",
  "UserNameAB" : "{{ user.getUserNameDnAbbreviated|replace({'\\': '\\\\'}) }}",
  "UserNameCN" : "{{ f_Name("[CN]", user.getUserNameDnAbbreviated)|replace({'\\': '\\\\'}) }}",
  "DbAccessLevel" : "6",
  "HTTP_Referer" : "{{ url('docova_admin_leftNav') }}",
  "Query_String" : "OpenForm&viewname={{ view_name }}&viewtitle={{ view_title }}",
  "Query_String_Decoded" : "OpenForm&viewname={{ view_name }}&viewtitle={{ view_title }}",
  "Path_Info_Decoded" : "{{ path('docova_admin_wAdminContent') }}?OpenForm&viewname={{ view_name }}&viewtitle={{ view_title }}",
  "ServerName" : "{{ app.request.server.get('HTTP_HOST') }}",
  "ServerUrl" : "{{ app.request.getscheme }}://{{ app.request.server.get('HTTP_HOST') }}",
  "NsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
  "PortalWebPath" : "{{ path('docova_homepage')[:path('docova_homepage')|length - 1] }}",
  "PortalNsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
  "imgPath" : "{{ asset('bundles/docova/images/') }}",
  "LoadDoc" : "",
  "FolderID" : "",
  "FolderParentID" : "",
  "FolderName" : "",
  "EnableFolderFiltering" : "",
  "CanCreateDocuments" : "true",
  "CanSoftDeleteDocuments" : "true",
  "CanDeleteDocuments" : "true",
  "DefaultPerspective" : "",
  "FolderPerspectives" : "",
  "FolderViewTitle" : "{{ view_title }}", 
  "FolderViewName" : "{{ view_name }}",
  "FolderType" : "V",
  "canCreateUserProfile" : "true",
  "canCreateLibraries" : "true",
  "canCreateReviewPolicy" : "",
  "canCreateArchivePolicy" : "",
  "canCreateFileTemplate" : "",
  "canCreateCustomColumn" : "",
  "canCreateDocumentType" : "true",
  "canCreateWorkFlowProcess" : "",
  "canCreateViewColumns" : "",
  "canCreateCustomSearchFields" : "",
  "canCreateHtmlResource" : "",
  "cloudUserProfileCount" : "10",
  "cloudMaxUsersAllowed" : "0",
  "cloudLibraryCount" : "3",
  "cloudMaxLibrariesAllowed" : "0",
  "cloudMaxWorkFlowAllowed" : "0",
  "cloudEditionType" : "C",
  "cloudEditionTypeFullName" : "DOCOVA Company Edition",
  "DocovaEnvironment" : "Internal",
  "viewNameList" : "wAdminLibraries,wAdminApplications,wAdminDocTypes,wAdminWorkflow,wAdminUserProfiles,wAdminUserSessions,wAdminDeletedUsers,wAdminDataSources,wAdminDataViews,wAdminGroups,wAdminReviewPolicies,wAdminArchivePolicies,wAdminViewColumns,wAdminCustomSearchFields,wAdminSystemMessages,wAdminHTMLResource,wAdminFileTemplates,wAdminFileResources,wAdminActivities,wAdminVideo,wAdminAutoFileRules",
  "addDocFormList" : "Library,Application,DocumentType,WorkflowDefinition,UserProfile,UserSession,DeletedUsers,DataSource,DataView,Group,ReviewPolicy,ArchivingPolicy,ViewColumn,CustomSearchField,SystemMessage,HTMLResource,FileTemplate,FileResource,Activity,Video,AutoFileRule",
  "refreshView" : '{% trans %}Refresh view{% endtrans %}',
  "selectAll" : '{% trans %}Select All{% endtrans %}',
  "deselectAll" : '{% trans %}Deselect All{% endtrans %}',
  "expandAll" : '{% trans %}Expand All{% endtrans %}',
  "collapseAll" : '{% trans %}Collapse All{% endtrans %}',
  "sortAscending" : '{% trans %}Sort ascending{% endtrans %}',
  "sortDescending" : '{% trans %}Sort descending{% endtrans %}',
  "sortDefault" : '{% trans %}Default sort{% endtrans %}',
  "deleteColumn" : '{% trans %}Delete column{% endtrans %}',
  "insertColumn" : '{% trans %}Insert column{% endtrans %}',
  "appendColumn" : '{% trans %}Append column{% endtrans %}',
  "categorize" : '{% trans %}Categorize{% endtrans %}',
  "properties" : '{% trans %}Properties{% endtrans %}',
  "SessionDateFormat" : '{{ settings.getDefaultDateFormat }}'
};

function getinfovar() {
	return info;
}

jQuery(function() {
	InitPage();

	$("#viewContainer").disableSelection();

	jQuery('.addBtn')
		.button()
		.click(function(e) {
			e.preventDefault();
			var viewnamelist = docInfo.viewNameList.split(',');
			var docformlist = docInfo.addDocFormList.split(',');
	
			var docovaMessage='{% trans %}Creation of documents is limited/restricted in this edition of DOCOVA.{% endtrans %}';
			docovaMessage +=' {% trans %}In order to use this  feature please upgrade your DOCOVA license subscription to either Company or Enterprise Edition.{% endtrans %}';
			docovaMessage +=' {% trans %}For more information please contact DOCOVA sales team at (866) 331-1354.{% endtrans %}';
			var viewname = docInfo.FolderViewName;
			var pos = viewnamelist.indexOf(viewname);
	
			if(pos != -1){
				var newdocform = docformlist[pos];
//				if(oktocreate(newdocform,viewname)){
					ViewCreateDocument(newdocform);
/*				}else{
					Docova.Utils.MessageBox({
						prompt : docovaMessage,
						icontype : 64,
						title : docInfo.cloudEditionTypeFullName
					});
				}
*/
			}
		});

	$('#importLDAPGroup')
		.button()
		.click(function(e) {
			e.preventDefault();
			var importDlg = window.top.Docova.Utils.createDialog({
				id: "dlgImportADGroup",
				url: docInfo.ServerUrl + "/" + docInfo.NsfName + "/importLDAPGroup",
				title: "{% trans %}Import LDAP Group{% endtrans %}",
				width: 325,
				height: 530,
				useiframe: true,
				buttons: {
					"{% trans %}OK{% endtrans %}" : function() {
						//var result = $("#dlgImportADGroupIFrame")[0].contentWindow.handleOkClick();
						var result = jQuery("#dlgImportADGroupIFrame", this).get(0).contentWindow.handleOkClick();
						if (result !== false) {
							importDlg.closeDialog();
						}
					},
					"{% trans %}Cancel{% endtrans %}" : function() {
						//var result = $("#dlgImportADGroupIFrame")[0].contentWindow.handleCancelClick();
						var result = jQuery("#dlgImportADGroupIFrame", this).get(0).contentWindow.handleCancelClick();
						importDlg.closeDialog();
					}
				}
			});
		});

	$('.editBtn')
		.button()
		.click(function(e) {
			e.preventDefault();
			Docova.Utils.menu({
				delegate : $(e.target).parent(),
				menus : [
					{ title : 'Select All', action : 'selectAll()' },
					{ title : 'Deselect All', action : 'deselectAll()' },
					{ separator : true },
					{ 
						title : (docInfo.FolderViewName == 'wAdminDeletedUsers' ? 'Reinstate Selected' : 'Delete Selected'), 
						action : (docInfo.FolderViewName == 'wAdminDeletedUsers' ? 'ViewReinstateUser()' : 'deleteSelectedEntries()'), 
						disabled : $('#viewContent input:checked').length < 1 
					}
				]
			});
		});

	$('#perspective').on('contextmenu', function(e) {
		e.preventDefault();
		var targetElm = e.target.nodeName.toLowerCase() == 'td' ? $(e.target) : ($(e.target).closest('td'));
		if (targetElm.hasClass('listselheader')) {
			Docova.Utils.menu({
				delegate : e,
				position : 'XandY',
				menus : [
					{ title : "Refresh view", action : "ViewLoadData()" },
					{ separator : true },
					{ title : "Select all", action : "selectAll()"},
					{ title : "Deselect all", action : "deselectAll()"},
					{ separator : true },
					{ title : "Expand all", action : "expandAll()", disabled : ($('#viewContent .listexpandericon[alt=expand]').length ? false : true) },
					{ title : "Collapse all", action : "collapseAll()", disabled : ($('#viewContent .listexpandericon[alt=collapse]').length ? false : true)}
				]
			});
		}
		else {
			Docova.Utils.menu({
				delegate : e,
				position : 'XandY',
				colindex : targetElm.index(),
				menus : [
					{ title : "Sort ascending", action : "sortDataTable(this, 'asc')", disabled : targetElm.has('img').length < 1, itemicon : (targetElm.has('img[src$="sortadred-asc.gif"]').length ? 'ui-icon-check' : '') },
					{ title : "Sort descending", action : "sortDataTable(this, 'desc')", disabled : targetElm.has('img').length < 1, itemicon : (targetElm.has('img[src$="sortadred-desc.gif"]').length ? 'ui-icon-check' : '') },
					{ title : "Default sort", action : "sortDataTable(this)", disabled : targetElm.has('img').length < 1, itemicon : (targetElm.has('img[src$="sort-n-default.gif"]').length ? 'ui-icon-check' : '') },
				]
			});
		}
	});

	$('.listsorticon').on('click', function() {
		if ($(this).prop('src').indexOf('sort-n-default.gif') != -1) {
			sortDataTable($(this).parent(), 'asc');
		}
		else if ($(this).prop('src').indexOf('sortadred-asc.gif') != -1) {
			sortDataTable($(this).parent(), 'desc');
		}
		else {
			sortDataTable($(this).parent());
		}
	});

	$('.listviewrefresh').on('click', function() {
		ViewLoadData();
	});

	$('#viewContent').on('click', function(e) {
		//$(this).focus();
		var target = $(e.target).parent().prop('nodeName').toLowerCase() == 'tr' ? $(e.target).parent() : $(e.target).parentsUntil('tr').parent();
		if (target.has('.listexpandericon').length < 1) {
			$('#viewContent tr.highlight').removeClass('highlight');
			$(e.target).closest('tr').addClass('highlight');
			currentEntry = $(e.target).parent().find('input').val();
		}
		e.stopPropagation();
	});

	$('#viewContent').on('click', '.reinstate', function(e) {
		currentEntry = $(e.target).parent().parent().find('input').val();
		ViewReinstateUser();
	});

	$('#viewContent').on('click', '.listexpandericon', function(e) {
		if ($(this).prop('alt') == 'collapse') {
			$('#viewContent .' + $.trim($(this).prop('id')) + ' .listexpandericon[alt=collapse]').click();
			$(this).prop('src', docInfo.imgPath + 'cat-expand.gif');
			$(this).prop('alt', 'expand');
			$('#viewContent .' + $.trim($(this).prop('id'))).hide();
		}
		else {
			$(this).prop('src', docInfo.imgPath + 'cat-collapse.gif');
			$(this).prop('alt', 'collapse');
			var rClass = $(this).closest('tr').attr('class') ? ($(this).closest('tr').attr('class') + ' ') : '';
			$('#viewContent tr[class="' + rClass + $.trim($(this).prop('id'))+'"]').show();
		}
	});
	
	$('#viewContent').on('contextmenu', function(e) {
		e.preventDefault();
		if (!$(e.target).closest('tr').has('input[type=checkbox]').length) { return; }
		$(e.target).click();
		if (docInfo.FolderViewName != 'wAdminDeletedUsers' && docInfo.FolderViewName != 'wAdminSubscribedLibraries')
		{
			Docova.Utils.menu({
				delegate : e,
				position : 'XandY',
				menus : [
					{ title : "Open", action : "openSelectedDocument()" },
					{ title : "Delete", action : "deleteSelectedEntries()"}
				]
			});
		}
	});

	$('#viewContent').on('keydown', function(e) {
		var DEL_KEY = 46;
		var ENTER_KEY = 13;
		var DOWNARROW_KEY = 40;
		var UPARROW_KEY = 38;
		var SPACE_KEY1= 0;
		var SPACE_KEY2= 32;
		var ESC_KEY= 27;
		var currentRow = $(this).find('.highlight');

		e.preventDefault();
		if (currentRow.length)
		{
			currentEntry = currentRow.find('input').val();
			if (e.which == UPARROW_KEY && currentRow.prevAll(':not(:hidden)').has('input').length) {
				currentRow.removeClass('highlight');
				currentRow.prevAll(':not(:hidden)').has('input').first().addClass('highlight');
			}
			else if(e.which == DOWNARROW_KEY && currentRow.nextAll(':not(:hidden)').has('input').length) {
				currentRow.removeClass('highlight');
				currentRow.nextAll(':not(:hidden)').has('input').first().addClass('highlight');
			}

			if(e.which == DEL_KEY)
			{
				//objView.serviceAgent=objView.serviceAgent + "vw=w"
				deleteSelectedEntries(currentRow);
			}

			if (e.which == ENTER_KEY)
			{
				openSelectedDocument(currentRow);
			}

			if (e.which == ESC_KEY)
			{
				currentRow.removeClass('highlight');
				currentEntry = null;
			}
		}

		if (e.which == SPACE_KEY1 || e.which == SPACE_KEY2) {
			if (currentRow.find('input').prop('checked')) {
				currentRow.find('input').prop('checked', false);
			}
			else {
				currentRow.find('input').prop('checked', true);
			}
		}
		
	});

	$('#viewContent').on('dblclick', function(e) {
		if (!$(e.target).closest('tr').has('input[type=checkbox]').length) { return false; }
		openSelectedDocument(e.target);
	});

	$('#viewContent').on('mousedown', function(event) {
		$('#viewContent').on('mouseenter', 'input', function(e) {
			if (event.target.nodeName.toLowerCase() == 'input') {
				var val = $(event.target).prop('checked');
				$(event.target).prop('checked', !val);
			}
			var val = $(e.target).prop('checked');
			$(e.target).prop('checked', !val);
		});
	})
	.on('mouseup', function() {
		$('#viewContent').unbind("mouseenter");
	});
});

function selectAll() {
	$('#viewContent input').prop('checked', true);
}

function deselectAll() {
	$('#viewContent input').prop('checked', false);
}

function expandAll() {
	$('.listexpandericon[alt=expand]').each(function() {
		$(this).click();
	});
}

function collapseAll() {
	$('#viewContent .listexpandericon[alt=collapse]').each(function() {
		if (!$(this).closest('tr').attr('class')) {
			$(this).click();
		}
	});
}

function deleteSelectedEntries() {
	var amount = $('#viewContent input:checked').length ? $('#viewContent input:checked').length : 1;
	return window.top.Docova.Utils.messageBox({
		prompt : "{% trans with {'%amount%' : '" + amount + "'} %}Are you sure you want to delete the %amount% selected document(s)?{% endtrans %}",
		icontype : 2,
		msgboxtype : 1,
		width : 450,
		onOk : function() {
			var request = '';
			request = "<Request><Action>DELETESELECTED</Action><UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
			if ($('#viewContent input:checked').length)
			{
				$('#viewContent input:checked').each(function() {
					request += "<Unid>" + $(this).val() + "</Unid>";
				});
			}
			else {
				request += "<Unid>" + currentEntry + "</Unid>";
			}
			request += '</Request>';

			completeDeleteProcess(request);
		},
		onCancel : function() {
			return false;
		}
	});
}

function completeDeleteProcess(request)
{
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/AdminViewServices?OpenAgent&vw="+docInfo.FolderViewName;
	window.top.Docova.Utils.showProgressMessage("{% trans %}Processing request. Please wait{% endtrans %}...");
	$.ajax({
		'type' : "POST",
		'url' : url,
		'data' : request,
		'contentType': false,
		'async' : false
	})
	.done(function(response) {
		if (!response) {
			alert("No data received from server");
			window.top.Docova.Utils.hideProgressMessage();
			return false;
		}

		var statusNode = $(response).find('Result[ID="Status"]');
		var status = ((statusNode) ? statusNode.text() : "FAILED");
		var errorNode = $(response).find('Result[ID="ErrMsg"]');
		var error =  ((errorNode) ? errorNode.text() : "");
		if (status == 'FAILED' || status == '') {
			alert(prmptMessages.msgCF005 + "\r" + error);
			window.top.Docova.Utils.hideProgressMessage();
			return false;
		} 
		ViewLoadData();		
	})
	.fail(function(jqXHR, textStatus, errorThrown) {
		if (jqXHR.status != 200) {
			error = jqXHR.status;
			alert(prmptMessages.msgCF006 + ": " + error);
			window.top.Docova.Utils.hideProgressMessage();
			return false;
		}
	});
}

function openSelectedDocument(object) 
{
	if (object) {
		var object = object instanceof jQuery ? object : $(object);
	}
	else {
		var object = $('#viewContent').find('.highlight');
	}
	var index = (docInfo.FolderViewName == 'wAdminWorkflow') ? 2 : 1;
	index = (docInfo.FolderViewName == 'wAdminReviewPolicies') ? 4 : index;
	index = (docInfo.FolderViewName == 'wAdminArchivePolicies') ? 4 : index;
	index = (docInfo.FolderViewName == 'wAdminSubscribedLibraries' ? 3 : index);
	var targetRow = object.prop('nodeName').toLowerCase() == 'tr' ? object : (object.prop('nodeName').toLowerCase() == 'td' ? object.parent() : object.parentsUntil('tr').parent());
	var label = $.trim(targetRow.find('td').eq(index).text()) ? targetRow.find('td').eq(index).text() : targetRow.find('td').eq(index + 1).text();
	qs = '';
	if (docInfo.FolderViewName == 'wAdminWorkflow') {
		qs = ($.trim(targetRow.find('td').eq(5).text())) ? '&wfitem=true' : '';
		label = ($.trim(targetRow.find('td').eq(5).text())) ? $.trim(targetRow.find('td').eq(4).text()) : label;
	}
	ViewLoadDocument(false, label, qs);
}

function sortDataTable(object, type)
{
	var targetCol = null;
	if (typeof $(object).attr('colIndex') != 'undefined')
	{
		targetCol = $('#perspective td:eq(' + $(object).attr('colIndex') + ')');
		if (targetCol.has('img').length < 1) { return; }
	}
	else if (object.prop('nodeName').toLowerCase() != 'td') {
		targetCol = targetCol.parentsUntil('td').parent();
	}
	else {
		targetCol = object;
	}

	if (targetCol)
	{
		var qs = '&sort=',
			qst= '&type=';
		$('#perspective img').each(function() {
			if ($(this).parent().attr('dataSet')) {
				if ($(this).parent().attr('dataSet') != targetCol.attr('dataSet')) {
    				qs += $(this).parent().attr('dataSet') + '~';
    				qst += ($(this).prop('src').indexOf('sortadred-asc.gif') != -1 ? 'asc' : ($(this).prop('src').indexOf('sortadred-desc.gif') != -1 ? 'desc' : '')) + '~';
				}
				else {
					qs += targetCol.attr('dataSet') + '~';
					qst += (type ? type : '') + '~';
				}
			}
		});
		qs = qs.slice(0, -1);
		qst = qst.slice(0, -1);
		qs = qs + qst;
		ViewLoadData(qs);
		if (type == 'asc') {
			targetCol.find('img').attr('src', docInfo.imgPath + 'sortadred-asc.gif');
		}
		else if (type == 'desc') {
			targetCol.find('img').attr('src', docInfo.imgPath + 'sortadred-desc.gif');
		}
		else {
			targetCol.find('img').attr('src', docInfo.imgPath + 'sort-n-default.gif');
		}
	}
}

function InitPage()
{
	docInfo = info;
	ViewLoadData();
}

function ViewLoadData(qs)
{
	window.top.Docova.Utils.showProgressMessage('Receiving records, please wait...');
	var qString = qs ? qs : '';
	if (qString == '') {
		$('#perspective img:not(.listviewrefresh)').prop('src', docInfo.imgPath + 'sort-n-default.gif');
	}
	$('#viewContent').hide();
	$.ajax({
		url : '{{ path('docova_admin_wAdminContent_xml_data') }}?vw=' + docInfo.FolderViewName + qString,
		type : 'GET',
		dataType : 'json'
	})
	.done(function(data) {
		$('#viewContent tr').remove();
		buildDataTable(data);
		$('#viewContent').show();
		$('#viewContainer').height($(window).height() - 40);
		window.top.Docova.Utils.hideProgressMessage();
	})
	.fail(function(jqXHR, textStatus, errorThrown) {
		alert(jqXHR +"\n" + textStatus + "\n" +errorThrown);
		alert('Could not complete loading data, try again or contact Administrator.');
		window.top.Docova.Utils.hideProgressMessage();
	});
}

function buildDataTable(dataRows)
{
	if (dataRows.length > 0)
	{
		var thead_rows = $('#perspective td:not(:last-child)'),
			categorizedRows = null,
			ignored = null,
			catIndexes = [];

		thead_rows.each(function(index) {
			if ($(this).attr('categorized') == 'true' && (ignored == null || !ignored.is(this))) {
				var nextClm = $(this).next();
				if (nextClm.attr('categorized') == 'true') {
					ignored = nextClm,
					rows = null;
					for (var x = 0; x < dataRows.length; x++) {
						if (categorizedRows == null || !(dataRows[x][$(this).attr('dataSet')] in categorizedRows)) {
							categorizedRows = categorizedRows == null ? [] : categorizedRows;
							categorizedRows[dataRows[x][$(this).attr('dataSet')]] = [];
							categorizedRows[dataRows[x][$(this).attr('dataSet')]][dataRows[x][nextClm.attr('dataSet')]] = {'Rows' : []};
							rows = categorizedRows[dataRows[x][$(this).attr('dataSet')]][dataRows[x][nextClm.attr('dataSet')]]['Rows'];
							for (var c = 0; c < dataRows.length; c++) {
								if (dataRows[c][$(this).attr('dataSet')] == dataRows[x][$(this).attr('dataSet')] && dataRows[c][nextClm.attr('dataSet')] == dataRows[x][nextClm.attr('dataSet')]) {
									rows.push(dataRows[c]);
								}
							}
						}
						else if ((dataRows[x][$(this).attr('dataSet')] in categorizedRows) && !(dataRows[x][nextClm.attr('dataSet')] in categorizedRows[dataRows[x][$(this).attr('dataSet')]])) {
							categorizedRows[dataRows[x][$(this).attr('dataSet')]][dataRows[x][nextClm.attr('dataSet')]] = {'Rows' : []};
							rows = categorizedRows[dataRows[x][$(this).attr('dataSet')]][dataRows[x][nextClm.attr('dataSet')]]['Rows'];
							for (var c = 0; c < dataRows.length; c++) {
								if (dataRows[c][$(this).attr('dataSet')] == dataRows[x][$(this).attr('dataSet')] && dataRows[c][nextClm.attr('dataSet')] == dataRows[x][nextClm.attr('dataSet')]) {
									rows.push(dataRows[c]);
								}
							}
						}
					}
				}
				else {
					for(var x = 0; x < dataRows.length; x++) {
						if (categorizedRows == null || !(dataRows[x][$(this).attr('dataSet')] in categorizedRows)) {
							categorizedRows = categorizedRows == null ? [] : categorizedRows;
							categorizedRows[dataRows[x][$(this).attr('dataSet')]] = {'Rows': []};
						}
						categorizedRows[dataRows[x][$(this).attr('dataSet')]]['Rows'].push(dataRows[x]);
					}
				}
			}
		});

		if (categorizedRows != null) 
		{
			for (var cat in categorizedRows) {
				var catClasses = [];
				var rows_html = buildSubCategoryRows(cat, categorizedRows[cat], thead_rows, catClasses, 1);
				$('#viewContent').append(rows_html);
			}
		}
		else {
			var rows_html = buildTableRows(dataRows, thead_rows); 
			$('#viewContent').append(rows_html);
		}
	}
}

function buildSubCategoryRows(title, catRows, thead_rows, classes, index)
{
	var rows_html = '',
		createds = [];
	for (var cat in catRows) {
		if (createds.indexOf(title) == -1) {
			var rClass = classes.join(' ');
			rows_html += '<tr class="'+ rClass +'"><td class="listsel"></td>';
			var styles = thead_rows.eq(index).attr('fsize') ? ('font-size:' + thead_rows.eq(index).attr('fsize') + ';') : '';
			styles += thead_rows.eq(index).attr('taling') ? ('text-align: ' + thead_rows.eq(index).attr('taling') + ';') : '';
			styles += thead_rows.eq(index).attr('ffamily') ? ('font-family:' + thead_rows.eq(index).attr('ffamily') + ';') : '';
			styles += thead_rows.eq(index).attr('fweight') ? ('font-weight:' + thead_rows.eq(index).attr('fweight') + ';') : '';
			styles += thead_rows.eq(index).attr('fcolor') ? ('color:' + thead_rows.eq(index).attr('fcolor') + ';') : '';
			styles += thead_rows.eq(index).attr('bgcolor') ? ('background-color:' + thead_rows.eq(index).attr('bgcolor') + ';') : '';
			for (var x = 1; x < index; x++) {
				rows_html += '<td class="listitem"></td>';
			}
			var cid = Math.round(Math.random() * 10000);
			rows_html += '<td colspan="'+ (thead_rows.length - index + 1) +'" class="listitem" style="border-bottom:2px #aaccff solid; '+styles+'">';
			rows_html += '<IMG class="listexpandericon" src="'+ docInfo.imgPath +'cat-collapse.gif" alt="collapse" id="cat_'+cid+'">&nbsp;';
			rows_html += title + '</td></tr>';
			if (classes.indexOf('cat_'+cid) == -1) {
				classes.push('cat_' + cid);
			}
			createds.push(title);
		}

		if (!('Rows' in catRows)) {
			retHTML = buildSubCategoryRows(cat, catRows[cat], thead_rows, classes, (index + 1));
			if (retHTML != '') {
				classes.pop();
			}
			rows_html += retHTML;
		}
		else {
			retHTML = buildTableRows(catRows[cat], thead_rows, classes);
			if (retHTML != '') {
				classes = [];
			}
			rows_html += retHTML;
		}
	}
	return rows_html;
}

function buildTableRows(dataRows, thead_rows, category)
{
	var tr = '';
	category = (category && category.length) ? category.join(' ') : '';
	for (var x = 0; x < dataRows.length; x++)
	{
		var row = dataRows[x];
		tr += '<tr' + (category ? ' class="'+category+'"' : '')+ '>';
		thead_rows.each(function(index) {
			var styles = $(this).attr('fsize') ? ('font-size:' + $(this).attr('fsize') + ';') : '';
			styles += $(this).attr('taling') ? ('text-align: ' + $(this).attr('taling') + ';') : '';
			styles += $(this).attr('ffamily') ? ('font-family:' + $(this).attr('ffamily') + ';') : '';
			styles += $(this).attr('fweight') ? ('font-weight:' + $(this).attr('fweight') + ';') : '';
			styles += $(this).attr('fcolor') ? ('color:' + $(this).attr('fcolor') + ';') : '';
			styles += $(this).attr('bgcolor') ? ('background-color:' + $(this).attr('bgcolor') + ';') : '';
			if ($(this).is(':hidden')) {
				tr += '<td style="display:none">' + (row[$(this).attr('dataSet')] ? row[$(this).attr('dataSet')] : '') + '</td>';
			}
			else if (typeof $(this).attr('dataSet') == 'undefined') {
				tr += '<td class="listsel cn" style="width:' +($(this).width()+1)+ 'px; '+styles+'"><input type="checkbox" value="'+ row.dockey +'" /></td>';
			}
			else {
				if ($(this).attr('categorized') == 'true') {
					tr += '<td class="listitem" style="width:' +($(this).width()+1)+ 'px; '+styles+'"></td>';
				}
				else {
					if ($(this).attr('dataType') == 'html') {
						if (row[$(this).attr('dataSet')]) {
							var imgClass = docInfo.FolderViewName == 'wAdminDeletedUsers' ? 'class="reinstate"' : '';
							tr += '<td class="listitem" style="width:' +($(this).width()+1)+ 'px; '+styles+'"><img '+ imgClass +' src="' + docInfo.imgPath + 'icons/' + row[$(this).attr('dataSet')] +'" /></td>';
						}
						else {
							tr += '<td class="listitem" style="width:' +($(this).width()+1)+ 'px;" '+styles+'></td>';
						}
					}
					else {
						if (index === (thead_rows.length)) {
							tr += '<td class="listitem" style="'+styles+'">'+ (row[$(this).attr('dataSet')] ? row[$(this).attr('dataSet')] : '') +'</td>';
						}
						else {
							tr += '<td class="listitem" style="width:' +($(this).width()+1)+ 'px; '+styles+'">'+ (row[$(this).attr('dataSet')] ? row[$(this).attr('dataSet')] : '') +'</td>';
						}
					}
				}
			}
		});
		tr += '<td class="listitem" style="width:auto;"></td>';
		tr += '</tr>';
	}
	return tr;
}

function ViewReinstateUser()
{
	var users = '',
		count = 0;
	if ($('#viewContent input:checked').length == 0) {
		users += '<UserKey>' + currentEntry + '</UserKey>';
		count = 1;
	}
	else if ($('#viewContent input:checked').length > 0) 
	{
		count = $('#viewContent input:checked').length;
		$('#viewContent input:checked').each(function() {
			users += '<UserKey>' + $(this).val() + '</UserKey>';
		});
	}
	if (users != '') {
		window.top.Docova.Utils.messageBox({
			icontype: 2,
			msgboxtype: 4,
			width: 450,
			title: '{% trans %}Reinstate User{% endtrans %}',
			prompt: "{% trans with {'%count%':'" + count + "'} %}You are about to reinstate %count% deleted user.\n\rWould you like to continue?{% endtrans %}",
			onYes: function() {
		    	window.top.Docova.Utils.showProgressMessage("{% trans %}Updating library design. Please wait{% endtrans %}...");
				var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/AdminViewServices?vw=wAdminDeletedUsers&" + Math.random(),
			    	request = "<Request>";
			    request += "<Action>REINSTATEUSER</Action>";
			    request += users;
			    request += "</Request>";

			    completeDeleteProcess(request);
			},
			onNo: function() {
				return false;
			}
		});
	}
	else {
		alert('Please select at least a user to be reinstated.');
	}
}

//---------------------------- create new document ----------------------------
function ViewCreateDocument(formname)
{
		docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/" + formname + "?OpenForm&ParentUNID=";
		ViewLoadDocument(docUrl);
}

function ViewLoadDocument(docUrl, label, qString)
{
	var id = null;
	if(!docUrl && currentEntry)
	{
		if (docInfo.FolderViewName == "wAdminSubscribedLibraries"){
			docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/adminReadDocument/" + docInfo.FolderViewName + '/' + currentEntry + "?OpenDocument";
		}else if (docInfo.FolderViewName == "wAdminApplications") {
			docUrl = docInfo.ServerUrl + docInfo.PortalWebPath + "/ApplicationDocKey/" + currentEntry + '?editDocument&source=admin';
		}else{
			var currEnt = docInfo.FolderViewName == "wAdminWorkflow" ? currentEntry.replace('W-', '') : currentEntry;
			id = currEnt;
			docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/adminReadDocument/" + docInfo.FolderViewName + '/' + currEnt + "?OpenDocument&ParentUNID=" + qString;
		}
			
		
	}
	if(!docUrl) {
		return window.top.Docova.Utils.messageBox({
			prompt : "{% trans %}Document Url cannot be located.{% endtrans %}",
			icontype : 16,
			title : "Error"
		});
	}
	var newtitle = '{% if view_title == 'Libraries' %}{% trans %}New Library{% endtrans %}'
	{% elseif view_title=='Document Types' %}{% trans %}New Document Type{% endtrans %}'
	{% elseif view_title=='Workflow Processes' %}{% trans %}New Workflow{% endtrans %}'
	{% elseif view_title=='Review Policies' %}{% trans %}New Review Policy{% endtrans %}'
	{% elseif view_title=='Archive Policies' %}{% trans %}New Archive Policy{% endtrans %}'
	{% elseif view_title=='File Templates' %}{% trans %}New File Template{% endtrans %}'
	{% elseif view_title=='File Resources' %}{% trans %}New File Resource{% endtrans %}'
	{% elseif view_title=='Data Sources' %}{% trans %}New Data Source{% endtrans %}'
	{% elseif view_title=='Data Views' %}{% trans %}New Data View{% endtrans %}'
	{% elseif view_title=='View Columns' %}{% trans %}New View Column{% endtrans %}'
	{% elseif view_title=='Custom Search Fields' %}{% trans %}New Search Field{% endtrans %}'
	{% elseif view_title=='System Messages' %}{% trans %}New System Message{% endtrans %}'
	{% elseif view_title=='HTML Resources' %}{% trans %}New HTML Resource{% endtrans %}'
	{% elseif view_title=='Activities' %}{% trans %}New Activity{% endtrans %}'
	{% elseif view_title=='User Profiles' %}{% trans %}New User Profile{% endtrans %}'
	{% elseif view_title=='Groups' %}{% trans %}New Group{% endtrans %}'
	{% else %}'
	{% endif %};
	// call to add and create new and frame
	label = (!label) ? newtitle : label;
	openNewTab(docUrl, label, id);
}

//Adds tab and creates frame for that
function openNewTab(docUrl, tab_label, id)
{
	var obj = window.parent.frames['fraAdminContentTop'];
	var fsContainer = parent.document.getElementById("fsAdminContentFrameset");
	if (obj == null || !fsContainer){
		return;
	}

	//check amount of existing tabs
	var id = !id ? Math.round(Math.random() * 10000) : id;
	/*
	var count = obj.tabs.tabs('option', 'active', (obj.tabs.find('li').length - 1));
	alert(count.find('a:last').parent().html());
	count = count.find('a:last').attr('id');
	count = count.replace('ui-id-', '');
	count = parseInt(count);
	*/
	// call addTab function (which is in topTabFrame) and create
	obj.addTab(tab_label, id);

	// create new frame and append it
	var newFrame = parent.document.createElement("frame");
	newFrame.id = 'fraTabs' + id;
	newFrame.name = 'fraTabs' + id;
	newFrame.scrolling = 'no';

	fsContainer.appendChild(newFrame);

	var rows_str = '40,';
	for (var x = 2; x < parent.fsAdminContentFrameset.children.length; x++) {
		rows_str += '0,';
	}
	rows_str += '*';
	parent.fsAdminContentFrameset.rows = rows_str;
	var tmp = parent.document.getElementById('fraTabs' + id);
	tmp.src = docUrl;
}
</script>
<style type="text/css">
BODY {
	MARGIN: 0px; FONT: 11px Verdana,  Arial, sans-serif; COLOR: black; scroll: no;
}
FORM { width: 98.5%; }
#btnContainer {
	width: 100%;
	height: 29px;
	display: block;
	margin-bottom: 1px;
	padding: 5px 0 2px 14px;
}
#viewContainer {
	height: 400px;
	width: 100%;
	overflow: auto;
}
#vDataTable {
	width: 100%;
	table-layout: fixed;
	vertical-align: top;
	border-spacing: 0px;
	border-collapse: separate;
}
#perspective {
	width : 100%;
	line-height: 19px;
	border-bottom: 1px #BBB solid;
}
#viewContent {
	width: 100%;
}
#viewContent td {
	color: inherit;
	padding-left: 3px;
	line-height: 17px;
	overflow-x: hidden;
	border-bottom: 1px #BBB solid;
}
.cn { text-align: center; }
tr:not(.highlight) .listsel {
	background-color: #EFEFEF;
}
.listsel {
	border-right: 1px #BBB solid;
	padding-left: 1px !important;
}
.listselheader {
	border-right: 1px #CCC solid;
	white-space: nowrap;
}
.listheader {
	border-right: 1px #CCC solid;
	white-space: nowrap;
	padding-left: 3px;
}
.highlight {
	background-color: #2070b0;
	color: #FFF;
}
.listexpandericon {
	float: left;
	margin-left: 0px;
	margin-top: 3px;
	cursor: pointer;
}
.reinstate {
	cursor: pointer;
}
</style>
</head>
<body text="#000000" bgcolor="#FFFFFF" SCROLL="no" width="99%">
	{% if view_name == 'wAdminLibraries' %}
		{% set addBtnLabel = 'Add Library'|trans %}
	{% elseif view_name == 'wAdminSystemMessages' %}
		{% set addBtnLabel = 'Add New System Message'|trans %}
	{% elseif view_name == 'wAdminWorkflow' %}
		{% set addBtnLabel = 'Add Workflow'|trans %}
	{% elseif view_name == 'wAdminFileTemplates' %}
		{% set addBtnLabel = 'Add New Template'|trans %}
	{% elseif view_name == 'wAdminViewColumns' %}
		{% set addBtnLabel  = 'Add New Column'|trans %}
	{% elseif view_name == 'wAdminUserProfiles' %}
		{% set addBtnLabel = 'Add User'|trans %}
	{% elseif view_name == 'wAdminGroups' %}
		{% set addBtnLabel = 'Add Group'|trans %}
	{% elseif view_name == 'wAdminDocTypes' %}
		{% set addBtnLabel = 'Add Document Type'|trans %}	
	{% elseif view_name == 'wAdminReviewPolicies' %}
		{% set addBtnLabel = 'Add Review Policy'|trans %}
	{% elseif view_name == 'wAdminArchivePolicies' %}
		{% set addBtnLabel = 'Add Archive Policy'|trans %}		
	{% elseif view_name == 'wAdminHTMLResource' %}
		{% set addBtnLabel = 'Add New HTML Resource'|trans %}
	{% elseif view_name == 'wAdminCustomSearchFields' %}
		{% set addBtnLabel = 'Add New Field'|trans %}
	{% elseif view_name == 'wAdminActivities' %}
		{% set addBtnLabel = 'Add New Activity'|trans %}
	{% elseif view_name == 'wAdminFileResources' %}
		{% set addBtnLabel = 'Add New File Resource'|trans %}
	{% elseif view_name == 'wAdminDataSources' %}
		{% set addBtnLabel = 'Add New Data Source'|trans %}
	{% elseif view_name == 'wAdminDataViews' %}
		{% set addBtnLabel = 'Add New Data Views'|trans %}
	{% endif %}
<form method="post" action="{{ path('docova_admin_wAdminContent') }}?OpenForm&amp;Seq=1&amp;viewname={{ view_name }}&amp;viewtitle={{ view_title }}" name="_AdminContent">
	<div id="btnContainer">
		{% if view_name not in ['wAdminCheckedOutFiles','wAdminSubscribedLibraries','wAdminDeletedUsers','wAdminUserSessions','wAdminApplications'] %}
		<a class="addBtn">{{ addBtnLabel }}</a>
		{% endif %}
		{% if view_name == 'wAdminGroups' %}
		<a id="importLDAPGroup">{% trans %}Import LDAP Group{% endtrans %}</a>
		{% endif %}
		<a class="editBtn">{% trans %}Edit{% endtrans %} ...</a>
	</div>
</form>
<div id="viewContainer">
<table id="vDataTable">
	<thead id="perspective" class="ui-widget-header ui-state-hover">
		<tr>
			<td class="listselheader cn" width="30" hasProperties="true"><img id="listviewrefresh" class="listviewrefresh" title="{% trans %}Refresh{% endtrans %}" alt="{% trans %}Refresh{% endtrans %}" src="{{ asset('bundles/docova/images/viewRefreshGreen.gif') }}"></td>
			{% for column in table_perspective %}
			<td class="listheader" categorized="{{ column['isCategorized'] ? 'true' : '' }}" dataSet="{{ column['dataSet'] }}" dataType="{{ column['dataType'] }}" {{ column['width'] == 0 ? (' style="display:none;" ')|raw : (' width="'~column['width']~'"')|raw }} {{ column['align'] ? ('taling="'~column['align']~'"')|raw : '' }} {{ column['fontSize'] ? ('fsize="'~column['fontSize']~'"')|raw : '' }} {{ column['fontFamily'] ? ('ffamily="'~column['fontFamily']~'"')|raw : '' }} {{ column['fontWeight'] ? ('fweight="'~column['fontWeight']~'"')|raw : '' }} {{ column['color'] ? ('fcolor="'~column['color']~'"')|raw : '' }} {{ column['backgroundColor'] ? ('bgcolor="'~column['backgroundColor']~'"')|raw : '' }}>
				{{ column['title'] }}{% if column['hasCustomSort'] == 1 %} <img class="listsorticon" src="{{ asset('bundles/docova/images/' ~ (column['sortOrder'] == 'none' ? 'sort-n-default.gif' : (column['sortOrder'] == 'ascending' ? 'sortadred-asc.gif' : 'sortadred-desc.gif'))) }}" />{% endif %}
			</td>
			{% endfor %}
			<td class="listheader"></td>
		</tr>
	</thead>
	<tbody tabindex="0" id="viewContent"></tbody>
</table>
</div>
<div id="divViewEventCapture">
<!-------------------------- scrollable content----------------------->
<!--- End event capture area ----->
</div>
<!--- BEGIN Folder filter components----->
<div id="SelectFilterDiv" style="display:none; position:absolute;" ></div>
<div id="CurrentFilterDiv" style="display:none; position:absolute; top:0px; left:0px;"></div>
<!--- END Folder filter components----->
<!------------------ SUBFORM sfKillCache ------------>
<!------------------Microsoft suggestion to force no cacheing of documents------------>
<HEAD>
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="CACHE-CONTROL" CONTENT="0">
<META HTTP-EQUIV="EXPIRES" CONTENT="0">
</HEAD>
<!------------------END SUBFORM sfKillCache  ------------>
</body>
</html>