<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<META HTTP-EQUIV="Pragma" CONTENT="no-cache"> <META HTTP-EQUIV="CACHE-CONTROL" CONTENT="0"> <META HTTP-EQUIV="EXPIRES" CONTENT="0">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/styleFolderBase.css') }}" type="text/css" />
<script type="text/javascript" language="JavaScript" src="{{ asset('bundles/docova/jquery/jquery.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/commonFunctions.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/viewObjects.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/popupmenu.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/toolbar.js') }}" charset="UTF-8"></script>
<link rel="stylesheet" href="{{ asset('bundles/docova/css/facetMapDiv.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/css/YUI_slider_257.css') }}" type="text/css" />
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/YUI_yahoo-dom-event_257.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/YUI_dragdrop-min_257.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/YUI_slider-min_257.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript">
var objView = null; //view object
var currentPerspective=""; //current perspective id
//------------------------ facetmaps -------------------------------
var currentFacetMapsFields="";
var facetMapFieldsXML="";
var info = {
	  "DocID" : "{{ folder.getId }}",
	  "DocKey" : "{{ folder.getId }}",
	  "UserName" : "{{ user.getUserNameDn|replace({'\\': '\\\\'}) }}",
	  "UserNameAB" : "{{ user.getUserNameDnAbbreviated|replace({'\\': '\\\\'}) }}",
	  "UserNameCN" : "{{ f_Name("[CN]", user.getUserNameDnAbbreviated)|replace({'\\': '\\\\'}) }}",
	  "isRecycleBin" : "",
	  "CanCreateDocuments" : "true",
	  "CanSoftDeleteDocuments" : "true",
	  "CanDeleteDocuments" : "true",
	  "CanCreateRevisions" : "",
	  "DocAccessLevel" : "7",
	  "DocAccessRole" : "Manager",
	  "DbAccessLevel" : "7",
	  "CutCopyPaste" : "",
	  "HTTP_Referer" : "{{ url('docova_homepage') }}?ReadForm&goto=DK246276FD356C8E1F852578CA005F9268,{{ folder.getId }}",
	  "Query_String" : "OpenDocument&syncnav=1",
	  "Query_String_Decoded" : "OpenDocument&syncnav=1",
	  "Path_Info_Decoded" : "{{ path('docova_allbydockey', {'key' : folder.getId}) }}?OpenDocument&syncnav=1",
	  "ServerName" : "{{ app.request.server.get('HTTP_HOST') }}",
	  "ServerUrl" : "{{ app.request.getscheme }}://{{ app.request.server.get('HTTP_HOST') }}",
	  "NsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
	  "LibraryKey" : "{{ folder.getLibrary.getId }}",
	  "PortalWebPath" : "",
	  "PortalNsfName" : "{{ url('docova_homepage') }}",
	  "DocumentTypeOption" : "S",
	  "DocumentType" : "DK-1BA7EF0AEE1DE0B18525724B007A1909",
	  "SyncNav" : "1",
	  "LoadDoc" : "",
	  "FolderID" : "{{ folder.getId }}",
	  "FolderParentID" : "",
	  "FolderName" : "{{ folder.getFolderName }}",
	  "CreatedBy" : "{{ folder.getCreatedBy }}",
	  "CreatedDate" : "{{ folder.getDateCreated|date('Y/m/d H:i:s') }}",
	  "DefaultPerspective" : "custom_DK-D993EE6E4DE26578852578CB005C8738",
	  "FolderPerspectives" : "custom_DK-1D6370FD37E7AE2E8525790A005841E0",
	  "FacetMapID" : "system_default_facetmap",
	  "FacetMapFields" : "F1:1,F9:2,F7:3",
	  "FacetMapName" : "Default Facet Map",
	  "MailAcquireDialogUrl" : "/Docova/Design/DocovaHome.nsf/dlgMailAcquire?OpenForm",
	  "MailAcquireMessagesDialogUrl" : "/Docova/Design/DocovaHome.nsf/dlgMailAcquireMessages?OpenForm",
	  "UserMailSystem" : "N",
	  "RMEEnabled" : "",
	  "fltrFieldNodes" : "0;0;0;0",
	  "EnableFolderFiltering" : "1",
	  "RequirePDFCreator" : "",
	  "UseContentPaging" : "",
	  "MaxDocCount" : "",
	  "DisableBookmarks" : ""
};
function getinfovar() {
	return info;
}
//---------------------------------------------------------------------
var aBar = new objCustomActionBar(false, "aBar");
//aBar.showSubactionIcons=true;
//document.onclick= resetMenu;

//=================== Content Paging ==========================
var typingTimer;                //timer identifier 
 
//on keyup, start the countdown 
function triggerGetPage() { 
	clearTimeout(typingTimer);	
	typingTimer = setTimeout(getPage, 600);  
}  

function selText(obj){
	obj.select();
}

function getPage() {
	if(doc.GetPage.value == "") {return}
	objView.docSubject = doc.GetPage.value;
	objView.exactMatch = false;
	if(docInfo.EnableFolderFiltering == "1"){
		doc.CurrentFilterDiv.innerHTML = "";	
		ClearAllColFilterFlags();
	}
	objView.getTotal = false;
	objView.Refresh(true,true,true);
}

var total = 0;
var count = 0;
var start = 1;
var currCnt = null;
var origCount = 0;	
var buttonsDisabled = null;

function disableContentPaging(disabled){
	if(buttonsDisabled == disabled) {return}
	doc.divContentPaging.disabled = disabled;
	var sKey = "";
	var rKey  = "";
	if(!disabled) { sKey = "-disabled"}
	if(disabled) { rKey = "-disabled"}
	for(x=1; x<=4; x++) {
		navImg = document.getElementById("fsp" + x)
		imgName = navImg.src;
		e = imgName.indexOf(sKey + ".gif");
		navImg.src = imgName.slice(0, e) + rKey + ".gif";
		buttonsDisabled = disabled;
	}
}

function initContentPagingVars() {
	if(doc.divContentPaging.disabled) {return}
	
	total = parseInt(doc.totalCount.innerHTML);
	count = parseInt(objView.docCount);
	start = document.getElementById("startCount");
	currCnt = document.getElementById("currCount");
	if(origCount == 0) { origCount = parseInt(objView.docCount);}
	doc.GetPage.value = "";
	if(docInfo.EnableFolderFiltering == "1"){
		doc.CurrentFilterDiv.innerHTML = "";	
		ClearAllColFilterFlags();
	}
	objView.getTotal = false;
}

function first(){
	initContentPagingVars();
	if(objView.startCount == 1) {return}
	objView.startCount = 1;
	start.innerHTML = 1;
	currCnt.innerHTML = objView.docCount;
	objView.Refresh(true,true,true)	
	doc.GetPage.value = "";
}

function last(){
	initContentPagingVars();
	if(parseInt(currCnt.innerHTML) == total) {return}
	var newStart = total - count;
	objView.startCount = newStart;
	start.innerHTML = newStart;
	currCnt.innerHTML = total
	objView.Refresh(true,true,true)	
}

function next(){
	initContentPagingVars();
	var newStart = parseInt(start.innerHTML) + parseInt(objView.docCount);
	if(newStart >= total) {return}
	objView.startCount = newStart;
	start.innerHTML = newStart;
	var newCnt = (newStart-1) + parseInt(objView.docCount);
	if(newCnt > total) { newCnt = total; }
	currCnt.innerHTML = newCnt;
	objView.Refresh(true,true,true)	
}

function previous(){
	initContentPagingVars();
	var newStart = parseInt(start.innerHTML) - parseInt(objView.docCount);
	if(newStart < 0) {return}
	if(newStart < 1) {newStart = 1;}
	objView.startCount = newStart;
	start.innerHTML = newStart;
	var newCnt = (newStart-1) + parseInt(objView.docCount);
	if(newCnt < parseInt(objView.docCount)) { newCnt = objView.docCount; }
	if(newCnt > total) { newCnt = total; }
	currCnt.innerHTML = newCnt;
	objView.Refresh(true,true,true)
}

var myPopup = window.createPopup();
function getDisplayCount(source){

	initContentPagingVars();	
	var content = "<div style=\"border:1 solid grey;\">";
	var sel = "";
	for(x=1; x<=4; x++) {
		sel = origCount * x;
		content += "<div onclick=\"parent.setDisplayCount('" + sel + "');\" onmouseover=\"this.style.background='#1E90FF';this.style.color='white'\" onmouseout=\"this.style.background='white';this.style.color='black'\">" +
		"<span style=\" font : normal 11px Verdana,  Arial, sans-serif;padding-left:1px\">" + sel + "</span></div>"
	}
	var adj = 0;
	valLength = currCnt.innerHTML.length;
	if(valLength == 3) { adj = 7 }
	showDocCountDiv.innerHTML = content + "</div>";
	var left = getOffset(source).left - 18 - adj ;
	var top = getOffset(source).top + source.offsetHeight
	myPopup.document.body.innerHTML = showDocCountDiv.innerHTML; 
	myPopup.show(left, top, 35 + adj, 60, document.body);
}

function setDisplayCount(selCount) {
	objView.docCount = selCount;
	objView.startCount = 1;
	start.innerHTML = 1;
	var newCnt = parseInt(objView.docCount);
	if(newCnt > total) { newCnt = total; }
	currCnt.innerHTML = newCnt;
	objView.Refresh(true,false,true)
}

//=================== Document Compare ==========================

function CompareSelectedWordDocuments(){

	var PDFCreatorAvailable = true;
	//check whether PDF Creator is installed, which is required to view the comparison results
	//unless the user has printing rights, in which case comparison results may be viewed in Word.
	if(!DLExtensions.isPDFCreatorInstalled()) { PDFCreatorAvailable = false;	}
	
	//check whether PDF Creator is installed, which is required to view the comparison results
	if(PDFCreatorAvailable==false && docInfo.RequirePDFCreator) {
		alert("Unable to run document comparison.  PDF Creator is not installed.");
		return;
	}
	
	//get the docids that have been selected and validate two have been selected
	var docids = objView.selectedEntries;
	if((docids.length > 2) || (docids.length < 2)) {
		alert("Please select two documents to compare.");
		return;
	}
	
	saveCompareDocPath = CompareWordAttachments(docids)
	if(!saveCompareDocPath) {return;}

	if(docInfo.RequirePDFCreator) {		
		ShowProgressMessage("Converting comparison results to PDF..." )
		
		//------------------ convert the compare results to PDF ----------------------------------
		var pdfPath = DLExtensions.ConvertToPDF ( saveCompareDocPath, true, "");
		HideProgressMessage();
		
		//--------------- launch the pdf for viewing ----------------------------
		DLExtensions.LaunchFile(pdfPath);
	} else {
		//launch in Word
		HideProgressMessage();
		DLExtensions.LaunchFile(saveCompareDocPath);
	}	
}

function ResetMenu()
{
	if(aBar)
	{
	if(aBar.curSubactionParent) {aBar.resetSubactionPanel(); }
	}
}

//----- object presence testers ----
function HasUploaderResize()
{
	try	{
		if(SetUploaderDimensions){return true;}
		}
	catch (e)
		{
		return false;
		}
	return false;
}

function HasViewPane()
{
	try	{
		if(ViewLoadDefaultPerspective){return true;}
		}
	catch (e)
		{
		return false;
		}
	return false;
}
// ------------- preloads icons used in view object---------------

function PreloadBaseImages()
{
var curNsf = docInfo.ServerUrl + "{{ asset('bundles/docova/images/') }}";
var imgArray = new Array();
var imgNames = "cat-collapse.gif,cat-expand.gif,coloptions.gif,pincolumn.gif,viewRefreshGreen.gif,chkrbrdclosed.gif,chkrbrdopened.gif,icn16-stddoc.gif,icn16-unknowndoc.gif,icn16-webpage.gif,sortadred-default.gif,popmenu-check.gif";
var imgList = imgNames.split(",");

	for (k=0; k<imgList.length; k++)
	{
	imgArray[k] = new Image();
	imgArray[k].src = curNsf + imgList[k] + "?Open";
	}
}

//--------------------------------------Initializepage --------------------------
function InitPage()
{
	//-----------------------------------	
	ViewAttachEvents();
	if(docInfo.isRecycleBin)
	{
		doc.labelViewOptions.disabled="disabled";
		doc.inpViewScope.disabled="disabled";
		doc.selVersionScope.disabled="disabled";
	}
	if(docInfo.SyncNav){
		try{
			var navFrame = parent.frames['fraLeftFrame'];
			navFrame.SyncFolderContent();
		}
		catch(e) {}
	}

	ViewSetOnloadState();
	ViewLoadDefaultPerspective();
	ViewOpenDoc();
	
	if(objView.contentPaging) {
		doc.totalCount.innerHTML = objView.totalDocCount
	}	
}

// ------------- sets the view object and loads default view perspective---------------
function ViewLoadDefaultPerspective()
{
	objView = new ObjView("divViewContent");
	objView.imgPath = "{{ asset('bundles/docova/images/') }}";
	objView.iconBaseUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/";
	objView.baseUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/";
	objView.baseXmlUrl=docInfo.ServerUrl + "/" + docInfo.NsfName + "/readfolderdataview.xml?OpenAgent" ;
	//objView.baseXmlUrl=docInfo.ServerUrl + "/" + docInfo.NsfName + "/readfolderdataviewqs.xml?OpenAgent" ;
	//objView.isXmlDataRequest=false;
	
	objView.folderID = docInfo.FolderID; 
	objView.thingFactory = thingFactory;
	objView.columnPropertiesDialogUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/dlgViewColumnProperties?OpenForm&FolderID=" + docInfo.FolderID+ "&LibraryID=" + docInfo.LibraryKey; 
	objView.serverName=ServerName;
	objView.nsfName=NsfName;
	objView.serviceAgent=docInfo.ServerUrl + "/" + docInfo.NsfName + "/ViewServices?OpenAgent";
	
	if(docInfo.UseContentPaging == "1") {	
		objView.contentPaging = true;
		objView.docCount = docInfo.MaxDocCount;
	}
 
	ViewLoadPerspective();
	ViewAttachEvents();
}


// ======================= view event handlers =======================

//Global varables
var dragSourceColumn; //column heading being dragged into new location
var dragTargetColumn; //target column heading for dragover and drop 
var selectDragMode; //specifies how the drag selection over checkboxes should be handled
var viewContainer ; //object where the view contents will be plugged
mouseX; //mouse coordinates
mouseY;
// event attacher

function ViewAttachEvents()
{
	var paneObj = document.getElementById("divViewEventCapture");
	if(!paneObj) {return false;}
	paneObj.onmousedown = ViewHandleEvent;
	paneObj.onmouseup = ViewHandleEvent;
	paneObj.onmousemove = ViewHandleEvent;
	paneObj.onmouseover = ViewHandleEvent;
	paneObj.onclick = ViewHandleEvent;
	paneObj.ondblclick = ViewHandleEvent;
	paneObj.onselectstart = ViewHandleEvent;
	paneObj.onkeydown = ViewHandleEvent;
	paneObj.oncontextmenu = ViewHandleEvent;
	//drag drop
	paneObj.ondragstart = ViewHandleEvent;
	paneObj.ondrag = ViewHandleEvent;
	paneObj.ondragenter = ViewHandleEvent;
	paneObj.ondragleave = ViewHandleEvent;
	paneObj.ondrop = ViewHandleEvent;
	
	document.body.onmouseup=ViewClearEventState;
	//document.body.onmouseout=ViewClearEventState;
		
}


//=====================  event dispatcher ===========================
function ViewHandleEvent()
{
    var eventSource = event.srcElement; //what actually fired the event
    var eventType = event.type; 
    var sourceClass=$.trim(eventSource.className); 
    var sourceId=$.trim(eventSource.id); 
    var keyCode = event.keyCode;
    
    var currentRow; //table row containing the eventSource
    var sourceType="";
    
    if(!eventSource){return}

	//------------------ check if there are any event handlers for the event source --------
	 if ( $(eventSource).hasClass("far") ||$(eventSource).hasClass("fas") ||$(eventSource).hasClass("fab")  )
	 {
		if ( $(eventSource).hasClass(objView.categoryExpandClass) || $(eventSource).hasClass(objView.categoryCollapseClass) )
		{
			ViewEventDispatch(event, eventType, eventSource, "categorytoggle", keyCode, currentRow);
			return;
		}else if ($(eventSource).hasClass("fa-sync")  ){
			ViewEventDispatch(event, eventType, eventSource, "viewrefresh", keyCode);
			 return;
		}else if ( $(eventSource).hasClass("sorting")){
			 ViewEventDispatch(event, eventType, eventSource, "viewsort", keyCode);
			 return;
		}
	 }
	
	//------------- clickable images
	if(eventSource.tagName == "IMG" ) 
		{
			if(sourceClass=="listsorticon")
				{
					 ViewEventDispatch(eventType, eventSource, "viewsort", keyCode);
					 return;
				}
				
				else if ( sourceClass=="reflection" || sourceClass=="content portray" || sourceClass=="content landscape"){
					currentRow = eventSource.parentElement;
					 ViewEventDispatch(eventType, eventSource, "coverflow", keyCode,currentRow);
					 return;
				}
			
			else if(sourceClass=="listviewrefresh")
				{
					 ViewEventDispatch(eventType, eventSource, "viewrefresh", keyCode);
					 return;
				}		
			else if(sourceClass=="listexpandericon")
				{
					currentRow = eventSource.parentElement.parentElement.parentElement;
					ViewEventDispatch(eventType, eventSource, "categorytoggle", keyCode, currentRow)
					return;
				}			
		}
	
	//------------ input fields		
	if(eventSource.tagName == "INPUT" )  
			{
				if(sourceId=="inpQuery")
					{
					 	ViewEventDispatch(eventType, eventSource, "ftquery", keyCode);
					 	return;
					}
				if(sourceId=="GetPage") {
					 	return;
				}
			}

	//------------ cells/rows
	while(eventSource.tagName != "BODY")
	{	
	if(eventSource.tagName == "TD" || eventSource.tagName == "TH" || eventSource.tagName =="SPAN" )
		{
		
			if ( sourceClass == "thumbnail" ) {
					currentRow = eventSource;
					ViewEventDispatch(eventType, eventSource, "thumbnail", keyCode, currentRow);
					return;
			}
			currentRow = eventSource.parentElement;
			if(sourceClass=="listheader" || sourceClass=="listheaderfr" || sourceClass=="listheaderfltr" || sourceClass=="listheaderfrfltr") //column heading
				{
					ViewEventDispatch(eventType, eventSource, "viewheader", keyCode, currentRow);
					return;
				}
			else if(sourceClass=="listselheader") //selection column heading
				{
					ViewEventDispatch(eventType, eventSource, "viewselectheader", keyCode, currentRow);
					return;
				}
			else if(sourceClass=="listitem" || sourceClass=="listitemfr") //data or total cell
				{
					if(currentRow.isRecord)
						{
							ViewEventDispatch(eventType, eventSource, "datarow", keyCode, currentRow);
							return;
						}
					if(currentRow.isCategory) 
						{
							ViewEventDispatch(eventType, eventSource, "categoryrow", keyCode, currentRow);
							return;
						}
					if(currentRow.isSubtotal)
						{
							ViewEventDispatch(eventType, eventSource, "subtotalrow", keyCode, currentRow);
							return;
						}
					if(currentRow.isTotal)
						{
							ViewEventDispatch(eventType, eventSource, "totalrow", keyCode, currentRow);
							return;
						}
				}
			else if(sourceClass=="listcat" || sourceClass=="listcatfr") //category heading cell
				{
					ViewEventDispatch(eventType, eventSource,  "categoryrow", keyCode, currentRow);
					return;
				}
			else if(sourceClass=="listsel") //selection margin cell
				{
					ViewEventDispatch(eventType, eventSource,  "selectcell", keyCode, currentRow);
					return;
				}
		}
		eventSource=eventSource.parentElement;
		sourceClass=eventSource.className; 
		sourceId=eventSource.id; 
	}

		ViewEventDispatch(eventType, eventSource,  "", keyCode, currentRow);
}

//------------------ dispatch event handler based on event source and type --------
function ViewEventDispatch(eventType, eventSource, sourceType, keyCode, currentRow)
{
if(eventType=="mousemove")
	{
	if(sourceType=="selectcell") {ViewDocSelectDrag(eventSource);return CancelEvent();} //doc selection column
	if(sourceType=="viewheader" ) {ViewColumnDrag(eventSource);return CancelEvent();} //doc selection column
	}
else if(eventType=="mousedown" && event.button == 1)
	{
	if(sourceType=="selectcell"){ViewDocSelectClick(eventSource);} //doc selection column
	if(sourceType=="viewsort") {ViewSortColumn(eventSource);}
	if(sourceType=="viewrefresh" || sourceType=="viewselectheader") { //view refresh icon
		if(docInfo.EnableFolderFiltering == "1")
		{
			document.all.divViewContent.style.display = "none"	
			objView.Refresh(true,false,true,false,true)
			document.all.divViewContent.style.display = ""
		}else{
			objView.Refresh(true, false, true);
		}
	} 
	if(sourceType=="categorytoggle") {ViewToggleCategory(currentRow);}
	if(sourceType=="datarow" || sourceType=="subtotalrow" || sourceType=="categoryrow" || sourceType=="thumbnail") {ViewHighlightEntry(currentRow);}
	//if(sourceType=="viewheader" ) {ViewColumnDragStart(eventSource);}
	if(sourceType=="viewheader" ) {ViewColumnSelectFilter(eventSource);}	
	}
else if(eventType=="mouseover")
	{
	if(sourceType=="viewheader" ) {ViewColumnDragOver(eventSource);}
	}
else if(eventType=="mouseup")
	{
	if(sourceType=="viewheader" ) {ViewColumnDragDrop(eventSource, eventType);}
	return ViewClearEventState();
	}
else if(eventType=="click" && event.button == 1)
	{
	return CancelEvent();
	}
else if(eventType=="dblclick" )
	{
	if(sourceType=="datarow") {ViewLoadDocument(false);}
	if(sourceType=="categoryrow" ) {ViewToggleCategory(currentRow);}	
	if(sourceType=="thumbnail"){ViewLoadDocument(false);}
	if ( sourceType=="coverflow"){ViewHighlightEntry(currentRow);ViewLoadDocument(false);}
	}
else if(eventType=="mouseout")
	{
	return ViewClearEventState();
	}
else if(eventType=="keydown")
	{
	ViewHandleKeyboardEvent(eventType, eventSource, sourceType, keyCode, currentRow);
	}
else if(eventType=="selectstart")
	{
	if(sourceType !="ftquery") {return CancelEvent();}
	}
else if(eventType=="contextmenu")
	{
	if(sourceType=="datarow" || sourceType=="subtotalrow" || sourceType=="categoryrow" || sourceType =="thumbnail" ) {ViewHighlightEntry(currentRow);}
	if(sourceType=="datarow"){CreateEntrySubmenu(eventSource);}
	if(sourceType=="thumbnail"){CreateThumbnailsSubmenu(eventSource);}
	if(sourceType=="viewheader" || sourceType=="viewselectheader" || sourceType=="viewrefresh") {ViewShowContextPopup(sourceType, eventSource);
	return CancelEvent();
	}
	return CancelEvent();
	}
}

// ------------------------------------ document list key handlers ------------------------------------------------

function ViewHandleKeyboardEvent(eventType, eventSource, sourceType, keyCode, currentRow)
{
	var DEL_KEY = 46
	var ENTER_KEY = 13
	var DOWNARROW_KEY = 40
	var UPARROW_KEY = 38
	var F9_KEY = 120
	var SPACE_KEY= 32;
	var ESC_KEY= 27;

if(keyCode == DEL_KEY)
	{
		if(docInfo.CanDeleteDocuments) {
			if(sourceType=="datarow" ){
				if(docInfo.EnableFolderFiltering == "1"){
					objView.DeleteSelectedEntries();
					document.all.divViewContent.style.display = "none"				
					InitFolderFiltering()
					ApplyFolderFilter(true);
					document.all.divViewContent.style.display = ""
				}else{
					objView.DeleteSelectedEntries();
				}
			}
		}
	}
else if(keyCode == ENTER_KEY)
	{
		if(sourceType=="datarow" && objView.currentEntry != "") //process entry only if it is highlighted
			{
			ViewLoadDocument(false);
			}
		if(sourceType=="categoryrow" || sourceType== "categorycell") {ViewToggleCategory(currentRow);}	
		if(sourceType=="ftquery") {ViewFTSearch();}	
	}
else if(keyCode == DOWNARROW_KEY)
	{
		if(sourceType=="datarow" || sourceType=="categoryrow" || sourceType=="subtotalrow")
		{
			ViewMoveDocHighlight("down");
		}
	}
else if(keyCode == UPARROW_KEY)
	{
		if(sourceType=="datarow" || sourceType=="categoryrow" || sourceType=="subtotalrow")
		{
			ViewMoveDocHighlight("up");
		}
	}
else if(keyCode == ESC_KEY)
	{
		if(sourceType=="datarow" || sourceType=="categoryrow" || sourceType=="subtotalrow" && objView.currentEntry != "") //select the entry only if it is highlighted
			{
				ViewResetEntryHighlight();
			}
		if(sourceType=="ftquery") {ViewFTClear(); doc.inpQuery.focus();}	
		//if(doc.fraPreviewContent.style.display != "none"){ViewUnloadDocument("close");}
		}
else if(keyCode == F9_KEY)
	{
		objView.Refresh(true, false, true);
	}	
	
else if(keyCode == SPACE_KEY)
	{
		if(sourceType=="datarow" && objView.currentEntry != "") //select the entry only if it is highlighted
			{
				ViewDocSelectClick(document.getElementById(objView.currentEntry));
			}
		if(sourceType=="categoryrow" || sourceType== "categorycell") {ViewToggleCategory(currentRow);}	
		if(sourceType=="ftquery"){return;} //let it go
		 ViewClearEventState();
		CancelEvent(); //handled
	}
}


//===================== Event handler functions ===================

//----------------------------- highlight entry on click -------------------
function ViewHighlightEntry(source)
{
	if(!source) {return false;}
	objView.HighlightEntryById(source.id);
	CancelEvent();
}

//----------------------------- un-highlight entry on ESC key -------------------
function ViewResetEntryHighlight()
{
objView.ResetHighlight();
}

//----------------------------- up/down keys on highlighted entry ------------------------
function ViewMoveDocHighlight(dir) //up/down arrow key handler
{
	objView.MoveEntryHighlight(dir) ;
	return CancelEvent();
}


// ----- called to refreesh the view after adding/editing a document --------------
function ViewReload(selectDoc)
{
	if(selectDoc) {objView.currentEntry = selectDoc;}
	objView.queryOptions = ViewGetQueryOptions();
	
	//-----If view is being filtered, reapply the filter-----
	if(docInfo.EnableFolderFiltering == "1"){
		document.all.divViewContent.style.display = "none"
		objView.Refresh(true,false,true);
		InitFolderFiltering()
		ApplyFolderFilter(true);
		document.all.divViewContent.style.display = ""
	}else{
		objView.Refresh(true,false,true);
	}
}

//---- open specific document after opening the folder ---------
function ViewOpenDoc()
{
	try{
		if(docInfo.LoadDoc) {
			objView.HighlightEntryById(docInfo.LoadDoc);
		}
	
		if(docInfo.DocumentTypeOption=="N" && !docInfo.isRecycleBin){
			infoUrl=docInfo.ServerUrl + "/" + docInfo.NsfName + "/wFolderInfo?OpenForm&ParentUNID=" + docInfo.DocID;
			ViewLoadDocument(infoUrl);
		}

		if(docInfo.LoadDoc){
			(objView.currentEntry)? ViewLoadDocument() : OpenDocumentWindow(docInfo.LoadDoc);
		} //currentEntry will be set only if it can be located in the list
	}catch(err){}
}

//----------------  open/close document handlers -----------------------
function ViewLoadDocument(docUrl)
{
	if(docInfo.isRecycleBin) // documents in recycle bin cannot be opened, just the properties dialog is displayed
	{
		var entryObj = objView.GetCurrentEntry();
		if(!entryObj) {return; }
		var recType = entryObj.GetElementValue("rectype");
		if(recType == "fld") //deleted folder
			{
				ShowFolderProperties(entryObj.entryId);
			}
		else if(recType == "doc") //deleted doc
			{
				ShowDocumentProperties(entryObj.entryId);
			}
		return;
	}
	// regular folder
	if(!docUrl && objView.currentEntry)
	{
		docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/0/" + objView.currentEntry + "?OpenDocument&ParentUNID=" + docInfo.DocID;
	}
	if(!docUrl) {return thingFactory.MessageBox("Document Url cannot be located.", 16, "Error");}
	try{
		window.parent.fraContentBottom.showBar(); //show document loading progress bar
	}
	catch(e) {}
	window.parent.fraContentBottom.location.href=docUrl ;
	window.parent.fsContentFrameset.rows = "25,*";
	}

function OpenDocumentWindow(docID)
{

	
	var currentID = objView.currentEntry;
	
	var targetUnid=(docID)? docID : currentID;
	if(!targetUnid){return false;}
	var docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/0/" + targetUnid + "?OpenDocument&ParentUNID=" + docInfo.DocID + "&mode=window";

	var leftPosition = (screen.width) ? (screen.width-700)/2 : 20;
	var topPosition = (screen.height) ? (screen.height-500)/2 : 20;
	dlgSize = "height=500,width=700,top=" + topPosition+ ",left=" + leftPosition;
	var dlgSettings = dlgSize + ",status=no,toolbar=no,menubar=no,location=no,scrollbars=yes,resizable=yes";
	return window.open(docUrl,targetUnid,dlgSettings); //Display the address dialog
}

function OpenFileWindow(filename){
	var targetUnid=objView.currentEntry;
	if(!targetUnid){return false;}
	
	var docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/0/" + targetUnid + "/$file/" + filename + "?open&" + Math.random();

	return window.open(docUrl); //Display the address dialog

}

function ViewUnloadDocument(refreshView, selectDocId)
{
	ViewSetTitleOptions("Folder: " + docInfo.FolderName)
	window.parent.fsContentFrameset.rows = "*,0";	

	if(refreshView) 
		{
			ViewReload(selectDocId);
			return;
		}
		
	if(objView.currentEntry != "") 
		{
			objView.HighlightEntryById(objView.currentEntry);
		}
	else
		{
			doc.divViewContent.focus();
		}
	var curContentUrl = window.parent.fraContentBottom.location.href;
	if(curContentUrl.indexOf("about:blank")==-1){
		//var contentUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/" +  "BlankContent?OpenPage";
		window.parent.fraContentBottom.location.href="about:blank" ;
	}
}

//------------ perspective handlers -----------------------------

function ViewLoadPerspective()
{
	var perspectiveId = (currentPerspective)? currentPerspective : docInfo.DefaultPerspective;
	var perspectiveDoc = doc.xmlViewPerspective.XMLDocument;
	var perspectiveDocXml = "";

	if(perspectiveDoc)
		{
			objView.SetViewParams(perspectiveDoc.xml);
		}

	var isAutoCollapseNode = perspectiveDoc.selectSingleNode("viewperspective/autocollapse");
	if (isAutoCollapseNode == null){
		var isAutoCollapse = "0"
	}else{
		var isAutoCollapse = isAutoCollapseNode.text
	}
	
	thingFactory.SetHTMLItemValue("inpSwitchPerspective", perspectiveId);
	ViewHighlightDefaultPerspective();
	objView.queryOptions = ViewGetQueryOptions();

	if(isAutoCollapse == "1"){
		document.all.divViewContent.style.display = "none"
		if(docInfo.EnableFolderFiltering == "1"){ //Initialize and apply default filtering if enabled	, last "true" parameter on the .Refresh
			objView.Refresh(true,true,true,true,true);
		}else{
			objView.Refresh(true,true,true);
		}
		objView.CollapseAll();
		document.all.divViewContent.style.display = ""
	} else {
	
		if(docInfo.EnableFolderFiltering == "1"){ //Initialize and apply default filtering if enabled, last "true" parameter on the .Refresh
			document.all.divViewContent.style.display = "none"
			objView.Refresh(true,true,true,true,true);
			document.all.divViewContent.style.display = ""
		}else{
			objView.Refresh(true,true,true);
		}
	}
}

function ViewHighlightDefaultPerspective()
{
	var selectBox = doc.inpSwitchPerspective;
	for(var i=0; i<selectBox.options.length; i++)
		{
			selectBox.options[i].style.color = (selectBox.options[i].value == docInfo.DefaultPerspective)? "#ff0000" : "";
		}
}

function ViewSwitchPerspective(perspectiveId)
{
	if(! perspectiveId) {return;}
	var perspectiveDoc = doc.xmlViewPerspective.XMLDocument;
	perspectiveDoc.async = false;

	var idParts = perspectiveId.split("_");
	if(idParts[0] == "system") //system perspectives are stored in the home database
		{
			var url=  docInfo.ServerUrl + docInfo.PortalWebPath + "/perspectives.xml?OpenPage&pid=" + perspectiveId;	

			$.ajax({
				'type' : 'GET',
				'url' : url,
				'async' : false,
				'dataType' : 'xml'
			})
			.done(function( data ) {
				if (data.xml) {
					perspectiveDoc.loadXML(data.xml);
				}
			});
/*/
			var xmlObj = new ActiveXObject ("Microsoft.XMLHTTP"); 
			xmlObj.open ("GET", url, false);
			xmlObj.send();
			
			perspectiveDoc.loadXML(xmlObj.responseXML.xml)
*/
		}
	else if(idParts[0] == "custom") //custom perspectives are stored in the library
		{
			var url=docInfo.ServerUrl + "/" + docInfo.NsfName + "/perspectives.xml?OpenPage&pid=" + perspectiveId;

			$.ajax({
				'type' : 'GET',
				'url' : url,
				'async' : false,
				'dataType' : 'xml'
			})
			.done(function( data ) {
				if (data.xml) {
					perspectiveDoc.loadXML(data.xml);
				}
			});
/*
			var xmlObj = new ActiveXObject ("Microsoft.XMLHTTP"); 
			xmlObj.open ("GET", url, false);
			xmlObj.send();
			
			perspectiveDoc.loadXML(xmlObj.responseXML.xml)
*/
		}
	else if(idParts[0] == "user") //user perspectives are stored in super cookie
		{
			return;
		}
	else //unknown location
		{
		return;
		}

	currentPerspective = perspectiveId;
	ViewLoadPerspective();
	//get new facet fields
	getFacetMapFields(perspectiveId);
	initTagCloud(); // refresh the facet map panel
}

function ShowPerspectiveProperties(clickSrc)
{
	var perspectiveDoc = doc.xmlViewPerspective.XMLDocument;
	var perspectiveDocXml = "";
	if(!perspectiveDoc)	{return false;}
	
	var descNode = perspectiveDoc.selectSingleNode("viewperspective/description");
	var nameNode = perspectiveDoc.selectSingleNode("viewperspective/name");
	var typeNode  = perspectiveDoc.selectSingleNode("viewperspective/type");
	var authorNode = perspectiveDoc.selectSingleNode("viewperspective/createdby");
	var createdNode = perspectiveDoc.selectSingleNode("viewperspective/createddate");
	var modifiedNode = perspectiveDoc.selectSingleNode("viewperspective/modifiedby");
	var modDateNode = perspectiveDoc.selectSingleNode("viewperspective/modifieddate");
			
	oPopup = window.createPopup();
	var popupHtml = '<div style="width:100%; height: 100%;background-color: white margin: 0px; scroll:no; border: solid 1px #7DA5E0;">'
	popupHtml += '<div style="width:100%; height: 18px; filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0, StartColorStr=\'#C8DFFB\', EndColorStr=\'#7DA5E0\'); font: 11px verdana,arial; padding: 2px 0px 2px 4px;"';
	popupHtml += '>';
	popupHtml += '<div style="float:left;">' + nameNode.text + '</div>';
	popupHtml += '<img style="float:right; background-color: #dd2200;" src="' + docInfo.ServerUrl + "/" + docInfo.NsfName + '/vpclose.gif"  onclick="document.oPopup.hide();"/>'; 
	popupHtml += '</div>';
	popupHtml += '<div style="width:100%; height: 150px; font: 11px verdana,arial; padding: 4px;">';
	popupHtml += 'Type: ' + typeNode.text;
	popupHtml += '<br>Created by: ' + authorNode.text;
	popupHtml += '<br>Created on: ' + createdNode.text;
	popupHtml += '<br>Modified by: ' + modifiedNode.text;
	popupHtml += '<br>Modified on: ' + modDateNode.text;
	popupHtml += '<br>Description:<br>' + descNode.text;
	popupHtml += '</div>';
	popupHtml += '</div>';
	oPopup.document.oPopup = oPopup;
	oPopup.document.body.innerHTML = popupHtml; 
	oPopup.show(0,0, 220, 174, doc.inpSwitchPerspective);
}

function ViewSavePerspective()
{
	var perspectiveDoc = doc.xmlViewPerspective.XMLDocument;
	var perspectiveDocXml = "";
	if(!perspectiveDoc)	{return false;}
	
	var descNode = perspectiveDoc.selectSingleNode("viewperspective/description");
	var nameNode = perspectiveDoc.selectSingleNode("viewperspective/name");
	var autocollapseNode = perspectiveDoc.selectSingleNode("viewperspective/autocollapse");
	var typeNode  = perspectiveDoc.selectSingleNode("viewperspective/type");
	var unidNode  = perspectiveDoc.selectSingleNode("viewperspective/Unid");
	var idNode = perspectiveDoc.selectSingleNode("viewperspective/id");
	var libScope = perspectiveDoc.selectSingleNode("viewperspective/libscope");
	var libDefault = perspectiveDoc.selectSingleNode("viewperspective/libdefault");
	var dlgParams = new Array();
	dlgParams[0] = typeNode.text;
	dlgParams[1] = nameNode.text;
	dlgParams[2] = descNode.text;
	dlgParams[3] = unidNode.text;		
	dlgParams[4] = idNode.text;
	dlgParams[5] = (libScope)? libScope.text : "";
	dlgParams[6] = (libDefault)?  libDefault.text : "";
	dlgParams[7] = (currentPerspective==docInfo.DefaultPerspective);	
	dlgParams[8]=docInfo.FacetMapID; //facet map
	dlgParams[9]= (autocollapseNode)? autocollapseNode.text : "0";
	//var dlgSettings = "dialogHeight: 310px; dialogWidth: 350px; dialogTop: px; dialogLeft: px; edge: raised; "
	var dlgSettings = "dialogHeight: 560px; dialogWidth: 500px; dialogTop: px; dialogLeft: px; edge: raised; "
	dlgSettings += "center: Yes; help: No; resizable: No; status: No;"

	var dlgUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/dlgSavePerspective?OpenForm&ParentUNID=" + docInfo.DocID;
	var retVal = window.showModalDialog(dlgUrl,dlgParams,dlgSettings);
	if(!retVal) {return false;} //dialog cancelled
			
	//--- processing agent url
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/FolderServices?OpenAgent"
	var request="";
	var requestFacetMap="";
		
	//--build the update request	
	request += "<Request>";
	request += "<Action>" + retVal["action"] + "</Action>";
	request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "<Unid>" + docInfo.DocID + "</Unid>";
	request += retVal["requestoptions"];
	request += "<viewperspective>";
	request += retVal["pespectiveoptions"];
	request += objView.GetViewParams();
	request += "</viewperspective>";
	request += "</Request>";	

	var httpObj = new objHTTP();
	if(!httpObj.PostData(request, url) || httpObj.status=="FAILED"){return false;}
	var perspectiveID=(currentPerspective)? currentPerspective : docInfo.DefaultPerspective;  // for facet map
	if(retVal["action"] == "NEWPERSPECTIVE" && httpObj.resultCount > 0) //added new perspective (save as action)
		{
			//add new perspective to the selection without reloading the view
			var newId = httpObj.results[0];
			var selectBox = doc.inpSwitchPerspective;
			var newOpt = document.createElement ("OPTION"); 
			selectBox.options.add (newOpt );
			newOpt.style.backgroundColor = "#C8DFFB";
			newOpt.innerText = retVal["name"];
			newOpt.value = retVal["type"] + "_" + newId; 
			newOpt.selected=true;
			if(retVal["makedefault"])
				{
					docInfo.DefaultPerspective = retVal["type"] + "_" + newId; 
				}
			ViewHighlightDefaultPerspective();
			ViewSwitchPerspective(retVal["type"] + "_" + newId)
		}
		else
		{
			//alert("sfFoldercontents::ViewSavePerspective - pespectiveId: " +perspectiveID);
			getFacetMapFields(perspectiveID);
			initTagCloud();
		}
}

//-------- gets facet map fields using XMLHttp request for specified perspective ID ----------
function getFacetMapFields(perspectiveId)
{
	var facetMapFieldsNode ="";
	var facetMapIDNode="";
	var facetMapTitleNode="";
		try
		{
			var URL=  docInfo.ServerUrl + "/" + docInfo.NsfName + "/facetMapFieldsByPerspectiveID.xml?OpenPage&pid=" + perspectiveId;		
			var inlineXMLFacetMapFields=doc.inlineXMLFacetMapFields.XMLDocument;
		    	inlineXMLFacetMapFields.async = false;
		    $.ajax({
			    'type' : 'GET',
			    'url' : URL,
			    'async' : false,
			    'dataType' : 'xml'
			})
			.done(function( data ) {
				if (data.xml) {
					inlineXMLFacetMapFields.loadXML(data.xml);
				}
			});
/*
		    var xmlObjFacet = new ActiveXObject ("Microsoft.XMLHTTP"); 
			xmlObjFacet.open ("GET", URL, false);
			xmlObjFacet.Send();		 		
			inlineXMLFacetMapFields.loadXML(xmlObjFacet.responseXML.xml)
*/
			facetMapFieldsNode = inlineXMLFacetMapFields.selectSingleNode("FACETMAP/FacetFields");
			facetMapIDNode = inlineXMLFacetMapFields.selectSingleNode("FACETMAP/ID");
			facetMapTitleNode=inlineXMLFacetMapFields.selectSingleNode("FACETMAP/Name");
		}catch(e)
		{
			thingFactory.MessageBox("[ERROR - sfFolderContents::getFacetMapFields()]: "+ +e.message, 16, "XML Http Request" );
		}
//		xmlObjFacet=null;
		
		if(facetMapFieldsNode){
			// set facet map fields						
			docInfo.FacetMapFields= facetMapFieldsNode.text;
			//set facet map id
			docInfo.FacetMapID=facetMapIDNode.text;
  			//set  facet map title
			docInfo.FacetMapName=facetMapTitleNode.text;
		}
}

function ViewDeletePerspective()
{
var perspectiveDoc = doc.xmlViewPerspective.XMLDocument;
var perspectiveDocXml = "";
	if(perspectiveDoc)
		{
			var typeNode  = perspectiveDoc.selectSingleNode("viewperspective/type");
			var unidNode  = perspectiveDoc.selectSingleNode("viewperspective/Unid");

			var dlgParams = new Array();
			dlgParams[0] = typeNode.text;
		
			var dlgSettings = "dialogHeight: 170px; dialogWidth: 280px; dialogTop: px; dialogLeft: px; edge: raised; "
			dlgSettings += "center: Yes; help: No; resizable: No; status: No;"

			var dlgUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/dlgDeletePerspective?OpenForm&ParentUNID=" + docInfo.DocID;
			var retVal = window.showModalDialog(dlgUrl,dlgParams,dlgSettings);
			if(!retVal) {return false;} //dialog cancelled

			//--- processing agent url
			var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/FolderServices?OpenAgent"
			var request="";
		
			//--build the update request	
			request += "<Request>";
			request += "<Action>" + retVal["action"] + "</Action>";
			request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
			request += "<Unid>" + docInfo.DocID + "</Unid>";
			request += "<viewperspective>";
			request += "<type>" + typeNode.text + "</type>";			
			request += "<Unid>" + unidNode.text + "</Unid>";
			request += "</viewperspective>";
			request += "</Request>";	

			var httpObj = new objHTTP();
			if(!httpObj.PostData(request, url) || httpObj.status=="FAILED"){return false;}
			location.replace(location.href);
			return true;
		}
}
//-------- column drag and drop --------------------
function ViewColumnDragStart(source)
{

}

function ViewColumnDrag(source)
{

}
function ViewColumnDragOver(source)
{

}
function ViewColumnDragDrop(source)
{

}

//-------- clipboard functions --------------------

function ViewCopySelected()
{
	if(objView.currentEntry =="" && objView.selectedEntries.length == 0) {return false;};
	ViewSetClipboard("copy");
}

function ViewCutSelected()
{
	if(objView.currentEntry =="" && objView.selectedEntries.length == 0) {return false;};
	ViewSetClipboard("cut");
}

function ViewSetClipboard(action)
{
	if(objView.currentEntry =="" && objView.selectedEntries.length == 0) {return false;};

	var clipdata="<srclibkey>" + docInfo.LibraryKey + "</srclibkey>";
	
	if(objView.selectedEntries.length > 0)
		{
			for(var k=0; k<objView.selectedEntries.length; k++)
				{
					clipdata+="<Unid>" + objView.selectedEntries[k] + "</Unid>";
				}
		}
		else
		{
			clipdata+="<Unid>" + objView.currentEntry  + "</Unid>"
		}
	SetCookie("clipaction", action);
	SetCookie("clipdata", clipdata);
}
function ViewPasteSelected()
{
	var clipdata = GetCookie("clipdata");
	if(clipdata == "") {return false;}
	var action = GetCookie("clipaction");
	var request = "<Request>";
	request += "<Action>PASTE</Action>";
	request += "<clipaction>" + action + "</clipaction>";
	request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "<targetfolder>" + docInfo.FolderID + "</targetfolder>";
	request += clipdata;
	request += "</Request>";	

	if(action == "cut") //paste after cut is a one time shot
		{
			ShowProgressMessage("Moving documents. Please wait...")
			SetCookie("clipaction", "");
			SetCookie("clipdata", "");
		}
	else
		{
			ShowProgressMessage("Pasting documents. Please wait...")
		}

	//--- processing agent url
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/ViewServices?OpenAgent"
	var httpObj = new objHTTP();

	var retStatus = httpObj.PostData(request, url);
	HideProgressMessage();
	
	if(!retStatus ){return false;}
	objView.queryOptions = ViewGetQueryOptions();
	
	if(docInfo.EnableFolderFiltering == "1"){
		document.all.divViewContent.style.display = "none"
		objView.Refresh(true, false, true)
		InitFolderFiltering()
		ApplyFolderFilter(true);
		document.all.divViewContent.style.display = ""
	}else{
		objView.Refresh(true, false, true)
	}
}

// ------------------------------------- selection checkbox handlers ------------------------------------------------------

function ViewDocSelectClick(source)
{
	if(!source) {return CancelEvent();}
	var parentRow  = (source.tagName != "TR")? source.parentElement : source;
	if(!parentRow.isRecord) {return CancelEvent();}
	var chkbox = source.all.tags("INPUT")[0];

	if( !chkbox.checked || selectDragMode=="check" )
		{
		if(! selectDragMode) {selectDragMode="check";} //handling initial click
		parentRow.isChecked=true;
		if(chkbox) {objView.ToggleSelectEntryById(parentRow.id, "check");}
		}
	else
	{
		if(! selectDragMode) {selectDragMode="uncheck";} //handling initial click
		parentRow.isChecked=false;
		if(chkbox) {objView.ToggleSelectEntryById(parentRow.id, "uncheck");}
	}

	return CancelEvent(); //handled
}

//--------------------------------------------- selecting documents by dragging mouse over selection boxes ------
function ViewDocSelectDrag(source)
{
	if(!source) {return false;}

if (event.button == 1)
	{
	var parentRow  = source.parentElement; //check if the handler should continue
	if((selectDragMode=="check" && parentRow.isChecked) || (selectDragMode=="uncheck" && !parentRow.isChecked))
		{
			return; //handled
		}
		else
		{
			ViewDocSelectClick(source); //call check handler
		}
	}
	return CancelEvent(); //handled
}

 
//--------------------------------------------- column sorting ----------------------------------------------------

function ViewSortColumn(source)
{
	var  colIdx = source.id.split("-")[1];
	objView.ToggleCustomSort(colIdx)
	return CancelEvent();
}

//--------------------------------------------- expand/collapse category ----------------------------------------------------

function ViewToggleCategory(currentRow)
{
	objView.ToggleCategory(currentRow.id);
	return CancelEvent();
}

//-------------------------------------- view header toolbars show/hide handler -------------------------------
function ViewToggleToolbar(toolbar, action)
{
	var toolbarObj = document.getElementById("divToolbar" + toolbar);

	if(toolbarObj.style.display=="none" || action=="show" )
	{
		toolbarObj.style.display=""
		thingFactory.SetCookieValue( "FolderToolbar" + toolbar, "show" );
	}
	else
	{
		toolbarObj.style.display="none"
		thingFactory.SetCookieValue( "FolderToolbar" + toolbar, "" );
	}
}

//---------------------------- keeps the onload folder state persistence ----------------------------------------

function ViewSetOnloadState()
{
var toolbarSearchDisplay = docInfo.UseContentPaging == "1" ? "show" : thingFactory.GetCookieValue( "FolderToolbarSearch" );
var toolbarPerspectiveDisplay = thingFactory.GetCookieValue( "FolderToolbarPerspective");

if(toolbarSearchDisplay) {ViewToggleToolbar("Search", toolbarSearchDisplay);}
if(toolbarPerspectiveDisplay) {ViewToggleToolbar("Perspective", toolbarPerspectiveDisplay);}

}
//--------------------------------------------- execute full text search ----------------------------------------------------

function ViewFTSearch(customQuery)

{
	var query=(customQuery)? customQuery : doc.inpQuery.value;
	var scope = (doc.inpViewScope.checked)? "TREE" : "FOLDER";
	if(!query)
		{
			alert("Please enter the search query.");
			return CancelEvent(); 
		}
	//-----Clear current filter and any column filter flags if filtering is on---
	if(docInfo.EnableFolderFiltering == "1"){
		document.all.CurrentFilterDiv.innerHTML = "";	
		ClearAllColFilterFlags();
	}		
	objView.queryOptions = ViewGetQueryOptions();
	objView.DoFTSearch(query, scope);
	doc.btnFTClear.style.display="";
	//return CancelEvent();
	if(objView.contentPaging) {
		disableContentPaging(true);		
	}
}

//--------------------------------------------- clear full text search ----------------------------------------------------

function ViewFTClear()
{
	objView.queryOptions = ViewGetQueryOptions();
	if(docInfo.EnableFolderFiltering == "1"){
		document.all.divViewContent.style.display = "none"
		objView.ResetFTSearch()
		doc.btnFTClear.style.display="none";
		ApplyFolderFilter(false);
		document.all.divViewContent.style.display = ""
	}else{
		objView.ResetFTSearch()
		doc.btnFTClear.style.display="none";
	}
	doc.divSearchResultCount.style.display = "none"
	if(objView.contentPaging) {
		disableContentPaging(false);		
	}
}

//--------------------------------------------- get additional options for data retrieval ----------------------------------------------------
function ViewGetQueryOptions()
{
objView.disableFreeze = doc.inpViewScope.checked;
var options= (doc.inpViewScope.checked)? "<viewscope>ST</viewscope>" :"";
objView.viewScope = (options)? "ST": "";
var versionOption = doc.selVersionScope.options[doc.selVersionScope.selectedIndex].value;
objView.versionOption =  (versionOption)? versionOption :"";
options += (versionOption)? "<versions>" + versionOption  + "</versions>" :"";
return options;
}

//--------------------------------------------- get additional options for data retrieval ----------------------------------------------------
function ViewApplyQueryOptions()
{
	objView.queryOptions = ViewGetQueryOptions();
	if(objView.isFTSearch)
		{
			ViewFTSearch();
		}
	else
		{
			if(docInfo.EnableFolderFiltering == "1"){
				document.all.divViewContent.style.display = "none"
				objView.Refresh(true,true,false);
				ApplyFolderFilter(false);
				document.all.divViewContent.style.display = ""
			}else{
				objView.Refresh(true,true,false);
			}
	
		}
}

//--------------------------------------------- add doc to favorites ----------------------------------------------------
function ViewAddToFavorites()
{
	var entryObj = objView.GetCurrentEntry();
	if(!entryObj) {return; }
	
	if ( objView.isThumbnails){
		var docId = objView.currentEntry
	}else{
		var docId = entryObj.GetElementValue("docid");
	}

	//--- processing agent url
	var url = docInfo.ServerUrl + docInfo.PortalWebPath + "/UserDataServices?OpenAgent"
	var request="";
	var docDescription = ( objView.isThumbnails)? "" : entryObj.columnValues.join(", ");
	//--build the update request
	request += "<Request>";
	request += "<Action>NEW</Action>";
	request += "<LibraryKey>" + docInfo.LibraryKey  + "</LibraryKey>";
	request += "<Unid>" + docId +  "</Unid>";
	request += "</Request>";

	var httpObj = new objHTTP()
	
	if (httpObj.PostData(request, url))	{
		//all OK
		if (httpObj.status=="OK"){
			//----- refresh folder control --
			var objLeftFrame = window.parent.frames["fraLeftFrame"];	
			if (objLeftFrame){
				objLeftFrame.ReloadFavorites();
			}
			thingFactory.MessageBox("Document added to favorites.", 64, "Add to favorites");
			return true;
		}
	}

	return false;

}
//----------- utility functions ---------------

// clears the view event variables in case mouse cursor had wandered to far
function ViewClearEventState()
{
var dragSourceColumn=null;
var dragTargetColumn=null;
selectDragMode=null;
return true;
}

function CancelEvent()
{
	if(!window.event) {return;}
	window.event.cancelBubble = true;
	window.event.returnValue=false;
	return false;
}

// ------- context menu handler ---------
function ViewShowContextPopup(popupSource, sourceObject)
{
			if(popupSource=="viewheader" )
				{
				if(!sourceObject.colIdx){return;}
				var colNo = parseInt(sourceObject.colIdx);
				var offsetX = (event)? event.clientX - sourceObject.offsetLeft : 0;
				curContextObj = objView.columns[colNo]; //object handling the action click
				var contextMenu = objView.columns[colNo].CreateContextMenu(offsetX);
				}
			else if(popupSource=="viewselectheader" || popupSource=="viewrefresh"  )
				{
				curContextObj = objView;
				var offsetX = (event)? event.clientX - sourceObject.offsetLeft : 0;
				var contextMenu = objView.CreateContextMenu("selectheader", sourceObject, offsetX);
				}
			
			if(contextMenu)
				{
				var oPopBody = oPopup.document.body;
				oPopBody.innerHTML = contextMenu.innerHTML();
				oPopup.show(contextMenu.offsetRight, contextMenu.offsetTop, contextMenu.width, contextMenu.height, event.srcElement);
				return false;
				}
}

//==========================================================================================
// View submenu
//==========================================================================================

function CreateViewSubmenu(actionButton) //creates right-click contect menu
{
	if(!actionButton) {return}
	var popup = new objPopupmenu();
	popup.toggleIconHTML =  "<img align=\"right\" src=\"" + docInfo.ServerUrl + "/" + docInfo.NsfName+ "/popmenu-check.gif?Open\"/>";
	popup.hasToggleIcons =true;
	popup.textColumnWidth = 130;
	popup.actionHeight=18;
	var actionHandler = "parent.ProcessViewSubmenuAction(this)";

//	addAction= function(isActive, isChecked, isBold, actionText, actionName, actionIconSrc, actionShortcutKeyText, actionHandler)
	var isSearchOn = (doc.divToolbarSearch.style.display=="");
	var isPerspectiveOn = (doc.divToolbarPerspective.style.display=="");
	popup.addAction(true , isSearchOn, false, "Search Bar" , "search", "" , "", actionHandler);
	popup.addAction(true , isPerspectiveOn, false, "View Options Bar" , "perspective", "" , "", actionHandler);
	popup.addAction(!docInfo.isRecycleBin , false, false, "Folder Information" , "info", "" , "", actionHandler);
	popup.addDivider();
	popup.addAction(true , false, false, "Refresh" , "refresh", "" , "", actionHandler)	
	popup.addDivider();
	popup.addAction(objView.isCategorized , false, false, "Expand All" , "expandall", "" , "", actionHandler)	
	popup.addAction(objView.isCategorized, false, false, "Collapse All" , "collapseall", "" , "", actionHandler)	

	popup.height = 135;
	popup.width = 155;
	popup.offsetTop= 15;
	popup.offsetRight = 0;

	var oPopBody = oPopup.document.body;
	oPopBody.innerHTML = popup.innerHTML();

	oPopup.show(0, 20, popup.width, popup.height, actionButton);
	return false;

}


//==========================================================================================
// View submenu handler
//==========================================================================================

function ProcessViewSubmenuAction(actionObj) //handle action from contect menu
{
	if(!actionObj ) {return false};
	if(oPopup) {oPopup.hide();}
	var action = actionObj.actionName.split("-")[0];
	if(action=="search") //start workflow
	{
		ViewToggleToolbar("Search");
		if(objView.isFTSearch) {ViewFTClear();}
	}
	else if(action=="perspective") //cacomplete step
	{
		ViewToggleToolbar("Perspective");
	}
	else if(action=="info") //cacomplete step
	{
		infoUrl=docInfo.ServerUrl + "/" + docInfo.NsfName + "/wFolderInfo?OpenForm&ParentUNID=" + docInfo.DocID;
		ViewLoadDocument(infoUrl);
	}	
	else if(action=="refresh") //approve
	{
			if(docInfo.EnableFolderFiltering == "1"){
				document.all.divViewContent.style.display = "none"	
				objView.Refresh(true,false,true,false,true)
				document.all.divViewContent.style.display = ""
			}else{
				objView.Refresh(true,false,true);
			}
	}
	else if(action=="expandall") //approve
	{
		objView.ExpandAll();
	}
	else if(action=="collapseall") //approve
	{
		objView.CollapseAll();
	}
	return;

}


//==========================================================================================
// Tools submenu
//==========================================================================================

function CreateToolsSubmenu(actionButton) //creates right-click contect menu
{
	if(!actionButton) {return}
	var popup = new objPopupmenu();
	popup.textColumnWidth = 140;
	popup.actionHeight=18;
	popup.hasToggleIcons =true;
	var actionHandler = "parent.ProcessToolsSubmenuAction(this)";
	var showImportFiles = !docInfo.isRecycleBin && docInfo.CanCreateDocuments;
	var showImportMessages = !docInfo.isRecycleBin && docInfo.CanCreateDocuments;
	var objEntry = objView.GetCurrentEntry();
	var isBookmark = (objEntry ? (!objEntry.GetElementAttribute("bmk/img", "src") == "") : false);
	var showBookmark = !docInfo.isRecycleBin && !isBookmark && objView.currentEntry && !docInfo.DisableBookmarks; 
	var showChangeDocType = !docInfo.isRecycleBin && docInfo.DocAccessLevel>="6" && !isBookmark && objView.currentEntry;	

//	addAction= function(isActive, isChecked, isBold, actionText, actionName, actionIconSrc, actionShortcutKeyText, actionHandler)

	popup.addAction(true , false, false, "Export to Excel" , "export", "" , "", actionHandler);
	popup.addAction(showImportFiles , false, false, "Import Files" , "import", "" , "", actionHandler);
	popup.addAction(showImportMessages , false, false, "Import Messages" , "importmessages", "" , "", actionHandler);	
	popup.addAction(true, false, false, "Send Email Notification" , "notification", "" , "", actionHandler);	
	popup.addAction(true, false, false, "Compare Documents" , "compare", "" , "", actionHandler);		
	popup.addDivider();
	popup.addAction(true, false, false, "Create Shortcut" , "createshortcut", "" , "", actionHandler);	
	popup.addAction(true, false, false, "Copy Link" , "copylink", "" , "", actionHandler);	
	popup.addAction(showBookmark, false, false, "Create Bookmark" , "createbookmark", "" , "", actionHandler);		
	popup.addDivider();
	var canSavePerspective = false;
	var canDeletePerspective = false;
	var perspectiveDoc = doc.xmlViewPerspective.XMLDocument;
	if(perspectiveDoc)
		{
			var typeNode  = perspectiveDoc.selectSingleNode("viewperspective/type");
			canDeletePerspective = (docInfo.DocAccessLevel>="6" && typeNode.text !="system")? true : false;
		}
	canSavePerspective = (docInfo.DocAccessLevel>="6" && !objView.isSummary)? true : false;
	popup.addAction(!docInfo.isRecycleBin && canSavePerspective,false, false, "Edit/Save Perspective" , "saveperspective", "" , "", actionHandler);
	popup.addAction(!docInfo.isRecycleBin && canDeletePerspective,false, false, "Delete Perspective" , "deleteperspective", "" , "", actionHandler);
	popup.addDivider();
	popup.addAction(!docInfo.isRecycleBin, false, false, "Folder Properties" , "properties", "" , "", actionHandler);
	popup.addAction(!docInfo.isRecycleBin, false, false, "Open Folder Archive" , "archive", "" , "", actionHandler);
	popup.addAction(!docInfo.isRecycleBin && docInfo.DocAccessLevel>="6", false, false, "Archive Selected" , "archiveselected", "" , "", actionHandler);
	popup.addAction(showChangeDocType, false, false, "Change Doc Type" , "changedoctype", "" , "", actionHandler);
	
	popup.height = 286;
	popup.width = 160;
	popup.offsetTop= 15;
	popup.offsetRight = 0;

	var oPopBody = oPopup.document.body;
	oPopBody.innerHTML = popup.innerHTML();

	oPopup.show(0, 20, popup.width, popup.height, actionButton);
	return false;

}


//==========================================================================================
// Tools submenu handler
//==========================================================================================

function ProcessToolsSubmenuAction(actionObj) //handle action from contect menu
{
	if(!actionObj ) {return false};
	if(oPopup) {oPopup.hide();}
	var action = actionObj.actionName.split("-")[0];
	if(action=="export") //start workflow
	{
		objView.ExportToExcel();
	}
	else if(action=="import"){
		if(ImportFiles()) {
			objView.Refresh(true, false, true);
			}
		return false; 
	}
	else if(action=="importmessages"){
		if(ImportMessages()) {
			objView.Refresh(true, false, true);
			}
		return false; 
	}
	else if(action=="saveperspective"){
		ViewSavePerspective();
	}
	else if(action=="copylink"){
		CopyLink();
	}
	else if(action=="createshortcut"){
		CreateShortcut();
	}	
	else if(action =="createbookmark")
	{
		CreateBookmark();
	}	
	else if(action=="notification"){
		SendDocumentMessage();
	}
	else if(action=="compare"){
		CompareSelectedWordDocuments();
	}	
	else if(action=="deleteperspective"){
		ViewDeletePerspective();
	}
	else if(action=="properties"){
		ShowFolderProperties();
	}
	else if(action=="archive"){
		ShowFolderArchive();
	}
	else if ( action=="changedoctype" ) {
		ChangeDocType();
	}
	else if(action=="archiveselected"){
		if(ArchiveSelected()) {
			objView.Refresh(true, false, true);
			}
		return false; 
	}
	return;
}


//==========================================================================================
// Edit submenu
//==========================================================================================

function CreateEditSubmenu(actionButton) //creates drop down menu
{
	if(!actionButton) {return}
	var popup = new objPopupmenu();
	popup.textColumnWidth = 100;
	popup.actionHeight=18;
	popup.hasToggleIcons =true;
	var actionHandler = "parent.ProcessEditSubmenuAction(this)";

	var isthumbnailview =  objView.isThumbnails;
	var showClipActions =!isthumbnailview &&  !docInfo.isRecycleBin && !docInfo.CutCopyPaste
	var showCut = showClipActions && docInfo.CanDeleteDocuments && docInfo.CanCreateDocuments;
	var canDelete = !isthumbnailview && !docInfo.isRecycleBin && (objView.currentEntry !="" || objView.selectedEntries.length > 0)  && docInfo.CanSoftDeleteDocuments && docInfo.CanCreateDocuments && docInfo.CanDeleteDocuments;
	
//	addAction= function(isActive, isChecked, isBold, actionText, actionName, actionIconSrc, actionShortcutKeyText, actionHandler)

	popup.addAction(showCut, false, false, "Cut" , "cut", "" , "", actionHandler);
	popup.addAction(showClipActions , false, false, "Copy" , "copy", "" , "", actionHandler);
	popup.addAction(showClipActions && GetCookie("clipdata") != "" && docInfo.CanCreateDocuments, false, false, "Paste" , "paste", "" , "", actionHandler);
	popup.addDivider();
	popup.addAction(true , false, false, "Select All" , "selectall", "" , "", actionHandler);	
	popup.addAction(true , false, false, "Deselect All" , "deselectall", "" , "", actionHandler)	
	popup.addDivider();

	popup.addAction(canDelete  , false, false, "Delete Selected" , "delete", "" , "", actionHandler);
	
	popup.height = 132;
	popup.width = 120;
	popup.offsetTop= 15;
	popup.offsetRight = 0;

	var oPopBody = oPopup.document.body;
	oPopBody.innerHTML = popup.innerHTML();

	oPopup.show(0, 20, popup.width, popup.height, actionButton);
	return false;

}


//==========================================================================================
// Edit submenu handler
//==========================================================================================

function ProcessEditSubmenuAction(actionObj) //handle action from contect menu
{
	if(!actionObj ) {return false};
	if(oPopup) {oPopup.hide();}
	var action = actionObj.actionName.split("-")[0];
	if(action=="cut") 
	{
		ViewCutSelected();
	}
	if(action=="copy")
	{
		ViewCopySelected();
	}	
	if(action=="paste")
	{
		ViewPasteSelected();
	}
	else if(action=="delete")
	{
			if(docInfo.EnableFolderFiltering == "1"){
				objView.DeleteSelectedEntries();
				document.all.divViewContent.style.display = "none"				
				InitFolderFiltering()
				ApplyFolderFilter(true);
				document.all.divViewContent.style.display = ""
			}else{
				objView.DeleteSelectedEntries();
			}
	}
	else if(action=="selectall")
	{
		objView.SelectAllEntries();
	}
	else if(action=="deselectall")
	{
		objView.DeselectAllEntries();
	}

	return;
}


function ViewSortThumbnails(id){
	
	objView.ToggleThumbnailSort(id);
}

//thumbnails submenu

function CreateThumbnailsSubmenu(clickObj){

if(!clickObj) {return}
	//alert(clickObj.tagName)
	var popup = new objPopupmenu();
	popup.textColumnWidth = 140;
	popup.actionHeight=18;
	popup.hasToggleIcons =true;
	var actionHandler = "parent.ProcessEntrySubmenuAction(this)";
	
	var showClipActions = !docInfo.isRecycleBin && !docInfo.CutCopyPaste

	popup.addAction(!docInfo.isRecycleBin, false, false, "Open File" , "openfile", "" , "", actionHandler);
	popup.addAction(!docInfo.isRecycleBin, false, false, "Open Document" , "open", "" , "", actionHandler);
	popup.addAction(!docInfo.isRecycleBin, false, false, "Open Document in New Window" , "openwindow", "" , "", actionHandler);
	popup.addDivider();
	popup.addAction(!docInfo.isRecycleBin, false, false, "Add to favorites" , "favorites", "" , "", actionHandler);
	popup.addAction(!docInfo.isRecycleBin, false, false, "Copy Link" , "copylink", "" , "", actionHandler);		
	
	popup.addDivider();
	popup.addAction(true  , false, false, "Properties" , "properties", "" , "", actionHandler);
	
	popup.height =138;	
	popup.width = 208;
	popup.offsetTop= 100;
	popup.offsetRight = 0;

	var oPopBody = oPopup.document.body;
	oPopBody.innerHTML = popup.innerHTML();

	oPopup.show(20, 70, popup.width, popup.height, clickObj);
	return false;


}


//==========================================================================================
// Entry submenu
//==========================================================================================

function CreateEntrySubmenu(clickObj) //creates right-click contect menu
{
	if(!clickObj) {return}
	//alert(clickObj.tagName)
	var popup = new objPopupmenu();
	popup.textColumnWidth = 140;
	popup.actionHeight=18;
	popup.hasToggleIcons =true;
	var actionHandler = "parent.ProcessEntrySubmenuAction(this)";
	
	var objEntry = objView.GetCurrentEntry();	
	var showClipActions = !docInfo.isRecycleBin && !docInfo.CutCopyPaste
	var isBookmark = (objEntry ? (!objEntry.GetElementAttribute("bmk/img", "src") == "") : false);
	var showBookmark = !docInfo.isRecycleBin && !isBookmark && objView.currentEntry; 
	var showChangeDocType = !docInfo.isRecycleBin && docInfo.DocAccessLevel>="6" && !isBookmark && objView.currentEntry;	

//	addAction= function(isActive, isChecked, isBold, actionText, actionName, actionIconSrc, actionShortcutKeyText, actionHandler)
	if(docInfo.isRecycleBin)
		{
			popup.addAction(true  , false, false, "Restore" , "restore", "" , "", actionHandler);
			popup.addDivider();
		}
	popup.addAction(!docInfo.isRecycleBin, false, false, "Open" , "open", "" , "", actionHandler);
	popup.addAction(!docInfo.isRecycleBin, false, false, "Open in New Window" , "openwindow", "" , "", actionHandler);
	popup.addDivider();
	popup.addAction(!docInfo.isRecycleBin, false, false, "Add to favorites" , "favorites", "" , "", actionHandler);
	popup.addAction(!docInfo.isRecycleBin, false, false, "Copy Link" , "copylink", "" , "", actionHandler);		
	popup.addAction(showBookmark, false, false, "Create Bookmark" , "createbookmark", "" , "", actionHandler);				
	popup.addAction(showChangeDocType, false, false, "Change Doc Type" , "changedoctype", "" , "", actionHandler);	
	
	popup.addDivider();
	popup.addAction(showClipActions && docInfo.CanDeleteDocuments, false, false, "Cut" , "cut", "" , "", actionHandler);
	popup.addAction(showClipActions, false, false, "Copy" , "copy", "" , "", actionHandler);
	popup.addAction(showClipActions && GetCookie("clipdata") != "", false, false, "Paste" , "paste", "" , "", actionHandler);
	popup.addDivider();
	popup.addAction( !docInfo.isRecycleBin && docInfo.CanSoftDeleteDocuments && docInfo.CanDeleteDocuments  , false, false, "Delete" , "delete", "" , "", actionHandler);

	popup.addDivider();
	popup.addAction(true  , false, false, "Properties" , "properties", "" , "", actionHandler);
	
	popup.height = (docInfo.isRecycleBin)? 268 : 241;	
	popup.width = 160;
	popup.offsetTop= 15;
	popup.offsetRight = 0;

	var oPopBody = oPopup.document.body;
	oPopBody.innerHTML = popup.innerHTML();

	oPopup.show(0, 20, popup.width, popup.height, clickObj);
	return false;

}


//==========================================================================================
// Entry submenu handler
//==========================================================================================

function ProcessEntrySubmenuAction(actionObj) //handle action from contect menu
{
	if(!actionObj ) {return false};
	if(oPopup) {oPopup.hide();}

	var entryObj = objView.GetCurrentEntry();
	if(!entryObj) {return; }
	
	if ( objView.isThumbnails ){
		var recType = null;
	}else{
		var recType = entryObj.GetElementValue("rectype");
	}
	var action = actionObj.actionName.split("-")[0];
	if(action=="open"){
		ViewLoadDocument();
	}
	
	if ( action=="openfile"){
		var fname = entryObj.filename;
		OpenFileWindow(fname);
	}
	if(action=="openwindow"){
		OpenDocumentWindow();
	}	
	else if(action=="favorites"){
		ViewAddToFavorites();
	}
	else if(action=="copylink"){
		CopyLink(objView.currentEntry);
	}
	else if(action=="cut"){
		ViewCutSelected();
	}
	else if(action=="copy"){
		ViewCopySelected();
	}	
	else if(action=="paste"){
		ViewPasteSelected();
	}
	else if(action=="delete"){
		if(docInfo.isRecycleBin){
			objView.RemoveSelectedEntries(true)
		}else{
			if(docInfo.EnableFolderFiltering == "1"){
				objView.DeleteSelectedEntries(true);
				document.all.divViewContent.style.display = "none"				
				InitFolderFiltering()
				ApplyFolderFilter(true);
				document.all.divViewContent.style.display = ""
			}else{
				objView.DeleteSelectedEntries(true);
			}
		}				
	}
	else if(action=="changedoctype"){
		ChangeDocType(objView.currentEntry);
	}
	else if(action =="createbookmark")
	{
		CreateBookmark();
	}	
	else if(action=="restore")	{
		objView.UndeleteSelectedEntries(true);
		try	{
				parent.frames['fraLeftFrame'].ReloadLibraryByID( docInfo.LibraryKey, "", false);
			}
catch (e){}
	}
	else if(action=="properties"){
		if ( objView.isThumbnails ){
			ShowDocumentProperties();
			return;
		}
		if(recType == "fld")
			{
				ShowFolderProperties();
			}
		else if(recType == "doc")
			{
				ShowDocumentProperties();
			}
	}

	return;
}
/*******************************************************************
	 * Creates a bookmark copy of a document in a specified folder
*********************************************************************/
function CreateBookmark(currentEntry){
	var createdok = false;
	if ( currentEntry == undefined ) {
		currentEntry = objView.currentEntry
		if( currentEntry == undefined  || currentEntry == "" ){
			thingFactory.MessageBox("Please highlight a document to create a bookmark for.", 16, "Error");
			return false;
		}
	}
	var boxType = 35;
	var answer = thingFactory.MessageBox( "Would you like to create a Bookmark entry for the highlighted document?" ,boxType, "Create Bookmark?" );
	if(answer != 6){ return false;}
	var dlgParams = window;
	var dlgUrl =docInfo.ServerUrl + docInfo.PortalWebPath + "/dlgFolderSelect?ReadForm&flags=create,notcurrent,norecycle";
	var dlgSettings = "dialogHeight:380px;dialogWidth:420px;center:yes; help:no; resizable:yes; status:no;";
	var returnValue = window.showModalDialog(dlgUrl,dlgParams,dlgSettings);
	//-- returnValue [0]=LibraryID, [1]=FolderID, [2]=FolderUNID, [3]=FolderAccessLevel 	
	if(returnValue){		
		if (returnValue[1] == docInfo.FolderID) {
			alert("Unable to create bookmark in the same folder as the source document. Please choose an alternate folder.");
			return false;
		}
		//---------------------------------- Check Folder Access Level -----------------------------------------
		if (Number(returnValue[3]) < 3){
					alert("You do not have sufficient rights to create documents in the selected folder. Please choose an alternate folder.");
					return false;					
		}
		//--- processing agent url
		var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/DocumentServices?OpenAgent"
		var request="";
		//--build the CREATEBOOKMARK request
		request += "<Request>";
		request += "<Action>CREATEBOOKMARK</Action>";
		request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
		request += "<Unid>" + currentEntry + "</Unid>";
		request += "<LibraryID>" + returnValue[0] + "</LibraryID>";
		request += "<FolderID>" + returnValue[1] + "</FolderID>";
		request += "</Request>";
		var httpObj = new objHTTP()
		if(httpObj.PostData(request, url)){
			 if(httpObj.status=="OK") {
				if(httpObj.results.length > 0){
					alert("Bookmark successfully created in chosen folder.");
					createdok = true;
				}
			}
		}		
	}
	return createdok;	
}

//------------------------------------ document properties dialog -------------------------------
function ShowDocumentProperties(docId)
{
	if(!objView.currentEntry) {return false;}
	var dlgParamaters = "dialogHeight: 390px; dialogWidth: 540px; dialogTop: px; dialogLeft: px; edge: raised; "
	dlgParamaters += "center: Yes; help: No; resizable: No; status: No;"
	var targetId = (docId)? docId : objView.currentEntry;
	var dlgUrl = docInfo.ServerUrl + "/" + docInfo.NsfName+ "/dlgDocumentProperties?OpenForm&ParentUNID=" + targetId + "&mode=R";
	var dlgParent = window;
	return window.showModalDialog(dlgUrl,dlgParent,dlgParamaters);
}

//------------------------------------ folder properties dialog -------------------------------
function ShowFolderProperties(folderId, forceMode)
{
	var dlgParamaters = "dialogHeight: 530px; dialogWidth: 560px; dialogTop: px; dialogLeft: px; edge: raised; "
	dlgParamaters += "center: Yes; help: No; resizable: No; status: No;"
	var mode = (docInfo.DocAccessLevel>="6" && !docInfo.isRecycleBin)? "&mode=E" : "&mode=R";
	mode = (forceMode)? "&mode=" + forceMode : mode;
	var targetId = (folderId)? folderId : docInfo.DocID;
	var dlgUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/dlgFolderProperties?OpenForm&ParentUNID=" + targetId + mode;
	var dlgParent = window;
	var retVal = window.showModalDialog(dlgUrl,dlgParent,dlgParamaters);
	if(retVal)
	{
		try	{
				parent.frames['fraLeftFrame'].ReloadLibraryByID( docInfo.LibraryKey, docInfo.FolderID, false);
			}
		catch (e){}
		location.replace(location.href);
	}
	
}

//------------------------------------ folder archive dialog -------------------------------
function ShowFolderArchive()
{
	var dlgParamaters = "dialogHeight: 550px; dialogWidth: 750px; dialogTop: px; dialogLeft: px; edge: raised; "
	dlgParamaters += "center: Yes; help: No; resizable: Yes; status: No;"
	var dlgUrl = docInfo.ServerUrl + "/" + docInfo.NsfName+ "/dlgFolderArchive?OpenForm&parentUNID=" + docInfo.DocID;
	dlgUrl += (inpViewScope.checked)? "&viewscope=ST" : "&viewscope=";
	if( window.showModalDialog(dlgUrl,"",dlgParamaters)){
		//-- refresh view if documents were restored
		objView.Refresh(true, false, true);
	}
	
}
//---------------------------- create new document ----------------------------

function ViewCreateDocument()
{
var docTypeArray=docInfo.DocumentType.split(", ");

if(docTypeArray.length==1 && docTypeArray[0] !="")
	{
		docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/Document?OpenForm&ParentUNID=" + docInfo.DocID;
		docUrl += "&typekey=" + docInfo.DocumentType;
		ViewLoadDocument(docUrl);
	}
	else
	{
		dlgParamaters = "dialogHeight: 430px; dialogWidth: 370px; dialogTop: px; dialogLeft: px; edge: Raised; "
		dlgParamaters += "center: Yes; help: No; resizable: No; status: No;"
		dlgUrl =docInfo.ServerUrl + "/" + docInfo.NsfName + "/dlgSelectDocType?OpenForm&ParentUNID=" + docInfo.DocID;
		dlgParent = window;
		selType = window.showModalDialog(dlgUrl,dlgParent,dlgParamaters);
	}
}

//============ import files dialog ===============
function ImportFiles()
{
	var dlgParamaters = "dialogHeight: 360px; dialogWidth: 560px;edge: raised; "
	dlgParamaters += "center: Yes; help: No; resizable: No; status: No;"
	
	var dlgUrl =docInfo.ServerUrl + "/" + docInfo.NsfName + "/" + "dlgFileImport?OpenForm&ParentUNID=" + docInfo.DocID
	return window.showModalDialog(dlgUrl,window,dlgParamaters);

}
//================= sets header title ====================
function ViewSetTitleOptions(title)
{
	doc.divHeadingTitle.innerText = title;
}

// ---------- send mail memo with link to documents --------
function SendDocumentMessage()
{
	var dlgUrl =docInfo.ServerUrl + "/" + NsfName + "/" + "dlgSendLinkMessage?OpenForm&ParentUNID=" + docInfo.DocID;
	var dlgSettings = "dialogHeight:350px;dialogWidth:420px;center:yes; help:no; resizable:no; status:no;";
	var retValues =  window.showModalDialog(dlgUrl,window,dlgSettings); //Display the address dialog
	if(!retValues) {return false;}
	var folderPath = docInfo.ServerUrl + docInfo.PortalWebPath + "/HomeFrame?ReadForm&goto=" + docInfo.LibraryKey + "," + docInfo.FolderID;
	var request = "<?xml version='1.0' encoding='UTF-8' ?>";
	request += "<Request>";
	request += "<Action>";
	request += (retValues[3]=="A")? "SENDATTACHMENTMSG" : "SENDLINKMSG";
	request += "</Action>";
	request += "<SendTo><![CDATA[" + retValues[0] +  "]]></SendTo>";
	request += "<Subject><![CDATA[" + retValues[1] +  "]]></Subject>";
	request += "<Body><![CDATA[" + retValues[2] +  "]]></Body>";
	request += "<UserName><![CDATA[" + docInfo.UserName +  "]]></UserName>";	
	request += "<FolderName><![CDATA[" + docInfo.FolderName +  "]]></FolderName>";
	request += "<FolderPath><![CDATA["  + folderPath +  "]]></FolderPath>";
	
	if(objView.selectedEntries.length != 0){
		for(var k=0; k<objView.selectedEntries.length; k++){
			request += (objView.selectedEntries[k])? "<Unid>" + objView.selectedEntries[k] +  "</Unid>" :"";
		}
	}

	request += "</Request>"

	//--- process on server --
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/MessagingServices?OpenAgent"
	var httpObj = new objHTTP();
	
	if(httpObj.PostData(encodeURIComponent(request), url)){
		 if(httpObj.status=="OK"){
				//all OK
				alert("Message was sent.")
				return true;
			}
	}
	return false;

}


//Change the doctype of  a document

function ChangeDocType(currentEntry){

	if ( currentEntry == undefined ) {
		currentEntry = objView.currentEntry
		if(objView.selectedEntries.length == 0 && ( currentEntry == undefined  || currentEntry == "" )){
			thingFactory.MessageBox("Please select at least one document for changing the doc type.", 16, "Error");
			return false;
		}
	}
	
	
	var dlgParamaters = "dialogHeight: 430px; dialogWidth: 370px; dialogTop: px; dialogLeft: px; edge: Raised; "
	dlgParamaters += "center: Yes; help: No; resizable: No; status: No;"
	var dlgUrl =docInfo.ServerUrl + "/" + docInfo.NsfName + "/dlgSelectDocType?OpenForm&ParentUNID=" + docInfo.DocID + "&mode=change"
	dlgParent = window;
	selType = window.showModalDialog(dlgUrl,dlgParent,dlgParamaters);
	if ( selType == undefined || selType == "" ) return;
	
	var request="";

	//--collect the xml for all nodes to be processed
	request += "<Request>";
	request += "<Action>CHANGEDOCTYPE</Action>";
	request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "<TypeKey>" + selType+ "</TypeKey>";
	
	
	
	if(objView.selectedEntries.length> 0){
			for(var k=0; k<objView.selectedEntries.length; k++){
				request += (objView.selectedEntries[k])? "<Unid>" + objView.selectedEntries[k] +  "</Unid>" :"";
			}
	}else
	{
		request += "<Unid>" + currentEntry+  "</Unid>" ;
	}
	request += "</Request>";
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/DocumentServices?OpenAgent"
	
	var httpObj = new objHTTP();
	ShowProgressMessage("Processing request. Please wait...");
	var retVal=false;
	if(httpObj.PostData(request, url))
	{
	 if(httpObj.status=="OK") {
		retVal=true;
		}
	}
	HideProgressMessage();
	objView.Refresh(true, false, true);
	return retVal;	
}
		
		
//-------------------------- manually archive selected documents ----------------------

function ArchiveSelected()
{

	if(objView.selectedEntries.length == 0){
		thingFactory.MessageBox("Please select at least one document for archiving.", 16, "Error");
		return false;
		}
		
	var submitChoice = thingFactory.Messagebox("You are about to archive " + objView.selectedEntries.length + " document(s).  Are you sure?", 4+32, "Archiving documents?")
	if (submitChoice == 7)
		{
			return false;
		}	
	var request="";

	//--collect the xml for all nodes to be processed
	request += "<Request>";
	request += "<Action>ARCHIVESELECTED</Action>";
	request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	if(objView.selectedEntries.length != 0){
		for(var k=0; k<objView.selectedEntries.length; k++){
			request += (objView.selectedEntries[k])? "<Unid>" + objView.selectedEntries[k] +  "</Unid>" :"";
		}
	}
	request += "</Request>";

	//--- processing agent url
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/LibraryServices?OpenAgent"
	
	var httpObj = new objHTTP();
	ShowProgressMessage("Processing request. Please wait...");
	var retVal=false;
	if(httpObj.PostData(request, url))
	{
	 if(httpObj.status=="OK") {
		retVal=true;
		}
	}
	HideProgressMessage();
	return retVal;
}

//-------------------------- import mail messages from email or dropbox ----------------------

function ImportMessages()
{
	var dlgParams = window;
	var dlgUrl =docInfo.MailAcquireMessagesDialogUrl;
	if (dlgUrl == ''){
			thingFactory.MessageBox("Import Messages is not available for your current mail configuration.", 64, "Import Messages Not Available");
			return false;
	}
	alert ( "here");
	var dlgSettings = "dialogHeight:600px;dialogWidth:810px;center:yes; help:no; resizable:yes; status:no;";
	if( window.showModalDialog(dlgUrl,dlgParams,dlgSettings) > 0){
		objView.Refresh(true, false, true);
	}

}

//----------- custom search ------------
function CustomSearch()
{
	var dlgUrl = docInfo.ServerUrl + docInfo.PortalWebPath + "/dlgCustomSearch?OpenForm"	
	var dlgParams = window;
	var dlgSettings = "dialogHeight:300px;dialogWidth:550px;center:yes; help:no; resizable:no; status:no;";
	var retVal= window.showModelessDialog(dlgUrl,dlgParams,dlgSettings); //Display the custom search dialog
}

//---------------- clipboard functions ----------------
function CopyLink(currentEntry)
{
	var docUrl=docInfo.ServerUrl + docInfo.PortalWebPath + "/wHomeFrame?ReadForm&goto=" + docInfo.LibraryKey + "," + docInfo.FolderID;
	docUrl += (currentEntry)? "," + currentEntry : ""
	 var objExt = doc.DLExtensions;
	 //-----------add 'text' format data to clipboard -----------
	 var flag = objExt.SetCBData("text", docUrl );
}

function CreateShortcut()
{
	var docUrl=docInfo.ServerUrl + docInfo.PortalWebPath + "/wHomeFrame?ReadForm&goto=" + docInfo.LibraryKey + "," + docInfo.FolderID;
	var objExt = doc.DLExtensions;
	//-------------------------------------------
	if(objExt.CreateIEShortcut("DocLogic folder - " + docInfo.FolderName.replace(/[\(\)\<\>\,\;\:\\\/\"\[\]]/, " "), docUrl, true)){
		alert("Folder shortcut was added to your desktop.")
	}
}

function InitFolderFiltering(){
	var thingFactory = document.all.thingFactory
	thingFactory.SetCookieValue("ViewXML", objView.oXml.xml)
	return;
}

function ReloadOrigXML(){
	var thingFactory = document.all.thingFactory
	objView.oXml.loadXML(thingFactory.GetCookieValue("ViewXML"))
	return;
}

function ResetFolderFilter(){
//-----Reset the CurrentFolderDiv innerHTML to the folder's set filter and refresh-----
//-----This is different than the ClearAllFilterswhich clears all filters-----
	document.all.CurrentFilterDiv.innerHTML = "";
	var UseOriginalXML = false
	ApplyDefaultFolderFilter(UseOriginalXML);
	return;
}

function ClearAllFilters()
{
//-----Clears all filtering including the default folder filter if there is one----
	var thingFactory = document.all.thingFactory
	objView.oXml.loadXML(thingFactory.GetCookieValue("ViewXML"))
	ClearAllColFilterFlags();
	document.all.divViewContent.style.display = "none"
	objView.Refresh(true,true,true);
	ApplyFolderFilter(false);				
	document.all.divViewContent.style.display = ""		
	return;
}

function ClearAllFiltersSub()
{
//-----Clears all filtering including the default folder filter if there is one and when the Query option is set to All Versions----
	var thingFactory = document.all.thingFactory
	objView.oXml.loadXML(thingFactory.GetCookieValue("ViewXML"))
	ClearAllColFilterFlags();
	objView.Refresh(true,true,false)	
	return;
}

function ClearAllColFilterFlags(){
	document.all.CurrentFilterDiv.innerHTML = "";	
	for(var x=0; x<objView.columns.length; x++){
		var objColumn = objView.columns[x]
		objColumn.isFiltered = false
	}
	return;
}

function ClearColFilterFlag(NodeName){
	for(var x=0; x<objView.columns.length; x++){
		var objColumn = objView.columns[x]
		if(NodeName == objColumn.xmlNodeName){
			objColumn.isFiltered = false;
		}
	}
	return;
}

function SetColumnFilterFlag(NodeName){
	for(var x=0; x<objView.columns.length; x++){
		var objColumn = objView.columns[x]
		if(NodeName == objColumn.xmlNodeName){
			objColumn.isFiltered = true;
		}
	}
	return;
}

function SetAllColFilterFlags(){
	var filterexpArray;
	var filterarray = document.all.CurrentFilterDiv.innerHTML.split("~")
	
	for (var x=0; x<objView.columns.length; x++){
		var objColumn = objView.columns[x]
		objColumn.isFiltered = false; //first we reset the columns as we come to them..then determine if they are to be set according to the current filter expression
		for (var i=0; i< filterarray.length; i++){
			filterexpArray = filterarray[i].split("=")
			if(filterexpArray[0] == objColumn.xmlNodeName){
				objColumn.isFiltered = true;
			}
		}
	}
	return;
}

function CreateFolderFilterStyle(filterExpr){
    try
    {
	var folderfilterObj = document.all.FolderFilterXSL.XMLDocument
	var xslFilter = '<?xml version="1.0"?>'
	xslFilter += '<xsl:stylesheet  version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" ><xsl:output method="xml"/>'
	xslFilter += '<xsl:template match="/">'
	xslFilter += '<documents>'
	xslFilter += '<xsl:for-each select="//document[' + filterExpr + ']">'
	xslFilter += '<xsl:copy-of select="."/>'
	xslFilter += '</xsl:for-each>'
	xslFilter += '</documents>'
	xslFilter += '</xsl:template>'
	xslFilter += '</xsl:stylesheet>'

	folderfilterObj.loadXML(xslFilter)
		
	}
	catch(e)
	{   
		thingFactory.MessageBox( "Could not create filter: " + e.message  ,4096+16, "Filter error" );
		return false;
	}    	
return true;
}

function ApplyFolderFilter(UseOriginalXML){

	ApplyQueryOptionToFilter();
	
	var filterexp = "";
	var CurrentFilter = document.all.CurrentFilterDiv.innerHTML;
	var Fn = "";
	var FnExp = "";
	var NewExp;
	var expArray;
		
	if (CurrentFilter != ""){
		var CurrentFilterArray = CurrentFilter.split("~")
		for (var x=0; x<CurrentFilterArray.length; x++){
			if(CurrentFilterArray[x].indexOf(" or ") != -1){ 
				//----- if ' or ' is found in the string, that is, 'space or space', then we have an 'or' in the expression so just pass it through.
				NewExp = " (" + CurrentFilterArray[x] + ") "
			}else{ //----- ' or ' is not found in the string therefore we want to perform a 'contains"
				expArray = CurrentFilterArray[x].split("=")
				Fn = expArray[0]
				FnExp = "', " + rightBack(leftBack(expArray[1], "'"),"'") + ", '"
				NewExp = "contains(concat(concat(', ', " + Fn + "), ', '), " + FnExp + ")"				
			}

			if(filterexp == ""){
				filterexp = NewExp;
			}else{
				filterexp += " and " + NewExp
			}
		}	
	}
	
	if(filterexp == ""){
		ClearAllFiltersSub();
	}else{
		if(CreateFolderFilterStyle(filterexp)){
			if(UseOriginalXML){
				ReloadOrigXML();
			}
			var objXSLDoc = document.all.FolderFilterXSL.XMLDocument;
			var retXML = objView.oXml.transformNode(objXSLDoc);
			objView.oXml.loadXML( retXML);
			objView.Refresh(false,true,true)
		}
	}
	return;
}

function ApplyDefaultFolderFilter(UseOriginalXML){
	if(!UseOriginalXML){//Only want to init folder filtering when the view is initially opened, not when the Reset button is clicked
		InitFolderFiltering();
	}
	
	var userInfo = parent.frames['fraToolbar'].document.all.info
	var docInfo = document.all.info

	var userfilternodes = userInfo.UserFltrFieldNodes;
	var userfilternodevals = userInfo.UserFltrFieldNodeVals;
	var fltrNodes = docInfo.fltrFieldNodes;

	var userfilternodesArr = userInfo.UserFltrFieldNodes.split(";")
	var userfilternodevalsArr = userInfo.UserFltrFieldNodeVals.split(";")
	var fltrNodesArr = docInfo.fltrFieldNodes.split(";")
	var filterexp = ""

	for (i=0; i< fltrNodesArr.length; i++){
		for (j=0; j<userfilternodesArr.length;j++){
			if (fltrNodesArr[i] == userfilternodesArr[j]){
				if(filterexp == ""){
					filterexp = fltrNodesArr[i] + "=" + "'" + userfilternodevalsArr[j] + "'"
				}else{
					filterexp =filterexp + "~" + fltrNodesArr[i] + "=" + "'" + userfilternodevalsArr[j] + "'"
				}
			}
		}
	}
	document.all.CurrentFilterDiv.innerHTML = filterexp
	SetAllColFilterFlags();
	ApplyFolderFilter(UseOriginalXML);
	return;
}

function ViewColumnSelectFilter(source){
	if(docInfo.EnableFolderFiltering != "1"){return;}

	var NodeList
	var columnvals = "";
	var slist = ""; //sorted list
	var ulist = ""; //unique list
	var columnObj = objView.columns[source.colIdx]
	
	if (columnObj == null){ return;}
	//columnObj.isFiltered = true;
	var NodeName = columnObj.xmlNodeName
	var NodeExpr = "//" + NodeName
	var thingFactory = document.all.thingFactory
	var CurrentSelectedOptionText;
	var NodeListText = "";
		
	NodeList = objView.oXml.selectNodes(NodeExpr) 
	if(NodeList[0]==null){   //no documents in the folder/view
		alert("There are no documents to filter.")
		return;
	}
	
	//-----If NodeList length is greater than one then sort and unique the values-----
	if(NodeList.length > 1){
		for( var i = 0; i < NodeList.length; i++ ){ 
			NodeListText = NodeList[i].text
			if (NodeListText.indexOf(",") > 0){
				NodeListText = NodeListText.replace(", ", "~")
			}
			if(columnvals == ""){
				//columnvals += NodeList[i].text
				columnvals += NodeListText
			}else{
				//columnvals += "~" + NodeList[i].text
				columnvals += "~" + NodeListText
			}
		} 
		slist = thingFactory.Sort(columnvals, "~","~")
		ulist = thingFactory.Unique(slist, "~","~")
	}else{
			ulist = NodeList[0].text
	}

	CurrentSelectedOptionText = getCurrentSelectedOptionText(NodeName)

	var optionarray = ulist.split("~")
	var optionlist = "<select name='" + NodeName + "' id='" + NodeName + "' onchange='CreateFilter(this)'  onblur='HideFilterSelection(this)'><option value='All'>All</option>"
	for(var j = 0; j<optionarray.length; j++){
		if(optionarray[j] == CurrentSelectedOptionText){
			optionlist += "<option selected=true value='" + optionarray[j] + "'>" + optionarray[j] + "</option>" 
			}else{
			optionlist += "<option value='" + optionarray[j] + "'>" + optionarray[j] + "</option>" 
		}
	}
	optionlist += "</select>"

	var SelectFilterDiv = document.all.SelectFilterDiv
	SelectFilterDiv.innerHTML = optionlist
	SelectFilterDiv.style.left = getOffset(source).left;
	SelectFilterDiv.style.top = getOffset(source).top + source.offsetHeight;
	var selectObj = document.getElementById(NodeName);
	selectObj.style.width = columnObj.width;

	document.all.SelectFilterDiv.style.display = "";
	selectObj.focus();
}

function CreateFilter(selectobj){
	var filterexp;
 	var NodeName = selectobj.name
 	var NodeValue = selectobj.options[selectobj.selectedIndex].value
 	var CurrentFilter;
 	var CurrentFilterArray;
 	var filterexp;
 	var newfilterexp;
 	var UseOriginalXML = false;

 	filterexp = NodeName + "='" + NodeValue + "'"
 	
 	if(NodeValue == "All"){
 		RemoveFromCurrentFilter(NodeName)
 		UseOriginalXML = true;
 	}else{
 		AddToCurrentFilter(filterexp)
 		SetColumnFilterFlag(NodeName)
 		UseOriginalXML = false;
 	}
 	
 	ApplyFolderFilter(UseOriginalXML)
 	
 	selectobj.style.display= "none"
}

function RemoveFromCurrentFilter(NodeName){
//-----Find the node and remove it-----
	var CurrentFilterTxt = document.all.CurrentFilterDiv.innerHTML
	var NewFilterTxt = "";
	var CurrentFilterArray = CurrentFilterTxt.split("~")
	var CurrentExpArray;
	
	for (var x=0; x<CurrentFilterArray.length; x++){
		CurrentExpArray = CurrentFilterArray[x].split("=")
		if (CurrentExpArray[0] != NodeName){
			if(NewFilterTxt == ""){
				NewFilterTxt = CurrentFilterArray[x]
			}else{
				NewFilterTxt += "~" + CurrentFilterArray[x]
			}
		}
	}
	ClearColFilterFlag(NodeName)
	document.all.CurrentFilterDiv.innerHTML = NewFilterTxt
}

function AddToCurrentFilter(filterexp){
	var CurrentFilterTxt = "";

	CurrentFilterTxt = document.all.CurrentFilterDiv.innerHTML
	if(CurrentFilterTxt == ""){
		document.all.CurrentFilterDiv.innerHTML= filterexp
	}else{
		if (CurrentFilterTxt.indexOf(filterexp) == -1){
			CurrentFilterTxt += "~" + filterexp
			document.all.CurrentFilterDiv.innerHTML = CurrentFilterTxt
		}
	}
}

function getOffset( el ) {
	var _x = 0;     
	var _y = 0;
	while( el && !isNaN( el.offsetLeft ) && !isNaN( el.offsetTop ) ) {
		_x += el.offsetLeft - el.scrollLeft;
		_y += el.offsetTop - el.scrollTop;
		el = el.offsetParent;
	}

	return { top: _y, left: _x }; 
}  

function getCurrentSelectedOptionText(NodeName){

	var CurrentFilterTxt = document.all.CurrentFilterDiv.innerHTML
	var CurrentFilterArray = CurrentFilterTxt.split("~")
	var expValuesArray;
	var currentSelectedOptionText = "";

	for (var x=0; x<CurrentFilterArray.length; x++){
		expValuesArray = CurrentFilterArray[x].split("=")
		if(expValuesArray[0] == NodeName){
			currentSelectedOption = expValuesArray[1];
			currentSelectedOptionText = rightBack(leftBack(currentSelectedOption, "'"),"'")
			return currentSelectedOptionText;
		}
	}
	return currentSelectedOptionText;
}

function HideFilterSelection(objSelectFilterField){
	objSelectFilterField.style.display = "none"
}

function ApplyQueryOptionToFilter(){
	var addfilteroption = "";
	var currShowOption = doc.selVersionScope.options[doc.selVersionScope.selectedIndex].value;

	if (currShowOption == "REL") {
		addfilteroption = "statno='1' or apflag='1'" //Released or allow preview flag
	}
	if (currShowOption == "NEW") {
		addfilteroption = "statno='0'" //Draft
	}			
	RemoveFromCurrentFilter("statno")
	AddToCurrentFilter(addfilteroption)
	return;
}

// -->
</script>

<script language="JavaScript" type="text/javascript">
<!-- 
var sfName="sfFacetMapPanel";
var facetMapPanelDiv =null,divFacetMapHeaderLabel=null ;
var facetMapPanelInitial_Left=null;
var facetMapPanelInital_Top=null;
//var facetMapPanelHeightMin=27, facetMapPanelHeightMax=355;
var facetMapPanelHeightMin=27, facetMapPanelHeightMax=305;

var YTop =null;
var xyCoord = new Array();
var slider=null, scaleFactor=null, intialAddEventFlagStatus=false; // slider globals

var initialTagCloudLoad=true;

var browser = new Browser();
var dragObj = new Object();// global object to hold drag information.
dragObj.zIndex = 0;


// opens tag cloud
function openTagCloud()
{
       if (initialTagCloudLoad)
       {
         	var facetMapPanelDiv = document.getElementById("facetMapPanel");
	     facetMapPanelDiv.style.display="block";
    	  	initTagCloud();
	  	initFacetMapPanel();
	  	initialTagCloudLoad=false;
	  }
	  hideShowFacetMapPanel();

}
function initFacetMapPanel()
{
   try{
	facetMapPanelDiv = document.getElementById("facetMapPanel");
	//coordinate to hide the div at the bottom
	facetMapPanelInitial_Left=YAHOO.util.Dom.getX(facetMapPanelDiv)
	facetMapPanelInital_Top=YAHOO.util.Dom.getY(facetMapPanelDiv);
     divFacetMapHeaderLabel=document.getElementById("facetMapHeaderLabel");
     addEvent(document.getElementById("facetMapHeaderLabel"),'click',hideShowFacetMapPanel)
      intialAddEventFlagStatus=true;
	// set intial x an y coordinate for facet panel
	//alert("initFacetMapPanel() - facetMapPanelInitial_Left: " + 	facetMapPanelInitial_Left);
	//alert("initFacetMapPanel() - facetMapPanelInital_Top: " + 	facetMapPanelInital_Top);
	YAHOO.util.Dom.setX(facetMapPanelDiv,facetMapPanelInitial_Left); 
	YAHOO.util.Dom.setY(facetMapPanelDiv,facetMapPanelInital_Top); 
	createYUISlider();
	}
	catch(e){ alert("[ERROR - "+ sfName +" - initFacetMapPanel()] : \n" + e.message); }
}

function createYUISlider()
{
    		      var topConstraint = 0, bottomConstraint = 466, bgDiv="slider-bg", thumbDiv="slider-thumb";
    		       scaleFactor = 0.21459; // scale factor for converting the pixel offset into a real value
    			slider = YAHOO.widget.Slider.getHorizSlider(bgDiv, thumbDiv, topConstraint, bottomConstraint); // [params => slider div, slider thumb,left value, right value, [tick optional]]
			slider.setValue(bottomConstraint, true); // set the slider value to start on far right
			slider.subscribe("change", dimFacetPanel); // register change event to callback function [changeOpacity]
}

function dimFacetPanel()
{
	var actualVal = document.getElementById("slider-Pixel-value"); //for debug
	var convertedVal = document.getElementById("slider-Actual-value") //for debug
	var sliderConvertedVal= getSliderRealValue();
	var sliderActualVal= slider.getValue();
	
	actualVal.innerHTML=sliderActualVal;
	convertedVal.innerHTML=sliderConvertedVal;
	document.getElementById("slider-bg").title=sliderConvertedVal +"%";
    	changeDivOpacity(document.getElementById('sfFacetMapDataPanel') ,sliderConvertedVal)
}
// calculates slider real value using scale factor
function getSliderRealValue()
{
	try{
	  	return Math.round(slider.getValue() * scaleFactor);
	  }
	  catch(e){ alert("[ERROR - "+ sfName +" - dimFacetPanel()] : \n" + e.message); }
}
// to minimize/maximize
function hideShowFacetMapPanel()
{
	try	{
			   var element = document.getElementById("facetMapPanelContent");
			   var btnHeaderElement= document.getElementById("slidingTabBtn");
			   var facetMapHeaderLabel=document.getElementById("facetMapHeaderLabel")
			   if(element.up == null || element.down)
			   {   //Slide OUT		
	    		       element.up = true;
			       element.down = false;
	     	       //element.style.display="block";
	     	         facetMapPanelDiv.style.display="block"
			        btnHeaderElement.innerHTML = 'r'; // minimize arrow 
	     		  facetMapPanelDiv.style.height=facetMapPanelHeightMax; // expand height
	     		  divFacetMapHeaderLabel.style.cursor="move";
				 YTop =(facetMapPanelDiv,facetMapPanelInital_Top-facetMapPanelHeightMax)
				 xyCoord[0]=facetMapPanelInitial_Left
				 xyCoord[1]=YTop
	       		 YAHOO.util.Dom.setXY(facetMapPanelDiv,xyCoord); 
	      		 removeEvent(document.getElementById("facetMapHeaderLabel"),'click',hideShowFacetMapPanel) // remove click event from header 
	  		   }
			   else
			   {  //SLIDE IN
			      element.up = false;
			      element.down = true;
			       btnHeaderElement.innerHTML = '5'; //maximize arrow
			        //facetMapPanelDiv.style.height=facetMapPanelHeightMin; //collapse height
	       		  divFacetMapHeaderLabel.style.cursor="pointer"; // change the cursor to mouse pointer
	         		  //YAHOO.util.Dom.setX(facetMapPanelDiv,facetMapPanelInitial_Left);  // set left coordinates
	       		  //YAHOO.util.Dom.setY(facetMapPanelDiv,facetMapPanelInital_Top); // set top coordinates
	       		  addEvent(document.getElementById("facetMapHeaderLabel"),'click',hideShowFacetMapPanel) // add click event to header
	 		      // element.style.display="none";
	 		       facetMapPanelDiv.style.display="none"
			   }
		   }
	  	catch(e)
		{
			alert("[ERROR - sfFacetMapPanel - hideShowFacetMapPanel()] : \n" + e.message);
		}

}

// pass DIV object and the integer value to fade
function changeDivOpacity(elem, opacityAsInt)
{
	var opacityAsDecimal = opacityAsInt;
	if (opacityAsInt > 100)
		opacityAsInt = opacityAsDecimal = 100; 
	else if (opacityAsInt < 0)
		opacityAsInt = opacityAsDecimal = 0; 

	opacityAsDecimal /= 100;

	if (opacityAsInt < 1)
		opacityAsInt = 1; // IE7 bug, text smoothing cuts out if 0

	elem.style.opacity = opacityAsDecimal;
	elem.style.filter  = "alpha(opacity=" + opacityAsInt + ")";
}

//register event
function addEvent(node ,evt, fnc)
{
        if (node.addEventListener)
          node.addEventListener(evt,fnc,false);
        else if (node.attachEvent)
          node.attachEvent('on'+evt,fnc);
        else
          return false;
        return true;
}

// remove event
function removeEvent(node ,evt, fnc)
{
        if (node.removeEventListener)
          node.removeEventListener(evt,fnc,false);
        else if (node.detachEvent)
          node.detachEvent('on'+evt,fnc);
        else
          return false;
        return true;
}

// browser and version.
function Browser() 
{

  var ua, s, i;

  this.isIE    = false;
  this.isNS    = false;
  this.version = null;

  ua = navigator.userAgent;

  s = "MSIE";
  if ((i = ua.indexOf(s)) >= 0) {
    this.isIE = true;
    this.version = parseFloat(ua.substr(i + s.length));
    return;
  }

  s = "Netscape6/";
  if ((i = ua.indexOf(s)) >= 0) {
    this.isNS = true;
    this.version = parseFloat(ua.substr(i + s.length));
    return;
  }

  
}

// start moving div
function dragStart(event, id) 
{
  var el;
  var x, y;
  // If an element id was given, find it. Otherwise use the element being
  // clicked on.
  if (id)
    dragObj.elNode = document.getElementById(id);
  else {
    if (browser.isIE)
      dragObj.elNode = window.event.srcElement;
    if (browser.isNS)
      dragObj.elNode = event.target;
    // If this is a text node, use its parent element.
    if (dragObj.elNode.nodeType == 3)
      dragObj.elNode = dragObj.elNode.parentNode;
  }

  // Get cursor position with respect to the page.
  if (browser.isIE) {
    x = window.event.clientX + document.documentElement.scrollLeft
      + document.body.scrollLeft;
    y = window.event.clientY + document.documentElement.scrollTop
      + document.body.scrollTop;
  }
  if (browser.isNS) {
    x = event.clientX + window.scrollX;
    y = event.clientY + window.scrollY;
  }

  // Save starting positions of cursor and element.
  dragObj.cursorStartX = x;
  dragObj.cursorStartY = y;
  dragObj.elStartLeft  = parseInt(dragObj.elNode.style.left, 10);
  dragObj.elStartTop   = parseInt(dragObj.elNode.style.top,  10);

  if (isNaN(dragObj.elStartLeft)) dragObj.elStartLeft = 0;
  if (isNaN(dragObj.elStartTop))  dragObj.elStartTop  = 0;

  // Update element's z-index.
  dragObj.elNode.style.zIndex = ++dragObj.zIndex;

  // Capture mousemove and mouseup events on the page.
  if (browser.isIE) {
    document.attachEvent("onmousemove", dragGo);
    document.attachEvent("onmouseup",   dragStop);
    window.event.cancelBubble = true;
    window.event.returnValue = false;
  }
  if (browser.isNS) {
    document.addEventListener("mousemove", dragGo,   true);
    document.addEventListener("mouseup",   dragStop, true);
    event.preventDefault();
  }
}

function dragGo(event) 
{
  var x, y;
  // Get cursor position with respect to the page.
  if (browser.isIE) {
    x = window.event.clientX + document.documentElement.scrollLeft
      + document.body.scrollLeft;
    y = window.event.clientY + document.documentElement.scrollTop
      + document.body.scrollTop;
  }
  if (browser.isNS) {
    x = event.clientX + window.scrollX;
    y = event.clientY + window.scrollY;
  }

  // Move drag element by the same amount the cursor has moved.

  dragObj.elNode.style.left = (dragObj.elStartLeft + x - dragObj.cursorStartX) + "px";
  dragObj.elNode.style.top  = (dragObj.elStartTop  + y - dragObj.cursorStartY) + "px";

  if (browser.isIE) {
    window.event.cancelBubble = true;
    window.event.returnValue = false;
  }
  if (browser.isNS)
    event.preventDefault();
}

function dragStop(event) {

  // Stop capturing mousemove and mouseup events.

  if (browser.isIE) {
    document.detachEvent("onmousemove", dragGo);
    document.detachEvent("onmouseup",   dragStop);
  }
  if (browser.isNS) {
    document.removeEventListener("mousemove", dragGo,   true);
    document.removeEventListener("mouseup",   dragStop, true);
  }
} 
</script>

<script language="JavaScript" type="text/javascript">
//--------------------- TAG CLOUD JS -----------------------------------------------------------------------
var thingfactory =  document.all.thingFactory;
//------------- tag cloud global ---------------
var filterExpression_Cat1Array=null;
var breadCrumbTrail= null;
var tagCloudCloud_FacetFields1="";
var tagCatMaxLevel=0;
var category1_Array =null;
var catFields = null; // to hold only category fields
var catSequence = null; // to hold sequence for cat fields
var currentDisplayKey="";
var currentSelectedTag="";
var currentFilterExpression="";
var currentFacetMapFields="";

var INITIAL_XML="";
var filteredXML="";
var isTagCloudStyle=true;
var tagCloudDiv = "";
var tagCloudXMLObj =null;
var pickTopTags=0;
var pickTagsRange_Max=5;
var pickTagsRange_Min=0;

//---- changes to tagcloud style
function changeTagStyle(obj)
{
	//alert("changeTagStyle: obj id - " + obj.id);
	isTagCloudStyle=true;
	drawTagCloud(currentDisplayKey,filteredXML);
}

//---- changes to number style ---------
function changeNumberStyle(obj)
{
	isTagCloudStyle=false;
	drawTagCloud(currentDisplayKey,filteredXML);
}

//--------------- init variables for tag clouds --------------------
function initTags()
{
 	var methodName="initTags(); ";
	try
	{
	
		//alert(methodName+ " - filterExpression_Cat1Array= > "+filterExpression_Cat1Array);
		 tagCatMaxLevel=0;
		 breadCrumbTrail= new Array();
		catFields=new Array(); //tag field array
		catSequence= new Array(); //tag sequence array
		breadCrumbTrail[0]="All Tags"; 
		filterExpression_Cat1Array= new Array(); // filter expression array
		//-------divs -----------------
		tagCloudDiv=null;
	     tagCloudDiv = document.getElementById("tagCloudDiv");
	     var breadCrumbDiv = document .getElementById("tagSelectedDiv");
	     breadCrumbDiv.innerHTML="All Tags"; // reset bread crumb
	     
	    	currentFacetMapFields=docInfo.FacetMapFields // facet map fields from docinfo span tag
	    	//alert(methodName+ " - currentFacetMapFields : "+currentFacetMapFields);
	     if( currentFacetMapFields=="")
	    {
	    		   tagCloudDiv.innerHTML= "<center>!!! <b>No Facet Map found </b>!!! Default system facet map is not created or set as default. Please contact system administrator for more info.";
	    		   return false;
	     }
		tagCloudCloud_FacetFields1=currentFacetMapFields;
	     category1_Array =tagCloudCloud_FacetFields1.split(',');	
	    //alert(methodName+" category1_Array : "+ category1_Array )
	     for( var x=0;x<category1_Array.length;x++)
		{
			var temp = category1_Array[x].split(":");	
		  	catFields[x]=temp[0];
		  	catSequence[temp[0]]=temp[1]; 
			//setting the max level
			if (temp[1] > tagCatMaxLevel)
				tagCatMaxLevel=temp[1];
		}
		INITIAL_XML=objView.oXml.xml
		filteredXML=INITIAL_XML;
		return true;
	}
    catch(e)
    { thingFactory.MessageBox( methodName + e.message ,4096+16, "[ERROR]" ); }    
}
//---------------- tag cloud entry point -----------------------------
function initTagCloud()
{
   var methodName="initTagCloud(): ";
   try
   {
		var perspectiveID=(currentPerspective)? currentPerspective : docInfo.DefaultPerspective; // get the id for pespective, perspective is changed on the fly currentperspective id would hold the perspective id
		if(initTags())
		{
			populateTagCloud_Initial();
			//alert(methodName+ "\nPerspective ID:" +perspectiveID  +"\nFacet Map ID:" +docInfo.FacetMapID + "\nFacetMapFields: "+ currentFacetMapFields + "\nisTagCloudStyle:" + isTagCloudStyle +"\nFacetMapName: " +docInfo.FacetMapName);
		}
	}
    catch(e)
    { thingFactory.MessageBox( methodName + e.message ,4096+16, "[ERROR]" ); }  
}
//------------------- initially populates tag cloud ----------------
function populateTagCloud_Initial()
{
	 var methodName=" populateTagCloud_Initial(): ";
	try
	{
		var temp = category1_Array[0].split(":");	
		if (category1_Array.length >0)
		{
			currentDisplayKey=temp[0]; 		//get the display key for tag cloud
		}
		else
		{
			thingFactory.MessageBox("You must have at least one facet map field." ,0+64,methodName)
			return;
		}
		
		//alert("[populateTagCloud_Initial() ]currentDisplayKey:"+currentDisplayKey);
		var tagXSLObj = document.all.tagCloudXLSStyle.XMLDocument;
	     var tagXLSStyle="";
		
		tagCloudXMLObj = new ActiveXObject("Msxml2.DOMDocument.3.0")
		tagCloudXMLObj.async=false;
		tagCloudXMLObj.loadXML(INITIAL_XML); // load xml
	     if(isTagCloudStyle)
	    		tagXLSStyle=getTagCloudXSL(currentDisplayKey); //get XSL for display
	    else
	    		tagXLSStyle=getNumberCloudXSL(currentDisplayKey); //get XSL for display
	    	    		
		//tagXLSStyle=getTagCloudXSL(currentDisplayKey) ; // get xsl template for xml data
	     tagXSLObj.loadXML(tagXLSStyle); //load xsl
	     tagCloudDiv = document.getElementById("tagCloudDiv");
	     tagCloudDiv.innerHTML= tagCloudXMLObj.transformNode(tagXSLObj); //populate div
	     processCloudFontSize(isTagCloudStyle); // calcualte font size for tags
	    	//---------------------------------------------------------------------------------------------
	}
	catch(e)
	{ thingFactory.MessageBox( methodName + e.message ,4096+16, "[ERROR]" ); }    
}

//---------- when a tag is clicked  -------
function tagSelected(selectedTag)
{
  	var methodName="tagSelected(selectedTag): ";
  	try{
	  	createBreadCrumbs(selectedTag);
	  	// check for single quote
		 if(selectedTag.id.indexOf("'") !=-1)
		{
 			filterExpression_Cat1Array[filterExpression_Cat1Array.length]=selectedTag.fieldName+'="'+Char2XMLEntity(selectedTag.id)+'"';
		}
		//check for double quote
		else if(selectedTag.id.indexOf('"') !=-1)
		{
		 			filterExpression_Cat1Array[filterExpression_Cat1Array.length]=selectedTag.fieldName+'=&apos;'+Char2XMLEntity(selectedTag.id)+'&apos;';
		}
		else
		{
			filterExpression_Cat1Array[filterExpression_Cat1Array.length]=selectedTag.fieldName+'="'+Char2XMLEntity(selectedTag.id)+'"';
	 	}
		//alert(methodName+" - filterExpression_Cat1Array: " + filterExpression_Cat1Array);
		filteredXML=filterSelectedXML(false); 
		updateTagCloud(selectedTag,filteredXML); // update tag cloud
	}
	catch(e)
	{ thingFactory.MessageBox( methodName + e.message ,4096+16, "[ERROR]" ); }    
	
}
//------- replaces XML special characters to entity names
function Char2XMLEntity (str)
 {
    str = str.replace(/&/g, '&amp;'); 
    str = str.replace(/'/g, '&apos;'); 
    str = str.replace(/"/g, '&quot;');
    str = str.replace(/>/g, '&gt;');
    str = str.replace(/</g, '&lt;');
    return str;
}
//------------- updates tag cloud based on selected tag  ------------
function updateTagCloud(selectedTag,filteredXML)
{
   var methodName="updateTagCloud(selectedTag,filteredXML): ";
   try
   {
	 //alert("TagMaxLevel: " + tagCatMaxLevel + "\ncatSequence[selectedTag.fieldName]:" + catSequence[selectedTag.fieldName]);    
      // check if the category has any more levels
	if (catSequence[selectedTag.fieldName]==tagCatMaxLevel)
    {
    		tagCloudDiv.innerHTML="";  // if the category drill down  is max then show nothing
    	}
    else
	{
		var catIndex=catSequence[selectedTag.fieldName]; //get the index for selected tag
		currentDisplayKey=catFields[catIndex]; // field to display in tag cloud
		drawTagCloud(currentDisplayKey,filteredXML); // redraws tag cloud
	}	      
   }
   catch(e)
    { thingFactory.MessageBox( methodName + e.message ,4096+16, "[ERROR]" ); }    	
}

//------------ redraws tag cloud for bread crumb click or tag selected click ----------
function drawTagCloud(displayKey,filteredXML)
{
	var methodName="drawTagCloud(displayKey,filteredXML):  ";
	try
	{
	    tagCloudXMLObj.loadXML(filteredXML); // load filtered XML
	    var tagXSLObj = document.all.tagCloudXLSStyle.XMLDocument;
	    var tagXLSStyle="";
	    if(isTagCloudStyle)
	    		tagXLSStyle=getTagCloudXSL(displayKey); // XSL for tagcloud style display
	    else
	    	    	tagXLSStyle=getNumberCloudXSL(displayKey); //xsl for number style display
	    	    		
	    tagXSLObj.loadXML(tagXLSStyle); // load xsl
	    tagCloudDiv = document.getElementById("tagCloudDiv");
	    tagCloudDiv.innerHTML= tagCloudXMLObj.transformNode(tagXSLObj); // poulate div
	    processCloudFontSize(isTagCloudStyle);
	}
	catch(e)
	{   thingFactory.MessageBox( methodName + e.message ,4096+16, "[ERROR]" ); }    
}
//------------ creates bread cumb for selected tag ------------
function createBreadCrumbs(selectedTag)
{		
	    var methodName="createBreadCrumbs(selectedTag)";
	try
	{
	    var tagSelectedSpan = document.getElementById("tagSelectedDiv");
	     var tempStr="";
	     breadCrumbTrail[breadCrumbTrail.length]=selectedTag.id; // add to the list
	     //output  bread crumb and set click ids
	     var a;
	     for( var i in breadCrumbTrail)
	     {
	     		if(i==0)
	     		{
		     		tempStr +="<a style='text-decoration: underline'";
					tempStr +=" index='"+i +"\' ";
					tempStr +=" onclick='tagCloudBreadCrumbClick(this)'>" +breadCrumbTrail[i]
					tempStr +="</a>";
	     		}
	     		else
	     		{
	     			tempStr +=">>";
	     		    if ( i==breadCrumbTrail.length-1)
	     		    {
	     		    		tempStr +=breadCrumbTrail[i];
	     		    }
	     		    else
	     		    {
	     		    		tempStr +="<a style='text-decoration: underline'";
		     			tempStr +=" index='"+i +"\' ";
						tempStr +=" onclick='tagCloudBreadCrumbClick(this)'>" +breadCrumbTrail[i]
						tempStr +="</a>";
					}

	     		}
	     }
	   //  alert("[createBreadCrumbs()] - breadCrumbTrail => " + breadCrumbTrail + "\n[createBreadCrumbs()] - tempStr => " + tempStr);
        tagSelectedSpan.innerHTML=tempStr; // populate bread crumb
     }
    	catch(e)
	{   thingFactory.MessageBox( methodName + e.message ,4096+16, "[ERROR]" ); }    
}
//----------------------- bread crumb click -----------------------
function tagCloudBreadCrumbClick(clickedBreadCrumb)
{
	var methodName="tagCloudBreadCrumbClick(clickedBreadCrumb): ";
	try
	{
	     var tagSelectedSpan = document.getElementById("tagSelectedDiv");
		//alert("tagCloudBreadCrumbClick() => " + clickedBreadCrumb + "\nfilterExpression_Cat1Array: [Before]" + filterExpression_Cat1Array);
		// --- regenerate filterExpression
		filterExpression_Cat1Array= new Array();
		
		// refresh breadCrumb based on the click
		var tempStr="";
		var size =parseInt(clickedBreadCrumb.index,10) 
		//alert("clicked Bread crumb index : " + size + "\n breadCrumbTrail.length: " + breadCrumbTrail.length + "\n breadCrumbTrail Array: " + breadCrumbTrail);
		//---------------- create bread crumb ---------------------
		for(var i=0; i<=size;i++)
		{
			if ( i==size)
		        {
	    		    		tempStr +=breadCrumbTrail[i];
	    		    }
	    		    else
			    {
	     			tempStr +="<a style='text-decoration: underline'";
	     			tempStr +=" index='"+i +"\' ";
					tempStr +=" onclick='tagCloudBreadCrumbClick(this)'>" +breadCrumbTrail[i]
					tempStr +="</a>";
					tempStr +=">>";
				}
		}
	    tagSelectedSpan.innerHTML=tempStr;
	    breadCrumbTrail=breadCrumbTrail.slice(0,(size+1)) // slice the rest, show upto where clicked
	     //-----------------------------  Create Filter expression  ---------------------------
		if ( size ==0)
		{
			// when all tag is clicked set the origal xml if not set changing style might show incorrect data
			filteredXML=INITIAL_XML;
			populateTagCloud_Initial(); // if its the first [All tags]
			//initTagCloud();
			updateSearchResults( INITIAL_XML);
			return;
		}
		//populate filter expression array
		for( var i=0; i<size;i++)
		{			    
				//check for single quote
				 if(breadCrumbTrail[i+1].indexOf("'") !=-1)
				{
		 			filterExpression_Cat1Array[i]=catFields[i]+'="'+Char2XMLEntity(breadCrumbTrail[i+1])+'"';
				}
				//check for  double quote
				else if(breadCrumbTrail[i+1].indexOf('"') !=-1)
				{
				 			filterExpression_Cat1Array[i]=catFields[i]+'=&apos;'+Char2XMLEntity(breadCrumbTrail[i+1])+'&apos;';
				}
				else
				{
					filterExpression_Cat1Array[i]=catFields[i]+'="'+Char2XMLEntity(breadCrumbTrail[i+1])+'"';
			 	}
		    //alert(methodName + ":\n"+  filterExpression_Cat1Array[i]);
		}
		var filterStr="";
		filteredXML=filterSelectedXML(true);
		drawTagCloud(catFields[size],filteredXML); // redraw tag cloud
	}
    	catch(e)
	{   thingFactory.MessageBox( methodName + e.message ,4096+16, "[ERROR]" ); }    	
}
//------- filter XML --------
function filterSelectedXML(flag)
{
    var methodName="filterSelectedXML(flag): ";
    //alert(methodName);
    try
    {
		  var strXSL;
		  currentFilterExpression="";
		  // create filter expression
		  for(var i=0; i<filterExpression_Cat1Array.length;i++)
		  {
		  	if (i==filterExpression_Cat1Array.length-1)
		  	 	currentFilterExpression+=filterExpression_Cat1Array[i];
		  	else
		  	 	currentFilterExpression+=filterExpression_Cat1Array[i] + " and ";
		  }
	  	//alert(methodName+ " -  filterExpression_Cat1Array => " + filterExpression_Cat1Array + "\n currentFilterExpression: " +currentFilterExpression);
	
		strXSL=getXSLString(currentFilterExpression);
	     var filteredXMLStyleObj = document.all.filteredXmlStyle.XMLDocument;
	    	filteredXMLStyleObj.loadXML(strXSL)
	 	var filtered_XML = document.all.filtered_XML.XMLDocument;
	
	 	if (flag)
	 		tagCloudXMLObj.loadXML(INITIAL_XML);
	 		
		filtered_XML.loadXML(tagCloudXMLObj.transformNode(filteredXMLStyleObj));
		updateSearchResults(filtered_XML.xml);
		return filtered_XML.xml;
	}
    	catch(e)
	{   thingFactory.MessageBox( methodName + e.message ,4096+16, "[ERROR]" ); }    	

}
//---------- get XSL after applying filter expression ----------------
function getXSLString(filterExpr)
{
    var methodName="getXSLString(filterExpr): ";
    try
    {
		var xlsStyle = '<?xml version="1.0"?>';
		xlsStyle += '<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" ><xsl:output method="xml"/>';
		xlsStyle +='<xsl:template match="/">'
		xlsStyle +='<documents>'
		xlsStyle +='  <xsl:for-each select="//document">'
		//xlsStyle +='	<xsl:if test="'+filterExpr+'">'
		xlsStyle +="	<xsl:if test=\""+filterExpr+"\">" // use double quote to avoid XML special characters issue
		xlsStyle +='		<xsl:copy-of select="." />'
		xlsStyle +='	   </xsl:if>'
		xlsStyle +='    </xsl:for-each>'
		xlsStyle +=' </documents>'
		xlsStyle +='</xsl:template></xsl:stylesheet>'
		return xlsStyle;
	}
	catch(e)
	{   thingFactory.MessageBox( methodName + e.message ,4096+16, "[ERROR]" ); }    	
}

//---------- generates XSL for TAG Cloud --------------------------
function getTagCloudXSL(key)
{
	var methodName=" getTagCloudXSL(key): ";
	var xlsTagStyle="";
	try
	{
		var strBuffer= new StringBuffer();
		strBuffer.append('<?xml version="1.0"?>');
		strBuffer.append('<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" ><xsl:output method="html"/>');
		strBuffer.append('<xsl:key name="title" match="//documents/document" use="'+key+'" />');
		strBuffer.append('  <xsl:template match="/">');
		strBuffer.append('     <xsl:for-each select="//document">');
		strBuffer.append('                        <xsl:variable name="thisNode" select="generate-id(.)"/>');
		strBuffer.append('                        <xsl:variable name="nodesAtSameLocation" select="key(\'title\', '+key+')"/>');
		strBuffer.append('                        <xsl:variable name="firstNodeAtSameLocation" select="generate-id($nodesAtSameLocation[1])"/>');
		strBuffer.append('			 <xsl:if test="$thisNode = $firstNodeAtSameLocation">');
		strBuffer.append('                            <xsl:variable name="count" select="count(key(\'title\', '+key+'))"/>');
		strBuffer.append('                            <a onclick="tagSelected(this)" onmouseover="Tag_Over();" onmouseout="Tag_Out();">');
		strBuffer.append('                                <xsl:attribute name="title"><xsl:value-of select="$count" /></xsl:attribute>');
		strBuffer.append('							<xsl:attribute name="id"><xsl:value-of select="'+key+'"/></xsl:attribute>');	
		strBuffer.append('							<xsl:attribute name="fieldName"><xsl:text>'+key+'</xsl:text></xsl:attribute>');
		strBuffer.append('							<xsl:attribute name="tagCount"><xsl:value-of select="$count" /></xsl:attribute>');
		strBuffer.append('							<xsl:value-of select="'+key+'"/>');
		//strBuffer.append('							<xsl:if test="position() &lt; last()-1"><xsl:text>, </xsl:text> </xsl:if>');					
		strBuffer.append('							<xsl:text> </xsl:text> ');					
		strBuffer.append('                            </a>');
		strBuffer.append('                 </xsl:if>');	
		strBuffer.append('       </xsl:for-each>');
		strBuffer.append('</xsl:template>');
		strBuffer.append('</xsl:stylesheet>');
		xlsTagStyle =strBuffer.toString();
	}
	catch(e)
	{   thingFactory.MessageBox( methodName + e.message ,4096+16, "[ERROR]" ); }    	
	
	return xlsTagStyle;
}

//-------------------- generates tag cloud xsl which show numbers besdie tags  ---------
function getNumberCloudXSL( key)
{
	var methodName="getNumberCloudXSL(key)";
	var xlsTagStyle="";
	try
	{
		var strBuffer= new StringBuffer();
		strBuffer.append('<?xml version="1.0"?>');
		strBuffer.append('<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" ><xsl:output method="html"/>');
		strBuffer.append('<xsl:key name="title" match="//documents/document" use="'+key+'" />');
		strBuffer.append('  <xsl:template match="/">');
		strBuffer.append('     <xsl:for-each select="//document">');
		strBuffer.append('                        <xsl:variable name="thisNode" select="generate-id(.)"/>');
		strBuffer.append('                        <xsl:variable name="nodesAtSameLocation" select="key(\'title\', '+key+')"/>');
		strBuffer.append('                        <xsl:variable name="firstNodeAtSameLocation" select="generate-id($nodesAtSameLocation[1])"/>');
		strBuffer.append('			 <xsl:if test="$thisNode = $firstNodeAtSameLocation">');
		strBuffer.append('                            <xsl:variable name="count" select="count(key(\'title\', '+key+'))"/>');
//		strBuffer.append('							\n<xsl:if test="$count &gt; '+pickTagsRange_Min+' and $count &lt; ' +pickTagsRange_Max + '">\n');	// pics the tags in the range
		strBuffer.append('                            <a onclick="tagSelected(this)" onmouseover="Tag_Over();" onmouseout="Tag_Out();">');
		strBuffer.append('                                <xsl:attribute name="title"><xsl:value-of select="$count" /></xsl:attribute>');
		strBuffer.append('							<xsl:attribute name="id"><xsl:value-of select="'+key+'"/></xsl:attribute>');	
		strBuffer.append('							<xsl:attribute name="fieldName"><xsl:text>'+key+'</xsl:text></xsl:attribute>');
		strBuffer.append('							<xsl:attribute name="tagCount"><xsl:value-of select="$count" /></xsl:attribute>');
		strBuffer.append('                                <xsl:attribute name="positionNumber"><xsl:value-of select="position()" /></xsl:attribute>');	
		strBuffer.append('							<xsl:value-of select="'+key+'"/> <xsl:text>(</xsl:text><xsl:value-of select="$count" /><xsl:text>) </xsl:text>');
		strBuffer.append('                            </a>');
//		strBuffer.append('                 </xsl:if>');	
		// end if [filter based on top pick e.g top3 , top10]
		strBuffer.append('                 \n</xsl:if>\n');	
      	//strBuffer.append('	<xsl:text>&nbsp;&nbsp;&nbsp;</xsl:text>');
		strBuffer.append('       </xsl:for-each>');
		strBuffer.append('</xsl:template>');
		strBuffer.append('</xsl:stylesheet>');
		xlsTagStyle =strBuffer.toString();
	}
	catch(e)
	{   thingFactory.MessageBox( methodName + e.message ,4096+16, "[ERROR]" ); }    	
	return xlsTagStyle;
}

//---------- updates the back window with search results --------------
function updateSearchResults(filteredXMLData)
{
	var methodName="updateSearchResults(filteredXMLData): ";
	try
	{
		objView.oXml.loadXML(filteredXMLData); //load xml for view
		objView.Refresh(false, false, false,false); // refresh the view
	}
	catch(e)
	{   thingFactory.MessageBox( methodName + e.message ,4096+16, "[ERROR]" ); }    	
	
}
//------------------------ sets font size for tags----------------------
function processCloudFontSize(isTagCloudStyle) 
{
	var methodName="processCloudFontSize(isTagCloudStyle): ";
	try
	{
		var cloud = document.getElementById("tagCloudDiv");
		//alert("[processCloudFontSize(isTagCloudStyle) ]:  cloud" +cloud)
		if(!cloud) return;
		var tags = cloud.getElementsByTagName("a");
		var tagIndex=1;
		if (isTagCloudStyle)
		{
			var maxPercent=160; //maximum percentage
			var minPercent=90; // min percentage
			var max=0; 
			var min=1; 
			// get the max count
			for(var i=0;i<tags.length;i++) 
			{
				if ((tags[i].getAttribute("tagCount")) > max)
					max=parseInt(tags[i].getAttribute("tagCount"),10); 	
			}
			if (max ==1)
				max=2;
			
			pickTagsRange_Max=max;
			//calcualte multiplier value
			var multiplier = (maxPercent-minPercent)/(max-min); 
			//calculate font size
			for(var i=0;i<tags.length;i++) 
			{
				var tag = tags[i];
				var count = tag.getAttribute("tagCount");
				var fontSize = (minPercent + ((max-(max-(count-min)))*multiplier)) + "%";  
				tag.style.fontSize = fontSize;
				//change the color sequence tag1=> black, tag2 => blue, tag3 => gold
				if (tagIndex==1)
					tag.style.color="blue"
				else if (tagIndex==2)
					tag.style.color="black"
				else if (tagIndex==3)
					tag.style.color="green"
				if (tagIndex==3)
					tagIndex=0;
				tagIndex++;
			}
		  } // end of if for sizing tags
		  else
		  {
		  	for(var i=0;i<tags.length;i++) 
			{
				var tag = tags[i];
				//change the color sequence tag1=> black, tag2 => blue, tag3 => gold
				if (tagIndex==1)
					tag.style.color="blue"
				else if (tagIndex==2)
					tag.style.color="black"
				else if (tagIndex==3)
					tag.style.color="green"
				if (tagIndex==3)
					tagIndex=0;
				tagIndex++;
			}
		  }
    }
   catch(e)
   {   thingFactory.MessageBox( methodName + e.message ,4096+16, "[ERROR]" ); }    	  
} // end of populate tag clouds

//-------- changes tag color on mouse over ----------
function Tag_Over(){
    var eSrc = window.event.srcElement;
    eSrc.style.background = "#FCAC4B";
    originalColor=eSrc.style.color;
    eSrc.style.color = "white";
    return true;
}

//-------- changes tag color on mouse out ----------
function Tag_Out(){
    var eSrc = window.event.srcElement;
    eSrc.style.background = "";
    eSrc.style.color = originalColor;
    return true; 
}

//-------------------- 	Simlar to Java's String Buffer better for performance --------
function StringBuffer() { this.buffer = []; }

//----------- String append function, better for performance --------------
StringBuffer.prototype.append = function(string)
{
	this.buffer.push(string);
	return this;
}

//------------   Returns the string from stringBuffer		----------------------
StringBuffer.prototype.toString = function()
{
	return this.buffer.join("");
}
// dim
function getSliderDimValue()
{
		var spanDimmer= document.getElementById("spanDimmer");
		var testValue= document.getElementById("textfieldDimmer");
		spanDimmer.innerText=testValue.value;
		var obj = document.getElementById('animatedContentDiv')
		setYUIOpacity(obj,testValue.value);

}
</script>

<script language="JavaScript" type="text/javascript">
//==========================================================================================
// Custom tools submenu
//==========================================================================================

function CreateCustomSubmenu(actionButton) //creates custom contect menu
{
	if(!actionButton) {return}
	var popup = new objPopupmenu();
	popup.textColumnWidth = 100;
	popup.actionHeight=18;
	popup.hasToggleIcons =true;
	var actionHandler = "parent.ProcessCustomSubmenuAction(this)";

//	addAction= function(isActive, isChecked, isBold, actionText, actionName, actionIconSrc, actionShortcutKeyText, actionHandler)

	popup.addAction(true , false, false, "Action 1" , "action1", "" , "", actionHandler);
	popup.addAction(true , false, false, "Action 2" , "action2", "" , "", actionHandler);
	popup.addDivider();
	popup.addAction(true , false, false, "Action 3" , "action3", "" , "", actionHandler);
	
	popup.height = 68;
	popup.width = 120;
	popup.offsetTop= 15;
	popup.offsetRight = 0;

	var oPopBody = oPopup.document.body;
	oPopBody.innerHTML = popup.innerHTML();

	oPopup.show(0, 20, popup.width, popup.height, actionButton);
	return false;

}


//==========================================================================================
//Custom tools submenu handler
//==========================================================================================

function ProcessCustomSubmenuAction(actionObj) //handle action from contect menu
{
	if(!actionObj ) {return false};
	if(oPopup) {oPopup.hide();}
	var action = actionObj.actionName.split("-")[0];
	if(action=="action1"){
		alert("Action 1");
	}
	else if(action=="action2"){
		alert("Action 2");
	}
	else if(action=="action3"){
		alert("Action 3");
	}
	return;
}
</script>
</head>
<body text="#000000" bgcolor="#FFFFFF" SCROLL="no">

<table border="1" cellspacing="2" cellpadding="2">
<tr valign="middle" bgcolor="#C0C0C0"><td><a onclick="ViewCreateDocument()
return false;" href="">New Feature / Issue</a></td><td><a onclick="CreateEditSubmenu(document.getElementById('C' + this.id))
return false;" href="">Edit</a></td><td><a onclick="CreateViewSubmenu(document.getElementById('C' + this.id))
return false;" href="">View</a></td><td><a onclick="CreateToolsSubmenu(document.getElementById('C' + this.id))
return false;" href="">Tools</a></td></tr>
</table>
<hr>
<script language="javascript">aBar.Initialize();</script>
<!-- Subform -- thingFactory -->
<script src="{{ path('docova_dlextensions') }}" language="javascript"></script>
<!-- End Subform -- thingFactory -->
<script language="javascript">InitVars(info);</script>
<script language="javascript">PreloadBaseImages();</script>
<!-------------------------- non-scrollable header ----------------------->
<div id="divHeaderSection" style="width: 100%; ">
<!------------------------------------------------------>
<div style="width: 100%; padding: 3px 6px 2px 10px;
filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0, StartColorStr='#F3F0E7', EndColorStr='#D9D2B6'); border-bottom: groove 2px; border-top: groove 2px; height: 27px;">
<div id="divHeadingTitle" style="float:left;color: #0050D1; font-size: 13px; font-family: Verdana,Arial;font-weight: bold;">Folder: {{ folder.getFolderName }}</div>
<div style="float:right;"></div>
</div>
<!------------------------------------------------------>
<div id="actionPaneHeader" style="width: 100%; height: 22px; padding: 3px 6px 3px 6px; background-color: #ECE9D8; border-bottom: groove 2px;">
	<table border=0 cellspacing=0 cellpadding=0 width=100%><tr><td id="tdActionBar"></td>
	<td align="right"><span style="font-size:11px;color:#0050D1;display:none" id="divSearchResultCount"></span></td>
	<td align="right">
		<button style=" height:22px; cursor: hand; border: 1px solid #cccccc; margin-right:2px;background-color:#ffffff; vertical-align: middle;" title="Tag Cloud" onMouseOver="this.runtimeStyle.border='1px ridge';" onMouseOut="this.runtimeStyle.border='1px solid #cccccc';"" onClick="openTagCloud()" onMouseDown="this.runtimeStyle.border='1px groove';" onMouseOver="this.runtimeStyle.border='1px ridge';" onMouseOut="this.runtimeStyle.border='1px solid #cccccc';"><img width="16" height="16" src="{{ asset('bundles/docova/images/tagCloudIcon.gif') }}"  style="vertical-align: middle;" alt="Tag Cloud"></img></button></td></tr></table>
</div>
<script language="javascript">aBar.Render("tdActionBar");</script>
<!------------------------------------------------------>
</div>
<!------------------------------------------------------>
<div id="divViewEventCapture">
<!--- BEGIN Document View header ----->
<div id="divViewHeader" style="width:100%;background-color: #ECE9D8; border-bottom: groove 2px; padding: 0px 0px 0px 0px;">
<!------------------------------------------------------>
<div id="divToolbarSearch" style="display:none; padding: 4px 6px 4px 6px; border-bottom: groove 2px;"> 
<span style="width: 75px;">Search for:</span>
<input id="inpQuery" type="text" style="width: 330px;height:19px;"/>
&nbsp;<button id="btnFTSearch" style="height: 20px; width: 45px; font : normal 11px arial,verdana,sans-serif; " onclick="ViewFTSearch();">Search</button>&nbsp;<button id="btnCustomSearch" style="height: 20px; width: 60px; font : normal 11px Icon, sans-serif; " onclick="CustomSearch();">Advanced</button>&nbsp;<button id="btnFTClear" style="height: 20px; width: 35px; font : normal 11px arial,verdana,sans-serif; display:none;" onclick="ViewFTClear();">Clear</button>
<span id="divToolbarFilter" align="right" style="display: ; border-left: groove 2px; padding: 4px 6px 4px 6px;">
<span style="width: 40px;">Filters: </span>
<button id="btnClearAllFilters" title="Clear all folder filtering" style="height: 20px; width: 35px; font : normal 11px arial,verdana,sans-serif; display:;" onclick="ClearAllFilters();">Clear</button>
<button id="btnResetFolderFilter" title="Reset to folder's default filter" style="height: 20px; width: 35px; font : normal 11px arial,verdana,sans-serif; display:;" onclick="ResetFolderFilter();">Reset</button>
</span>
<!------------------ Content Paging ------------------------------------>
<div id="divContentPaging" style="display:none; border-top:groove 2px; margin-top:5px; padding: 4px 0px 4px 0px;">
<table style="font-size:8pt" border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=290>Displaying records <span id=startCount>1</span>&nbsp;to&nbsp;<span id=currCount style="background-color:white; padding-left:1px;padding-right:2px; height:13px"></span><button style="border:0; background-color:white;width:17px; height:13px;margin-bottom:2px;" onclick="getDisplayCount(this);"><IMG SRC= "{{ asset('bundles/docova/images/downarrow-blk.gif') }}" Border=0></button>&nbsp;of&nbsp;<span id=totalCount></span></td>
<style>
.npButton{
	background-color:#FAFAFA;
	border:1px solid silver;
	width:20px;
	height:20px;
}
</style>
<td width=130>
<button title="First" onMouseOver="this.runtimeStyle.border='1px ridge';" onMouseOut="this.runtimeStyle.border='1px solid #cccccc';" class=npButton onclick="first();"><img id=fsp1 src={{ asset('bundles/docova/images/page-first.gif') }}></button>&nbsp;&nbsp;
<button title="Previous" onMouseOver="this.runtimeStyle.border='1px ridge';" onMouseOut="this.runtimeStyle.border='1px solid #cccccc';" class=npButton onclick="previous();"><img id=fsp2 src={{ asset('bundles/docova/images/page-prev.gif') }}></button>&nbsp;&nbsp;
<button title="Next" onMouseOver="this.runtimeStyle.border='1px ridge';" onMouseOut="this.runtimeStyle.border='1px solid #cccccc';" class=npButton onclick="next();"><img id=fsp3 src={{ asset('bundles/docova/images/page-next.gif') }}></button>&nbsp;&nbsp;
<button title="Last" onMouseOver="this.runtimeStyle.border='1px ridge';" onMouseOut="this.runtimeStyle.border='1px solid #cccccc';" class=npButton onclick="last();"><img id=fsp4 src={{ asset('bundles/docova/images/page-last.gif') }}></button></td>
<td>Find <input type="text" onfocus="selText(this)" style="width:90px" onkeyup="triggerGetPage()" id="GetPage"/></td>
</tr></table>
</div>
<div ID="showDocCountDiv" style="display:none"></div>	
<!--------------------- End Content Paging --------------------------------->
</div>
<!------------------------------------------------------>
<div id="divToolbarPerspective" style="display:none; width:100%; padding: 4px 6px 4px 6px; border-bottom: groove 2px;"> <xml id="xmlViewPerspective"><?xml version="1.0" encoding="UTF-8"?><viewperspective><type>custom</type><id>custom_DK-D993EE6E4DE26578852578CB005C8738</id><Unid>D993EE6E4DE26578852578CB005C8738</Unid><name><![CDATA[Features General]]></name><description><![CDATA[]]></description><createdby><![CDATA[John Ryan/DLI]]></createdby><createddate>07/12/2011 12:50:39 PM</createddate><modifiedby><![CDATA[David Wice/DLI]]></modifiedby><modifieddate>05/03/2012 03:36:38 PM</modifieddate><description></description><autocollapse>1</autocollapse><libscope>L</libscope><libdefault></libdefault><viewsettings><viewproperties><showSelectionMargin>1</showSelectionMargin><allowCustomization>1</allowCustomization><extendLastColumn/><isSummary/><categoryBorderStyle>border-bottom : solid 2px #aaccff;</categoryBorderStyle></viewproperties><columns><column><isCategorized>1</isCategorized><hasCustomSort/><totalType>0</totalType><isFrozen/><isFreezeControl/><title>Version</title><xmlNodeName>CF143</xmlNodeName><dataType>text</dataType><sortOrder>ascending</sortOrder><customSortOrder>none</customSortOrder><numberFormat>###.##;-###.##</numberFormat><numberPrefix/><numberSuffix/><dateFormat/><width>100</width><align/><fontSize/><fontFamily/><color/><fontWeight/><fontStyle/><textDecoration/><backgroundColor/><alignT/><fontSizeT/><fontFamilyT/><colorT>#0000ff</colorT><fontWeightT>bold</fontWeightT><fontStyleT/><textDecorationT/><backgroundColorT/><alignH/><fontSizeH/><fontFamilyH/><colorH/><fontWeightH/><fontStyleH/><textDecorationH/><backgroundColorH/></column><column><isCategorized>1</isCategorized><hasCustomSort/><totalType>0</totalType><isFrozen/><isFreezeControl/><title>Status</title><xmlNodeName>CF41</xmlNodeName><dataType>text</dataType><sortOrder>ascending</sortOrder><customSortOrder>none</customSortOrder><numberFormat>###.##;-###.##</numberFormat><numberPrefix/><numberSuffix/><dateFormat/><width>100</width><align/><fontSize/><fontFamily/><color/><fontWeight/><fontStyle/><textDecoration/><backgroundColor/><alignT/><fontSizeT/><fontFamilyT/><colorT>#0000ff</colorT><fontWeightT>bold</fontWeightT><fontStyleT/><textDecorationT/><backgroundColorT/><alignH/><fontSizeH/><fontFamilyH/><colorH/><fontWeightH/><fontStyleH/><textDecorationH/><backgroundColorH/></column><column><isCategorized/><hasCustomSort/><totalType>0</totalType><isFrozen/><isFreezeControl/><title>Priority</title><xmlNodeName>CF141</xmlNodeName><dataType>number</dataType><sortOrder>ascending</sortOrder><customSortOrder>none</customSortOrder><numberFormat>###.##;-###.##</numberFormat><numberPrefix/><numberSuffix/><dateFormat/><width>50</width><align/><fontSize/><fontFamily/><color/><fontWeight/><fontStyle/><textDecoration/><backgroundColor/><alignT/><fontSizeT/><fontFamilyT/><colorT>#0000ff</colorT><fontWeightT>bold</fontWeightT><fontStyleT/><textDecorationT/><backgroundColorT/><alignH/><fontSizeH/><fontFamilyH/><colorH/><fontWeightH/><fontStyleH/><textDecorationH/><backgroundColorH/></column><column><isCategorized/><hasCustomSort/><totalType>0</totalType><isFrozen/><isFreezeControl/><title>Assigned To</title><xmlNodeName>CF142</xmlNodeName><dataType>names</dataType><sortOrder>ascending</sortOrder><customSortOrder>none</customSortOrder><numberFormat>###.##;-###.##</numberFormat><numberPrefix/><numberSuffix/><dateFormat/><width>100</width><align/><fontSize/><fontFamily/><color/><fontWeight/><fontStyle/><textDecoration/><backgroundColor/><alignT/><fontSizeT/><fontFamilyT/><colorT>#0000ff</colorT><fontWeightT>bold</fontWeightT><fontStyleT/><textDecorationT/><backgroundColorT/><alignH/><fontSizeH/><fontFamilyH/><colorH/><fontWeightH/><fontStyleH/><textDecorationH/><backgroundColorH/></column><column><isCategorized/><hasCustomSort>1</hasCustomSort><totalType>0</totalType><isFrozen/><isFreezeControl/><title>Title</title><xmlNodeName>F8</xmlNodeName><dataType>text</dataType><sortOrder>ascending</sortOrder><customSortOrder>none</customSortOrder><numberFormat>###.##;-###.##</numberFormat><numberPrefix/><numberSuffix/><dateFormat/><width>225</width><align/><fontSize/><fontFamily/><color/><fontWeight/><fontStyle/><textDecoration/><backgroundColor/><alignT/><fontSizeT/><fontFamilyT/><colorT>#0000ff</colorT><fontWeightT>bold</fontWeightT><fontStyleT/><textDecorationT/><backgroundColorT/><alignH/><fontSizeH/><fontFamilyH/><colorH/><fontWeightH/><fontStyleH/><textDecorationH/><backgroundColorH/></column><column><isCategorized/><hasCustomSort/><totalType>0</totalType><isFrozen/><isFreezeControl/><title>Type</title><xmlNodeName>CF140</xmlNodeName><dataType>text</dataType><sortOrder>ascending</sortOrder><customSortOrder>none</customSortOrder><numberFormat>###.##;-###.##</numberFormat><numberPrefix/><numberSuffix/><dateFormat/><width>70</width><align/><fontSize/><fontFamily/><color/><fontWeight/><fontStyle/><textDecoration/><backgroundColor/><alignT/><fontSizeT/><fontFamilyT/><colorT>#0000ff</colorT><fontWeightT>bold</fontWeightT><fontStyleT/><textDecorationT/><backgroundColorT/><alignH/><fontSizeH/><fontFamilyH/><colorH/><fontWeightH/><fontStyleH/><textDecorationH/><backgroundColorH/></column><column><isCategorized/><hasCustomSort>1</hasCustomSort><totalType>0</totalType><isFrozen/><isFreezeControl/><title>Author</title><xmlNodeName>F1</xmlNodeName><dataType>text</dataType><sortOrder>ascending</sortOrder><customSortOrder>none</customSortOrder><numberFormat>###.##;-###.##</numberFormat><numberPrefix/><numberSuffix/><dateFormat/><width/><align/><fontSize/><fontFamily/><color/><fontWeight/><fontStyle/><textDecoration/><backgroundColor/><alignT/><fontSizeT/><fontFamilyT/><colorT>#0000ff</colorT><fontWeightT>bold</fontWeightT><fontStyleT/><textDecorationT/><backgroundColorT/><alignH/><fontSizeH/><fontFamilyH/><colorH/><fontWeightH/><fontStyleH/><textDecorationH/><backgroundColorH/></column><column><isCategorized/><hasCustomSort>1</hasCustomSort><totalType>0</totalType><isFrozen/><isFreezeControl/><title>Date</title><xmlNodeName>F4</xmlNodeName><dataType>date</dataType><sortOrder>ascending</sortOrder><customSortOrder>none</customSortOrder><numberFormat>###.##;-###.##</numberFormat><numberPrefix/><numberSuffix/><dateFormat/><width/><align/><fontSize/><fontFamily/><color/><fontWeight/><fontStyle/><textDecoration/><backgroundColor/><alignT/><fontSizeT/><fontFamilyT/><colorT>#0000ff</colorT><fontWeightT>bold</fontWeightT><fontStyleT/><textDecorationT/><backgroundColorT/><alignH/><fontSizeH/><fontFamilyH/><colorH/><fontWeightH/><fontStyleH/><textDecorationH/><backgroundColorH/></column></columns></viewsettings>

</viewperspective></xml>
<span style="width: 75px;">Perspective:</span>
<select name="inpSwitchPerspective" id="inpSwitchPerspective" class="txFld" style=" width: 200px; height:18px;" onchange="ViewSwitchPerspective(this.options[this.selectedIndex].value)">
<option value="system_DK-502FB1AAA64CA9808525701B006E3BD5">Categorized by Type</option><option value="system_DK-B26E9E686268AD4E8525703E0060A230">Document Summaries</option><option value="system_DK-A22617F385BE070585257035005E8470">Folder tree search</option><option value="system_default_folder">System Default</option><option value="system_DK-51279CDD5EDF83B685257A21006FA310">Thumbnails</option><option style="background-color:#EFEFEF;" value="custom_DK-D993EE6E4DE26578852578CB005C8738">Features General</option><option style="background-color:#EFEFEF;" value="custom_DK-16965D667A2631638525790A00589683">Issues General</option><option style="background-color:#EFEFEF;" value="custom_DK-DA51B5CD3F67C4A285257A8E00498E46">Report - Feature/Issue Export</option><option style="background-color:#EFEFEF;" value="custom_DK-1D6370FD37E7AE2E8525790A005841E0">Features Assigned</option>
</select>&nbsp;
<span id="labelViewOptions">{% trans %}Show{% endtrans %}:
	{% set CANSEEALL = (user_access.ccdocument or (folder ? folder.getSetDVA : false)) %}
    {% set DEFSHOW = (user ? user.getUserProfile.getDefaultShowOption : '') %}
    {% set SHOWTYPE = (CANSEEALL ? (DEFSHOW == "" ? "A" : DEFSHOW) : "C") %}					
	<select name="selVersionScope" id="selVersionScope" class="txFld" style=" width: 125px; height:18px;" onchange="ViewApplyQueryOptions();" tabindex="14" {{ not folder or (not user_access.ccdocument and not folder.getSetDVA) ? 'disabled="disabled"' : '' }}>
		<option value="" {{ SHOWTYPE == 'A' ? 'selected' : ''  }}>{% trans %}All versions{% endtrans %}
		<option value="REL" {{ SHOWTYPE == 'C'  ? 'selected' : '' }}>{% trans %}Current versions{% endtrans %}
		<option value="NEW" {{ SHOWTYPE == 'P' ? 'selected' : ''  }}>{% trans %}Pending releases{% endtrans %}
	</select>&nbsp;
	<input type="checkbox" id="inpViewScope" style="border:none;background-color: transparent; height:18px;" value="1" onclick="ViewApplyQueryOptions();" tabindex="15"/>{% trans %}Include subfolders{% endtrans %}
</span>
</div>
<!------------------------------------------------------>
</div>
<!--- END Document View header ----->
<!-------------------------- scrollable content----------------------->
<!--- BEGIN Document view contents----->
<div id="divViewContent" style="position:absolute; width: 100%; height: expression(document.body.clientHeight - document.all.divHeaderSection.offsetHeight - document.all.divViewHeader.offsetHeight) ; position:absolute; top: expression(document.all.divHeaderSection.offsetHeight + document.all.divViewHeader.offsetHeight); padding: 0px; margin: 0px;overflow: auto;" ></div>
<!--- END Document view contents----->
<!--- End event capture area ----->
</div>
<!-- FACET MAP PANEL - show at the bottom of the page -->
<!-- Facet Map Panel -->
<div id="facetMapPanel" style="display:none" >
    <!-- Div 1: Facet Map Panel Header for button to slide up and down -->    
     <div id="facetMapPanelHeader">
        	   <!-- header label -->
                   <div id="facetMapHeaderLabel"  style="cursor: pointer;" onmousedown="dragStart(event, 'facetMapPanel');">
                                          <img src="{{ asset('bundles/docova/images/cloudsm.gif') }}" alt="Visual Search"/><span  class="HeadingTitle">Tag Cloud</span>
                     </div>
	      <!-- arrow to expand/collapse wheh clicked push up the whole panel not just the content -->
                   <div id="facetMapHeaderButtons"  onclick="hideShowFacetMapPanel()">
                         <!-- 5 for up arrow and 6 for down arrow- webdings -->
                        <span id="slidingTabBtn" style="cursor: pointer;">5</span>
                    </div> 
     </div>
  <!-- Div 2: facet map content -->
     <div id="facetMapPanelContent" style="display:block;">
      <!-- subform [sfFacetMapData] - to hold facet map content -->
<!--START - Facet Map Content Div -->
<div style="padding:'3px';height='100%' ;width:100%" id="sfFacetMapDataPanel">
     <!-- table to hold switch styles -->
     <table width="100%">
     <tr>
      <td align="right">
       <span style="font-size:11;font-family:Verdana,Arial;">Switch Style:  </span>
	   <span style="cursor: pointer;">
	        <a id='idTagStyle' class="styleTagTitle" style='text-decoration: none;' onclick='changeTagStyle(this)' onmouseover="Tag_Over();" onmouseout="Tag_Out();">Tags</a>
	   </span>
	   <span class="styleTagTitle"style="color:#F6B300;"> | </span>
	   <span style="cursor: pointer;">
	        <a id='idNumberStyle' class="styleTagTitle "style='text-decoration:none;' onclick='changeNumberStyle(this)' onmouseover="Tag_Over();" onmouseout="Tag_Out();">#</a>
	   </span>
      </td>
     </tr>
    </table>
    <fieldset id="tagCloudFieldSet">
        <legend style="font:bold 13px verdana,arial;color:#0050D1">Search Trail</legend>
        <div  style="font: 11px verdana, arial, sans-serif; margin-top:5px; text-align=left;" id="tagSelectedDiv">All Tags</div>
        <hr style="border:dotted;border-color:#4D6185;"/>
        <!-- tag cloud div holds data from xml -->
       <div id="tagCloudDiv" style="overflow:auto;  height=150px;; text-align:center; vertical-align:bottom; border: 1px solid #F6B300; font:verdana,arial"></div>
    </fieldset>
</div> 
<!-- END - Facet Map Content Div -->
<!-- tag cloud xml -->
<xml id="tagCloudXMLData"></xml>
<!-- tag cloud style -->
<xml id="tagCloudXLSStyle"></xml>
<!-- filtered XML style and XML -->
<xml id="filteredXmlStyle"></xml>
<xml id="filtered_XML"></xml>
               <div id="sliderOuterDiv" style="padding-left:4px; padding-top:4px;background:#F2F2F2; width:100%;height:40px;">
                          <div id="slider-bg" tabIndex="-1" title="slider" style="width:100%; position:absolute; height:28px;background: url({{ asset('bundles/docova/images/Slider-bg-fader-480.gif') }}) 0px 0px no-repeat;" >
                          <div id="slider-thumb"><img src="{{ asset('bundles/docova/images/slider-handle.gif') }}"></div>
              </div>
      </div>
<!-- debug div for slider -->
<div style="postion:absolute; width:100%; height:27px; display:none"><tt><font size="4"><br>
	</font></tt>Pixel value: <span id="slider-Pixel-value">0</span>  Converted value: <span id="slider-Actual-value">0</span>
 </div>
</div> 
<!-- end of facetMapPanelContent div -->
  </div>	
 <!-- END of Facet Map Panel -->
<xml id="inlineXMLFacetMapFields"></xml>
<!--- BEGIN Folder filter components----->
<xml id="FolderFilterXSL"></xml>
<div id="SelectFilterDiv" style="display:none; position:absolute; z-index:100;" ></div>
<div id="CurrentFilterDiv" style="display:none; position:absolute; top:0px; left:0px;"></div>
<!--- END Folder filter components----->
<script language="javascript">InitPage();</script>
<!------------------ SUBFORM sfKillCache ------------>
<!------------------Microsoft suggestion to force no cacheing of documents------------>
<HEAD>
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="CACHE-CONTROL" CONTENT="0">
<META HTTP-EQUIV="EXPIRES" CONTENT="0">
</HEAD>
<!------------------END SUBFORM sfKillCache  ------------>
</form>
</body>
</html>