<!DOCTYPE html>
<html>
<head>
<META content="0" http-equiv="expires">
<META content="0" http-equiv="cache-control">
<META content="no-cache" http-equiv="Pragma">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/smoothness-flat/jquery-ui.css') }}">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/styleFolderBase.css') }}">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/multiselect.css') }}">
<link rel="stylesheet" href="{{ asset('bundles/docova/font-awesome/css/all.min.css') }}">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/styleViewIcons.css') }}" type="text/css" />
{% include 'DocovaBundle:Default:scriptMessagesTranslation.html.twig' %}
<script type="text/javascript" src="{{ asset('bundles/docova/jquery/jquery.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/docova/jquery/jquery-ui.js') }}"></script>
<script type="text/javascript" language="JavaScript" src="{{ asset('bundles/docova/js/Docova.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/viewObjects.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/sarissa.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/sarissa_ieemu_xpath.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/docova/js/commonFunctions.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/admin/appBuilderJS.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/docova/js/multiselect.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/DesignImportFunctions.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/beautify/beautify.js') }}"></script>

{% set cssFile = view_name|replace({' ':'', ':':''}) %}
<link rel="stylesheet" type='text/css' href="{{ asset('bundles/docova/css/custom/'~ app.request.query.get('AppID') ~'/views/' ~ cssFile ~ '.css' ) }}" />

<script language="JavaScript" type="text/javascript">
var SUBJECTNODE = "F8" //to pass doc subject to tab function
var objView = null; //view object
var curColumnObj = null //view column object
var currentPerspective=""; //current perspective id
var isiPad = navigator.userAgent.match(/iPad/i) != null; //Detects if User is using an iPad.  Used to handle things like double click.

var dlgParams = new Array();  //params array that gets used by dialogs
var retValues = new Array(); //ret params array that can be used by dialogs

var shiftkeypressed = false;
var ctrlkeypressed = false;
var DLExtensions = null;

//Column actions, set as global to pass to Docova.menu function
var colAscSortAction=""; 
var colDescSortAction=""; 
var colDefaultSortAction=""; 
var colCategorizeAction="";
var colFreezeAction="";
var colDeleteAction="";
var colInsertAction="";
var colAppendAction="";
var colPropertiesAction="";

//---------------------------------------------------------------------
//var aBar = new objCustomActionBar(false, "aBar");
var info = {
    "DocID" : "",
    "DocKey" : "",
    "UserName" : "{{ user.getUserNameDn|replace({'\\': '\\\\'}) }}",
    "UserNameAB" : "{{ user.getUserNameDnAbbreviated|replace({'\\': '\\\\'}) }}",
    "UserNameCN" : "{{ f_Name("[CN]", user.getUserNameDnAbbreviated)|replace({'\\': '\\\\'}) }}",
    "SystemKey" :  "{{ settings.getSystemKey }}",
    "DocAccessLevel" : "",
    "DocAccessRole" : "",
    "DbAccessLevel" : "",
    "CutCopyPaste" : "",
    "HTTP_Referer" : "",
    "Query_String" : "ReadForm&AppID={{ application.getId }}&DesignElement={{ app.request.query.get('DesignElement') }}&isEmbedded=true",
    "Query_String_Decoded" : "ReadForm&AppID={{ application.getId }}&DesignElement={{ app.request.query.get('DesignElement') }}&isEmbedded=true",
    "Path_Info_Decoded" : "{{ path('docova_notesview') }}?ReadForm&AppID={{ application.getId }}&DesignElement={{ app.request.query.get('DesignElement') }}&isEmbedded=true",
    "ServerName" : "{{ app.request.server.get('HTTP_HOST') }}",
    "NsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
    "ServerUrl" : "{{ app.request.getscheme }}://{{ app.request.server.get('HTTP_HOST') }}",
    "PortalWebPath" : "{{ url('docova_homepage') }}",
    "PortalNsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
    "LibraryKey" : "{{ application.getId }}",
    "ViewName" : "{{ view_name }}",
    "IsAppBuilder" : "1",
    "RestrictToCategory" :"{{ app.request.query.get('restrictToCategory') is not null ?  app.request.query.get('restrictToCategory') : '--none--' }}",
    "AppID" : "{{ application.getId }}",
    "IsEmbedded": {{ app.request.query.get('isEmbedded') == 'true' or app.request.query.get('isEmbedded') == '1' ? 'true' : 'false' }},	
    "ShowSearch": "{{ app.request.query.get('showSearch') }}",
    "SessionDateFormat" : "{{ settings.getDefaultDateFormat|replace({'YYYY' : 'yy'})|lower }}",
    "ViewID": "",
    "UseContentPaging" : "0",
    "MaxDocCount" : "2",
    "OpenDocInEditMode": "",
    "TitleNode": "",
    "HideActions" : {{ app.request.query.get('HideActions') == 'true' ? 'true' : 'false' }}
};
function getinfovar(){
	return info;
}
InitVars(info);
PreloadBaseImages();

$(document).ready(function(){
	DLExtensions = window.top.DocovaExtensions;
	var objContent = $("#divViewContent");
	objContent.on('dragover', function (e) 
	{
		e.stopPropagation();
		e.preventDefault();
		$( this).css("border", "2px dashed gray");
	});
	objContent.on('dragleave', function (e) 
	{
		e.stopPropagation();
		e.preventDefault();
		$( this).css("border", "0px");
	});
	
	objContent.on('drop', function (e) {
		e.stopPropagation();
		e.preventDefault();
		if(docInfo.FolderID){
			$(this).css("border", "0px dashed gray");
			doDrop(e);
		}
	});
	objContent.disableSelection();
		
	if(info.HideActions || $("#tdActionBar > button, #tdActionBar > a").length == 0){
		$("#actionPaneHeader").hide();
		$("#divViewContent").css("top", "0px");
		$("#divToolbarSearch").css("top", "0px");
		$("#divContentPaging").css("top", "0px");
	}else{
		//if no buttons in the action pane, then hide the header
		if ( $("#tdActionBar > button, #tdActionBar > a").length == 0 ){
			$("#actionPaneHeader").hide();
			$("#divViewContent").css("top", "0px");
			$("#divToolbarSearch").css("top", "0px");
			$("#divContentPaging").css("top", "0px");
		}
		checkAvailableHeight();
	}
		
	$("#btnFTSearch").button({
		text: false,	
		icons: { primary: "ui-icon-search"}
	}).click(function(event){
		ViewFTSearch();
	})

	$("#btnAdvancedSearch").button({
		text: false,
		icons: { primary: "ui-icon-zoomin"}
	}).click(function(event){
		AdvancedSearch();
	})
	
	$("#btnFTClear").button({
		text: false,
		disabled: true,
		icons: { primary: "ui-icon-arrowrefresh-1-e"}
	}).click(function(event){
		ViewFTClear();
	})
	
	$("#btnContPage1").button({
		text: true,
		icons: { primary: "ui-icon-seek-first"}
	}).click(function(event){
		first();
	})		
	
	$("#btnContPage2").button({
		text: true,
		icons: { primary: "ui-icon-seek-prev"}
	}).click(function(event){
		previous();
	})	
	
	$("#btnContPage3").button({
		text: true,	
		icons: { primary: "ui-icon-seek-next"}
	}).click(function(event){
		next();
	})	
	
	$("#btnContPage4").button({
		text: true,	
		icons: { primary: "ui-icon-seek-end"}
	}).click(function(event){
		last();
	})		
	
	$("#btnDelete").button({
		text: false,
		disabled: true,
		icons: { primary: "ui-icon-trash"}
	}).click(function(event){
		DeleteSearch();
	})	
	
	$("#btnClearAllFilters").button({
		text: false,
		icons: { primary: "ui-icon-arrowrefresh-1-e"}
	}).click(function(event){
		ClearAllFilters();
	})	

	$("#btnResetFolderFilter").button({
		text: false,
		icons: { primary: "ui-icon-refresh"}
	}).click(function(event){
		ResetFolderFilter();
	})			
	
	$("#inpSwitchPerspective").multiselect({
		multiple: false,
		header: false,		
		noneSelectedText: "Perspective",
		selectedList: 1,
		height: "auto"
	});		

	$("#selVersionScope").multiselect({
		multiple: false,
		header: false,		
		selectedList: 1,
		height: "auto",
		minWidth: 140
	});		
	
	$('input:text').button().css({
		'font' : 'inherit',
		'color' : 'inherit',
		'text-align' : 'left',
		'outline' : 'none',
		'cursor' : 'text',
		'background' : '#ffffff',
		'padding' : '.35em'		
	}).off('keydown');
	
	$('#inpQuery').hover( function() {$('#inpQuery').css("background", "#ffffff").removeAttr("placeholder")});

	$("#MySavedSearches").multiselect({
		multiple: false,
		header: false,		
		noneSelectedText: "{% trans %}My Saved Searches{% endtrans %}",
		selectedList: 1,
		height: "auto",
		showSelected: false
	});	
	$("#MySavedSearches").multiselect("clearSingle");
    
	$("button").not("#MySavedSearchesbtn, #inpSwitchPerspectivebtn, #selVersionScopebtn").button().click(function( event ) {	
		event.preventDefault();
	});
	
	
	if(docInfo.UseContentPaging == "1") { $("#divContentPaging").css("display", "block"); }

	$('#divViewContent').scroll(moveScroll);
	
	//handle toolbar buttons
	$("#tdActionBar").find("button, a").each(function() 
	{ 
		var icnrght = $(this).attr("iconright");
		var icnleft= $(this).attr("iconleft");
		var title = $(this).attr("title");
		
		$(this).button({
			label: title,	
			icons: { primary: icnleft, secondary: icnrght}
		});
	});
	
	$(".listheader").resizable({ handles: "e" });

	//show/reveal view after all elements are loaded
	$("#viewMainContainer").css("display", "");
	$("#divViewEventCapture").prop('tabIndex', 1);
	
	InitPage();
});   

function moveScroll() {
	var scroll = $('#divViewContent').offset().top;
	var anchor_top = $("#VDataTable").offset().top;
//	var anchor_bottom = $("#bottom_anchor").offset().top;

	if (scroll > anchor_top){ //&& scroll < anchor_bottom) {

		clone_table = $("#clone");
		
		if (clone_table.length === 0) {
			var top = $("#actionPaneHeader").outerHeight();
			if (  ($("#divToolbarSearch").css("display") != "none") )
				top += $("#divToolbarSearch").outerHeight();
			if  ($("#divToolbarPerspective").css("display")!="none")
				top += $("#divToolbarPerspective").outerHeight();
			if  ($("#divContentPaging").css("display")!="none")
				top +=$("#divContentPaging").outerHeight();
		    top= top
			clone_table = $("#VDataTable").clone().find("tbody > tr").remove().end().find('.ui-resizable-handle').remove().end();
			clone_table.attr({
				id : "clone"
			}).css({
				position : "fixed",
				//"pointer-events" : "none",
				left : $("#VDataTable").offset().left + 'px',
				"z-index": "100",
				"border-top" : "solid 1px silver",
				top : top
			}).width($("#VDataTable").width());
				
    		$("#divViewContent").append(clone_table);
    		$("#clone").width($("#VDataTable").width());
        
    		$("#clone thead").css({
    			visibility : "true"
    		});
    
    		// clone tbody is hidden
    		$("#clone tbody").css({
    			visibility : "hidden",
    		});
    
    		var footEl = $("#clone tfoot");
    		if (footEl.length) {
    			footEl.css({ visibility : "hidden"});
    		}
			
			$("#clone").find("td.listheader").resizable({
				handles: "e",
				resize: function(event){
					var tdid = jQuery(event.target).attr("colidx");
					var tdwidth = jQuery(event.target).width();
					$("#VDataTable").find("td.listheader[colidx=" + tdid + "]").width(tdwidth);
				}
			});
		}
	} else {
		$("#clone").remove();
	}
}

function mayUserEditDoc(docID) {
	//supports folder context menu option 'Edit' and 'Edit in New Window'
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/DocumentServices?OpenAgent";
	var request="";
	request += "<Request>";
	request += "<Action>MAYUSEREDIT</Action>";
	request += "<Unid>" + docID + "</Unid>";
	request += "</Request>";	

	var httpObj = new objHTTP();
	if(!httpObj.PostData(request, url) || httpObj.status=="FAILED") {return false; }

	return httpObj.results[0];
}

//=================== Content Paging ==========================
var typingTimer;                //timer identifier 
 
//on keyup, start the countdown 
function triggerGetPage() { 
	clearTimeout(typingTimer);	
	typingTimer = setTimeout(getPage, 600);  
}  

function selText(obj){
	obj.select();
}


function getPage() {
	//if(doc.GetPage.value == "") {return}
	if(document.getElementById("GetPage").value == "") {return}
	//objView.docSubject = doc.GetPage.value;
	objView.docSubject = document.getElementById("GetPage").value;
	objView.exactMatch = false;
	if(docInfo.EnableFolderFiltering == "1"){
		//doc.CurrentFilterDiv.innerHTML = "";	
		$("#CurrentFilterDiv").html("")
		ClearAllColFilterFlags();
	}
	objView.getTotal = false;
	objView.Refresh(true,true,true);
	$(".listheader").resizable({ handles: "e" })
}

var total = 0;
var count = 0;
var start = 1;
var currCnt = null;
var origCount = 0;	
var buttonsDisabled = null;

function disableContentPaging(disabled){
	
	//this function is called by viewObjects prior to the document.ready firing
	//button definitions have to be included here.
	$("#btnContPage1").prop("disabled", disabled );
	$("#btnContPage2").prop("disabled", disabled );
	$("#btnContPage3").prop("disabled", disabled );
	$("#btnContPage4").prop("disabled", disabled );	

	if(disabled) {
		$("#currPic").css("background-color", "#DFDFDF");
		$("#currCount").css("background-color", "#DFDFDF");		
		$("#GetPage").css("background-color", "#DFDFDF");				
		$("#GetPage").attr("disabled", "disabled");		
	} else {
		$("#currPic").css("background-color", "white");
		$("#currCount").css("background-color", "white");	
		$("#GetPage").css("background-color", "white");	
		$("#GetPage").removeAttr("disabled");	
	}
}

function initContentPagingVars() {
	if($("#divContentPaging").css("display") == "none") {return}
	
	total = parseInt($("#totalCount").html());
	count = parseInt(objView.docCount);
	start = document.getElementById("startCount");
	currCnt = document.getElementById("currCount");
	if(origCount == 0) { origCount = parseInt(objView.docCount);}

	document.getElementById("GetPage").value = "";
	if(docInfo.EnableFolderFiltering == "1"){
		$("#CurrentFilterDiv").html("");	
		ClearAllColFilterFlags();
	}
	objView.getTotal = false;
}

function first(){
	initContentPagingVars();
	if(objView.startCount == 1) {return}
	objView.startCount = 1;
	$(start).html(1);
	$(currCnt).html(objView.docCount);
	objView.Refresh(true,true,true)
	$(".listheader").resizable({ handles: "e" });
	document.getElementById("GetPage").value = "";
}

function last(){
	initContentPagingVars();
	if(parseInt($(currCnt).html()) == total) {return}
	var newStart = total - count;
	objView.startCount = newStart;
	$(start).html(newStart)
	objView.Refresh(true,true,true)	
	$(".listheader").resizable({ handles: "e" })
	$(currCnt).html(total)
}

function next(){
	
	initContentPagingVars();
	var newStart = parseInt($(start).html()) + parseInt(objView.docCount);
	if(newStart >= total) {return}
	objView.startCount = newStart;
	$(start).html(newStart);
	var newCnt = (newStart-1) + parseInt(objView.docCount);
	if(newCnt > total) { newCnt = total; }
	$(currCnt).html(newCnt);
	objView.Refresh(true,true,true)
	$(".listheader").resizable({ handles: "e" })
}

function previous(){
	initContentPagingVars();
	var newStart = parseInt($(start).html()) - parseInt(objView.docCount);
	if(newStart < 0) {return}
	if(newStart < 1) {newStart = 1;}
	objView.startCount = newStart;
	$(start).html(newStart);
	var newCnt = (newStart-1) + parseInt(objView.docCount);
	if(newCnt < parseInt(objView.docCount)) { newCnt = objView.docCount; }
	if(newCnt > total) { newCnt = total; }
	$(currCnt).html(newCnt);
	objView.Refresh(true,true,true)
	$(".listheader").resizable({ handles: "e" })
}

function getDisplayCount(source){ 
	if($("#GetPage").attr("disabled") == "disabled") {return}
	initContentPagingVars();	
	var content = "";
	var sel = "";
	for(x=1; x<=4; x++) {
		sel = origCount * x;
		content += "<div onclick=\"setDisplayCount('" + sel + "');\" onmouseover=\"this.style.background='#1E90FF';this.style.color='white'\" onmouseout=\"this.style.background='white';this.style.color='black'\">" +
		"<span style=\"padding-left:1px\">" + sel + "</span></div>"
	}
	$("#countPicker").html(content);
	$("#countPicker").css({ top: "0", left: "0" });
	$("#countPicker").position({ my: "left top", at: "left top", of: "#currCount" });		
	$("#countPicker").toggle();
}

function setDisplayCount(selCount) {
	objView.docCount = selCount;
	objView.startCount = 1;
	start.innerHTML = 1;
	var newCnt = parseInt(objView.docCount);
	if(newCnt > total) { newCnt = total; }
	currCnt.innerHTML = newCnt;
	$("#countPicker").toggle();
	objView.Refresh(true,false,true)
	$(".listheader").resizable({ handles: "e" })
}

//=================== Document Compare ==========================

function CompareSelectedWordDocuments(){

	var PDFCreatorAvailable = true;
	//check whether PDF Creator is installed, which is required to view the comparison results
	//unless the user has printing rights, in which case comparison results may be viewed in Word.
	if(!DLExtensions.isPDFCreatorInstalled()) { PDFCreatorAvailable = false;	}
	
	//check whether PDF Creator is installed, which is required to view the comparison results
	if(PDFCreatorAvailable==false && docInfo.RequirePDFCreator) {
		alert("{% trans %}Unable to run document comparison.  PDF Creator is not installed.{% endtrans %}");
		return;
	}
	
	//get the docids that have been selected and validate two have been selected
	var docids = objView.selectedEntries;
	if((docids.length > 2) || (docids.length < 2)) {
		alert("{% trans %}Please select two documents to compare.{% endtrans %}");
		return;
	}
	
	CompareWordAttachments(docids, function(saveCompareDocPath){	
		if(!saveCompareDocPath) {
			Docova.Utils.hideProgressMessage();
			return;
		}

		if(docInfo.RequirePDFCreator) {		
			Docova.Utils.showProgressMessage("{% trans %}Converting comparison results to PDF{% endtrans %}..." );
		
			//------------------ convert the compare results to PDF ----------------------------------
			var pdfPath = DLExtensions.ConvertToPDF ( saveCompareDocPath, true, "");
			Docova.Utils.hideProgressMessage();
		
			//--------------- launch the pdf for viewing ----------------------------
			DLExtensions.LaunchFile(pdfPath);
		} else {
			//launch in Word
			Docova.Utils.hideProgressMessage();
			DLExtensions.LaunchFile(saveCompareDocPath);
		}
	});
}

//----- object presence testers ----
function HasUploaderResize()
{
	try	{
		if(SetUploaderDimensions){return true;}
	}
	catch (e)
	{
		return false;
	}
	return false;
}

function HasViewPane()
{
	try	{
		if(ViewLoadDefaultPerspective){return true;}
	}
	catch (e)
	{
		return false;
	}
	return false;
}
// ------------- preloads icons used in view object---------------

function PreloadBaseImages()
{
	var curNsf = "{{ asset('bundles/docova/images/') }}";
    var imgArray = new Array();
    var imgNames = "cat-collapse.gif,cat-expand.gif,coloptions.gif,pincolumn.gif,viewRefreshGreen.gif,chkrbrdclosed.gif,chkrbrdopened.gif,icn16-stddoc.gif,icn16-unknowndoc.gif,icn16-webpage.gif,sortadred-default.gif,popmenu-check.gif";
    var imgList = imgNames.split(",");
    
    for (k=0; k<imgList.length; k++)
    {
    	imgArray[k] = new Image();
    	imgArray[k].src = curNsf + imgList[k] + "?Open";
    }
}

//--------------------------------------Initializepage --------------------------
function InitPage()
{
	ViewSetOnloadState();
	ViewLoadDefaultPerspective();
	ViewOpenDoc();
	
	if(objView.contentPaging) {
		$("#totalCount").html(objView.totalDocCount);
	}	
	checkAvailableHeight();
	if ( ! isiPad ){
		$(window).on("resize", function(){ checkAvailableHeight() });
	}
}

// ------------- sets the view object and loads default view perspective---------------
function ViewLoadDefaultPerspective()
{
	objView = new ObjView("divViewContent", true);
	objView.iconBaseUrl = "{{ asset('bundles/docova/images/') }}";
	objView.imgPath = "{{ asset('bundles/docova/images/') }}";
	objView.baseUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/";
	objView.baseXmlUrl=docInfo.ServerUrl + "/" + docInfo.NsfName + "/readfolderdataview.xml?OpenAgent" ;
	
	objView.folderID = docInfo.FolderID; 
	objView.columnPropertiesDialogUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/dlgViewColumnProperties?OpenForm&FolderID=" + docInfo.FolderID+ "&LibraryID=" + docInfo.LibraryKey; 
	objView.serverName=ServerName;
	objView.nsfName=NsfName;
	objView.serviceAgent=docInfo.ServerUrl + "/" + docInfo.NsfName + "/ViewServices?OpenAgent&AppID=" + docInfo.AppID;
	objView.dateFormat = docInfo.SessionDateFormat;
	objView.embView = (docInfo.IsEmbedded || false);
	
	if ( docInfo.RestrictToCategory != "--none--" )
	{
		objView.restrictToCategory = docInfo.RestrictToCategory;
	}
	
	if(docInfo.UseContentPaging == "1") {	
		objView.contentPaging = true;
		objView.docCount = docInfo.MaxDocCount;
	}

	ViewLoadPerspective();
	ViewAttachEvents();
}

//------------ perspective handlers -----------------------------

function ViewLoadPerspective()
{
	var perspectiveId = (currentPerspective)? currentPerspective : docInfo.DefaultPerspective;
	var el = document.getElementById("xmlViewPerspective");
	if(! el){
		return;
	}
	var perspectiveDocXml = el.textContent || el.innerText || el.nodeValue || el.innerHTML;	
	objView.SetViewParams(perspectiveDocXml);

	var perspectiveDoc = (new DOMParser()).parseFromString(perspectiveDocXml, "text/xml");
	if(Sarissa.getParseErrorText(perspectiveDoc) != Sarissa.PARSED_OK){  
  		var errorText = Sarissa.getParseErrorText(perspectiveDoc);
		alert("Error parsing xsl: " + errorText);
		perspectiveDoc = null;
		return;
	}					
	var isAutoCollapseNode = perspectiveDoc.selectSingleNode("viewperspective/autocollapse");
	if (isAutoCollapseNode == null){
		var isAutoCollapse = "0";
	}else{
		var isAutoCollapse = isAutoCollapseNode.textContent || isAutoCollapseNode.text;
	}
	
	jQuery("#inpSwitchPerspective").val(perspectiveId);

	objView.queryOptions = ViewGetQueryOptions();

	if(isAutoCollapse == "1"){
		$("#divViewContent").css("display", "none")	
		if(docInfo.EnableFolderFiltering == "1"){ //Initialize and apply default filtering if enabled	, last "true" parameter on the .Refresh
			objView.Refresh(true,true,true,true,true);
			$(".listheader").resizable({ handles: "e" });
		}else{
			objView.Refresh(true,true,true);
			$(".listheader").resizable({ handles: "e" });
		}
		objView.CollapseAll();
		$("#divViewContent").css("display", "");
	} else {
	
		if(docInfo.EnableFolderFiltering == "1"){ //Initialize and apply default filtering if enabled, last "true" parameter on the .Refresh
			$("#divViewContent").css("display", "none");
			objView.Refresh(true,true,true,true,true);
			$(".listheader").resizable({ handles: "e" });
			$("#divViewContent").css("display", "");
		}else{
			objView.Refresh(true,true,true);
			$(".listheader").resizable({ handles: "e" });
		}
	}
}

// ======================= view event handlers =======================
//Global varables
var dragSourceColumn; //column heading being dragged into new location
var dragTargetColumn; //target column heading for dragover and drop 
var selectDragMode; //specifies how the drag selection over checkboxes should be handled
var viewContainer ; //object where the view contents will be plugged
mouseX; //mouse coordinates
mouseY;

//event attacher
function ViewAttachEvents()
{
	var paneObj = document.getElementById("divViewContent"); //#divViewEventCapture
	if(!paneObj) {return false;}
	$(paneObj).on("mousedown", function(e){ ViewHandleEvent(e) });
	$(paneObj).on("dblclick", function(e){ e.stopPropagation(); ViewHandleEvent(e); });
	$("#divViewEventCapture").on("keydown", function(e){ ViewHandleEvent(e); });
	$("#divViewEventCapture").on("keyup", function(e){  ViewHandleEvent(e); });
	if (  docInfo.IsEmbedded  !== true)
		$(paneObj).on("contextmenu", function(e){ e.preventDefault(); ViewHandleEvent(e); })
}


//=====================  event dispatcher ===========================
function ViewHandleEvent(event)
{
	var eventSource = event.target;
	var eventType = event.type;
	var sourceClass=eventSource.className || "";
	sourceClass = jQuery.trim(sourceClass.replace("ui-resizable", "")); 
	var sourceId=$.trim(eventSource.id); 
	var keyCode = event.keyCode;
	var currentRow; //table row containing the eventSource
	var sourceType="";
	
	if(!eventSource){return}
	currentRow = $(eventSource).closest("TR").get(0);
	var tagname = $(eventSource).prop("tagName").toUpperCase();

	if ( $(eventSource).hasClass("far") ||$(eventSource).hasClass("fas") ||$(eventSource).hasClass("fab")  )
	{
	 	if ( $(eventSource).hasClass(objView.categoryExpandClass) || $(eventSource).hasClass(objView.categoryCollapseClass) )
	 	{
	 		ViewEventDispatch(event, eventType, eventSource, "categorytoggle", keyCode, currentRow);
			return;
		}else if ($(eventSource).hasClass("fa-sync")  ){
			ViewEventDispatch(event, eventType, eventSource, "viewrefresh", keyCode);
			 return;
		}else if ( $(eventSource).hasClass("sorting")){
			 ViewEventDispatch(event, eventType, eventSource, "viewsort", keyCode);
			 return;
		}
	}

	//------------------ check if there are any event handlers for the event source --------
	//------------- clickable images
	if (tagname == "IMG") {
		if(sourceClass=="listsorticon")
		{
			ViewEventDispatch(event, eventType, eventSource, "viewsort", keyCode);
			return;
		}
			
		else if ( sourceClass=="reflection" || sourceClass=="content portray" || sourceClass=="content landscape"){
			ViewEventDispatch(event, eventType, eventSource, "coverflow", keyCode, currentRow);
			return;
		}
			
		else if(sourceClass=="listviewrefresh")
		{
			ViewEventDispatch(event, eventType, eventSource, "viewrefresh", keyCode);
			return;
		}		
		else if(sourceClass=="listexpandericon")
		{
			ViewEventDispatch(event, eventType, eventSource, "categorytoggle", keyCode, currentRow)
			return;
		}else if ( sourceClass=="shadow"){
			eventSource = eventSource.parentNode;
			currentRow = eventSource;
			ViewEventDispatch(event, eventType, eventSource, "thumbnail", keyCode, currentRow);
		}		
	
	//------------ input fields		
	}else if (tagname == "INPUT") {
		if(sourceId=="inpQuery")
		{
		 	ViewEventDispatch(event, eventType, eventSource, "ftquery", keyCode);
		 	return;
		}
		else if(sourceId=="GetPage") {
		 	return;
		}
		else if(sourceId == "ExportSelectCb"){
			ViewEventDispatch(event, eventType, eventSource,  "selectcell", keyCode, currentRow);
			return;
		}

	//------------ cells/rows
	}else if (tagname == "TD" || tagname == "TH" || tagname == "SPAN") {
		//thumbnail column
		if ( sourceClass == "thumbnail" ) {
			currentRow = eventSource;
			ViewEventDispatch(event, eventType, eventSource, "thumbnail", keyCode, currentRow);
			return;
		}
		//column heading	
		else if(sourceClass=="listheader" || sourceClass=="listheaderfr" || sourceClass=="listheaderfltr" || sourceClass=="listheaderfrfltr") //column heading
		{
			ViewEventDispatch(event, eventType, eventSource, "viewheader", keyCode, currentRow);
			return;
		}
		//selection column heading	
		else if(sourceClass=="listselheader") //selection column heading
		{
			ViewEventDispatch(event, eventType, eventSource, "viewselectheader", keyCode, currentRow);
			return;
		}
		//data or total cell
		else if(sourceClass=="listitem" || sourceClass=="listitemfr") //data or total cell
		{
			if($(currentRow).attr("isRecord"))
			{		
				ViewEventDispatch(event, eventType, eventSource, "datarow", keyCode, currentRow);
				return;
			}										
			else if($(currentRow).attr("isCategory")) 
			{
				ViewEventDispatch(event, eventType, eventSource, "categoryrow", keyCode, currentRow);
				return;
			}
			else if($(currentRow).attr("isSubtotal"))
			{
				ViewEventDispatch(event, eventType, eventSource, "subtotalrow", keyCode, currentRow);
				return;
			}
			else if($(currentRow).attr("isTotal"))
			{
				ViewEventDispatch(event, eventType, eventSource, "totalrow", keyCode, currentRow);
				return;
			}
		}
		//category heading cell			
		else if(sourceClass=="listcat" || sourceClass=="listcatfr") //category heading cell
		{
			ViewEventDispatch(event, eventType, eventSource,  "categoryrow", keyCode, currentRow);
			return;
		}
		//selection margin cell					
		else if(sourceClass=="listsel") //selection margin cell
		{
			ViewEventDispatch(event, eventType, eventSource,  "selectcell", keyCode, currentRow);
			return;
		}
	}
	ViewEventDispatch(event, eventType, eventSource,  "", keyCode, currentRow);
}

//------------------ dispatch event handler based on event source and type --------
function ViewEventDispatch(event, eventType, eventSource, sourceType, keyCode, currentRow)
{
	if(eventType=="mousemove")
	{
		if(sourceType=="selectcell") {
			ViewDocSelectDrag(eventSource, event.which);
			return CancelEvent();
		} //doc selection column
		if(sourceType=="viewheader" ) {
			ViewColumnDrag(eventSource);
			return CancelEvent();
		} //doc selection column
	}
	else if(eventType=="mousedown" && (event.which == 1 || event.which == 3)) //left mouse button or right mouse button
	{
		$("#divViewContent").focus();
		checkAvailableHeight();
		if ( sourceType =="selectcell" && event.which ==3){ViewShowContextPopup(sourceType, eventSource);return CancelEvent();}
		if(sourceType=="selectcell"){ViewDocSelectClick(eventSource);} //doc selection column
		if(sourceType=="viewsort") {ViewSortColumn(eventSource);}
		if(sourceType=="viewrefresh" || sourceType=="viewselectheader")
		{ //view refresh icon
			if(docInfo.EnableFolderFiltering == "1")
			{
				$("#divViewContent").css("display", "none")	
					objView.Refresh(true,false,true,false,false, true)
					$(".listheader").resizable({ handles: "e" })
				$("#divViewContent").css("display", "")	
			}else{
				objView.Refresh(true, false, true);
				moveScroll(); //in case view list is scrolled we need to reset the header
				$(".listheader").resizable({ handles: "e" })
			}
		} 
		if(sourceType=="categorytoggle") {ViewToggleCategory(currentRow);}
		if(sourceType=="datarow" || sourceType=="subtotalrow" || sourceType=="categoryrow" || sourceType=="thumbnail")
		{	
			if(isiPad){  //if single click on an iPad, if row is already highlighted then open doc like a double click.
				if( currentRow.id == objView.currentEntry){ //check to ensure a doc is highlighted
					if(sourceType=="datarow" || sourceType=="subtotalrow" || sourceType=="categoryrow" || sourceType =="thumbnail" ) {ViewHighlightEntry(currentRow);}
					//if(sourceType=="datarow"){CreateEntrySubmenu(eventSource);}
					if(sourceType=="datarow"){CreateEntrySubmenu(event);}
				}else{
					ViewHighlightEntry(currentRow);
				}
			}else{
				ViewHighlightEntry(currentRow);
			}
		}
		if(sourceType=="viewheader" ) {ViewColumnSelectFilter(eventSource);}
	}
	else if(eventType=="mouseover")
	{
		if(sourceType=="viewheader" ) {ViewColumnDragOver(eventSource);}
	}
	else if(eventType=="mouseup")
	{
		if(sourceType=="viewheader" ) {ViewColumnDragDrop(eventSource, eventType);}
		return ViewClearEventState();
	}
	else if(eventType=="click")
	{
		return CancelEvent();
	}
	else if(eventType=="dblclick" )
	{
		if(sourceType=="datarow") {
			var uiView = Docova.getUIView();
			if (  uiView._triggers['dblclick'] )  {
				if ( uiView.triggerHandler('dblclick', uiView) ) 
					 ViewLoadDocument(false);
			}else{
				ViewLoadDocument(false);
			}
		}
		if(sourceType=="categoryrow" ) {ViewToggleCategory(currentRow);}	
		if(sourceType=="thumbnail"){ViewLoadDocument(false);}
		if(sourceType=="coverflow"){ViewHighlightEntry(currentRow);ViewLoadDocument(false);}
	}
	else if(eventType=="mouseout")
	{
		return ViewClearEventState();
	}
	else if(eventType=="keydown")
	{
		var isIE = false || !!document.documentMode;
		if (isIE)
			event.preventDefault();
		ViewHandleKeyboardEvent(eventType, eventSource, sourceType, keyCode, currentRow);
	}
	else if ( eventType == "keyup")
	{
 		var isIE = false || !!document.documentMode;
		if (isIE)
			event.preventDefault();
		shiftkeypressed = false;
		ctrlkeypressed = false;
		return;
	}
	else if(eventType=="selectstart")
	{
		if(sourceType !="ftquery") {return CancelEvent();}
	}
	else if(eventType=="contextmenu")
	{
		if(sourceType=="datarow" || sourceType=="subtotalrow" || sourceType=="categoryrow" || sourceType =="thumbnail" ) {ViewHighlightEntry(currentRow);}
		if(sourceType=="datarow"){CreateEntrySubmenu(event);}
		if(sourceType=="thumbnail"){CreateThumbnailsSubmenu(event, eventSource);}
		if(sourceType=="viewheader" || sourceType=="viewselectheader" || sourceType=="viewrefresh") {
			ViewShowContextPopup(sourceType, eventSource);
			return CancelEvent();
		}
		return CancelEvent();
	}
}

// ------------------------------------ document list key handlers ------------------------------------------------

function ViewHandleKeyboardEvent(eventType, eventSource, sourceType, keyCode, currentRow)
{
	var DEL_KEY = 46;
	var ENTER_KEY = 13;
	var DOWNARROW_KEY = 40;
	var UPARROW_KEY = 38;
	var F9_KEY = 120;
	var SPACE_KEY= 32;
	var ESC_KEY= 27;
	var SHIFT_KEY=16;
	var CTRL_KEY = 17;
	var C_KEY  = 67;
	var V_KEY = 86;
	var X_KEY = 88;
    var A_KEY = 65;


	//The keydown event.target is different in different browsers. Use view object currentEntry to re-set currentRow
	//and sourceType
	if(objView.currentEntry){
		currentRow = $("#divViewEventCapture").find("#" + objView.currentEntry).get(0);
		if($(currentRow).attr("isRecord")){sourceType = "datarow";}
		if($(currentRow).attr("isCategory")){sourceType = "categoryrow";}
		if($(currentRow).attr("isSubtotal")){sourceType = "subtotalrow";}
		if($(currentRow).attr("isTotal")){sourceType = "totalrow";}
	}
	
	if(keyCode == DEL_KEY)
	{
		if(docInfo.CanDeleteDocuments) {
			if(sourceType=="datarow" ){
				if(docInfo.EnableFolderFiltering == "1"){
					objView.DeleteSelectedEntries();
					$("#divViewContent").css("display", "none")	
					ApplyFolderFilter(true);
					$("#divViewContent").css("display", "")	
				}else{
					objView.DeleteSelectedEntries();
				}
			}
		}
	}
	else if ( keyCode == SHIFT_KEY )
	{
		shiftkeypressed = true;
	}else if ( keyCode == CTRL_KEY ){
		ctrlkeypressed = true;
	}else if ( keyCode == C_KEY ){
		if ( ctrlkeypressed ) {
			ViewCopySelected();
		}
	}else if ( keyCode == V_KEY ) {
		if ( ctrlkeypressed ) {
			ViewPasteSelected();
		}
	}else if ( keyCode == X_KEY ){
		if ( ctrlkeypressed ) {
			ViewCutSelected();
		}
	}else if ( keyCode == A_KEY ){
		if ( ctrlkeypressed ) {
			objView.SelectAllEntries();
			$("#divViewContent").triggerHandler( "focus" )
		}
	}
	else if(keyCode == ENTER_KEY)
	{
		if(sourceType=="datarow" && objView.currentEntry != "") //process entry only if it is highlighted
			{
			ViewLoadDocument(false);
			}
		if(sourceType=="categoryrow" || sourceType== "categorycell") {ViewToggleCategory(currentRow);}	
		if(sourceType=="ftquery") {ViewFTSearch();}	
	}
	else if(keyCode == DOWNARROW_KEY)
	{
		if(sourceType=="datarow" || sourceType=="categoryrow" || sourceType=="subtotalrow")
		{
			ViewMoveDocHighlight("down");
		}
	}
	else if(keyCode == UPARROW_KEY)
	{
		if(sourceType=="datarow" || sourceType=="categoryrow" || sourceType=="subtotalrow")
		{
			ViewMoveDocHighlight("up");
		}
	}
	else if(keyCode == ESC_KEY)
	{
		if(sourceType=="datarow" || sourceType=="categoryrow" || sourceType=="subtotalrow" && objView.currentEntry != "") //select the entry only if it is highlighted
			{
				ViewResetEntryHighlight();
			}
		if(sourceType=="ftquery") {ViewFTClear(); $("#inpQuery").focus();}	
	}
	else if(keyCode == F9_KEY)
	{
		objView.Refresh(true, false, true);
		$(".listheader").resizable({ handles: "e" })
	}	
	else if(keyCode == SPACE_KEY)
	{
		if(sourceType=="datarow" && objView.currentEntry != "") //select the entry only if it is highlighted
			{
				ViewDocSelectClick(document.getElementById(objView.currentEntry));
			}
		if(sourceType=="categoryrow" || sourceType== "categorycell") {ViewToggleCategory(currentRow);}	
		if(sourceType=="ftquery"){return;} //let it go
		 ViewClearEventState();
		CancelEvent(); //handled
	}
}


//===================== Event handler functions ===================

//----------------------------- highlight entry on click -------------------
function ViewHighlightEntry(source)
{
	if (!source) {
		return false;
	}
	if ( source.className == "thumbnail" ){
		$(".thumbnail").css("background", "");
		$(source).css("background", "lightgray" );
	}
	//if shift is being pressed then set checkbox
	if ( shiftkeypressed ) {
		var startid = objView.currentEntry;
		if (startid == "")
			return;
		var endid =  source.id;
		objView.ShiftSelectEntries  (startid, endid )
	}else if ( ctrlkeypressed ){
		var id =   source.id;
		objView.CtrlSelectEntries(id );
	}else{
		if(objView.isAppView){
			objView.HighlightEntryByRowIndex(source.rowIndex);
		}else{
			objView.HighlightEntryById(source.id);
		}
	}
	CancelEvent();
}

//----------------------------- un-highlight entry on ESC key -------------------
function ViewResetEntryHighlight()
{
	objView.ResetHighlight();
}

//----------------------------- up/down keys on highlighted entry ------------------------
function ViewMoveDocHighlight(dir) //up/down arrow key handler
{
	objView.MoveEntryHighlight(dir) ;
	return CancelEvent();
}


// ----- called to refreesh the view after adding/editing a document --------------
function ViewReload(selectDoc)
{
	if(selectDoc) {objView.currentEntry = selectDoc;}
	objView.queryOptions = ViewGetQueryOptions();
	
	//-----If view is being filtered, reapply the filter-----
	if(docInfo.EnableFolderFiltering == "1"){
		$("#divViewContent").css("display", "none")	
		objView.Refresh(true,false,true);
		ApplyFolderFilter(true);
		$(".listheader").resizable({ handles: "e" })
		$("#divViewContent").css("display", "")	
	}else{
		objView.Refresh(true,false,true);
		$(".listheader").resizable({ handles: "e" })
	}
}

//---- open specific document after opening the folder ---------
function ViewOpenDoc()
{
//	try{
	if(docInfo.LoadDoc) {
		objView.HighlightEntryById(docInfo.LoadDoc);
	}

	if(docInfo.DocumentTypeOption=="N" && !docInfo.isRecycleBin){
		infoUrl=docInfo.ServerUrl + "/" + docInfo.NsfName + "/wFolderInfo?OpenForm&ParentUNID=" + docInfo.DocID;
		ViewLoadDocument(infoUrl);
	}

	if(docInfo.LoadDoc){
		(objView.currentEntry)? ViewLoadDocument() : OpenDocumentWindow(docInfo.LoadDoc);
	} //currentEntry will be set only if it can be located in the list
//		}catch(err){}
}

//----------------  open/close document handlers -----------------------
function ViewLoadDocument(docUrl, docTypeName, isNewDoc, editMode)
{
	if(docInfo.isRecycleBin) // documents in recycle bin cannot be opened, just the properties dialog is displayed
	{
		var entryObj = objView.GetCurrentEntry();
		if(!entryObj) {return; }
		var recType = entryObj.GetElementValue("rectype");
		if(recType == "fld") //deleted folder
			{
				ShowFolderProperties(entryObj.entryId);
			}
		else if(recType == "doc") //deleted doc
			{
				ShowDocumentProperties(entryObj.entryId);
			}
		return;
	}
	var action = "Open";
	if(editMode) { 
		//need to check if user is authorized to edit
		if(!mayUserEditDoc(objView.GetCurrentEntry().entryId)) {
			Docova.Utils.messageBox({
				title: "{% trans %}Not Authorized{% endtrans %}",
				prompt: "{% trans %}You are not authorized to edit this document.{% endtrans %}",
				icontype: 1,
				msgboxtype: 0
			});
			return
		}
		action = "Edit" 
	}
	
	//check if the view defaults to open the doc in edit mode
	if ( docInfo.OpenDocInEditMode == "1" )
		action = "Edit"
	
	// regular folder
	if(!docUrl && objView.currentEntry)
	{
		if (action == 'Edit') {
			docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/wViewForm/0/" + objView.currentEntry + "?EditDocument&AppID=" + docInfo.AppID;
		}
		else {
			docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/wReadDocument/" + objView.currentEntry + "?OpenDocument&ParentUNID=" + docInfo.AppID;
		}
	}
	if(!docUrl) {
		Docova.Utils.messageBox({
			title: "{% trans %}Error{% endtrans %}",
			prompt: "{% trans %}Document Url cannot be located.{% endtrans %}",
			icontype: 1,
			msgboxtype: 0
		});
		return;
	}
	
	//------------- tabbed interface ----------------------------------
	var entryObj = objView.GetCurrentEntry();

	var frameID = "";
	var title = "";
	if(isNewDoc) {
		frameID = window.parent.fraTabbedTable.objTabBar.GetNewDocID();
		if(docTypeName == undefined || docTypeName == "") {
			docTypeName = "Document";
		}
		title = "{% trans with {'%vname%' : '" + docTypeName'} %}New %vname%{% endtrans %};	
	} else if(entryObj) { 
		
		
		frameID = entryObj.entryId; 
		
		//thumbnails have a docid~attachment name as id.
		//if this is the case, get the docid alone
		
		if ( frameID.indexOf("~" ) > 0 ){
			frameID = frameID.substring(0, frameID.indexOf("~") );
			
		}
		
		if ( docInfo.TitleNode  != "" )
			title = entryObj.GetElementValue(docInfo.TitleNode);
		else
			title = entryObj.GetElementValue("CF0");
	}

	try	{
		if(onDocumentOpen()){ return true;}
	}
	catch (e)
	{
		if ( docInfo.IsEmbedded === true )
			window.parent.parent.fraTabbedTable.objTabBar.CreateTab(title, frameID, "D", docUrl, docInfo.DocID, isNewDoc)
		else 
			window.parent.fraTabbedTable.objTabBar.CreateTab(title, frameID, "D", docUrl, docInfo.DocID, isNewDoc);
	}
}

function OpenDocumentWindow(docID, editMode) {
	var targetUnid=(docID)? docID : objView.currentEntry;
	if(!targetUnid){return false;}
	var action = "Open";
	if(editMode) { 
		//need to check if user is authorized to edit
		if(!mayUserEditDoc(objView.GetCurrentEntry().entryId)) {
			Docova.Utils.messageBox({
				title: "{% trans %}Not Authorized{% endtrans %}",
				prompt: "{% trans %}You are not authorized to edit this document.{% endtrans %}",
				icontype: 1,
				msgboxtype: 0
			});
			return
		}
		action = "Edit" 
	}
	var docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/NotesView/" + targetUnid + "?" + action + "Document&AppID=" + docInfo.AppID + "&mode=window";

	var leftPosition = (screen.width) ? (screen.width-700)/2 : 20;
	var topPosition = (screen.height) ? (screen.height-500)/2 : 20;
	dlgSize = "height=500,width=700,top=" + topPosition+ ",left=" + leftPosition;
	var dlgSettings = dlgSize + ",status=no,toolbar=no,menubar=no,location=no,scrollbars=yes,resizable=yes";
	return window.open(docUrl,targetUnid,dlgSettings); //Display the address dialog
}

function OpenFileWindow(filename){
	var targetUnid=objView.currentEntry;
	if(!targetUnid){return false;}
	
	var docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/0/" + targetUnid + "/$file/" + filename + "?open&" + Math.random();

	return window.open(docUrl); //Display the address dialog

}

function ViewUnloadDocument(refreshView, selectDocId)
{
	ViewSetTitleOptions("Folder: " + docInfo.FolderName)
	window.parent.fsContentFrameset.rows = "*,0";	

	if(refreshView) 
		{
			ViewReload(selectDocId);
			return;
		}
		
	if(objView.currentEntry != "") 
		{
			objView.HighlightEntryById(objView.currentEntry);
		}
	else
		{
			$("#divViewContent").focus();
		}
	var curContentUrl = window.parent.fraContentBottom.location.href;
	if(curContentUrl.indexOf("/BlankContent?")==-1){
		var contentUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/" +  "BlankContent?OpenPage";
		window.parent.fraContentBottom.location.href=contentUrl ;
	}
}


function ViewHighlightDefaultPerspective()
{
	var selectBox = document.getElementById("inpSwitchPerspective");
	for(var i=0; i<selectBox.options.length; i++)
		{
			var optcolor = $(selectBox.options[i]).val() == docInfo.DefaultPerspective ? "#ff0000" : ""
			$(selectBox.options[i]).css("color",  optcolor)
		}
}

function ViewSwitchPerspective(perspectiveId)
{
	var processPerspective = false;
	var url = "";
	
	if(! perspectiveId) {return;}
	var el = document.getElementById("xmlViewPerspective");
		if(! el){
		return;
	}	

	var idParts = perspectiveId.split("_");
	if(idParts[0] == "system") //system perspectives are stored in the home database
		{
			url = docInfo.ServerUrl + docInfo.PortalWebPath + "/perspectives.xml?OpenPage&pid=" + perspectiveId;	
			processPerspective = true;
		}
	else if(idParts[0] == "custom") //custom perspectives are stored in the library
		{
			url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/perspectives.xml?OpenPage&pid=" + perspectiveId;		
			processPerspective = true;
		}
	else if(idParts[0] == "user") //user perspectives are stored in super cookie
		{
			return;
		}
	else //unknown location
		{
			return;
		}
		
	if(processPerspective) {
		$.ajax({
			'type' : "GET",
			'url' : url,
			'contentType': false,
			'async' : false,
			'dataType' : 'text'
		})
		.done(function(data) {
			if(!data) {
				obj.status="FAILED";
				obj.error = "{% trans %}No data received from server{% endtrans %}";
				return false;
			} else {
				var parser = new DOMParser();
				Sarissa.updateContentFromNode(parser.parseFromString(data,"text/xml"), el);
			}
		})
	}	

	currentPerspective = perspectiveId;
	ViewLoadPerspective();
}

function ShowPerspectiveProperties(clickSrc)
{
	var perspectiveDoc = doc.xmlViewPerspective.XMLDocument;
	var perspectiveDocXml = "";
	if(!perspectiveDoc)	{return false;}
	
	var descNode = perspectiveDoc.selectSingleNode("viewperspective/description");
	var nameNode = perspectiveDoc.selectSingleNode("viewperspective/name");
	var typeNode  = perspectiveDoc.selectSingleNode("viewperspective/type");
	var authorNode = perspectiveDoc.selectSingleNode("viewperspective/createdby");
	var createdNode = perspectiveDoc.selectSingleNode("viewperspective/createddate");
	var modifiedNode = perspectiveDoc.selectSingleNode("viewperspective/modifiedby");
	var modDateNode = perspectiveDoc.selectSingleNode("viewperspective/modifieddate");
			
	oPopup = window.createPopup();
	var popupHtml = '<div style="width:100%; height: 100%;background-color: white margin: 0px; scroll:no; border: solid 1px #7DA5E0;">'
	popupHtml += '<div style="width:100%; height: 18px; filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0, StartColorStr=\'#C8DFFB\', EndColorStr=\'#7DA5E0\'); font: 11px verdana,arial; padding: 2px 0px 2px 4px;"';
	popupHtml += '>';
	popupHtml += '<div style="float:left;">' + nameNode.text + '</div>';
	popupHtml += '<img style="float:right; background-color: #dd2200;" src="' + docInfo.ServerUrl + "/" + docInfo.NsfName + '/vpclose.gif"  onclick="document.oPopup.hide();"/>'; 
	popupHtml += '</div>';
	popupHtml += '<div style="width:100%; height: 150px; font: 11px verdana,arial; padding: 4px;">';
	popupHtml += 'Type: ' + typeNode.text;
	popupHtml += '<br>Created by: ' + authorNode.text;
	popupHtml += '<br>Created on: ' + createdNode.text;
	popupHtml += '<br>Modified by: ' + modifiedNode.text;
	popupHtml += '<br>Modified on: ' + modDateNode.text;
	popupHtml += '<br>Description:<br>' + descNode.text;
	popupHtml += '</div>';
	popupHtml += '</div>';
	oPopup.document.oPopup = oPopup;
	oPopup.document.body.innerHTML = popupHtml; 
	oPopup.show(0,0, 220, 174, doc.inpSwitchPerspective);
}

function ViewSavePerspective()
{
	currentPerspective = $("#inpSwitchPerspective").val();
	var el = document.getElementById("xmlViewPerspective");
	if(! el){
		return;
	}

	var perspectiveXml = el.textContent || el.innerText || el.nodeValue || el.innerHTML;	
	var parser = new DOMParser;
	var perspectiveDoc = parser.parseFromString(perspectiveXml, "text/xml");

	var descNode = perspectiveDoc.selectSingleNode("viewperspective/description");
	var nameNode = perspectiveDoc.selectSingleNode("viewperspective/name");
	var autocollapseNode = perspectiveDoc.selectSingleNode("viewperspective/autocollapse");
	var typeNode  = perspectiveDoc.selectSingleNode("viewperspective/type");
	var unidNode  = perspectiveDoc.selectSingleNode("viewperspective/Unid");
	var idNode = perspectiveDoc.selectSingleNode("viewperspective/id");
	var libScope = perspectiveDoc.selectSingleNode("viewperspective/libscope");
	var libDefault = perspectiveDoc.selectSingleNode("viewperspective/libdefault");

	dlgParams.length = 0;
	dlgParams[0] = typeNode.textContent || typeNode.text;
	dlgParams[1] = nameNode.textContent || nameNode.text;
	dlgParams[2] = descNode.textContent || descNode.text;
	dlgParams[3] = unidNode.textContent || unidNode.text;		
	dlgParams[4] = idNode.textContent || idNode.text;
	dlgParams[5] = (libScope != null)? libScope.textContent || libScope.text : "";
	dlgParams[6] = (libDefault != null)? libDefault.textContent || libDefault.text : "";
	dlgParams[7] = (currentPerspective==docInfo.DefaultPerspective);	
	dlgParams[8]= (autocollapseNode != null)? autocollapseNode.textContent || autocollapseNode.text : "0";
	var dlgSettings = "dialogHeight: 560px; dialogWidth: 500px; dialogTop: px; dialogLeft: px; edge: raised; "
	dlgSettings += "center: Yes; help: No; resizable: No; status: No;"
	
	var dlgUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/dlgSavePerspective?OpenForm&ParentUNID=" + docInfo.DocID;
	var dlgViewPerspective = window.top.Docova.Utils.createDialog({
			id: "divDlgViewPerspective", 
			url: dlgUrl,
			title: "{% trans %}View Perspective{% endtrans %}",
			height: 450,
			width: 500,
			useiframe: true,
			sourcewindow: window,
			buttons: {
       			"{% trans %}Save{% endtrans %}": function() {
					var dlgDoc = window.top.$("#divDlgViewPerspectiveIFrame")[0].contentWindow.document
					var description = $("#Description", dlgDoc).val();
					var name = $("#Name", dlgDoc).val();
					var autocollapse = $("#AutoCollapse", dlgDoc).prop("checked") ? 1 : 0  //solo checkbox
					var action = $("input[name=SaveOption]:checked", dlgDoc).val() //multi checkbox with name SaveOption
					var makeDefault =  $("#MakeDefault", dlgDoc).prop("checked") ? 1 : 0 //solo checkbox
					var libScope = $("#LibScope", dlgDoc).prop("checked") ? 1 : 0 //solo checkbox
					var libDefault = $("#LibDefault", dlgDoc).prop("checked") ? 1 : 0 //solo checkbox
					var type = "custom"
					if($.trim(name) == ""){
						window.top.Docova.Utils.messageBox({
							prompt: "{% trans %}Please provide a Perspective Name.{% endtrans %}",
							title: "{% trans %}No Perspective Name.{% endtrans %}",
							icontype: 1,
							width: 300
						});
						return;
					}
					//--build the update request	
					var request="";
					request += "<Request>";
					request += "<Action>" + action + "</Action>";
					request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
					request += "<Unid>" + docInfo.DocID + "</Unid>";
					request += "<setdefault>" + makeDefault + "</setdefault>"
					request += "<libscope>" + libScope + "</libscope>"	
					request += "<libdefault>" + libDefault + "</libdefault>"						
					request += "<viewperspective>";
					request += "<type>" +  type + "</type>";
					request += "<Unid>" + dlgParams[3] + "</Unid>";
					request += "<name><![CDATA[" + name + "]]></name>";	
					request += "<description><![CDATA[" + description + "]]></description>";
					request += "<autocollapse>" + autocollapse + "</autocollapse>";					
					request += objView.GetViewParams();
					request += "</viewperspective>";
					request += "</Request>";	
					
					request = encodeURIComponent(request)
					DoViewSavePerspective(request, action, name, type, makeDefault)
					dlgViewPerspective.closeDialog()
        			},
        		"{% trans %}Cancel{% endtrans %}": function() {
					dlgViewPerspective.closeDialog()
        			}
      		}
		})
}

function DoViewSavePerspective(request, action, name, type, makeDefault){		
	//--- processing agent url
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/FolderServices?OpenAgent"

	jQuery.ajax({
		type: "POST",
		url: url,
		data: request,
		cache: false,
		async: false,
		dataType: "xml",
		success: function(xml){
			var xmlobj = $(xml)
			var statustext = xmlobj.find("Result").first().text();
			if(statustext == "OK"){
				if(action == "NEWPERSPECTIVE"){ //added new perspective (save as action)	
					//add new perspective to the selection field without reloading the view
					var newId = xmlobj.find('Results Result[ID=Ret1]').text()
					var newoptionval = type + "_" + newId
					$('<option>').val(newoptionval).text(name).attr("selected", "selected").appendTo('#inpSwitchPerspective'); ///or
					$("#inpSwitchPerspective").multiselect('refresh');
					if(makeDefault){
						docInfo.DefaultPerspective = type + "_" + newId; 
					}
					ViewHighlightDefaultPerspective();
					ViewSwitchPerspective(type + "_" + newId)
				}
			}
		},
		error: function(){
			alert("{% trans %}Error: The perspective could not be created.  Please try again or contact your Administrator{% endtrans %}")
		}
	})
return;
}

function ViewDeletePerspective()
{
	var el = document.getElementById("xmlViewPerspective");
	if(! el){
		return;
	}

	var perspectiveXml = el.textContent || el.innerText || el.nodeValue || el.innerHTML;	
	var parser = new DOMParser;
	var perspectiveDoc = parser.parseFromString(perspectiveXml, "text/xml");
	
	var typeNode  = perspectiveDoc.selectSingleNode("viewperspective/type");
	var unidNode  = perspectiveDoc.selectSingleNode("viewperspective/Unid");

	var unid = unidNode.textContent || unidNode.text;
	var perspectiveType = typeNode.textContent || typeNode.text;
	
	if(perspectiveType == "system"){
		window.top.Docova.Utils.messageBox({
			prompt: "{% trans %}The Perspective you are trying to delete is a system perspective.  You do not have access to delete it.{% endtrans %}",
			title: "{% trans %}Cannot delete Perspective.{% endtrans %}",
			icontype: 1,
			width: 300
		});
		return;
	}

	var dlgUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/dlgDeletePerspective?OpenForm&ParentUNID=" + docInfo.DocID;
	var dlgDeletePerspective = window.top.Docova.Utils.createDialog({
		id: "divDlgDeletePerspective", 
		url: dlgUrl,
		title: "{% trans %}Delete Perspective Options{% endtrans %}",
		height: 200,
		width: 300,
		useiframe: true,
		sourcewindow: window,
		buttons: {
       		"{% trans %}Save{% endtrans %}": function() {
				var dlgDoc = window.top.$("#divDlgDeletePerspectiveIFrame")[0].contentWindow.document
				var action = $("input[name=DeleteOption]:checked", dlgDoc).val() //multi checkbox with name SaveOption
				var type = "custom"
				if($.trim(action) == ""){
					window.top.Docova.Utils.messageBox({
						prompt: "{% trans %}Please choose one of the options or Cancel the dialog.{% endtrans %}",
						title: "{% trans %}No Option Selected.{% endtrans %}",
						icontype: 1,
						width: 300
					});
					return;
				}
				//--build the update request	
				var request="";
				request += "<Request>";
				request += "<Action>" + action + "</Action>";
				request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
				request += "<Unid>" + docInfo.DocID + "</Unid>";
				request += "<viewperspective>";
				request += "<type>" + type + "</type>";			
				request += "<Unid>" + unid + "</Unid>";
				request += "</viewperspective>";
				request += "</Request>";						
				request = encodeURIComponent(request)
				DoViewDeletePerspective(request)
				dlgDeletePerspective.closeDialog()
   			},
    			"Cancel": function() {
				dlgDeletePerspective.closeDialog()
    			}
    		}
	})			
}

function DoViewDeletePerspective(request){
	//--- processing agent url
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/FolderServices?OpenAgent"

	jQuery.ajax({
		type: "POST",
		url: url,
		data: request,
		cache: false,
		async: false,
		dataType: "xml",
		success: function(xml){
			var xmlobj = $(xml);
			var statustext = xmlobj.find("Result").first().text();
			if(statustext == "OK"){
				Docova.Utils.messageBox({ prompt: "{% trans %}The perspective was deleted.{% endtrans %}", title: "{% trans %}Perspective Deleted.{% endtrans %}", width: 300 });
				location.replace(location.href);					
			}
		},
		error: function(){
			alert("{% trans %}Error:  The perspective could not be deleted.  Please try again or contact the Administrator.{% endtrans %}")
		}
	})
}
//-------- column drag and drop --------------------
function ViewColumnDragStart(source)
{
}
function ViewColumnDrag(source)
{
}
function ViewColumnDragOver(source)
{
}
function ViewColumnDragDrop(source)
{
}

//-------- clipboard functions --------------------

function ViewCopySelected()
{
	if(objView.currentEntry =="" && objView.selectedEntries.length == 0) {return false;};
	ViewSetClipboard("copy");
}

function ViewCutSelected()
{
	if(objView.currentEntry =="" && objView.selectedEntries.length == 0) {return false;};
	ViewSetClipboard("cut");
}

function ViewSetClipboard(action)
{
	if(objView.currentEntry =="" && objView.selectedEntries.length == 0) {return false;};

	var clipdata="<srclibkey>" + docInfo.LibraryKey + "</srclibkey>";
	clipdata += "<srcfolderid>" + docInfo.FolderID + "</srcfolderid>"; // source folder id for refresh
	if(objView.selectedEntries.length > 0)
		{
			for(var k=0; k<objView.selectedEntries.length; k++)
				{
					clipdata+="<Unid>" + objView.selectedEntries[k] + "</Unid>";
				}
		}
		else
		{
			clipdata+="<Unid>" + objView.currentEntry  + "</Unid>"
		}

	Docova.Utils.setCookie({ keyname: "clipaction", keyvalue: action })
	Docova.Utils.setCookie({ keyname: "clipdata", keyvalue: clipdata })
}

function ViewPasteSelected()
{
	var clipdata = Docova.Utils.getCookie({ keyname: "clipdata" })
	if(clipdata == "") {return false;}
	var action = Docova.Utils.getCookie({keyname: "clipaction" })
	

	var request = "<Request>";
	request += "<Action>PASTE</Action>";
	request += "<clipaction>" + action + "</clipaction>";
	request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "<targetfolder>" + docInfo.FolderID + "</targetfolder>";
	request += clipdata;
	request += "</Request>";	

	if(action == "cut"){ //paste after cut is a one time shot	
 		var parser = new DOMParser();
		var tmpXMLDocument = parser.parseFromString("<dummy>" + clipdata + "</dummy>","text/xml");		
		var node = tmpXMLDocument.documentElement.selectSingleNode("srcfolderid");
		if ( node != null ){
			var folderid = node.textContent || node.text;
			var unid = folderid.substring(2);
			if (window.parent.fraTabbedTable){ 
				window.parent.fraTabbedTable.objTabBar.RefreshHelper.AddFolderToRefreshList(unid, ""); // added for source folder refresh
			}
		}
		Docova.Utils.showProgressMessage("Moving documents. Please wait...")
		Docova.Utils.setCookie({ keyname: "clipaction", keyvalue: "" }) 
		Docova.Utils.setCookie({ keyname: "clipdata", keyvalue: "" }) 
	} else {
		Docova.Utils.showProgressMessage("Pasting documents. Please wait...")
	}

	//--- processing agent url
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/ViewServices?OpenAgent&AppID=" + docInfo.AppID;
	var httpObj = new objHTTP();

	var retStatus = httpObj.PostData(request, url);
	Docova.Utils.hideProgressMessage();
	
	if(!retStatus ){return false;}
	objView.queryOptions = ViewGetQueryOptions();
	
	if(docInfo.EnableFolderFiltering == "1"){
		$("#divViewContent").css("display", "none")	
		objView.Refresh(true, false, true)
		ApplyFolderFilter(true);
		$(".listheader").resizable({ handles: "e" })
		$("#divViewContent").css("display", "")	
	}else{
		objView.Refresh(true, false, true)
		$(".listheader").resizable({ handles: "e" })
	}
}

// ------------------------------------- selection checkbox handlers ------------------------------------------------------

function ViewDocSelectClick(source)
{
	if(!source) {return CancelEvent();}

	currentRow = $(source).closest("TR").get(0)
	parentRow = currentRow

	if(!$(parentRow).attr("isRecord")) {return CancelEvent();}

	var chkbox = $(currentRow).find("INPUT").get(0)
	if( !$(chkbox).prop("checked"))
		{
		$(parentRow).attr("isChecked", true);
		if(chkbox) {objView.ToggleSelectEntryById($(parentRow).prop("id"), "check");}
		}
	else
	{
		$(parentRow).attr("isChecked", false);
		if(chkbox) {objView.ToggleSelectEntryById($(parentRow).prop("id"), "uncheck");}
	}

	return CancelEvent(); //handled
}

//--------------------------------------------- selecting documents by dragging mouse over selection boxes ------
function ViewDocSelectDrag(source, mouseButton)
{
	if(!source) {return false;}

if (mouseButton == 0 || mouseButton == 1)
	{
	var parentRow  = source.parentElement; //check if the handler should continue
	if((selectDragMode=="check" && parentRow.isChecked) || (selectDragMode=="uncheck" && !parentRow.isChecked))
		{
			return; //handled
		}
		else
		{
			ViewDocSelectClick(source); //call check handler
		}
	}
	return CancelEvent(); //handled
}

 
//--------------------------------------------- column sorting ----------------------------------------------------

function ViewSortColumn(source)
{
	var  colIdx = source.id.split("-")[1];
	objView.ToggleCustomSort(colIdx)
	moveScroll();  //-- in case we resorted while scrolled down the page
	$(".listheader").resizable({ handles: "e" })
	return CancelEvent();
}

//--------------------------------------------- expand/collapse category ----------------------------------------------------

function ViewToggleCategory(currentRow)
{
	objView.ToggleCategory(currentRow.id);
	return CancelEvent();
}

//-------------------------------------- view header toolbars show/hide handler -------------------------------
function ViewToggleToolbar(toolbar, action)
{
	var toolbarObj = document.getElementById("divToolbar" + toolbar);

	if($(toolbarObj).css("display")=="none" || action=="show" )
	{
		$(toolbarObj).css("display", "")
		try{
			Docova.Utils.setCookie({
				keyname: "FolderToolbar" + toolbar,
				keyvalue: "show",
				httpcookie: true
			})
		}catch(err){}
	}
	else
	{
		$(toolbarObj).css("display", "none")
		try{
			Docova.Utils.setCookie({
				keyname: "FolderToolbar" + toolbar,
				keyvalue: "",
				httpcookie: true
			})
		}catch(err){}
	}
	checkAvailableHeight();
}

//---------------------------- keeps the onload folder state persistence ----------------------------------------

function ViewSetOnloadState()
{
var toolbarSearchDisplay = docInfo.UseContentPaging == "1" ? "show" : Docova.Utils.getCookie({ keyname: "FolderToolbarSearch", httpcookie: true });
var toolbarPerspectiveDisplay = Docova.Utils.getCookie({ keyname: "FolderToolbarPerspective", httpcookie: true })

if ( docInfo.IsEmbedded === true && docInfo.ShowSearch != "1"){
toolbarSearchDisplay = false;
toolbarPerspectiveDisplay = false;
}

if(toolbarSearchDisplay) {ViewToggleToolbar("Search", toolbarSearchDisplay);}
if(toolbarPerspectiveDisplay) {ViewToggleToolbar("Perspective", toolbarPerspectiveDisplay);}

}
//--------------------------------------------- execute full text search ----------------------------------------------------

function ViewFTSearch(customQuery)
{

	
	var query;
	if (customQuery) {
		query = customQuery;
	}else{
		query = document.getElementById("inpQuery").value;
		$(divQueryFields).html("") //clear QueryFields div in case residual info exists from a previous advanced search
		$("#MySavedSearches").multiselect("clearSingle");
		$("#btnDelete").button( "option", "disabled", true );
	}
	
	var scope = ($("#inpViewScope").prop("checked"))? "TREE" : "FOLDER";
	if(!query)
		{
			alert("{% trans %}Please enter the search query.{% endtrans %}");
			return CancelEvent(); 
		}
	//-----Clear current filter and any column filter flags if filtering is on---
	if(docInfo.EnableFolderFiltering == "1"){
		$("#CurrentFilterDiv").html("")
		ClearAllColFilterFlags();
	}		
	objView.queryOptions = ViewGetQueryOptions();
	$("#divSearchQuery").html(query)

	scope = "VIEW"

	objView.DoFTSearch(query, scope);
	$("#btnFTClear").button( "option", "disabled", false );

	if(objView.contentPaging) {
		disableContentPaging(true);		
	}
}

//--------------------------------------------- clear full text search ----------------------------------------------------

function ViewFTClear()
{
	objView.queryOptions = ViewGetQueryOptions();
	if(docInfo.EnableFolderFiltering == "1"){
		$("#divViewContent").css("display", "none")
		
		objView.ResetFTSearch()
		$("#btnFTClear").button( "option", "disabled", true );
		ApplyFolderFilter(false);
		$("#divViewContent").css("display", "")	
		$("#divSearchQuery").html("")
		$("#divQueryFields").html("")
		Docova.Utils.setField({ field: "inpQuery", value: "" })
		$("#MySavedSearches").multiselect("clearSingle");		
		$("#btnDelete").button( "option", "disabled", true );
	}else{
		objView.ResetFTSearch()
		$("#btnFTClear").button( "option", "disabled", true );		
		$("#divSearchQuery").html("");
		$("#divQueryFields").html("")
		Docova.Utils.setField({ field: "inpQuery", value: "" })
		$("#MySavedSearches").multiselect("clearSingle");
		$("#btnDelete").button( "option", "disabled", true );
	}
	$("#divSearchResultCount").css("display", "none")
	if(objView.contentPaging) {
		disableContentPaging(false);		
	}
}

//-------------------------------------------- save current search -----------------------------------------------
function openSaveSearch(){ 

	//store selected Saved Search so dlg can access
	var ssValue = $("#MySavedSearches").multiselect("getChecked").map(function(){ return this.value; }).get();
	var ssText = $("#MySavedSearches option[value='" + ssValue + "']").text(); 
	dlgParams[0] = "";
	if(ssValue != "") {	dlgParams[0] = ssText; }
	
	retValues.length = 0;
	var dlgUrl = docInfo.ServerUrl + "/" + docInfo.PortalWebPath + "/dlgSaveSearch?OpenForm"
		
	var dlgSaveSearch = window.top.Docova.Utils.createDialog({
		id: "divDlgSaveSrch", 
		url: dlgUrl,
		title: "{% trans %}Save Search{% endtrans %}",
		height: 200,
		width: 500, 
		useiframe: true,
		sourcedocument: document,
		sourcewindow: window,
		buttons: [{
			id: "btnSaveUpdate",
			text: "{% trans %}Save As New Search{% endtrans %}",
			click: function() {	
				if(window.top.$("#divDlgSaveSrchIFrame")[0].contentWindow) {
					window.top.$("#divDlgSaveSrchIFrame")[0].contentWindow.completeWizard();	
				} else {
					window.top.$("#divDlgSaveSrchIFrame")[0].window.completeWizard();	
				}
			}
		},					
		{
        		text: "{% trans %}Cancel{% endtrans %}",	
			click: function() {	dlgSaveSearch.closeDialog();}
      	}]
	})			
}

function SaveSearch() {
	var searchkey = Docova.Utils.getField("MySavedSearches");
	var searchquery = document.getElementById("divSearchQuery").innerHTML;
	var queryfields = document.getElementById("divQueryFields").innerHTML;	
	var url = docInfo.ServerUrl + docInfo.PortalWebPath + "/UserDataServices?OpenAgent"
	var action;
	var request="";
	
	//----- The Update Search checkbox is returned in retVal[1] from the Save Search dialog.  If true, update the search, if false then
	//----- save the search as a new search
	if (retValues[1] == true){
		action = "UPDATESAVEDSEARCH"
	}else{
		action = "ADDSAVEDSEARCH"
	}

	//--build the saved search request
	request += "<Request>";
	request += "<Action>" + action + "</Action>";
	request += "<SearchName><![CDATA[" + retValues[0] + "]]></SearchName>";
	request += "<SearchKey>" + searchkey + "</SearchKey>";
	request += "<SearchQuery><![CDATA[" + searchquery + "]]></SearchQuery>";
	request += "<QueryFields><![CDATA[" + queryfields + "]]></QueryFields>"
	request += "<LibraryKey>" + docInfo.LibraryKey  + "</LibraryKey>";
	request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "</Request>";

	var httpObj = new objHTTP()
	if (httpObj.PostData(request, url))	{
		if (httpObj.status=="OK"){
			RefreshSavedSearches() //Refreshes the saved searches in the MySavedSearches select field
			if(retValues[1] == true){  //if this was an update to a search...set MySavedSearches field to the current search after the refresh	
				$("#MySavedSearches").multiselect({showSelected: true });
				$("#MySavedSearches").multiselect("refresh");
				$("#MySavedSearches").val(searchkey);
				GetSavedSearch(document.getElementById("MySavedSearches"));
				ViewFTSearch(document.getElementById("divSearchQuery").innerHTML);
			}
			Docova.Utils.messageBox({ prompt: "{% trans %}Your search was saved.{% endtrans %}", title: "{% trans %}Search Saved{% endtrans %}" });
			window.top.Docova.Utils.closeDialog({ id: "divDlgSaveSrch" });
			window.top.Docova.Utils.closeDialog({ id: "divDlgAdvancedSrch" });
			$("#MySavedSearches").multiselect("refresh");
			return true;
		}
	}	
}

//----- Delete a saved search
function DeleteSearch(){		//updated
	var selectObj = document.getElementById("MySavedSearches");
	var SearchName = selectObj.options[selectObj.selectedIndex].text
	delmsgtxt = "{% trans %}You are about to delete the current Saved Search{% endtrans %}:<br><br><b>" + SearchName + "</b><br><br>{% trans %}Are you sure?{% endtrans %}"
	var choice = window.top.Docova.Utils.messageBox({ 
		prompt: delmsgtxt, 
		icontype: 2, 
		title: "{% trans %}Delete Saved Search{% endtrans %}", 
		width:400, 
		msgboxtype: 4,
		onNo: function() {return},
		onYes: function() {
			var url = docInfo.ServerUrl + docInfo.PortalWebPath + "/UserDataServices?OpenAgent"
			var searchkey = selectObj.value
			var request="";
			//--build the delete search request
			request += "<Request>";
			request += "<Action>DELETESAVEDSEARCH</Action>";
			request += "<SearchKey>" + searchkey + "</SearchKey>";
			request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
			request += "</Request>";
		
			var httpObj = new objHTTP()
			if (httpObj.PostData(request, url))	{
				if (httpObj.status=="OK"){
					RefreshSavedSearches()
					ViewFTClear()
					window.top.Docova.Utils.messageBox({
						title: "{% trans %}Search Deleted{% endtrans %}",
						prompt: "{% trans %}Your search was deleted.{% endtrans %}",
						icontype: 4,
						msgboxtype: 0
					});
					return true;
				}
			}		
		}
	 });
}

function GetSavedSearch(obj){
	var SearchKey = $(obj).multiselect("getChecked").map(function(){ return this.value;}).get();	
	if(SearchKey == ""){
		$( "#btnDelete" ).button( "option", "disabled", true );
		ViewFTClear();
		return
	}
	$( "#btnDelete" ).button( "option", "disabled", false );
	var url = docInfo.ServerUrl + docInfo.PortalWebPath + "/UserDataServices?OpenAgent"
	var request="";
	var searchArr = new Array();
	var searchQuery;
	var queryfields = "";
	var searchLibUnidList = "";

	//--build the saved search request
	request += "<Request>";
	request += "<Action>GETSAVEDSEARCH</Action>";
	request += "<SearchKey>" + SearchKey + "</SearchKey>";
	request += "</Request>";

	var httpObj = new objHTTP()
	
	if (httpObj.PostData(request, url))	{
		searchArr = (httpObj.status).split(";")
		searchQuery = searchArr[0]
		queryfields = searchArr[1]
		$("#divSearchQuery").html(searchQuery)
		$("#divQueryFields").html(queryfields)
		Docova.Utils.setField({ field: "inpQuery", value: "" });
		ViewFTSearch(searchQuery)
	}
}

function RefreshSavedSearches(){ 
	var LKey = docInfo.LibraryKey + docInfo.UserNameAB
	var PortalNsfName = docInfo.PortalNsfName
	Docova.Utils.dbColumn({ 
		nsfname: PortalNsfName, 
		viewname: "luSavedSearches", 
		key: LKey, 
		column: "2", 
		htmllistbox: "MySavedSearches"
	})
	return;
}

//--------------------------------------------- get additional options for data retrieval ----------------------------------------------------
function ViewGetQueryOptions()
{
objView.disableFreeze = $("#inpViewScope").prop("checked");
var options= ($("#inpViewScope").prop("checked"))? "<viewscope>ST</viewscope>" :"";
objView.viewScope = (options)? "ST": "";
var versionOption = Docova.Utils.getField("selVersionScope")
objView.versionOption =  (versionOption)? versionOption :"";
options += (versionOption)? "<versions>" + versionOption  + "</versions>" :"";
return options;
}

//--------------------------------------------- get additional options for data retrieval ----------------------------------------------------
function ViewApplyQueryOptions()
{
	objView.queryOptions = ViewGetQueryOptions();
	if(objView.isFTSearch)
		{
			ViewFTSearch();
		}
	else
		{
			if(docInfo.EnableFolderFiltering == "1"){
				$("#divViewContent").css("display", "none")
				objView.Refresh(true,true,false);
				ApplyFolderFilter(false);
				$(".listheader").resizable({ handles: "e" })
				$("#divViewContent").css("display", "")
			}else{
				objView.Refresh(true,true,false);
				$(".listheader").resizable({ handles: "e" })
			}
		}
}

//--------------------------------------------- add doc to favorites ----------------------------------------------------
function ViewAddToFavorites()
{
	var entryObj = objView.GetCurrentEntry();
	if(!entryObj) {return; }
		
	if ( objView.isThumbnails){
		var docId = objView.currentEntry
	}else{
		var docId = entryObj.GetElementValue("docid");
	}

	//--- processing agent url
	var url = docInfo.ServerUrl + docInfo.PortalWebPath + "/UserDataServices?OpenAgent"
	var request="";
	var docDescription = ( objView.isThumbnails)? "" : entryObj.columnValues.join(", ");
	//--build the update request
	request += "<Request>";
	request += "<Action>ADDFAVORITES</Action>";
	request += "<LibraryKey>" + docInfo.LibraryKey  + "</LibraryKey>";
	request += "<Unid>" + docId +  "</Unid>";
	request += "</Request>";
	
	jQuery.ajax({
		type: "POST",
		url: url,
		data: request,
		cache: false,
		async: false,
		dataType: "xml",
		success: function(xml){
			var xmlobj = $(xml);
			var statustext = xmlobj.find("Result").first().text();
			if(statustext == "OK"){
				var objLeftFrame = window.parent.frames["fraLeftFrame"];	
				if (objLeftFrame){
					objLeftFrame.RefreshFavorites();
				}
				Docova.Utils.messageBox({
					title: "{% trans %}Add to favorites.{% endtrans %}",
					prompt: "{% trans %}Document was added to your Favorites{% endtrans %}",
					width: 400,
					icontype: 4,
					msgboxtype: 0
				});				
			}
		},
		error: function(){
			alert("{% trans %}Error:  The document was not added to your favorites.  Please try again or contact the Administrator.{% endtrans %}")
		}
	})
}

//----------- utility functions ---------------

// clears the view event variables in case mouse cursor had wandered to far
function ViewClearEventState()
{
var dragSourceColumn=null;
var dragTargetColumn=null;
selectDragMode=null;
return true;
}

function CancelEvent()
{
	if(!window.event) {return;}
	window.event.cancelBubble = true;
	window.event.returnValue=false;
	return false;
}

// ------- context menu handler ---------
function ViewShowContextPopup(popupSource, sourceObject) //eventSource instead of sourcObject??
{

	if(popupSource=="viewheader" ){
	
		var colNo = parseInt($(sourceObject).attr("colIdx"))	
		curColumnObj = objView.columns[colNo];
		
		var ascIsCheckedIcon = curColumnObj.customSortOrder=="ascending" ? "ui-icon-check" : "";
		var descIsCheckedIcon = curColumnObj.customSortOrder=="descending" ? "ui-icon-check" : "";
		var defaultIsCheckedIcon = curColumnObj.customSortOrder=="none" ? "ui-icon-check" : "";
		var isColCategorizedIcon = curColumnObj.isCategorized ? "ui-icon-check" : "";
		var allowColCustomization = curColumnObj.parentObj.allowCustomization
		colAscSortAction = 'col-' + curColumnObj.colIdx + '-sort-ascending'
		colDescSortAction = 'col-' + curColumnObj.colIdx + '-sort-descending'
		colDefaultSortAction = 'col-' + curColumnObj.colIdx + '-sort-none'
		colCategorizeAction="col-" + curColumnObj.colIdx + "-cat"
		colFreezeAction="col-" + curColumnObj.colIdx + "-freeze"
		colDeleteAction="col-" + curColumnObj.colIdx + "-delete"
		colInsertAction="col-" + curColumnObj.colIdx + "-insert"
		colAppendAction="col-" + curColumnObj.colIdx + "-append"
		colPropertiesAction="col-" + curColumnObj.colIdx + "-properties"

		Docova.Utils.menu({
			delegate: sourceObject,
			width: 170,
			menus: [
					{ title: "{% trans %}Sort ascending{% endtrans %}", itemicon: ascIsCheckedIcon, action: "curColumnObj.ProcessContextAction(colAscSortAction)", disabled: !curColumnObj.hasCustomSort },
					{ title: "{% trans %}Sort descending{% endtrans %}", itemicon: descIsCheckedIcon, action: "curColumnObj.ProcessContextAction(colDescSortAction)", disabled: !curColumnObj.hasCustomSort  },
					{ title: "{% trans %}Default sort{% endtrans %}", itemicon: defaultIsCheckedIcon, action: "curColumnObj.ProcessContextAction(colDefaultSortAction)", disabled : !curColumnObj.hasCustomSort },
					{ separator: true },
					{ title: "{% trans %}Categorize{% endtrans %}", itemicon: isColCategorizedIcon, action: "curColumnObj.ProcessContextAction(colCategorizeAction)", disabled: !allowColCustomization },
					{ separator: true },
					{ title: "{% trans %}Delete Column{% endtrans %}", itemicon: "ui-icon-minus", action: "curColumnObj.ProcessContextAction(colDeleteAction)", disabled: !allowColCustomization },				
					{ title: "{% trans %}Insert Column{% endtrans %}", itemicon: "ui-icon-arrowthick-1-n", action: "InsertAppendEditColumn('insert')", disabled: !allowColCustomization },
					{ title: "{% trans %}Append Column{% endtrans %}", itemicon: "ui-icon-plus", action: "InsertAppendEditColumn('append')", disabled: !allowColCustomization },
					{ separator: true },
					{ title: "{% trans %}Properties{% endtrans %}", itemicon: "ui-icon-gear", action: "InsertAppendEditColumn('edit')", disabled: !allowColCustomization }
			]
		})
	}else if ( popupSource=="selectcell"){
		Docova.Utils.menu({
			delegate: sourceObject,
			width: 170,
			menus: [
					{ title: "{% trans %}Select All{% endtrans %}", itemicon: ascIsCheckedIcon, action: "objView.SelectAllEntries()", disabled: false}
			]
		})
	}
}

//-----View Insert a new column-----
function InsertAppendEditColumn(actiontype){
	//actiontype is insert or append, the difference is just to +1 to the colIdx if appending
	if(actiontype == "append"){
		var srcColumnIdx = curColumnObj.colIdx + 1
	}else{
		var srcColumnIdx = curColumnObj.colIdx
	}
	var dlgUrl = curColumnObj.parentObj.columnPropertiesDialogUrl
	if(actiontype != "edit"){ //if append or inserting a column, create a new column obj
		var newColumnObj = new ObjViewColumn();
		curColumnObj = newColumnObj
	}
	
	var divDlgName = "divColPropertiesDlg"
	var dlgColPropertiesDlg = window.top.Docova.Utils.createDialog({
		id : divDlgName,
		url : dlgUrl,
		title: "{% trans %}Column Properties{% endtrans %}",
		height: 435,
		width: 620,
		autoopen: true,
		useiframe: true,
		sourcewindow: window,
		buttons: {
        			"OK": function() {
						if(window.top.$("#" + divDlgName + "IFrame")[0].contentWindow.completeWizard()){
							if(actiontype != "edit"){ //if append or insert then call InsertColumn method of viewobject
								objView.InsertColumn(srcColumnIdx, curColumnObj);
							}
							objView.Refresh(true, true, true);
							dlgColPropertiesDlg.closeDialog();
						}
        			},
        			Cancel: function() {
						dlgColPropertiesDlg.closeDialog();
        			}
      		}
     })	
}

//==========================================================================================
// View submenu
//==========================================================================================
function CreateViewSubmenu(actionButton) //creates right-click context menu
{
	if(!actionButton) {return}

	var isSearchOn = ($("#divToolbarSearch").css("display") == "")
	var isPerspectiveOn = ($("#divToolbarPerspective").css("display")=="");

	Docova.Utils.menu({
		delegate: $(actionButton),
		width: 170,
		menus: [
				{ title: "{% trans %}Search Bar{% endtrans %}", itemicon: "ui-icon-search", action: "viewbtnSearchBar()" },
				{ title: "{% trans %}View Options Bar{% endtrans %}", itemicon: "ui-icon-check", action: "ViewToggleToolbar('Perspective')" },
				{ title: "{% trans %}Folder Information{% endtrans %}", itemicon: "ui-icon-info", action: "viewbtnFolderInfo()", disabled : docInfo.isRecycleBin },
				{ separator: true },
				{ title: "{% trans %}Refresh{% endtrans %}", itemicon: "ui-icon-refresh", action: "viewbtnRefresh()" },
				{ title: "{% trans %}Expand All{% endtrans %}", itemicon: "ui-icon-plus", action: "objView.ExpandAll()", disabled: !objView.isCategorized },
				{ title: "{% trans %}Collapse All{% endtrans %}", itemicon: "ui-icon-minus", action: "objView.CollapseAll()", disabled: !objView.isCategorized }
		]
	})
	return false;
}

//----- View button menu functions -----
function viewbtnSearchBar(){
		ViewToggleToolbar("Search");
		if(objView.isFTSearch) {ViewFTClear();}
}

function viewbtnRefresh(){
	if(docInfo.EnableFolderFiltering == "1"){
		$("#divViewContent").css("display", "none")
		objView.Refresh(true,false,true,false,false, true)
		$("#divViewContent").css("display", "")
	}else{
		objView.Refresh(true,false,true);
	}
}

function viewbtnFolderInfo(){
	var dlgUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/dlgFolderInfo?OpenForm&ParentUNID=" + docInfo.DocID;
	var folderInfoDialog = window.top.Docova.Utils.createDialog({
		id: "divFolderInfo", 
		url: dlgUrl,
		title: "{% trans %}Folder Information{% endtrans %}",
		height: 400,
		width: 700, 
		useiframe: true,
		sourcedocument: document,
		buttons: {
        		"Close": function() {
				folderInfoDialog.closeDialog();
        		}
      	}
	})	
}

//==========================================================================================
// Tools submenu
//==========================================================================================
function CreateToolsSubmenu(actionButton) //creates right-click contect menu
{
	if(!actionButton) {return}
	
	var objEntry = objView.GetCurrentEntry();	
	//----- vars for enabling/disabling menu options
	var showImportFiles = !docInfo.isRecycleBin && docInfo.CanCreateDocuments;
	var showExportFiles = !docInfo.isRecycleBin;
	var showImportMessages = !docInfo.isRecycleBin && docInfo.CanCreateDocuments;
	var flags = (objEntry ? objEntry.GetElementValue("flags") : false);
	var isBookmark = (objEntry ? (!objEntry.GetElementAttribute("bmk/img", "src") == "") : false);
	var showBookmark = (!docInfo.isRecycleBin) && (!isBookmark) && (objEntry && objEntry.isRecord) && (!docInfo.DisableBookmarks);
	var showForwardDocument = !docInfo.isRecycleBin && (objEntry && objEntry.isRecord) && (flags & 128);
	var showChangeDocType = !docInfo.isRecycleBin && docInfo.DocAccessLevel>="6" && !isBookmark && objView.currentEntry;
	var canSavePerspective = false;
	//Determine if user can see Delete Perspective menu option
	var canDeletePerspective = false;
	var el = document.getElementById("xmlViewPerspective");
	var perspectiveXml = el.textContent || el.innerText || el.nodeValue || el.innerHTML;	
	var parser = new DOMParser;
	var perspectiveDoc = parser.parseFromString(perspectiveXml, "text/xml");
	if(perspectiveDoc)
		{
			var typeNode  = perspectiveDoc.selectSingleNode("viewperspective/type");
			var typeNodeText = typeNode.textContent || typeNode.text;
			var authorNode = perspectiveDoc.selectSingleNode("viewperspective/createdby");
			var authorNodeText = authorNode.textContent || authorNode.text;
			if(typeNodeText == "system"){ //Can't delete if it is a system perspective
				canDeletePerspective = false;
			}else{
				if(docInfo.DocAccessLevel >= "6" || authorNodeText == docInfo.UserNameAB){ // Can delete if access level is >= 6 or user is the creator of the perspective
					canDeletePerspective = true;
				}
			}
		}
	canSavePerspective = (docInfo.DocAccessLevel>="6" && !objView.isSummary)? true : false;	
	var showEditSavePerspective = !docInfo.isRecycleBin && canSavePerspective
	var showCanDeletePerspective = !docInfo.isRecycleBin && canDeletePerspective
	var showFolderProperties = !docInfo.isRecycleBin
	var showOpenFolderArchive = !docInfo.isRecycleBin
	var showArchiveSelected =  !docInfo.isRecycleBin && (docInfo.DocAccessLevel>="6")
	
//-----Build menu -----
	Docova.Utils.menu({
		delegate: $(actionButton),
		width: 210,
		menus: [
				{ title: "{% trans %}Export to Excel{% endtrans %}", itemicon: "ui-icon-arrowthickstop-1-s", action: "ViewExportToExcel()" },
				{ title: "{% trans %}Import Files{% endtrans %}", itemicon: "ui-icon-arrowthickstop-1-n", action: "ImportFiles()", disabled : !showImportFiles },
				{ title: "{% trans %}Export Files{% endtrans %}", itemicon: "ui-icon-circle-arrow-s", action: "ExportFiles()", disabled : !showExportFiles },
				{ title: "{% trans %}Import Messages{% endtrans %}", itemicon: "ui-icon-circle-arrow-n", action: "ImportMessages()", disabled : !showImportMessages },
				{ separator: true },
				{ title: "{% trans %}Send Email Notification{% endtrans %}", itemicon: "ui-icon-extlink", action: "SendDocumentMessage()" },
				{ title: "{% trans %}Forward Document{% endtrans %}", itemicon: "ui-icon-arrowthick-1-ne", action: "ForwardDocument()", disabled: !showForwardDocument },
				{ title: "{% trans %}Compare Documents{% endtrans %}", itemicon: "ui-icon-transferthick-e-w", action: "CompareSelectedWordDocuments()" },
				{ separator: true },
				{ title: "{% trans %}Copy Link{% endtrans %}", itemicon: "ui-icon-link", action: "CopyLink()" },
				{ title: "{% trans %}Create Bookmark{% endtrans %}", itemicon: "ui-icon-bookmark", action: "CreateBookmark()", disabled: !showBookmark },
				{ separator: true },
				{ title: "{% trans %}Edit/Save Perspective{% endtrans %}", itemicon: "ui-icon-circle-check", action: "ViewSavePerspective()", disabled: !showEditSavePerspective },
				{ title: "{% trans %}Delete Perspective{% endtrans %}", itemicon: "ui-icon-circle-close", action: "ViewDeletePerspective()", disabled: !showCanDeletePerspective },
				{ separator: true },
				{ title: "{% trans %}Folder Properties{% endtrans %}", itemicon: "ui-icon-gear", action: "ShowFolderProperties()", disabled: !showFolderProperties},
				{ title: "{% trans %}Open Folder Archive{% endtrans %}", itemicon: "ui-icon-folder-open", action: "ShowFolderArchive()", disabled: !showOpenFolderArchive },
				{ title: "{% trans %}Archive Selected Documents{% endtrans %}", itemicon: "ui-icon-tag", action: "ArchiveSelected()", disabled: !showArchiveSelected },
				{ title: "{% trans %}Change Document Type{% endtrans %}", itemicon: "ui-icon-newwin", action: "ChangeDocType()", disabled: !showChangeDocType }
		]
	})

}

function ViewExportToExcel(){
		var docids = objView.selectedEntries;
		var selectedonly = (docids.length > 0);
		objView.ExportToExcel(selectedonly);
}

//============ import files dialog ===============
function ImportFiles()
{
	
	if(!window.top.Docova.IsPluginAlive){
			window.top.Docova.Utils.messageBox({
				title: "{% trans %}DOCOVA Plugin Not Running{% endtrans %}",
				prompt: "{% trans %}The DOCOVA Plugin is required for the bulk importing of files.{% endtrans %}",
				width: 400,
				icontype: 4,
				msgboxtype: 0
			});
			return false;	
	}		
	
	var dlgUrl =docInfo.ServerUrl + "/" + docInfo.NsfName + "/" + "dlgFileImport?OpenForm&ParentUNID=" + docInfo.DocID + "&folderid=" + docInfo.FolderID;
	
	window.top.Docova.Utils.createDialog({
		 url:dlgUrl,
		 id: "dialogFileImport" ,
		 useiframe: true,
		 autoopen: true,
		 title: "{% trans %}Import Files{% endtrans %}",
		 width: "750",
		 height:"440",
		 buttons: [{
			 text: "{% trans %}Finish{% endtrans %}",
			 icons: {primary: "ui-icon-check"},
			 click: function() {
				 var iwin = $(this).find("iframe")[0].contentWindow;
				 
				 
				iwin.completeWizard(function()
				{
					 window.top.Docova.Utils.closeDialog({id: "dialogFileImport", useiframe:true});
					 objView.Refresh(true, false, true);
				})
				 
				 
				
			 }
		 	},
		 	{
			 text:"{% trans %}Cancel{% endtrans %}",
			 icons: { primary: "ui-icon-cancel"},
			 click: function(){
				 window.top.Docova.Utils.closeDialog({id: "dialogFileImport", useiframe:true});
			 }
		 	}]
		});
	
	
	
}

//============ export folder dialog ===============
function ExportFiles()
{

	if(!window.top.Docova.IsPluginAlive){
		window.top.Docova.Utils.messageBox({
			title: "{% trans %}DOCOVA Plugin Not Running{% endtrans %}",
			prompt: "{% trans %}The DOCOVA Plugin is required for the bulk exporting of files.{% endtrans %}",
			width: 400,
			icontype: 4,
			msgboxtype: 0
		});
		return false;	
	}		

	var dlgInputs = new Array();
	dlgInputs.push(window);
	dlgInputs.push(objView);
	
	window.top.Docova.GlobalStorage["dialogFileExport"] = { "dlginp" : dlgInputs };
	
	var dlgUrl =docInfo.ServerUrl + "/" + docInfo.NsfName + "/" + "dlgFileExport?OpenForm&ParentUNID=" + docInfo.DocID + "&folderid=" + docInfo.FolderID + "&currentonly=" + ((docInfo.DocAccessLevel > 2) ? "0" : "1")
	var expdialog = window.top.Docova.Utils.createDialog({
		 url:dlgUrl,
		 id: "dialogFileExport" ,
		 useiframe: true,
		 autoopen: true,
		 title: "{% trans %}Export Files{% endtrans %}",
		 width: "450",
		 height:"415",
		 buttons: [{
			 text: "{% trans %}Export{% endtrans %}",
			 icons: {primary: "ui-icon-check"},
			 click: function() {
				 var iwin = $(this).find("iframe")[0].contentWindow;
				 if ( iwin.exportFiles() ){
					 window.top.Docova.Utils.closeDialog({id: "dialogFileImport", useiframe:true});
					 return true;
				 }
			 }
		 },
		 {
			 text:"{% trans %}Cancel{% endtrans %}",
			 icons: { primary: "ui-icon-cancel"},
			 click: function(){
				 window.top.Docova.Utils.closeDialog({id: "dialogFileExport", useiframe:true});
			 }
		}]
	});
}

//==========================================================================================
// Edit submenu
//==========================================================================================

function CreateEditSubmenu(actionButton) //creates drop down menu
{
	if(!actionButton) {return}

	var isthumbnailview =  objView.isThumbnails;
	var showClipActions =!isthumbnailview &&  !docInfo.isRecycleBin && !docInfo.CutCopyPaste
	var showCut = showClipActions && docInfo.CanDeleteDocuments && docInfo.CanCreateDocuments;
	var showPaste = showClipActions && Docova.Utils.getCookie({ keyname: "clipdata" }) != "" && docInfo.CanCreateDocuments
	var canDelete = !isthumbnailview && !docInfo.isRecycleBin && (objView.currentEntry !="" || objView.selectedEntries.length > 0)  && docInfo.CanSoftDeleteDocuments && docInfo.CanCreateDocuments && docInfo.CanDeleteDocuments;

	Docova.Utils.menu({
		delegate: $(actionButton),
		width: 170,
		menus: [
				{ title: "{% trans %}Cut{% endtrans %}", itemicon: "ui-icon-scissors", action: "ViewCutSelected()", disabled : !showCut },
				{ title: "{% trans %}Copy{% endtrans %}", itemicon: "ui-icon-copy", action: "ViewCopySelected()", disabled : !showClipActions },
				{ title: "{% trans %}Paste{% endtrans %}", itemicon: "ui-icon-clipboard", action: "ViewPasteSelected()", disabled : !showPaste },
				{ separator: true },
				{ title: "{% trans %}Select All{% endtrans %}", itemicon: "ui-icon-check", action: "objView.SelectAllEntries()" },
				{ title: "{% trans %}Deselect All{% endtrans %}", itemicon: "ui-icon-minus", action: "objView.DeselectAllEntries()" },
				{ separator: true },
				{ title: "{% trans %}Delete Selected{% endtrans %}", itemicon: "ui-icon-close", action: "ViewDeleteSelected()", disabled: !canDelete }
		]
	})
}

function ViewDeleteSelected(){
	if(docInfo.EnableFolderFiltering == "1"){
		objView.DeleteSelectedEntries();
		$("#divViewContent").css("display", "none")		
		ApplyFolderFilter(true);
		$("#divViewContent").css("display", "")
	}else{
		objView.DeleteSelectedEntries();
	}
}

function ViewSortThumbnails(id){
	
	objView.ToggleThumbnailSort(id);
}

//thumbnails submenu
function CreateThumbnailsSubmenu(event, clickObj){

	if(!clickObj) {return}
	
	var winwidth = $(window).width();
	var winheight = $(window).height();
	var posX = event.pageX;
	var posY = event.pageY; 
	
	var menuwidth = 170;
	var menuheight = 200;

	if((posY + menuheight) > winheight){
		shiftY = winheight - (posY+menuheight)
	}else{
		shiftY = 2; //default
	}

	if((posX + menuwidth) > winwidth){
		shiftX = winwidth - (posX+menuwidth)
	}else{
		shiftX = 1; //default
	}

	
	Docova.Utils.menu({
		delegate: $(clickObj),
		width: 190,
		position: "XandY",
		shiftX: shiftX,
		shiftY: shiftY,		
		menus: [
				{ title: "{% trans %}Open File{% endtrans %}", itemicon: "ui-icon-file", action: "ProcessEntrySubmenuAction('openfilethumb')" },
				{ title: "{% trans %}Open Document{% endtrans %}", itemicon: "ui-icon-copy", action: "ProcessEntrySubmenuAction('open')"},
				{ title: "{% trans %}Open Document in New Window{% endtrans %}", itemicon: "ui-icon-clipboard", action: "ProcessEntrySubmenuAction('openwindow')"},
				{ separator: true },
				{ title: "{% trans %}Add to favorites{% endtrans %}", itemicon: "ui-icon-check", action: "ProcessEntrySubmenuAction('favorites')" },
				{ title: "{% trans %}Copy Link{% endtrans %}", itemicon: "ui-icon-minus", action: "ProcessEntrySubmenuAction('copylink')" },
		]
	})
	

}


//==========================================================================================
// Entry submenu
//==========================================================================================

function CreateEntrySubmenu(clickObj) //creates right-click context menu
{
	if(!clickObj) {return}

	var objEntry = objView.GetCurrentEntry();	
	var showClipActions = !docInfo.isRecycleBin && !docInfo.CutCopyPaste
	var isBookmark = (objEntry ? (!objEntry.GetElementAttribute("bmk/img", "src") == "") : false);
	var showBookmark = !docInfo.isRecycleBin && !isBookmark && (objEntry && objEntry.isRecord) && !docInfo.DisableBookmarks; 
	var showChangeDocType = !docInfo.isRecycleBin && docInfo.DocAccessLevel>="6" && !isBookmark && objView.currentEntry;	
	var showChangeDocStatus = !docInfo.isRecycleBin && docInfo.DocAccessLevel>="6" && !isBookmark && objView.currentEntry;	
	var showCut = showClipActions && docInfo.CanDeleteDocuments
	var showPaste = showClipActions && (Docova.Utils.getCookie({ keyname: "clipdata" }) != "")
	//var showDelete = !docInfo.isRecycleBin && docInfo.CanSoftDeleteDocuments && docInfo.CanDeleteDocuments

	var winwidth = $(window).width();
	var winheight = $(window).height();
	var posX = clickObj.pageX;
	var posY = clickObj.pageY; 
	var menuwidth = 150;
	var menuheight = 150;

	if((posY + menuheight) > winheight){
		shiftY = winheight - (posY+menuheight)
	}else{
		shiftY = 2; //default
	}

	if((posX + menuwidth) > winwidth){
		shiftX = winwidth - (posX+menuwidth)
	}else{
		shiftX = 5; //default
	}

/*	Docova.Utils.menu({
		delegate: clickObj,
		width: 240,
		position: "XandY",
		shiftX: shiftX,
		shiftY: shiftY,		
		menus: [
				{ title: "Open", itemicon: "ui-icon-document", action: "ProcessEntrySubmenuAction('open')", disabled : docInfo.isRecycleBin },
				{ title: "Restore", itemicon: "ui-icon-newwin", action: "ProcessEntrySubmenuAction('restore')", disabled : !docInfo.isRecycleBin },
				{ separator: true },
				{ title: "Edit", itemicon: "ui-icon-pencil", action: "ProcessEntrySubmenuAction('edit')", disabled : docInfo.isRecycleBin },
				{ separator: true },
				{ title: "Print Attachments", itemicon: "ui-icon-print", action: "ProcessEntrySubmenuAction('printattachments')", disabled : docInfo.isRecycleBin },
				{ separator: true },
				{ title: "Add to Favorites", itemicon: "ui-icon-heart", action: "ProcessEntrySubmenuAction('favorites')", disabled : docInfo.isRecycleBin },
				{ title: "Copy Link", itemicon: "ui-icon-link", action: "ProcessEntrySubmenuAction('copylink')", disabled : docInfo.isRecycleBin },
				{ title: "Create Bookmark", itemicon: "ui-icon-bookmark", action: "ProcessEntrySubmenuAction('createbookmark')", disabled : !showBookmark },
				{ title: "Change Document Type", itemicon: "ui-icon-newwin", action: "ProcessEntrySubmenuAction('changedoctype')", disabled : !showChangeDocType },
				{ title: "Release Document(s)", itemicon: "ui-icon-extlink", action: "ProcessEntrySubmenuAction('changedocstatus')", disabled : !showChangeDocStatus },								
				{ separator: true },
				{ title: "Cut", itemicon: "ui-icon-scissors", action: "ProcessEntrySubmenuAction('cut')", disabled : !showCut },
				{ title: "Copy", itemicon: "ui-icon-copy", action: "ProcessEntrySubmenuAction('copy')", disabled : !showClipActions },
				{ title: "Paste", itemicon: "ui-icon-clipboard", action: "ProcessEntrySubmenuAction('paste')", disabled : !showPaste },
				{ separator: true },
				{ title: "Delete", itemicon: "ui-icon-closethick", action: "ProcessEntrySubmenuAction('delete')", disabled : !showDelete },
				{ separator: true },
				{ title: "Properties", itemicon: "ui-icon-gear", action: "ProcessEntrySubmenuAction('properties')" }
		]
	})*/
	
	//	var menuwidth = 240;
	//var menuheight = 360;
	
	Docova.Utils.menu({
		delegate: clickObj,
		width: menuwidth,
		height: menuheight,
		position: "XandY",
		shiftX: shiftX,
		shiftY: shiftY,		
		menus: [
				{ title: "{% trans %}Open{% endtrans %}", itemicon: "ui-icon-document", action: "ProcessEntrySubmenuAction('open')" },
				{ separator: true },
				{ title: "{% trans %}Copy{% endtrans %}", itemicon: "ui-icon-clipboard", action: "Docova.getUIView().copy({ type: 'current' })" },
				{ title: "{% trans %}Copy selected{% endtrans %}", itemicon: "ui-icon-check", action: "Docova.getUIView().copy({ type: 'selected' })" },	
				{ title: "{% trans %}Paste{% endtrans %}", itemicon: "ui-icon-copy", action: "Docova.getUIView().paste()" },
				{ separator: true },
				{ title: "{% trans %}Delete{% endtrans %}", itemicon: "ui-icon-closethick", action: "ProcessEntrySubmenuAction('delete')" },
				{ title: "{% trans %}Delete Selected{% endtrans %}", itemicon: "ui-icon-circle-close", action: "ProcessEntrySubmenuAction('deleteselected')" }
		]
	})	
}


//==========================================================================================
// Entry submenu handler
//==========================================================================================

function ProcessEntrySubmenuAction(action) //handle action from contect menu
{
	if(action == "" ) {return false};

	var viewNames = ["AppForms","AppSubForms","AppLayouts","AppViews","AppPages","AppOutlines","AppFiles","luWorkflow","AppJS","AppCSS"];
	var entryObj = objView.GetCurrentEntry();
	if(!entryObj) {return; }
	
	if ( objView.isThumbnails ){
		var recType = null;
	}else{
		var recType = entryObj.GetElementValue("rectype");
	}

	if(action=="open"){
		ViewLoadDocument();
	}	
	else if ( action=="openfile"){
		var fname = entryObj.filename;
		OpenFileWindow(fname);
	}
	else if ( action=="openfilethumb"){
		var fname = $(entryObj.parentRow).attr("filename");
		OpenFileWindow(fname);
	}
	else if(action=="edit"){
		ViewLoadDocument("","","", true);
	}
	else if(action=="printattachments"){
		printAttachments();
	}		
	else if(action=="favorites"){
		ViewAddToFavorites();
	}
	else if(action=="copylink"){
		CopyLink(objView.currentEntry);
	}
	else if(action=="cut"){
		ViewCutSelected();
	}
	else if(action=="copy"){
		ViewCopySelected();
	}	
	else if(action=="paste"){
		ViewPasteSelected();
	}
	else if(action=="delete"){
		var found = $.inArray(docInfo.ViewName, viewNames)
		if (found !== false) {
			if (!confirm("{% trans with { '%viewname%' : '" + viewNames[found] + "' } %}Are you sure you want to delete the current %viewname% design element?{% endtrans %}")) {return false;}
		}
		objView.RemoveSelectedEntries(true);
/**
* THE FOLLOWING CONDITIONS ARE MOVED TO BACK-END PHP SIDE
* THIS MEANS ALL FUNCTIONALITY TO DELETE EITHER A DESIGN ELEMENT OR
* AN ACTUAL DOCUMENT RECORD ARE MOVED TO viewServices IN BACK-END IN SE
* 
		//if this is a system view then delete design doc and related system design elements
		if(docInfo.ViewName=="AppForms"){  //delete form
			DeleteDesignElement("form", objView.currentEntry)
		}else if(docInfo.ViewName=="AppSubForms"){	//delete subform
			DeleteDesignElement("subform", objView.currentEntry)
		}else if(docInfo.ViewName=="AppLayouts"){ //delete layout
			objView.RemoveSelectedEntries(true);
		}else if(docInfo.ViewName=="AppViews"){ //delete view
			DeleteDesignElement("view", objView.currentEntry)
		}else if(docInfo.ViewName=="AppPages"){ //delete page
			DeleteDesignElement("page", objView.currentEntry)
		}else if(docInfo.ViewName=="AppOutlines"){ //delete outline
			objView.RemoveSelectedEntries(true);
		}else if(docInfo.ViewName=="AppFiles"){ //delete image
			DeleteDesignElement("image", objView.currentEntry)	
		}else if(docInfo.ViewName=="luWorkflow"){ //delete workflow
			DeleteDesignElement("workflow", objView.currentEntry)
		}else if(docInfo.ViewName=="AppJS"){ //delete JS Library
			DeleteDesignElement("jslib", objView.currentEntry)
		}else if(docInfo.ViewName=="AppCSS"){ //delete CSS
			DeleteDesignElement("css", objView.currentEntry)	
		}else{
			objView.RemoveSelectedEntries(true);
		}
*/
	}
	else if(action == "deleteselected"){
		var found = $.inArray(docInfo.ViewName, viewNames)
		if (found !== false) {
			if (!confirm('{% trans with {'%viewname%' : '\' + viewNames[found] + \''} %}Are you sure you want to delete the currently selected %viewname% design elements?{% endtrans %}')) {return false;}
		}
		objView.RemoveSelectedEntries();
/**
* SAME AS COMMEMTED SECTION ABOVE
* 
		if(docInfo.ViewName=="AppForms"){  //delete form
			DeleteSelectedDesignElements("form", objView.selectedEntries)
		}else if(docInfo.ViewName=="AppSubForms"){	//delete subform
			DeleteSelectedDesignElements("subform", objView.selectedEntries)
		}else if(docInfo.ViewName=="AppLayouts"){ //delete layout
			objView.RemoveSelectedEntries();
		}else if(docInfo.ViewName=="AppViews"){ //delete view
			DeleteSelectedDesignElements("view", objView.selectedEntries)
		}else if(docInfo.ViewName=="AppPages"){ //delete page
			DeleteSelectedDesignElements("page", objView.selectedEntries)
		}else if(docInfo.ViewName=="AppOutlines"){ //delete outline
			objView.RemoveSelectedEntries();
		}else if(docInfo.ViewName=="AppFiles"){ //delete image
			DeleteSelectedDesignElements("image", objView.selectedEntries)	
		}else if(docInfo.ViewName=="luWorkflow"){ //delete workflow
			DeleteSelectedDesignElements("workflow", objView.selectedEntries)
		}else if(docInfo.ViewName=="AppJS"){ //delete JS Library
			DeleteDesignElement("jslib", objView.selectedEntries)
		}else if(docInfo.ViewName=="AppCSS"){ //delete CSS
			DeleteDesignElement("css", objView.selectedEntries)	
		}else{
			objView.RemoveSelectedEntries();
		}
*/
	}	
	else if(action=="changedoctype"){
		ChangeDocType(objView.currentEntry);
	}
	else if(action=="changedocstatus"){
		ChangeDocStatus(objView.currentEntry);
	}	
	else if(action =="createbookmark")
	{
		CreateBookmark();
	}	
	else if(action=="restore")	{
		objView.UndeleteSelectedEntries(true);
		try	{
				parent.frames['fraLeftFrame'].ReloadLibraryByID( docInfo.LibraryKey, "", false);
			}
catch (e){}
	}
	else if(action=="properties"){
		if ( objView.isThumbnails ){
			ShowDocumentProperties();
			return;
		}
		if(recType == "fld")
			{
				ShowFolderProperties();
			}
		else if(recType == "doc")
			{
				ShowDocumentProperties();
			}
	}

	return;
}

//Release selected documents
function ChangeDocStatus(currentEntry)
{
	if ( currentEntry == undefined ) {
		currentEntry = objView.currentEntry
		if(objView.selectedEntries.length == 0 && ( currentEntry == undefined  || currentEntry == "" )){
			window.top.Docova.Utils.messageBox({
				title: "{% trans %}Choose a Document{% endtrans %}",
				prompt: "{% trans %}Please select at least one document to release.{% endtrans %}",
				icontype: 1,
				width: 400,
				msgboxtype: 0
			});
			return false;
		}
	}
	
	if (confirm("{% trans with {'%elength%' : '"+(objView.selectedEntries.length > 0 ? objView.selectedEntries.length + " " : "") +"'} %}Are you sure that you want to Release the %elength% selected document(s)?{% endtrans %}")==false)
			return;
	selStatus="Released"
	var request="";

	//--collect the xml for all nodes to be processed
	request += "<Request>";
	request += "<Action>CHANGEDOCSTATUS</Action>";
	request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "<Status>" + selStatus+ "</Status>";
		
	if(objView.selectedEntries.length> 0){
			for(var k=0; k<objView.selectedEntries.length; k++){
				request += (objView.selectedEntries[k])? "<Unid>" + objView.selectedEntries[k] +  "</Unid>" :"";
			}
	}else
	{
		request += "<Unid>" + currentEntry+  "</Unid>" ;
	}
	request += "</Request>";
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/DocumentServices?OpenAgent"

	var httpObj = new objHTTP();
	ShowProgressMessage("{% trans %}Processing request. Please wait{% endtrans %}...");
	var retVal=false;	
	if(httpObj.PostData(request, url))
	{
	 if(httpObj.status=="OK") {
		retVal=true;
		}
	}
	HideProgressMessage();
	objView.Refresh(true, false, true);
	$(".listheader").resizable({ handles: "e" })
	return retVal;	
}//--end ChangeDocStatus



//------------------------------------ document properties dialog -------------------------------
function ShowDocumentProperties(docId)
{
	var targetId = (docId)? docId : objView.currentEntry;
	var dlgUrl = docInfo.ServerUrl + "/" + docInfo.NsfName+ "/dlgDocumentProperties?OpenForm&ParentUNID=" + targetId + "&mode=R";
	var propDialog = window.top.Docova.Utils.createDialog({
		id: "divDocProperties", 
		url: dlgUrl,
		title: "{% trans %}Document Properties{% endtrans %}",
		height: 400,
		width: 700, 
		useiframe: true,
		sourcedocument: document,
		buttons: {
        	"{% trans %}Close{% endtrans %}": function() {
				propDialog.closeDialog();
        	}
      	}
	})
}


//------------------------------------ folder properties dialog -------------------------------
function ShowFolderProperties(folderId, forceMode)
{
	var targetID = (folderId)? folderId : docInfo.DocKey;
	var isManager = (docInfo.DocAccessLevel>="6");
	var mode = (isManager && !docInfo.isRecycleBin)? "E" : "R";
	mode = (forceMode)? forceMode : mode;
	var DLITFolderView = parent.frames['fraLeftFrame'].DLITFolderView;
	if(DLITFolderView){
			DLITFolderView.ShowProperties({"folderid" : targetID, "mode" : mode});
	}
}//--end ShowFolderProperties


//------------------------------------ folder archive dialog -------------------------------
function ShowFolderArchive()
{
	var dlgUrl = docInfo.ServerUrl + "/" + docInfo.NsfName+ "/dlgFolderArchive?OpenForm&parentUNID=" + docInfo.DocID;
	dlgUrl += ($("#inpViewScope").prop("checked"))? "&viewscope=ST" : "&viewscope=";
	var folderArchiveDialog = window.top.Docova.Utils.createDialog({
		id: "divDlgFolderArchive", 
		url: dlgUrl,
		title: "{% trans %}Folder Archive{% endtrans %}",
		height: 550,
		width: 750, 
		useiframe: true,
		sourcedocument: document,
		buttons: {
			"{% trans %}Restore Selected Documents{% endtrans %}": function(){
				var dlgDoc = window.top.$("#divDlgFolderArchiveIFrame")[0].contentWindow.document;
				var dlgWindow = window.top.$("#divDlgFolderArchiveIFrame")[0].contentWindow;
				var ArchiveData = dlgWindow.ArchiveData
				var rs = ArchiveData.recordset;
				var idList = "";
				rs.MoveFirst();
				while(!rs.EOF()){
					if(rs.getFIELDSCount() > 0){
						if(rs.Fields("Selected").getValue()=="1"){
					 		idList += "<Unid>" + rs.Fields("docid").getValue() + "</Unid>";
						}
					}
					rs.MoveNext()
				}
				if(idList == ""){
					window.top.Docova.Utils.messageBox({
						title: "{% trans %}Nothing Selected{% endtrans %}",
						prompt: "{% trans %}You have not selected any documents to restore. Please select one or more documents to restore or Cancel{% endtrans %}",
						icontype: 1,
						msgboxtype: 0,
						width: 400
					});
					return;
				}else{
					folderArchiveDialog.closeDialog();
					RestoreArchivedDocuments(idList)
				}
			},
        	"{% trans %}Cancel{% endtrans %}": function() {
				folderArchiveDialog.closeDialog();
        	}
      	}
	})	
}

function RestoreArchivedDocuments(idList){
	var request="";

	//--collect the xml for all nodes to be processed
	request += "<Request>";
	request += "<Action>RESTOREARCHIVED</Action>";
	request += "<UserName>" + docInfo.UserNameAB + "</UserName>";
	request += idList;
	request += "</Request>";

	//--- processing agent url
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/LibraryServices?OpenAgent"
	Docova.Utils.showProgressMessage("{% trans %}Restoring selected document(s). One moment{% endtrans %}...");
	jQuery.ajax({
		type: "POST",
		url: url,
		data: request,
		cache: false,
		async: false,
		dataType: "xml",
		success: function(xml){
			var xmlobj = $(xml);
			var resulttext = xmlobj.find("Result").first().text();
			if(resulttext == "OK"){
				Docova.Utils.messageBox({
					title: "{% trans %}Documents Restored{% endtrans %}",
					prompt: "{% trans %}The selected documents were restored from the Archive.{% endtrans %}",
					icontype: 4,
					msgboxtype: 0,
					width: 400
				});
			Docova.Utils.hideProgressMessage();
			objView.Refresh(true,false,true);	
			$(".listheader").resizable({ handles: "e" })
			}
		},
		error: function(){
			Docova.Utils.hideProgressMessage();
			alert("{% trans %}Error: One or more documents were not restored.  Please try again or contact the Administrator.{% endtrans %}")
		}
	})	
}

//---------------------------- create new document ----------------------------
function ViewCreateDocument()
{
	var docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/Document?OpenForm&ParentUNID=" + docInfo.DocID;
	
	var docTypeArray=docInfo.DocumentType.split(", ");
	if(docTypeArray.length==1 && docTypeArray[0] !="")
	{
		docUrl += "&typekey=" + docInfo.DocumentType;
		ViewLoadDocument(docUrl, docInfo.DocumentTypeName, true);
	}
	else
	{		
		var dlgUrl = "/" + docInfo.NsfName + "/" + "dlgSelectDocType?OpenForm&ParentUNID=" + docInfo.DocID;
		var tmpDocova = (window.top.Docova ? window.top.Docova : Docova);
		var doctypedlg = tmpDocova.Utils.createDialog({
			id: "divDlgSelectDocType", 
			url: dlgUrl,
			title: "{% trans %}New Document{% endtrans %}",
			height: 425,
			width: 400, 
			useiframe: true,
			buttons: {
				"{% trans %}Create Document{% endtrans %}" : function() {
					var result = jQuery("#" + this.id + "IFrame", this).get(0).contentWindow.completeWizard();
					if(result && result.DocumentType){
						docUrl += "&typekey=" + result.DocumentType;
						doctypedlg.closeDialog();
						ViewLoadDocument(docUrl, result.DocumentTypeName, true);
					}
				},
        		"{% trans %}Cancel{% endtrans %}": function() {
					doctypedlg.closeDialog();
        		}
      		}
		});		
	}
}//--end ViewCreateDocument

//================= sets header title ====================
function ViewSetTitleOptions(title)
{
	$("#divHeadingTitle").html(title);
}

function SendDocumentMessage(optionalDefaultSubject,optionalDefaultBody)
{
	var fwdAttachments = "Yes"
	if(docInfo.EnableForwarding == "") { fwdAttachments = "0" }
	
	dlgParams.length = 0; //reset dlgParams array.
	dlgParams[0] = optionalDefaultSubject;
	dlgParams[1] = optionalDefaultBody;
	//See dlgParams[2] also at the end of this function which is set to the dialog object so the dialog can use .closeDialog()
	
	var dlgUrl =docInfo.ServerUrl + "/" + NsfName + "/" + "dlgSendLinkMessage?OpenForm&ParentUNID=" + docInfo.DocID + "&FwdAtt=" + fwdAttachments;
	
	var dlgSendLinkMessage = window.top.Docova.Utils.createDialog({
		id: "divDlgSendDocMessage", 
		url: dlgUrl,
		title: "{% trans %}Send Email Notification{% endtrans %}",
		height: 500,
		width: 420, 
		useiframe: true,
		sourcedocument: document,
		sourcewindow: window,
		buttons: {
      		"{% trans %}Send{% endtrans %}": function() {
				var dlgDoc = window.top.$("#divDlgSendDocMessageIFrame")[0].contentWindow.document
				var dlgWin = window.top.$("#divDlgSendDocMessageIFrame")[0].contentWindow
				var tmpurl = "HomeFrame?ReadForm&goto=" + docInfo.LibraryKey + "," + docInfo.FolderID;
				var folderPath = docInfo.ServerUrl + docInfo.PortalWebPath + "/publicAccess?OpenPage&gotourl=" + tmpurl;
				var sendto = $.trim($("#SendTo", dlgDoc).val());
				var subject = $.trim($("#Subject", dlgDoc).val());
				var body = $.trim($("#Body", dlgDoc).val());
				var contentinclude = $("input[name=ContentInclude]:checked", dlgDoc).val()
				//--- If activity type is not selected 
				if(sendto == ""){
					window.top.Docova.Utils.messageBox({
							title: "{% trans %}Invalid entry{% endtrans %}.",
							prompt: "{% trans %}Please enter the recipient names.{% endtrans %}",
							width: 300,
							icontype : 1,
							msgboxtype : 0,
					})
					return false;
				}
				//--- If recipient is not document owner and/or sendto list
				if(subject == ""){
					window.top.Docova.Utils.messageBox({
							title: "{% trans %}Invalid entry{% endtrans %}.",
							prompt: "{% trans %}Please enter the subject{% endtrans %}",
							width: 300,
							icontype : 1,
							msgboxtype : 0,
					})
					return false;
				}
				//--- If subject for activity email is blank.
				if(body == ""){
					window.top.Docova.Utils.messageBox({
							title: "{% trans %}Invalid entry{% endtrans %}.",
							prompt: "{% trans %}Please enter a message.{% endtrans %}",
							width: 300,
							icontype : 1,
							msgboxtype : 0,
					})
					return false;
				}

				if(contentinclude == "P"){
					dlgWin.completeWizard()
				}else{
					//--- If all ok, generate request
					var request = "<?xml version='1.0' encoding='UTF-8' ?>";
					request += "<Request>";
					request += "<Action>";
					request += (contentinclude=="A")? "SENDATTACHMENTMSG" : "SENDLINKMSG";
					request += "</Action>";
					request += "<SendTo><![CDATA[" + sendto +  "]]></SendTo>";
					request += "<Subject><![CDATA[" + subject +  "]]></Subject>";
					request += "<Body><![CDATA[" + body +  "]]></Body>";
					request += "<UserName><![CDATA[" + docInfo.UserName +  "]]></UserName>";	
					request += "<FolderName><![CDATA[" + docInfo.FolderName +  "]]></FolderName>";
					request += "<FolderPath><![CDATA["  + folderPath +  "]]></FolderPath>";
					//Difference between SendDocumentMessage in a View vs Document is Unid node might have many selected docs in a View
					if(objView.selectedEntries.length != 0){
						for(var k=0; k<objView.selectedEntries.length; k++){
							request += (objView.selectedEntries[k])? "<Unid>" + objView.selectedEntries[k] +  "</Unid>" :"";
						}
					}					
					request += "</Request>"

					DoSendDocumentMessage(request);
					dlgSendLinkMessage.closeDialog();
				}
       		},
       		"Cancel": function() {
				dlgSendLinkMessage.closeDialog();
     		}
     	}
	})
	
	//Puts the dialog into the dlgParams array so that it is available to be closed with closeDialog() within the dialog itself.
	dlgParams[2] = dlgSendLinkMessage;
}

function DoSendDocumentMessage(request){
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/MessagingServices?OpenAgent"

	jQuery.ajax({
		type: "POST",
		url: url,
		data: encodeURI(request),
		cache: false,
		async: false,
		dataType: "xml",
		success: function(xml){
			var xmlobj = $(xml);
			var statustext = $(xmlobj).find("Result").first().text()
			if(statustext == "OK"){
				alert("{% trans %}Message was sent.{% endtrans %}")
			}
		},
		error: function(){
			alert("{% trans %}Error.  Message was not sent.  Please check error logs for more information.{% endtrans %}")
		}
	})
}

//Forward a document as an email with an optional introduction
function ForwardDocument()
{
	var objEntry = objView.GetCurrentEntry();
	var selecteddocid = (objEntry && objEntry.isRecord ? objEntry.entryId : null);
	if(! selecteddocid){
		return false;
	}

	var forcesave = (objEntry.GetElementValue("flags") & 256);  //256 is the indicator for Force Save of Forwards
 	var promptsave = (objEntry.GetElementValue("flags") & 512);	//512 is the indicator for Prompt for Save of Forwards
  	var savecopyoption = (docInfo.CanCreateDocuments ? (forcesave ? "1" : (promptsave ? "2" : "0")) : "0");  //Disable save if user cannot create documents in folder
	var defsubject = encodeURIComponent(objEntry.GetElementValue("F8"));
	
	var dlgUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/" + "dlgForwardDocument?OpenForm&SourceDocUNID=" + selecteddocid + "&savecopy=" + savecopyoption + "&DefaultSubject=" + defsubject ;
	
	window.top.Docova.Utils.createDialog({
		id: "divForwardDoc", 
		url: dlgUrl,
		title: "{% trans %}Forward Document{% endtrans %}",	
		height: 610,
		width: 685, 
		useiframe: true,
		defaultButton: 1,
		sourcedocument: document, 
		buttons: {
        		"Send": function() {
				var dlg = "";        		
				var dlgDoc = "";
				if($("#divForwardDocIFrame", this)[0].contentWindow) {
					dlg = $("#divForwardDocIFrame", this)[0].contentWindow;
				} else {
					dlg = $("#divForwardDocIFrame", this)[0].window;
				}		
				dlgDoc = dlg.document;
						
				var sendto = Docova.Utils.allTrim($("#SendTo", dlgDoc).val());
				var subject = Docova.Utils.allTrim($("#Subject", dlgDoc).val());
				
				if(!sendto) { //recipients required
					window.top.Docova.Utils.messageBox({ prompt:"{% trans %}Please enter the recipient names.{% endtrans %}", title: "{% trans %}Invalid entry{% endtrans %}", width: 300 });
					return false;
				}
				if(!subject) { //subject required
					window.top.Docova.Utils.messageBox({ prompt: "{% trans %}Please enter the subject.{% endtrans %}", title: "{% trans %}Invalid entry{% endtrans %}" });
					dlgDoc.getElementById("Subject").focus();
					return false;
				}
				$("#btnFinish").prop( "disabled", true );
				window.top.Docova.Utils.showProgressMessage("{% trans %}Forwarding message. Please wait{% endtrans %}...");
				//-----------------------------------------------------------------------------------------------------------------------------------------------
				//var msgbody = Docova.Utils.allTrim(Docova.Utils.getField({ field: "Body" }, dlgDoc));	
				var msgbody = dlgDoc.getElementById("dEdit0").innerHTML;
				msgbody = encodeURIComponent(msgbody);
				var contentinclude = Docova.Utils.allTrim(Docova.Utils.getField({ field: "ContentInclude" }, dlgDoc));
				var savecopy = Docova.Utils.allTrim(Docova.Utils.getField({ field: "SaveCopy" }, dlgDoc));
				var origbody = dlgDoc.getElementById("OriginalBody").innerHTML;
				origbody = encodeURIComponent(origbody);
				
				var request = "";	
				request += "<?xml version='1.0' encoding='UTF-8' ?>";
				request += "<Request>";
				request += "<Action>FORWARDDOCUMENT</Action>";
				request += "<IncludeAttachments>" +  ((contentinclude=="A")? "1" : "") + "</IncludeAttachments>";
				request += "<SaveCopy>" +  savecopy + "</SaveCopy>";
				request += "<SendTo><![CDATA[" + sendto +  "]]></SendTo>";
				request += "<Subject><![CDATA[" + subject +  "]]></Subject>";
				request += "<Body><![CDATA[" + msgbody +  "]]></Body>";
				request += "<UserName><![CDATA[" + docInfo.UserName +  "]]></UserName>";	
				request += "<Unid>" + dlg.docInfo.SourceDocUNID +  "</Unid>";
				request += "<OriginalBody><![CDATA[" + origbody + "]]></OriginalBody>";
				request += "</Request>"
			
				//-----------------------------------------------------------------------------------------------------------------------------------------------
				
				//--- process on server --				
				var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/MessagingServices?OpenAgent"				
				var httpObj = new objHTTP();
				
				if(httpObj.PostData(encodeURIComponent(request), url)){
					window.top.Docova.Utils.hideProgressMessage();
					 if(httpObj.status=="OK"){
						//all OK
						window.top.Docova.Utils.messageBox({ prompt: "{% trans %}Message was forwarded.{% endtrans %}", title: "{% trans %}Message Forwarded{% endtrans %}" })
						window.top.Docova.Utils.closeDialog({ id:"divForwardDoc" })
						return true;
					}
				}	
				window.top.Docova.Utils.hideProgressMessage();			
			},					
        	"{% trans %}Cancel{% endtrans %}": function() {
				window.top.Docova.Utils.closeDialog({ id:"divForwardDoc" })
        	}
      	}
	})	
	
	return false;
}


//Change the doctype of  a document
function ChangeDocType(currentEntry)
{
	if ( currentEntry == undefined ) {
		currentEntry = objView.currentEntry
		if(objView.selectedEntries.length == 0 && ( currentEntry == undefined  || currentEntry == "" )){
			Docova.Utils.messageBox({
				title: "{% trans %}Error{% endtrans %}",
				prompt: "{% trans %}Please select at least one document for changing the doc type.{% endtrans %}",
				icontype: 1,
				msgboxtype: 0
			});
			return false;
		}
	}
	
	
		var dlgUrl = "/" + docInfo.NsfName + "/" + "dlgSelectDocType?OpenForm&ParentUNID=" + docInfo.DocID;
		var tmpDocova = (window.top.Docova ? window.top.Docova : Docova);
		var doctypedlg = tmpDocova.Utils.createDialog({
			id: "divDlgSelectDocType", 
			url: dlgUrl,
			title: "{% trans %}Change Document Type{% endtrans %}",
			height: 425,
			width: 400, 
			useiframe: true,
			buttons: {
				"{% trans %}Change Document Type{% endtrans %}" : function() {
					var result = jQuery("#" + this.id + "IFrame", this).get(0).contentWindow.completeWizard();
					if(result && result.DocumentType){
						doctypedlg.closeDialog();

						//--collect the xml for all nodes to be processed
						var request="";						
						request += "<Request>";
						request += "<Action>CHANGEDOCTYPE</Action>";
						request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
						request += "<TypeKey>" + result.DocumentType+ "</TypeKey>";	
						if(objView.selectedEntries.length> 0){
							for(var k=0; k<objView.selectedEntries.length; k++){
								request += (objView.selectedEntries[k])? "<Unid>" + objView.selectedEntries[k] +  "</Unid>" :"";
							}
						}else
						{
							request += "<Unid>" + currentEntry+  "</Unid>" ;
						}
						request += "</Request>";
						
						var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/DocumentServices?OpenAgent"	
						var httpObj = new objHTTP();
						Docova.Utils.showProgressMessage("{% trans %}Processing request. Please wait{% endtrans %}...");
						var retVal=false;
						if(httpObj.PostData(request, url))
						{
	 						if(httpObj.status=="OK") {
							retVal=true;
						}
					}
					Docova.Utils.hideProgressMessage();
					objView.Refresh(true, false, true);
					return retVal;	
					}
				},
        			"Cancel": function() {
						doctypedlg.closeDialog();
        			}
      		}
		});		
}
		
		
//-------------------------- manually archive selected documents ----------------------
function ArchiveSelected()
{

	if(objView.selectedEntries.length == 0){
		window.top.Docova.Utils.messageBox({
			title: "{% trans %}Error{% endtrans %}",
			prompt: "{% trans %}Please select at least one document for archiving.{% endtrans %}",
			icontype: 1,
			msgboxtype: 0,
			width: 300
		});		
		return false;
	}

	window.top.Docova.Utils.messageBox({
		title: "{% trans %}Archive documents?{% endtrans %}",
		prompt: "{% trans with {'%slength%' : '" + objView.selectedEntries.length + "' } %}You are about to archive %slength% document(s).  Are you sure?{% endtrans %}",
		icontype: 2,
		msgboxtype: 4,
		width : 400, 
		onYes: function(){
			var request="";
			//--collect the xml for all nodes to be processed
			request += "<Request>";
			request += "<Action>ARCHIVESELECTED</Action>";
			request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
			if(objView.selectedEntries.length != 0){
				for(var k=0; k<objView.selectedEntries.length; k++){
					request += (objView.selectedEntries[k])? "<Unid>" + objView.selectedEntries[k] +  "</Unid>" :"";
				}
			}
			request += "</Request>";
		
			//--- processing agent url
			var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/LibraryServices?OpenAgent"
			
			Docova.Utils.showProgressMessage("Archiving selected document(s). One moment...");
			jQuery.ajax({
				type: "POST",
				url: url,
				data: request,
				cache: false,
				async: false,
				dataType: "xml",
				success: function(xml){
					var xmlobj = $(xml);
					var resulttext = xmlobj.find("Result").first().text();
					if(resulttext == "OK"){
						retVal=true;
						Docova.Utils.hideProgressMessage();
						objView.Refresh(true, false, true)
					}
				},
				error: function(){
					Docova.Utils.hideProgressMessage();
				}
			})
			return retVal;	
		} //end onYes
	})
}

//-------------------------- import mail messages from email or dropbox ----------------------
function ImportMessages()
{
	var dlgUrl =docInfo.MailAcquireMessagesDialogUrl;
	if (dlgUrl == ''){
			window.top.Docova.Utils.messageBox({
				title: "{% trans %}Import Messages Not Available{% endtrans %}",
				prompt: "{% trans %}Import Messages is not available for your current mail configuration.{% endtrans %}",
				width: 400,
				icontype: 4,
				msgboxtype: 0
			});
			return false;
	}

	if(docInfo.UserMailSystem == "O" && !window.top.Docova.IsPluginAlive){
			window.top.Docova.Utils.messageBox({
				title: "{% trans %}DOCOVA Plugin Not Running{% endtrans %}",
				prompt: "{% trans %}The DOCOVA Plugin is required for the importing of messages from Outlook.{% endtrans %}",
				width: 400,
				icontype: 4,
				msgboxtype: 0
			});
			return false;	
	}	

	var dlgmail = window.top.Docova.Utils.createDialog({
		id: "divDlgAcquireMessages", 
		url: dlgUrl,
		title: "{% trans %}Import Mail Messages{% endtrans %}",
		height: 600,
		width: 800, 
		useiframe: true,
		sourcedocument : document,		
		sourcewindow : window,
		buttons: {
        	"{% trans %}Close{% endtrans %}": function() {
	        	var returnValue = jQuery("#" + this.id + "IFrame", this).get(0).contentWindow.GetImportCount();      
				if(returnValue){
					objView.Refresh(true, false, true);
	        	}	  			
		   		dlgmail.closeDialog();
        	},
        	"{% trans %}Import Selected{% endtrans %}": function() {
	        	var returnValue = jQuery("#" + this.id + "IFrame", this).get(0).contentWindow.CompleteDialog(function(returnValue){
    	        	if(returnValue){
    					objView.Refresh(true, false, true);
    	        	}else{
    	        		window.top.Docova.Utils.messageBox({
        					prompt: "{% trans %}Please select one or more emails to import.{% endtrans %}",
        					icontype: 3,
        					msgboxtype: 0, 
        					title: "{% trans %}Choose One or More Emails{% endtrans %}",
        					width: 400
        				});
    	        	}
	        	});
			}
      	}
	});
}

//----------- advanced search ------------
function AdvancedSearch()
{
	var ssObj = $("#MySavedSearches").multiselect("getChecked").map(function(){ return this.value;	}).get();	
	if(ssObj == ""){
		var dlgUrl = docInfo.ServerUrl + docInfo.PortalWebPath + "/dlgAdvancedSearch?OpenForm&edit=false&folder=true"
	}else{
		var dlgUrl = docInfo.ServerUrl + docInfo.PortalWebPath + "/dlgAdvancedSearch?OpenForm&edit=true&folder=true"
	}
	
	var dlgAdvancedSearch = window.top.Docova.Utils.createDialog({
		id: "divDlgAdvancedSrch", 
		url: dlgUrl,
		title: "{% trans %}Advanced Search{% endtrans %}",
		height: 410,
		width: 650, 
		useiframe: true,
		defaultButton: 1,
		sourcewindow: window,
		buttons: {
        	"{% trans %}Save{% endtrans %}": function() {
	        		var cmd = "";
				if(window.top.$("#divDlgAdvancedSrchIFrame")[0].contentWindow) {	//Chrome/FF
					cmd = window.top.$("#divDlgAdvancedSrchIFrame")[0].contentWindow.SetQueryInfo();
				} else {
					cmd = window.top.$("#divDlgAdvancedSrchIFrame")[0].window.SetQueryInfo();	//IE
				}
				if(cmd) { openSaveSearch(); }
			},		
        	"{% trans %}Search{% endtrans %}": function() {
				if(window.top.$("#divDlgAdvancedSrchIFrame")[0].contentWindow) {
					window.top.$("#divDlgAdvancedSrchIFrame")[0].contentWindow.CompleteWizard();				
				} else {
					window.top.$("#divDlgAdvancedSrchIFrame")[0].window.CompleteWizard();				
				}
        		},				
        	"{% trans %}Close{% endtrans %}": function() {
				dlgAdvancedSearch.closeDialog();
        	}
      	}
	})		
}

function CopyLink(currentEntry){
	if(currentEntry == null){
		if(objView.currentEntry == ""){
			Docova.Utils.messageBox({
				title: "{% trans %}Nothing highlighted{% endtrans %}",
				prompt: "{% trans %}To copy a document URL link, please highlight the document first.{% endtrans %}",
				icontype: 1,
				msgboxtype: 0,
				width: 400
			});
			return;
		}else{
			currentEntry = objView.currentEntry
		}
	}
	var docUrl=docInfo.ServerUrl + docInfo.PortalWebPath + "/wHomeFrame?ReadForm&goto=" + docInfo.LibraryKey + "," + docInfo.FolderID;
	docUrl += "," + currentEntry;
	var dlgUrl=docInfo.ServerUrl + docInfo.PortalWebPath + "/dlgCopyDocURL?OpenForm"
	dlgParams.length = 0;
	dlgParams[0] = docUrl
	var dlgCopyDocURL = window.top.Docova.Utils.createDialog({
		id: "divDocUrl", 
		url: dlgUrl,
		title: "{% trans %}Document Link URL{% endtrans %}",
		height: 300,
		width: 400, 
		useiframe: true,
		sourcewindow: window,
		buttons: {
        	"{% trans %}Close{% endtrans %}": function() {
				dlgCopyDocURL.closeDialog();
        	}
      	}
	})
}

function CreateShortcut()
{
	var docUrl=docInfo.ServerUrl + docInfo.PortalWebPath + "/wHomeFrame?ReadForm&goto=" + docInfo.LibraryKey + "," + docInfo.FolderID;
	var objExt = doc.DLExtensions;
	//-------------------------------------------
	if(objExt.CreateIEShortcut("DocLogic folder - " + docInfo.FolderName.replace(/[\(\)\<\>\,\;\:\\\/\"\[\]]/, " "), docUrl, true)){
		alert("{% trans %}Folder shortcut was added to your desktop.{% endtrans %}")
	}
}


function ResetFolderFilter(){
//-----Reset the CurrentFolderDiv innerHTML to the folder's set filter and refresh-----
//-----This is different than the ClearAllFilterswhich clears all filters-----
	$("#CurrentFilterDiv").html("");
	var UseOriginalXML = true;
	ApplyDefaultFolderFilter(UseOriginalXML);
	return;
}

function ClearAllFilters()
{
	//-----Clears all filtering including the default folder filter if there is one----
	ClearAllColFilterFlags();
	$("#divViewContent").css("display", "none")
	objView.oXml = objView.oOriginalXml;
	objView.Refresh(false,true,true );
	ApplyFolderFilter(false);				
	$(".listheader").resizable({ handles: "e" })
	$("#divViewContent").css("display", "")
	return;
}

function ClearAllFiltersSub()
{
		//-----Clears all filtering including the default folder filter if there is one and when the Query option is set to All Versions----
	ClearAllColFilterFlags();
	objView.oXml = objView.oOriginalXml;
	objView.Refresh(false,true,true );
	$(".listheader").resizable({ handles: "e" })
	return;
}

function ClearAllColFilterFlags(){
	$("#CurrentFilterDiv").html("")
	for(var x=0; x<objView.columns.length; x++){
		var objColumn = objView.columns[x]
		$(objColumn).attr("isFiltered", false)
	}
	return;
}

function ClearColFilterFlag(NodeName){
	for(var x=0; x<objView.columns.length; x++){
		var objColumn = objView.columns[x]
		if(NodeName == objColumn.xmlNodeName){
			$(objColumn).attr("isFiltered", false)
		}
	}
	return;
}

function SetColumnFilterFlag(NodeName){
	for(var x=0; x<objView.columns.length; x++){
		var objColumn = objView.columns[x]
		if(NodeName == objColumn.xmlNodeName){
			$(objColumn).attr("isFiltered", true)
		}
	}
	return;
}

function SetAllColFilterFlags(){
	var filterexpArray;
	var filterarray = $("#CurrentFilterDiv").html().split("~")
	
	for (var x=0; x<objView.columns.length; x++){
		var objColumn = objView.columns[x]
		objColumn.isFiltered = false; //first we reset the columns as we come to them..then determine if they are to be set according to the current filter expression
		for (var i=0; i< filterarray.length; i++){
			filterexpArray = filterarray[i].split("=")
			if(filterexpArray[0] == objColumn.xmlNodeName){
				$(objColumn).attr("isFiltered", true);
			}
		}
	}
	return;
}

function CreateFolderFilterStyle(filterExpr){	
    try
    {
	var xslFilter = '<?xml version="1.0"?>'
	xslFilter += '<xsl:stylesheet  version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" ><xsl:output method="xml"/>'
	xslFilter += '<xsl:template match="/">'
	xslFilter += '<documents>'
	xslFilter += '<xsl:for-each select="//document[' + filterExpr + ']">'
	xslFilter += '<xsl:copy-of select="."></xsl:copy-of>'
	xslFilter += '</xsl:for-each>'
	xslFilter += '</documents>'
	xslFilter += '</xsl:template>'
	xslFilter += '</xsl:stylesheet>'

	$("#FolderFilterXSL").html(xslFilter);	
		
	}
	catch(e)
	{   
		Docova.Utils.messageBox({
			title: "{% trans %}Filter error{% endtrans %}",
			prompt: "{% trans %}Could not create filter{% endtrans %}: " + e.message,
			icontype: 1,
			msgboxtype: 0
		});		
		return false;
	}    	
return true;
}

function ApplyFolderFilter(UseOriginalXML){

	ApplyQueryOptionToFilter();
	
	var filterexp = "";
	var CurrentFilter = $("#CurrentFilterDiv").html();
	var Fn = "";
	var FnExp = "";
	var NewExp;
	var expArray;
		
	if (CurrentFilter != ""){
		var CurrentFilterArray = CurrentFilter.split("~")
		for (var x=0; x<CurrentFilterArray.length; x++){
			if(CurrentFilterArray[x].indexOf(" or ") != -1){ 
				//----- if ' or ' is found in the string, that is, 'space or space', then we have an 'or' in the expression so just pass it through.
				NewExp = " (" + CurrentFilterArray[x] + ") "
			}else{ //----- ' or ' is not found in the string therefore we want to perform a 'contains"
				expArray = CurrentFilterArray[x].split("=")
				Fn = expArray[0]
				FnExp = "', " + rightBack(leftBack(expArray[1], "'"),"'") + ", '"
				NewExp = "contains(concat(concat(', ', " + Fn + "), ', '), " + FnExp + ")"				
			}

			if(filterexp == ""){
				filterexp = NewExp;
			}else{
				filterexp += " and " + NewExp
			}
		}	
	}
	
	if(filterexp == ""){
		ClearAllFiltersSub();
	}else{
		if(CreateFolderFilterStyle(filterexp)){
			if(UseOriginalXML){
					objView.oXml =objView.oOriginalXml
			}
			
			var el = document.getElementById("FolderFilterXSL");
			var xsl = el.textContent || el.innerText || el.nodeValue || el.innerHTML;	
			var parser = new DOMParser();
			var objXSLDoc = parser.parseFromString(xsl,"text/xml");				
			var processor = new XSLTProcessor();
			processor.importStylesheet(objXSLDoc); 
			objView.oXml = processor.transformToDocument(objView.oXml); 
			objView.Refresh(false,true,true)	
			$(".listheader").resizable({ handles: "e" })
		}
	}
	return;
}

function ApplyCurrentFolderFilter(UseOriginalXML )
{
	SetAllColFilterFlags();
	ApplyFolderFilter(UseOriginalXML);
	return;
}

function ApplyDefaultFolderFilter(UseOriginalXML){

	var userfilternodes = docInfo.UserFltrFieldNodes;
	var userfilternodevals = docInfo.UserFltrFieldNodeVals;
	var fltrNodes = docInfo.fltrFieldNodes;

	var userfilternodesArr = docInfo.UserFltrFieldNodes.split(";")
	var userfilternodevalsArr = docInfo.UserFltrFieldNodeVals.split(";")
	var fltrNodesArr = docInfo.fltrFieldNodes.split(";")
	var filterexp = ""

	for (i=0; i< fltrNodesArr.length; i++){
		for (j=0; j<userfilternodesArr.length;j++){
			if (fltrNodesArr[i] == userfilternodesArr[j] && fltrNodesArr[i] != ""){				
				if(filterexp == ""){
					filterexp = fltrNodesArr[i] + "=" + "'" + userfilternodevalsArr[j] + "'"
				}else{
					filterexp =filterexp + "~" + fltrNodesArr[i] + "=" + "'" + userfilternodevalsArr[j] + "'"
				}
			}
		}
	}
	$("#CurrentFilterDiv").html(filterexp)
	SetAllColFilterFlags();
	ApplyFolderFilter(UseOriginalXML);
	return;
}

function ViewColumnSelectFilter(source){
	if(docInfo.EnableFolderFiltering != "1"){return;}

	var NodeList
	var columnvals = "";
	var slist = ""; //sorted list
	var ulist = ""; //unique list
	var columnObj = objView.columns[$(source).attr("colidx")]		
	
	if (columnObj == null){ return;}
	var NodeName = columnObj.xmlNodeName
	var NodeExpr = "//" + NodeName
	var CurrentSelectedOptionText;
	var NodeListText = "";
		
	NodeList = objView.oXml.selectNodes(NodeExpr) 
	if(NodeList[0]==null){   //no documents in the folder/view
		Docova.Utils.messageBox({ title: "{% trans %}Error{% endtrans %}", prompt: "{% trans %}There are no documents to filter.{% endtrans %}" })
		return;
	}
	
	//-----If NodeList length is greater than one then sort and unique the values-----
	if(NodeList.length > 1){
		for( var i = 0; i < NodeList.length; i++ ){ 
			NodeListText = (NodeList[i].text == undefined ? (NodeList[i].textContent == undefined ? "" : NodeList[i].textContent) : NodeList[i].text);			
			if (NodeListText.indexOf(",") > 0){
				NodeListText = NodeListText.replace(", ", "~")
			}
			if(columnvals == ""){
				columnvals += NodeListText
			}else{
				columnvals += "~" + NodeListText
			}
		} 
		slist = Docova.Utils.sort({ inputstr: columnvals, delimiterin: "~", delimiterout: "~" })
		ulist = Docova.Utils.unique({ inputstr: slist, delimiterin: "~", delimiterout: "~" })		
	}else{
		ulist = (NodeList[0].text == undefined ? (NodeList[0].textContent == undefined ? "" : NodeList[0].textContent) : NodeList[0].text);		
	}

	CurrentSelectedOptionText = getCurrentSelectedOptionText(NodeName)

	var optionarray = ulist.split("~")
	var items = [];
	items.push("<select name='" + NodeName + "' id='" + NodeName + "' onchange='CreateFilter(this)' style='padding:5px 0;line-height:19px;' onblur='HideFilterSelection(this)'><option value='All'>All</option>");

	for (var x = 0; x < optionarray.length; x ++) {
		if(optionarray[x] == CurrentSelectedOptionText) {
			items.push("<option selected=true value='" + optionarray[x] + "'>" + optionarray[x] + "</option>");
		} else {
			items.push("<option value='" + optionarray[x] + "'>" + optionarray[x] + "</option>");
		}
	}
	items.push('</select>');
	$("#SelectFilterDiv").html(items.join(''));
	
	$("#SelectFilterDiv").position({
		my: "left top",
		at: "left bottom",
		of: source
	});
	
	$("#" + NodeName).css("width", parseInt(columnObj.width) + 5);	
	$("#SelectFilterDiv").css("display", "" );
	var optionlist = "<select name='" + NodeName + "' id='" + NodeName + "' onchange='CreateFilter(this)' style='padding:5px 0;line-height:19px;' onblur='HideFilterSelection(this)'><option value='All'>All</option>"
	for(var j = 0; j<optionarray.length; j++){
		if(optionarray[j] == CurrentSelectedOptionText){
			optionlist += "<option selected=true value='" + optionarray[j] + "'>" + optionarray[j] + "</option>" 
			}else{
			optionlist += "<option value='" + optionarray[j] + "'>" + optionarray[j] + "</option>" 
		}
	}
	optionlist += "</select>"
}

function CreateFilter(selectobj){
	var filterexp;
 	var NodeName = selectobj.name
 	var NodeValue = selectobj.options[selectobj.selectedIndex].value
 	var CurrentFilter;
 	var CurrentFilterArray;
 	var filterexp;
 	var newfilterexp;
 	var UseOriginalXML = false;

 	filterexp = NodeName + "='" + NodeValue + "'"
 	
 	if(NodeValue == "All"){
 		RemoveFromCurrentFilter(NodeName)
 		UseOriginalXML = true;
 	}else{
 		AddToCurrentFilter(filterexp)
 		SetColumnFilterFlag(NodeName)
 		UseOriginalXML = false;
 	}
 	
 	ApplyFolderFilter(UseOriginalXML)
 	
 	$(selectobj).css("display", "none")
}

function RemoveFromCurrentFilter(NodeName){
//-----Find the node and remove it-----
	var CurrentFilterTxt = $("#CurrentFilterDiv").html()
	var NewFilterTxt = "";
	var CurrentFilterArray = CurrentFilterTxt.split("~")
	var CurrentExpArray;
	
	for (var x=0; x<CurrentFilterArray.length; x++){
		CurrentExpArray = CurrentFilterArray[x].split("=")
		if (CurrentExpArray[0] != NodeName){
			if(NewFilterTxt == ""){
				NewFilterTxt = CurrentFilterArray[x]
			}else{
				NewFilterTxt += "~" + CurrentFilterArray[x]
			}
		}
	}
	ClearColFilterFlag(NodeName)
	$("#CurrentFilterDiv").html(NewFilterTxt)
}

function AddToCurrentFilter(filterexp){
	var CurrentFilterTxt = "";

	CurrentFilterTxt = $("#CurrentFilterDiv").html()
	if(CurrentFilterTxt == ""){
		$("#CurrentFilterDiv").html(filterexp)
	}else{
		if (CurrentFilterTxt.indexOf(filterexp) == -1){
			CurrentFilterTxt += "~" + filterexp
			$("#CurrentFilterDiv").html(CurrentFilterTxt)
		}
	}
}

function getOffset( el ) {
	var _x = 0;     
	var _y = 0;
	while( el && !isNaN( el.offsetLeft ) && !isNaN( el.offsetTop ) ) {
		_x += el.offsetLeft - el.scrollLeft;
		_y += el.offsetTop - el.scrollTop;
		el = el.offsetParent;
	}

	return { top: _y, left: _x }; 
}  

function getCurrentSelectedOptionText(NodeName){

	var CurrentFilterTxt = $("#CurrentFilterDiv").html()
	var CurrentFilterArray = CurrentFilterTxt.split("~")
	var expValuesArray;
	var currentSelectedOptionText = "";

	for (var x=0; x<CurrentFilterArray.length; x++){
		expValuesArray = CurrentFilterArray[x].split("=")
		if(expValuesArray[0] == NodeName){
			currentSelectedOption = expValuesArray[1];
			currentSelectedOptionText = rightBack(leftBack(currentSelectedOption, "'"),"'")
			return currentSelectedOptionText;
		}
	}
	return currentSelectedOptionText;
}

function HideFilterSelection(objSelectFilterField){
	$(objSelectFilterField).css("display", "none")
}

function ApplyQueryOptionToFilter(){
	var addfilteroption = "";
	var currShowOption = Docova.Utils.getField("selVersionScope");

	if (currShowOption == "REL") {
		addfilteroption = "statno='1' or apflag='1'" //Released or allow preview flag
	}
	if (currShowOption == "NEW") {
		addfilteroption = "statno='0'" //Draft
	}			
	RemoveFromCurrentFilter("statno")
	AddToCurrentFilter(addfilteroption)
	return;
}


function CreateBookmark(currentEntry) {
	if (currentEntry == undefined) {
		currentEntry = objView.currentEntry
			if (currentEntry == undefined || currentEntry == "") {
				window.top.Docova.Utils.messageBox({
					title : "{% trans %}Error{% endtrans %}",
					prompt : "{% trans %}Please highlight a document to create a bookmark for.{% endtrans %}",
					icontype : 1,
					msgboxtype : 0
				});
				return;
			}
	}

	window.top.Docova.Utils.messageBox({
		title : "{% trans %}Create Bookmark?{% endtrans %}",
		prompt : "{% trans %}Would you like to create a Bookmark entry for the highlighted document?{% endtrans %}",
		icontype : 2,
		msgboxtype : 4,
		width : 400,
		onYes : function () {
			//-- choose target folder
			var dlgUrl = docInfo.ServerUrl + docInfo.PortalWebPath + "/dlgFolderSelect?ReadForm&flags=create,notcurrent,norecycle";
			var folderdbox = window.top.Docova.Utils.createDialog({
					id : "divDlgFolderSelect",
					url : dlgUrl,
					title : "{% trans %}Select Bookmark Folder{% endtrans %}",
					height : 420,
					width : 420,
					useiframe : true,
					sourcedocument : document,
					buttons : {
						"{% trans %}Create Bookmark{% endtrans %}" : function () {
							var returnValue = jQuery("#" + this.id + "IFrame", this).get(0).contentWindow.completeWizard();

							//-- returnValue [0]=LibraryID, [1]=FolderID, [2]=FolderUNID, [3]=FolderAccessLevel
							if (returnValue) {
								if (returnValue[1] == docInfo.FolderID) {
									alert("{% trans %}Unable to create bookmark in the same folder as the source document. Please choose an alternate folder.{% endtrans %}");
									return;
								}
								//---------------------------------- Check Folder Access Level -----------------------------------------
								if (Number(returnValue[3]) < 3) {
									alert("{% trans %}You do not have sufficient rights to create documents in the selected folder. Please choose an alternate folder.{% endtrans %}");
									return;
								}
								folderdbox.closeDialog();
								//--- processing agent url
								var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/DocumentServices?OpenAgent";
								//--build the CREATEBOOKMARK request
								var request = "";								
								request += "<Request>";
								request += "<Action>CREATEBOOKMARK</Action>";
								request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
								request += "<Unid>" + currentEntry + "</Unid>";
								request += "<LibraryID>" + returnValue[0] + "</LibraryID>";
								request += "<FolderID>" + returnValue[1] + "</FolderID>";
								request += "</Request>";
								var httpObj = new objHTTP();
								if (httpObj.PostData(request, url)) {
									if (httpObj.status == "OK") {
										if (httpObj.results.length > 0) {
											alert("{% trans %}Bookmark successfully created in chosen folder.{% endtrans %}");
										}
									}
								}
							}
						},
						"{% trans %}Cancel{% endtrans %}" : function () {
							folderdbox.closeDialog();
						}						
					}
				});  //end createDialog
		} //end onYes
	})
}//--end CreateBookmark


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: printAttachments 
 * 
 * Inputs: 
 * Returns: 
 * Example:
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function printAttachments(){		
	
	if(! window.top.Docova.IsPluginAlive){
		window.top.Docova.Utils.messageBox({prompt: "{% trans %}DOCOVA Plugin is not running.  This functionality requires the use of the DOCOVA Plugin.{% endtrans %}", title: "Print Attachments", width: 400});
		return false;
	}
	
	var folderid = docInfo.FolderID;
	var excludeextensions = "exe,com,dll,ocx";
	
	var IDList = new Array();
	if(objView.selectedEntries.length > 0){
		IDList = objView.selectedEntries;
	}else if (objView.currentEntry !=""){
		IDList.push(objView.currentEntry);
	}else{
		alert("{% trans %}Please select documents to print.{% endtrans %}");
		return false;
	}; 
									
    var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/(DocumentServices)?OpenAgent&" + Math.random();
    var request = "";
    request += "<Request>";
    request += "<Action>GETATTACHMENTS</Action>";
    request += "<FolderID>" + folderid + "</FolderID>";
    request += "<SelectionType>1</SelectionType>";
    request += "<SelectedDocs>";
	for ( var j=0; j < IDList.length; j ++ ) {
		request += "<DocID>" + IDList[j] + "</DocID>";
	}     	
    request += "</SelectedDocs>";
    request += "<IncludeExtensions></IncludeExtensions>";
    request += "<ExcludeExtensions>"+ excludeextensions +"</ExcludeExtensions>";
    request += "<IncludeThumbnails></IncludeThumbnails>";
    request += "<AppendVersionInfo></AppendVersionInfo>";
    request += "</Request>";

	var printFiles = true;
	var fileList  = "";

	var tempfolder = DLExtensions.getTemporaryFolder(); 
	if(tempfolder == ""){
		alert("{% trans %}Unable to get temporary folder.  Print cancelled{% endtrans %}");
		return false;
	}
	if (tempfolder.charAt(tempfolder.length-1) != "\\"){
		tempfolder = tempfolder + "\\";
	}
	
	jQuery.ajax({
			'type' : "POST",
			'url' : url,
			'data' : request,
			'contentType': "xml",
			'async' : false,
			'dataType' : 'xml'
		})
		.done(function(xmldata){
			jQuery(xmldata).find("File").each(function(){
					var fileName = jQuery(this).find("FileName").text();
					var fileUrl = jQuery(this).find("URL").text(); 
					if (fileName != ""){
						var targetFilePath = tempfolder + fileName;
						if (DLExtensions.DownloadFileFromURL(fileUrl, targetFilePath, true)){
							fileList = (fileList == "") ? targetFilePath : fileList += "*" + targetFilePath;
						}
					}		
			})	
		})
		.fail(function(){
		 	window.top.Docova.Utils.messageBox({ title: "{% trans %}Print Attachments{% endtrans %}", prompt: "{% trans %}Error - Unable to retrieve a listing of attachments to print.{% endtrans %}", width: 400 }); 							
		 	return false;				
		});
	
 			
		if(printFiles) {
			DLExtensions.printFiles({
						filelist: fileList, 
						onSuccess: function(){
							Docova.Utils.messageBox({ title: "{% trans %}Print Attachments{% endtrans %}", prompt: "{% trans %}All files have been sent to the printer.{% endtrans %}", width: 300 });			
						},
						onFailure: function(){
 							Docova.Utils.messageBox({ title: "{% trans %}Print Attachments{% endtrans %}", prompt: "{% trans %}Error - Unable to print one or more files.  Please check that all source files are undamaged.{% endtrans %}", width: 400 }); 							
						}
			});
		}
}//--end printAttachments


function checkAvailableHeight(){
	try{
		
		var vpheight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;	
		if(vpheight == 0){return;}  //-- in case we aren't able to get the height
		var buttonheader = document.getElementById("actionPaneHeader");
		var viewheader = document.getElementById("divViewHeader");
		var headingsheight = buttonheader.clientHeight + viewheader.clientHeight;
		var container = document.getElementById("divViewContent");
		var hght = vpheight  - headingsheight;
		if ( hght > 0 )
			$(container).css("height", vpheight  - headingsheight);
		}catch(e){}
}

function checkAvailableHeight3(){
	try{
		var totalwidth = 0;
		var lastcellwidth = 0;
		var $table = $('#VDataTable'),
    		$bodyCells = $table.find('tbody tr[isRecord="true"]').children(),
    	colWidth;
	// Get the tbody columns width array
    colWidth = $bodyCells.map(function() {
        return $(this).width();
    }).get();
    
    // Set the width of thead columns
    $table.find('thead tr').children().each(function(i, v) {
    		totalwidth += colWidth[i];
    		lastcellwidth= colWidth[i];
      //  $(v).width(colWidth[i]);
    });    
    var finalWidth = totalwidth-lastcellwidth;
    
  	if (  $(window).width() > finalWidth)
		$("#VDataTable").width($(window).width() );
	$("#VDataTable tbody tr[isRecord='true'] td:last").width ( $(window).width() - finalWidth );
	$("#VDataTable thead tr:first td:last").width ( $(window).width() - finalWidth );
		
		var vpheight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;	
		if(vpheight == 0){return;}  //-- in case we aren't able to get the height
		var headingsheight = $("#actionPaneHeader").outerHeight() + $("#divViewHeader").outerHeight() +$("#VDataTable thead").outerHeight();
		var container = $("#VDataTable tbody");
		var hght = vpheight  - headingsheight;
		console.log ( headingsheight  +  "actionPaneHader " + $("#actionPaneHeader").outerHeight() + " divViewHeader " + $("#divViewHeader").outerHeight() + " thead " + $("#VDataTable thead").outerHeight() );
		if ( hght > 0 )
			container.css("height", hght);
		}catch(e){}
}

function DeleteDesignElement(type, unid){
	
	if (!confirm("{% trans with {'%etype%' : '" + type +  "'} %}Are you sure you want to delete the current %etype% design element?{% endtrans %}")) {return false;}
	
	var uname = docInfo.UserNameAB
	var agentName = "DesignServices"
	var library = docInfo.NsfName

	var request = "<Request><Action>DELETEELEMENT</Action><UserName><![CDATA[" + uname + "]]></UserName>"
	request += "<Document>"
	request += "<ElementType>" + type + "</ElementType>"
	request += "<unid>" + unid + "</unid>"
	request += "<apppath>" + docInfo.AppFilePath + "</apppath>"
	request += "</Document>"
	request += "</Request>"

	var result = SubmitRequest(request, agentName);
	if(result == true){
		objView.RemoveSelectedEntries(true);
	}
	return result
}

function DeleteSelectedDesignElements(type, unidArray){
	if (!confirm("{% trans with {'%etype%' : '" + type +  "'} %}Are you sure you want to delete the currently selected %etype% design elements?{% endtrans %}")) {return false;}
	
	var uname = docInfo.UserNameAB
	var agentName = "DesignServices"
	var library = docInfo.NsfName
	var unid;
	var request;
	var result;
	
	for(var x=0; x<unidArray.length; x++){
		unid = unidArray[x]
		request = "<Request><Action>DELETEELEMENT</Action><UserName><![CDATA[" + uname + "]]></UserName>"
		request += "<Document>"
		request += "<ElementType>" + type + "</ElementType>"
		request += "<unid>" + unid + "</unid>"
		request += "<apppath>" + docInfo.AppFilePath + "</apppath>"
		request += "</Document>"
		request += "</Request>"

		result = SubmitRequest(request, agentName);
	}
		objView.RemoveSelectedEntries();
}

function SubmitRequest(request, agentName){
	//send the request to server
	var processUrl = docInfo.ServerUrl + docInfo.PortalWebPath + "/" + agentName  + "?OpenAgent"
	var httpObj = new objHTTP();
	if(!httpObj.PostData(request, processUrl) || httpObj.status=="FAILED"){
		HideProgressMessage();
		return false;
	}

	return (httpObj.results.length)? httpObj.results[0] : true;
} 

/********************* INLINE IN BODY ***********************/
{% include 'DocovaBundle:AppBuilder:NotesViews/sfScript' ~ app.request.query.get('DesignElement') ~ '.js.twig' %}
</script>
</head>
<body text="#000000" bgcolor="#FFFFFF" SCROLL="no" oncontextmenu="return false;">
	<form onsubmit="doUpdate(); return true;" action="">
		<div id="viewMainContainer" style="display: none;">
			<!-------------------------- non-scrollable header ----------------------->
			<div id="divHeaderSection" style="width: 100%;">
				<div id="actionPaneHeader" class="wrapper" style="width: 100%; padding: 4px 6px 3px 6px;">
					<table border=0 cellspacing=0 cellpadding=0 width=100%>
						<tr>
							<td id="tdActionBar">
							{% include 'DocovaBundle:AppBuilder:NotesViews/sfActionBtn' ~ app.request.query.get('DesignElement') ~ '.html.twig' %}
							</td>
							<td align="right">
								<span style="font-size: 11px; color: #0050D1; display: none" id="divSearchResultCount"></span>
							</td>
							<td align="right">&nbsp</td>
						</tr>
					</table>
				</div>
			</div>
			<!------------------------------------------------------>
			<div id="divViewEventCapture" tabindex="1">
				<!--- BEGIN Document View header ----->
				<div id="divViewHeader" style="width: 100%; padding: 0px 0px 0px 0px; display:none;">
					<!------------------------------------------------------>
					<div id="divToolbarSearch" style="display: none; position: relative; top: 35px; padding: 4px 6px 4px 6px; border-top: 1px solid #CCC;">
						<div id="divSearchQuery" style="display: none;"></div>
						<div id="divQueryFields" style="display: none;"></div>
						<span style="width: 75px;">{% trans %}Search for{% endtrans %}:</span>
						<input name="inpQuery" placeholder="{% trans %}Use AND, OR, <, >, = , >=, <= and wildcards like *, ?{% endtrans %}" id="inpQuery" type="text" style="width: 330px;" tabindex="1" />&nbsp;
						<button id="btnFTSearch" tabindex="2">{% trans %}Full-text Search (incl. Attachments){% endtrans %}</button>&nbsp;
						<button id="btnAdvancedSearch" tabindex="3">{% trans %}Advanced Search{% endtrans %}</button>&nbsp;
						<select name="MySavedSearches" id="MySavedSearches" onchange="GetSavedSearch(this)" tabindex="4">
						</select>&nbsp;
						<button id="btnFTClear" tabindex="5">{% trans %}Clear Search{% endtrans %}</button>&nbsp;
						<button id="btnDelete" tabindex="6">{% trans %}Delete Current Saved Search{% endtrans %}</button>
						<span id="divToolbarFilter" align="right" style="display: none; border-left: groove 1px; padding: 4px 6px 4px 6px;">
							<span style="width: 40px;">{% trans %}Filters{% endtrans %}: </span>
							<button id="btnClearAllFilters" tabindex="7" title="{% trans %}Clear all folder filtering{% endtrans %}" onclick="ClearAllFilters();">{% trans %}Clear All Filters{% endtrans %}</button>
							<button id="btnResetFolderFilter" tabindex="8" title="{% trans %}Reset to folder's default filter{% endtrans %}" onclick="ResetFolderFilter();">{% trans %}Reset Folder Filter{% endtrans %}</button>
						</span>
					</div>
					<!------------------ Content Paging ------------------------------------>
					<div id="divContentPaging" disabled style="display: none; position: relative; top: 35px; border-top: 1px solid #CCC; padding: 4px 6px 4px 6px;">
						<table style="font-size: 8pt" border=0 cellpadding=0 cellspacing=0>
							<tr>
								<td width=290>
									{% trans %}Displaying records{% endtrans %} 
									<span id=startCount>1</span>&nbsp;{% trans %}to{% endtrans %}&nbsp;
									<div id="currCount" style="background-color: white; padding-left: 1px; padding-right: 2px; height: 13px; display: inline">2</div>
									<div id="currPic" style="width: 50px; display: inline; background-color: white;" onclick="getDisplayCount(this);">
										&nbsp;<IMG SRC="{{ asset('bundles/docova/images/downarrow-blk.gif') }}" Border=0 />&nbsp;
									</div>&nbsp;
									{% trans %}of{% endtrans %}&nbsp;<span id=totalCount></span>
								</td>
								<div id="countPicker" style="z-index: 1000; position: absolute; display: none; background-color: white; border: 1px solid grey; padding: 2px"></div>
								<td width=190>
									<button id="btnContPage1" title="{% trans %}First{% endtrans %}" tabindex="9"></button>
									<button id="btnContPage2" title="{% trans %}Previous{% endtrans %}" tabindex="10"></button>
									<button id="btnContPage3" title="{% trans %}Next{% endtrans %}" tabindex="11"></button>
									<button id="btnContPage4" title="{% trans %}Last{% endtrans %}" tabindex="12"></button>
								</td>
								<td>
									{% trans %}Find{% endtrans %} 
									<input type="text" onfocus="selText(this)" style="width: 90px" onkeyup="triggerGetPage()" tabindex="13" id="GetPage" />
								</td>
							</tr>
						</table>
					</div>
					<div ID="showDocCountDiv" style="display: none"></div>
					<!--------------------- End Content Paging --------------------------------->
					<script id="xmlViewPerspective" type="text/xml">{% include 'DocovaBundle:AppBuilder:NotesViews/sfPerspective' ~ app.request.query.get('DesignElement') ~ '.xml.twig' %}</script>
				</div>
				<!--- END Document View header ----->
				<!--- BEGIN Document view contents----->
				<div id="divViewContent" style="position:relative; top:1px; width: 100%; padding: 0px; margin: 0px; overflow:auto;" tabindex="14" ></div>
				<!--- END Document view contents----->
				<!--- End event capture area ----->
			</div>
		</div>
		<!--- END viewMainContainer--->
		<!------------------ SUBFORM sfKillCache ------------>
		<!------------------Microsoft suggestion to force no cacheing of documents------------>
		<HEAD>
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="CACHE-CONTROL" CONTENT="0">
<META HTTP-EQUIV="EXPIRES" CONTENT="0">
		</HEAD>
		<!------------------END SUBFORM sfKillCache  ------------>
	</form>
</body>
</html>