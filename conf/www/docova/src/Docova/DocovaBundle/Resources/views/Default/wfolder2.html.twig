<!DOCTYPE html>
<html>
<head>
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="CACHE-CONTROL" CONTENT="0">
<META HTTP-EQUIV="EXPIRES" CONTENT="0">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/smoothness/jquery-ui.css') }}">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/styleFolderBase.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/css/styleActionBar.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/css/multiselect.css') }}" type="text/css" />
<script type="text/javascript" language="JavaScript" src="{{ asset('bundles/docova/jquery/jquery.js') }}"></script>
<script type="text/javascript" language="JavaScript" src="{{ asset('bundles/docova/jquery/jquery-ui.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/sarissa.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/sarissa_ieemu_xpath.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/commonFunctions.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/viewObjects.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/Docova.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/multiselect.js') }}"></script>
{% include 'DocovaBundle:Default:scriptMessagesTranslation.html.twig' %}
<script language="JavaScript" type="text/javascript">
var SUBJECTNODE = "F8"; //to pass doc subject to tab function
var objView = null; //view object
var curColumnObj = null; //view column object
var currentPerspective=""; //current perspective id
var info = {
	"DocID" : "{{ folder ? folder.getId : -1 }}",
	"DocKey" : "{{ folder ? folder.getId : -1 }}",
	"UserName" : "{{ user.getUserNameDn|replace({'\\': '\\\\'}) }}",
	"UserNameAB" : "{{ user.getUserNameDnAbbreviated|replace({'\\': '\\\\'}) }}", 
	"UserNameCN" : "{{ f_Name("[CN]", user.getUserNameDnAbbreviated)|replace({'\\': '\\\\'}) }}",
	"SystemKey" :  "",
	"isRecycleBin" : "{{ not folder ? 'true' : '' }}",
	"CanCreateDocuments" : "{{ user_access.ccdocument ? 'true' : '' }}",
	"CanSoftDeleteDocuments" : "{{ user_access.ccdocument ? 'true' : '' }}",
	"CanDeleteDocuments" : "{{ user_access.cddocument ? 'true' : '' }}",
	"CanCreateRevisions" : "{{ user_access.ccrevision ? 'true' :'' }}",
	"DocAccessLevel" : "{{ user_access.docacess }}",
	"DocAccessRole" : "{{ user_access.docrole }}",
	"DbAccessLevel" : "{{ user_access.dbaccess }}",
	"CutCopyPaste" : "{% if folder and folder.getDisableCCP == true %}1{% endif %}",
	"HTTP_Referer" : "{{ url('docova_leftnav') }}",
	"Query_String" : "OpenDocument",
	"Query_String_Decoded" : "OpenDocument",
	"Path_Info_Decoded" : "{{ path('docova_allbydockey', {'key' : (folder ? folder.getId : -1) }) }}?OpenDocument",
	"ServerName" : "{{ app.request.server.get('HTTP_HOST') }}",
	"ServerUrl" : "{{ app.request.getscheme }}://{{ app.request.server.get('HTTP_HOST') }}",
	"NsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
	"LibraryKey" : "{{ library.getId }}",
	"PortalWebPath" : "{{ path('docova_homepage')[:path('docova_homepage')|length -1] }}",
	"PortalNsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length-2] }}",
	"DocumentTypeOption" : "{% if folder %}{% if not folder.getDefaultDocType %}N{% elseif folder.getDefaultDocType == -1 %}A{% else %}S{% endif %}{% endif %}", 
	{% set folder_doctypes_list = '' %}
	{% set defaultDocType = '' %}
	{% if folder and folder.getApplicableDocType.count > 0 %}
		{% for doctype in folder.getApplicableDocType %}
			{% set folder_doctypes_list = folder_doctypes_list ~ ", " ~ doctype.getId %}
			{% if doctype.getId == folder.getDefaultDocType %}
			{% set defaultDocType = doctype.getDocName %}
			{% endif %} 
		{% endfor %}
		{% set folder_doctypes_list = folder_doctypes_list[2:] %}
	{% endif %}
	"DocumentType" : "{{ folder_doctypes_list }}",
	"SyncNav" : "{% if load_doc_id %}1{% endif %}",
	"LoadDoc" : "{{ load_doc_id }}",
	"FolderID" : "{{ folder ? folder.getId : -1 }}", 
	"FolderParentID" : "",
	"FolderName" : "{{ folder ? folder.getFolderName : 'Recycle Bin'|trans }}",
	"CreatedBy" : "{{ folder ? folder.getCreator.getUserNameDnAbbreviated : '' }}",
	"CreatedDate" : "{{ folder ? folder.getDateCreated|date('Y/m/d H:i:s') : '' }}",
	{% if library.getDefaultPerspective %}
		{% if library.getDefaultPerspective.getIsSystem == true %}
			{% set default_perspective = 'system_' ~ library.getDefaultPerspective.getId %}
		{% else %}
			{% set default_perspective = 'custom_' ~ library.getDefaultPerspective.getId %}
		{% endif%}  
	{% elseif folder %}
		{% if folder.getDefaultPerspective.getIsSystem == true %}
			{% set default_perspective = 'system_' ~ folder.getDefaultPerspective.getId %}
		{% else %}
			{% set default_perspective = 'custom_' ~ folder.getDefaultPerspective.getId %}
		{% endif%}
	{% else %}
		{% set default_perspective = 'system_' ~ valid_perspectives[0].getId %}
	{% endif %}
	"DefaultPerspective" : "{{ default_perspective }}",
	"FolderPerspectives" : "{% if folder and folder.getDefaultPerspective.getIsSystem != true %}custom_{{ folder.getDefaultPerspective.getId }}{% endif %}",
	"MailAcquireDialogUrl" : "{% if user.getUserProfile.getUserMailSystem in ['N','G','Y','H','X'] %}{{ path('docova_mailacquire') }}?OpenForm{% elseif user.getUserProfile.getUserMailSystem == 'O' %}{{ path('docova_outlookmailacquire') }}?OpenForm{% endif %}",
	"MailAcquireMessagesDialogUrl" : "{% if user.getUserProfile.getUserMailSystem in ['N','G','Y','H','X'] %}{{ path('docova_mailacquiremessages') }}?OpenForm{% elseif user.getUserProfile.getUserMailSystem == 'O' %}{{ path('docova_outlookacquiremessages') }}?OpenForm{% endif %}{% if user.getUserProfile.getUserMailSystem == 'O' %}&ParentUNID={{ folder ? folder.getId : -1 }}{% endif %}",
	"UserMailSystem" : "{{ user.getUserProfile.getUserMailSystem }}", 
	"RMEEnabled" : "",
	{% set fltr_fields = '' %}
	{% if folder %}
		{% if folder.getFltrField1 %}
			{% set fltr_fields = fltr_fields ~ folder.getFltrField1.getXMLName ~ ';' %}
		{% else %}
			{% set fltr_fields = fltr_fields ~ '0;' %}
		{% endif %}
		{% if folder.getFltrField2 %}
			{% set fltr_fields = fltr_fields ~ folder.getFltrField2.getXMLName ~ ';' %}
		{% else %}
			{% set fltr_fields = fltr_fields ~ '0;' %}
		{% endif %}
		{% if folder.getFltrField3 %}
			{% set fltr_fields = fltr_fields ~ folder.getFltrField3.getXMLName ~ ';' %}
		{% else %}
			{% set fltr_fields = fltr_fields ~ '0;' %}
		{% endif %}
		{% if folder.getFltrField4 %}
			{% set fltr_fields = fltr_fields ~ folder.getFltrField4.getXMLName %}
		{% else %}
			{% set fltr_fields = fltr_fields ~ '0' %}
		{% endif %}
	{% endif %}
	{% set ufltr_fields = '' %} 
	{% set ufltr_values = '' %}
	{% if user.getUserProfile.getFltrField1 %}
		{% set ufltr_fields = ufltr_fields ~ user.getUserProfile.getFltrField1.getXMLName ~ ';' %}
		{% set ufltr_values = ufltr_values ~ (user.getUserProfile.getFltrFieldVal1 ? user.getUserProfile.getFltrFieldVal1 ~ ';' : '') %}
	{% endif %} 
	{% if user.getUserProfile.getFltrField2 %}
		{% set ufltr_fields = ufltr_fields ~ user.getUserProfile.getFltrField2.getXMLName ~ ';' %}
		{% set ufltr_values = ufltr_values ~ (user.getUserProfile.getFltrFieldVal2 ? user.getUserProfile.getFltrFieldVal2 ~ ';' : '') %}
	{% endif %} 
	{% if user.getUserProfile.getFltrField3 %}
		{% set ufltr_fields = ufltr_fields ~ user.getUserProfile.getFltrField3.getXMLName ~ ';' %}
		{% set ufltr_values = ufltr_values ~ (user.getUserProfile.getFltrFieldVal3 ? user.getUserProfile.getFltrFieldVal3 ~ ';' : '') %}
	{% endif %} 
	{% if user.getUserProfile.getFltrField4 %}
		{% set ufltr_fields = ufltr_fields ~ user.getUserProfile.getFltrField4.getXMLName ~ ';' %}
		{% set ufltr_values = ufltr_values ~ (user.getUserProfile.getFltrFieldVal4 ? user.getUserProfile.getFltrFieldVal4 ~ ';' : '') %}
	{% endif %} 
	{% if ufltr_fields|length > 0 %}
		{% set ufltr_fields = ufltr_fields[:ufltr_fields|length - 1] %}
	{% endif %} 
	{% if ufltr_values|length > 0 %}
		{% set ufltr_values = ufltr_values[:ufltr_values|length - 1] %}
	{% endif %} 
	
	"fltrFieldNodes" : "{{ fltr_fields }}",
	"EnableFolderFiltering" : "{% if folder and folder.getFiltering %}1{% endif %}",
	"UserFltrFieldNodes" : "{{ ufltr_fields }}",
	"UserFltrFieldNodeVals" : "{{ ufltr_values }}",
	"RequirePDFCreator" : "",
	"UseContentPaging" : "{% if folder and folder.getPagingCount %}1{% endif %}",
	"MaxDocCount" : "{% if folder and folder.getPagingCount %}{{ folder.getPagingCount }}{% else %}100{% endif %}",
	"DisableBookmarks" : "{% if folder and folder.getDisableTCB == true %}1{% endif %}",
	"SessionDateFormat" : '{{ date_format|replace({'m' : 'MM', 'd' : 'DD', 'Y' : 'YYYY'}) }}',
	"MembersEnabled" : '',
	"PublicAccessEnabled" : '',
	"refreshView" : '{% trans %}Refresh view{% endtrans %}',
	"selectAll" : '{% trans %}Select All{% endtrans %}',
	"deselectAll" : '{% trans %}Deselect All{% endtrans %}',
	"expandAll" : '{% trans %}Expand All{% endtrans %}',
	"collapseAll" : '{% trans %}Collapse All{% endtrans %}',
	"sortAscending" : '{% trans %}Sort ascending{% endtrans %}',
	"sortDescending" : '{% trans %}Sort descending{% endtrans %}',
	"sortDefault" : '{% trans %}Default sort{% endtrans %}',
	"deleteColumn" : '{% trans %}Delete column{% endtrans %}',
	"insertColumn" : '{% trans %}Insert column{% endtrans %}',
	"appendColumn" : '{% trans %}Append column{% endtrans %}',
	"categorize" : '{% trans %}Categorize{% endtrans %}',
	"properties" : '{% trans %}Properties{% endtrans %}'
};
function getinfovar() {
	return info;
}

//Column actions, set as global to pass to Docova.menu function
var colAscSortAction="";
var colDescSortAction="";
var colDefaultSortAction="";
var colCategorizeAction="";
var colFreezeAction="";
var colDeleteAction="";
var colInsertAction="";
var colAppendAction="";
var colPropertiesAction="";

$(document).ready(function(){

	$('#tdActionBar a, #tdActionBar button').each(function(index,element) {
   		$(element).button({
			text: $.trim($(this).text()) ? true : false,
			label: $.trim($(this).text()),
			icons: {
		 		primary: ($.trim($(this).attr('primary'))) ? $(this).attr('Primary') : null,
				secondary: ($.trim($(this).attr('secondary'))) ? $(this).attr('secondary') : null
			}
		});
	});

	$("#btnFTSearch").button({
		text: false,	
		icons: { primary: "ui-icon-search"}
	}).click(function(event){
		ViewFTSearch();
	})

	$("#btnAdvancedSearch").button({
		text: false,
		icons: { primary: "ui-icon-zoomin"}
	}).click(function(event){
		AdvancedSearch();
	})
	
	$("#btnFTClear").button({
		text: false,
		disabled: true,
		icons: { primary: "ui-icon-arrowrefresh-1-e"}
	}).click(function(event){
		ViewFTClear();
	})
	
	$("#btnDelete").button({
		text: false,
		disabled: true,
		icons: { primary: "ui-icon-trash"}
	}).click(function(event){
		DeleteSearch();
	})	
	
	$("#btnClearAllFilters").button({
		text: false,
		icons: { primary: "ui-icon-arrowrefresh-1-e"}
	}).click(function(event){
		ClearAllFilters();
	})	

	$("#btnResetFolderFilter").button({
		text: false,
		icons: { primary: "ui-icon-refresh"}
	}).click(function(event){
		ResetFolderFilter();
	})			
	
	$("#inpSwitchPerspective").multiselect({
		multiple: false,
		header: false,		
		noneSelectedText: "Perspective",
		selectedList: 1,
		height: "auto"
	});		

	$("#selVersionScope").multiselect({
		multiple: false,
		header: false,		
		selectedList: 1,
		height: "auto",
		minWidth: 140
	});		
	
	$('input:text')
 		.button()
		.css({
			'font' : 'inherit',
			'color' : 'inherit',
			'text-align' : 'left',
			'outline' : 'none',
			'cursor' : 'text',
			'background' : '#ffffff',
			'padding' : '.35em'		
	}).off('keydown');
	$('input:text').hover( function() {$('input:text').css("background", "#ffffff")})
	
	$("#MySavedSearches").multiselect({
		multiple: false,
		header: false,		
		noneSelectedText: "My Saved Searches",
		selectedList: 1,
		height: "auto",
		showSelected: false
	});	
	$("#MySavedSearches").multiselect("clearSingle");
    
	$("button").not("#MySavedSearchesbtn, #inpSwitchPerspectivebtn, #selVersionScopebtn").button().click(function( event ) {	
		event.preventDefault();
	});
	
});   

function mayUserEditDoc(docID) {
	//supports folder context menu option 'Edit' and 'Edit in New Window'
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/DocumentServices?OpenAgent";
	var request="";
	request += "<Request>";
	request += "<Action>MAYUSEREDIT</Action>";
	request += "<Unid>" + docID + "</Unid>";
	request += "</Request>";	

	var httpObj = new objHTTP();
	if(!httpObj.PostData(request, url) || httpObj.status=="FAILED") {return false; }

	return httpObj.results[0];
}

//=================== Content Paging ==========================
var typingTimer;                //timer identifier 
 
//on keyup, start the countdown 
function triggerGetPage() { 
	clearTimeout(typingTimer);	
	typingTimer = setTimeout(getPage, 600);  
}  

function selText(obj){
	obj.select();
}

function getPage() {
	//if(doc.GetPage.value == "") {return}
	if(document.getElementById("GetPage").value == "") {return}
	//objView.docSubject = doc.GetPage.value;
	objView.docSubject = document.getElementById("GetPage").value;
	objView.exactMatch = false;
	if(docInfo.EnableFolderFiltering == "1"){
		//doc.CurrentFilterDiv.innerHTML = "";	
		$("#CurrentFilterDiv").html("")
		ClearAllColFilterFlags();
	}
	objView.getTotal = false;
	objView.Refresh(true,true,true);
}

var total = 0;
var count = 0;
var start = 1;
var currCnt = null;
var origCount = 0;	
var buttonsDisabled = null;

function disableContentPaging(disabled){
	if(buttonsDisabled == disabled) {return}
	//doc.divContentPaging.disabled = disabled;
	$("#divContentPaging").prop("disabled", true);
	var sKey = "";
	var rKey  = "";
	if(!disabled) { sKey = "-disabled"}
	if(disabled) { rKey = "-disabled"}
	for(x=1; x<=4; x++) {
		navImg = document.getElementById("fsp" + x)
		//imgName = navImg.src;
		imgName = $(navImg).prop("src");
		e = imgName.indexOf(sKey + ".gif");
		if(e == -1) {e = imgName.indexOf(".gif");}
		navImg.src = imgName.slice(0, e) + rKey + ".gif";
		buttonsDisabled = disabled;
	}
}

function initContentPagingVars() {
	if($("#divContentPaging").prop("disabled")) {return;}
	
	total = parseInt($("#totalCount").html());
	count = parseInt(objView.docCount);
	start = document.getElementById("startCount");
	currCnt = document.getElementById("currCount");
	if(origCount == 0) { origCount = parseInt(objView.docCount);}

	document.getElementById("GetPage").value = "";
	if(docInfo.EnableFolderFiltering == "1"){
		$("#CurrentFilterDiv").html("");	
		ClearAllColFilterFlags();
	}
	objView.getTotal = false;
}

function first(){
	initContentPagingVars();
	if(objView.startCount == 1) {return;}
	objView.startCount = 1;
	$(start).html(1);
	$(currCnt).html(objView.docCount);
	objView.Refresh(true,true,true);
	document.getElementById("GetPage").value = "";
}

function last(){
	initContentPagingVars();
	if(parseInt($(currCnt).html()) == total) {return;}
	var newStart = total - count;
	objView.startCount = newStart;
	$(start).html(newStart);
	objView.Refresh(true,true,true);
	$(currCnt).html(total);
}

function next(){
	initContentPagingVars();
	var newStart = parseInt($(start).html()) + parseInt(objView.docCount);
	if(newStart >= total) {return;}
	objView.startCount = newStart;
	$(start).html(newStart);
	var newCnt = (newStart-1) + parseInt(objView.docCount);
	if(newCnt > total) { newCnt = total; }
	$(currCnt).html(newCnt);
	objView.Refresh(true,true,true);
}

function previous(){
	initContentPagingVars();
	var newStart = parseInt($(start).html()) - parseInt(objView.docCount);
	if(newStart < 0) {return;}
	if(newStart < 1) {newStart = 1;}
	objView.startCount = newStart;
	$(start).html(newStart);
	var newCnt = (newStart-1) + parseInt(objView.docCount);
	if(newCnt < parseInt(objView.docCount)) { newCnt = objView.docCount; }
	if(newCnt > total) { newCnt = total; }
	$(currCnt).html(newCnt);
	objView.Refresh(true,true,true);
}

var myPopup = null;
try{myPopup = window.createPopup();}catch(err){};

function getDisplayCount(source){

	initContentPagingVars();	
	var content = "<div style=\"border:1 solid grey;\">";
	var sel = "";
	for(x=1; x<=4; x++) {
		sel = origCount * x;
		content += "<div onclick=\"parent.setDisplayCount('" + sel + "');\" onmouseover=\"this.style.background='#1E90FF';this.style.color='white'\" onmouseout=\"this.style.background='white';this.style.color='black'\">" +
		"<span style=\" font : normal 11px Verdana,  Arial, sans-serif;padding-left:1px\">" + sel + "</span></div>";
	}
	var adj = 0;
	valLength = currCnt.innerHTML.length;
	if(valLength == 3) { adj = 7 }
	showDocCountDiv.innerHTML = content + "</div>";
	var left = getOffset(source).left - 18 - adj ;
	var top = getOffset(source).top + source.offsetHeight
	myPopup.document.body.innerHTML = showDocCountDiv.innerHTML; 
	myPopup.show(left, top, 35 + adj, 60, document.body);
}

function setDisplayCount(selCount) {
	objView.docCount = selCount;
	objView.startCount = 1;
	start.innerHTML = 1;
	var newCnt = parseInt(objView.docCount);
	if(newCnt > total) { newCnt = total; }
	currCnt.innerHTML = newCnt;
	objView.Refresh(true,false,true);
}

//=================== Document Compare ==========================

function CompareSelectedWordDocuments(){

	var PDFCreatorAvailable = true;
	//check whether PDF Creator is installed, which is required to view the comparison results
	//unless the user has printing rights, in which case comparison results may be viewed in Word.
	if(!DLExtensions.isPDFCreatorInstalled()) { PDFCreatorAvailable = false; }
	
	//check whether PDF Creator is installed, which is required to view the comparison results
	if(PDFCreatorAvailable==false && docInfo.RequirePDFCreator) {
		alert("{% trans %}Unable to run document comparison.  PDF Creator is not installed.{% endtrans %}");
		return;
	}
	
	//get the docids that have been selected and validate two have been selected
	var docids = objView.selectedEntries;
	if((docids.length > 2) || (docids.length < 2)) {
		alert("{% trans %}Please select two documents to compare.{% endtrans %}");
		return;
	}
	
	saveCompareDocPath = CompareWordAttachments(docids);
	if(!saveCompareDocPath) {return;}

	if(docInfo.RequirePDFCreator) {		
		//ShowProgressMessage("Converting comparison results to PDF..." )
		Docova.Utils.showProgressMessage("{% trans %}Converting comparison results to PDF{% endtrans %}...");
		
		//------------------ convert the compare results to PDF ----------------------------------
		var pdfPath = DLExtensions.ConvertToPDF ( saveCompareDocPath, true, "");
		Docova.Utils.hideProgressMessage();
		
		//--------------- launch the pdf for viewing ----------------------------
		DLExtensions.LaunchFile(pdfPath);
	} else {
		//launch in Word
		Docova.Utils.hideProgressMessage();
		DLExtensions.LaunchFile(saveCompareDocPath);
	}	
}

function ResetMenu()
{
	if(aBar)
	{
		if(aBar.curSubactionParent) {aBar.resetSubactionPanel(); }
	}
}

//----- object presence testers ----
function HasUploaderResize()
{
	try	{
		if(SetUploaderDimensions){return true;}
	}
	catch (e)
	{
		return false;
	}
	return false;
}

function HasViewPane()
{
	try	{
		if(ViewLoadDefaultPerspective){return true;}
	}
	catch (e)
	{
		return false;
	}
	return false;
}
// ------------- preloads icons used in view object---------------

function PreloadBaseImages()
{
var curNsf = docInfo.ServerUrl + "{{ asset('bundles/docova/images/') }}";
var imgArray = new Array();
var imgNames = "cat-collapse.gif,cat-expand.gif,coloptions.gif,pincolumn.gif,viewRefreshGreen.gif,chkrbrdclosed.gif,chkrbrdopened.gif,icn16-stddoc.gif,icn16-unknowndoc.gif,icn16-webpage.gif,sortadred-default.gif,popmenu-check.gif";
var imgList = imgNames.split(",");

	for (k=0; k<imgList.length; k++)
	{
		imgArray[k] = new Image();
		imgArray[k].src = curNsf + imgList[k] + "?Open";
	}
}

//--------------------------------------Initializepage --------------------------
function InitPage()
{
	if(docInfo.isRecycleBin)
	{
		$("#labelViewOptions").prop("disabled", true);
		$("#inpViewScope").prop("disabled", true);
		$("#selVersionScope").prop("disabled", true);
	}
	if(docInfo.SyncNav){
		try{
			var navFrame = parent.frames['fraLeftFrame'];
			navFrame.SyncFolderContent();
		}
		catch(e) {}
	}

	ViewSetOnloadState();
	ViewLoadDefaultPerspective();
	ViewOpenDoc();
	
	if(objView.contentPaging) {
		$("#totalCount").html(objView.totalDocCount);
	}	
	checkAvailableHeight();
	jQuery(window).on("resize", checkAvailableHeight);
}

// ------------- sets the view object and loads default view perspective---------------
function ViewLoadDefaultPerspective()
{
	objView = new ObjView("divViewContent");
	objView.imgPath = "{{ asset('bundles/docova/images/') }}";
	objView.iconBaseUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/";
	objView.baseUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/";
	if (docInfo.isRecycleBin) {
		objView.baseXmlUrl=docInfo.ServerUrl + "/" + docInfo.NsfName + "/readrecycledataview.xml?LibraryID=" + docInfo.LibraryKey ;
	}
	else {
		objView.baseXmlUrl=docInfo.ServerUrl + "/" + docInfo.NsfName + "/readfolderdataview.xml?OpenAgent";
	}
	//objView.baseXmlUrl=docInfo.ServerUrl + "/" + docInfo.NsfName + "/readfolderdataviewqs.xml?OpenAgent" ;
	//objView.isXmlDataRequest=false;
	
	objView.folderID = docInfo.FolderID; 
	objView.columnPropertiesDialogUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/dlgViewColumnProperties?OpenForm&FolderID=" + docInfo.FolderID+ "&LibraryID=" + docInfo.LibraryKey; 
	objView.serverName=ServerName;
	objView.nsfName=NsfName;
	objView.serviceAgent=docInfo.ServerUrl + "/" + docInfo.NsfName + "/ViewServices?OpenAgent";
	objView.dateFormat = docInfo.SessionDateFormat;
	
	if(docInfo.UseContentPaging == "1") {	
		objView.contentPaging = true;
		objView.docCount = docInfo.MaxDocCount;
	}
	ViewLoadPerspective();
	ViewAttachEvents();
}


// ======================= view event handlers =======================

//Global varables
var dragSourceColumn; //column heading being dragged into new location
var dragTargetColumn; //target column heading for dragover and drop 
var selectDragMode; //specifies how the drag selection over checkboxes should be handled
var viewContainer ; //object where the view contents will be plugged
mouseX; //mouse coordinates
mouseY;
// event attacher

function ViewAttachEvents()
{
	var paneObj = document.getElementById("divViewEventCapture");
	if(!paneObj) {return false;}
	$(paneObj).on("mousedown", function(e){ e.stopPropagation();ViewHandleEvent(e) })
	$(paneObj).on("dblclick", function(e){ e.stopPropagation(); e.stopImmediatePropagation();; ViewHandleEvent(e);   });
	//$("#divViewEventCapture").on("keydown", function(e){ ViewHandleEvent(e); })
	//$(paneObj).on("contextmenu", function(e){ e.preventDefault(); ViewHandleEvent(e); })
}


//=====================  event dispatcher ===========================
function ViewHandleEvent(event)
{
	var eventSource = event.target;
	var eventType = event.type; 
	var sourceClass=$.trim(eventSource.className); 
	var sourceId=$.trim(eventSource.id); 
	var keyCode = event.keyCode;
	var currentRow; //table row containing the eventSource
	var sourceType="";

	if(!eventSource){return;}
	
	currentRow = $(eventSource).closest("TR").get(0);

	 if (  $(eventSource).hasClass("far") ||$(eventSource).hasClass("fas") ||$(eventSource).hasClass("fab")  )
	 {
		if ( $(eventSource).hasClass(objView.categoryExpandClass) || $(eventSource).hasClass(objView.categoryCollapseClass) )
		{
			ViewEventDispatch(event, eventType, eventSource, "categorytoggle", keyCode, currentRow);
			return;
		}else if ($(eventSource).hasClass("fa-sync")  ){
			ViewEventDispatch(event, eventType, eventSource, "viewrefresh", keyCode);
			 return;
		}else if ( $(eventSource).hasClass("sorting")){
			 ViewEventDispatch(event, eventType, eventSource, "viewsort", keyCode);
			 return;
		}
	 }

	//------------------ check if there are any event handlers for the event source --------
	//------------- clickable images
	if($(eventSource).prop("tagName") == "IMG" ) 
		{
			if(sourceClass=="listsorticon")
				{
					 ViewEventDispatch(event, eventType, eventSource, "viewsort", keyCode);
					 return;
				}
				
				else if ( sourceClass=="reflection" || sourceClass=="content portray" || sourceClass=="content landscape"){
					 ViewEventDispatch(event, eventType, eventSource, "coverflow", keyCode, currentRow);
					 return;
				}
			
			else if(sourceClass=="listviewrefresh")
				{
					 ViewEventDispatch(event, eventType, eventSource, "viewrefresh", keyCode);
					 return;
				}
			else if(sourceClass=="listexpandericon")
			{
					ViewEventDispatch(event, eventType, eventSource, "categorytoggle", keyCode, currentRow);
					return;
			}else if ( sourceClass=="shadow"){
					eventSource = eventSource.parentNode;
					currentRow = eventSource;
					ViewEventDispatch(event, eventType, eventSource, "thumbnail", keyCode, currentRow);
			}		
		}
	
	//------------ input fields		
	if($(eventSource).prop("tagName") == "INPUT" )  
			{
				if(sourceId=="inpQuery")
					{
					 	ViewEventDispatch(event, eventType, eventSource, "ftquery", keyCode);
					 	return;
					}
				if(sourceId=="GetPage") {
					 	return;
				}
				if(sourceId == "ExportSelectCb"){
						ViewEventDispatch(event, eventType, eventSource,  "selectcell", keyCode, currentRow);
						return;
				}
			}

	//------------ cells/rows
	if(eventSource.tagName == "TD" || eventSource.tagName == "TH" || eventSource.tagName =="SPAN" )
		{
			if ( sourceClass == "thumbnail" ) {
					currentRow = eventSource;
					ViewEventDispatch(event, eventType, eventSource, "thumbnail", keyCode, currentRow);
					return;
			}
			if(sourceClass=="listheader" || sourceClass=="listheaderfr" || sourceClass=="listheaderfltr" || sourceClass=="listheaderfrfltr") //column heading
				{
					ViewEventDispatch(event, eventType, eventSource, "viewheader", keyCode, currentRow);
					return;
				}
			else if(sourceClass=="listselheader") //selection column heading
				{
					ViewEventDispatch(event, eventType, eventSource, "viewselectheader", keyCode, currentRow);
					return;
				}
			else if(sourceClass=="listitem" || sourceClass=="listitemfr") //data or total cell
				{
					if($(currentRow).attr("isRecord"))
						{		
							ViewEventDispatch(event, eventType, eventSource, "datarow", keyCode, currentRow);
							return;
						}										
					if($(currentRow).attr("isCategory")) 
						{
							ViewEventDispatch(event, eventType, eventSource, "categoryrow", keyCode, currentRow);
							return;
						}
					if($(currentRow).attr("isSubtotal"))
						{
							ViewEventDispatch(event, eventType, eventSource, "subtotalrow", keyCode, currentRow);
							return;
						}
					if($(currentRow).attr("isTotal"))
						{
							ViewEventDispatch(event, eventType, eventSource, "totalrow", keyCode, currentRow);
							return;
						}
				}
			else if(sourceClass=="listcat" || sourceClass=="listcatfr") //category heading cell
				{
					ViewEventDispatch(event, eventType, eventSource,  "categoryrow", keyCode, currentRow);
					return;
				}
			else if(sourceClass=="listsel") //selection margin cell
				{
					ViewEventDispatch(event, eventType, eventSource,  "selectcell", keyCode, currentRow);
					return;
				}
		}

		ViewEventDispatch(event, eventType, eventSource,  "", keyCode, currentRow);
}

//------------------ dispatch event handler based on event source and type --------
function ViewEventDispatch(event, eventType, eventSource, sourceType, keyCode, currentRow)
{

	if(eventType=="mousemove")
	{
		if(sourceType=="selectcell") {ViewDocSelectDrag(eventSource, event.which);return CancelEvent();} //doc selection column
		if(sourceType=="viewheader" ) {ViewColumnDrag(eventSource);return CancelEvent();} //doc selection column
	}
	else if(eventType=="mousedown" && (event.which == 1 || event.which == 3)) //left mouse button or right mouse button
	{
		$("#divViewEventCapture").focus();
		if(sourceType=="selectcell"){ViewDocSelectClick(eventSource);} //doc selection column
		if(sourceType=="viewsort") {ViewSortColumn(eventSource);}
		if(sourceType=="viewrefresh" || sourceType=="viewselectheader")
		{ //view refresh icon
			if(docInfo.EnableFolderFiltering == "1")
			{
				$("#divViewContent").css("display", "none");
				objView.Refresh(true,false,true,false,true);
				$("#divViewContent").css("display", "");
			}else{
				objView.Refresh(true, false, true);
			}
		} 
		if(sourceType=="categorytoggle") {ViewToggleCategory(currentRow);}
		if(sourceType=="datarow" || sourceType=="subtotalrow" || sourceType=="categoryrow" || sourceType=="thumbnail")
		{	
			ViewHighlightEntry(currentRow);
		}
		if(sourceType=="viewheader" ) {ViewColumnSelectFilter(eventSource);}	
	}
	else if(eventType=="mouseover")
	{
		if(sourceType=="viewheader" ) {ViewColumnDragOver(eventSource);}
	}
	else if(eventType=="mouseup")
	{
		if(sourceType=="viewheader" ) {ViewColumnDragDrop(eventSource, eventType);}
		return ViewClearEventState();
	}
	else if(eventType=="click")
	{
		return CancelEvent();
	}
	else if(eventType=="dblclick" )
	{
		if(sourceType=="datarow") {ViewLoadDocument(false);}
		if(sourceType=="categoryrow" ) {ViewToggleCategory(currentRow);}	
		if(sourceType=="thumbnail"){ViewLoadDocument(false);}
		if(sourceType=="coverflow"){ViewHighlightEntry(currentRow);ViewLoadDocument(false);}
	}
	else if(eventType=="mouseout")
	{
		return ViewClearEventState();
	}
	else if(eventType=="keydown")
	{
		ViewHandleKeyboardEvent(eventType, eventSource, sourceType, keyCode, currentRow);
	}
	else if(eventType=="selectstart")
	{
		if(sourceType !="ftquery") {return CancelEvent();}
	}
	else if(eventType=="contextmenu")
	{
		if(sourceType=="datarow" || sourceType=="subtotalrow" || sourceType=="categoryrow" || sourceType =="thumbnail" ) {ViewHighlightEntry(currentRow);}
		if(sourceType=="datarow"){CreateEntrySubmenu(eventSource);}
		if(sourceType=="thumbnail"){CreateThumbnailsSubmenu(eventSource);}
		if(sourceType=="viewheader" || sourceType=="viewselectheader" || sourceType=="viewrefresh") {ViewShowContextPopup(sourceType, eventSource);
		return CancelEvent();
	}
		return CancelEvent();
	}
}

// ------------------------------------ document list key handlers ------------------------------------------------

function ViewHandleKeyboardEvent(eventType, eventSource, sourceType, keyCode, currentRow)
{
	var DEL_KEY = 46;
	var ENTER_KEY = 13;
	var DOWNARROW_KEY = 40;
	var UPARROW_KEY = 38;
	var F9_KEY = 120;
	var SPACE_KEY= 32;
	var ESC_KEY= 27;

	//The keydown event.target is different in different browsers. Use view object currentEntry to re-set currentRow
	//and sourceType
	currentRow = $("#divViewEventCapture").find("#" + objView.currentEntry).get(0);
	if($(currentRow).attr("isRecord")){sourceType = "datarow";}
	if($(currentRow).attr("isCategory")){sourceType = "categoryrow";}
	if($(currentRow).attr("isSubtotal")){sourceType = "subtotalrow";}
	if($(currentRow).attr("isTotal")){sourceType = "totalrow";}

	
	if(keyCode == DEL_KEY)
	{
		if(docInfo.CanDeleteDocuments) {
			if(sourceType=="datarow" ){
				if(docInfo.EnableFolderFiltering == "1"){
					objView.DeleteSelectedEntries();
					$("#divViewContent").css("display", "none");
					ApplyFolderFilter(true);
					$("#divViewContent").css("display", "");
				}else{
					objView.DeleteSelectedEntries();
				}
			}
		}
	}
	else if(keyCode == ENTER_KEY)
	{
		if(sourceType=="datarow" && objView.currentEntry != "") //process entry only if it is highlighted
		{
			ViewLoadDocument(false);
		}
		if(sourceType=="categoryrow" || sourceType== "categorycell") {ViewToggleCategory(currentRow);}	
		if(sourceType=="ftquery") {ViewFTSearch();}
	}
	else if(keyCode == DOWNARROW_KEY)
	{
		if(sourceType=="datarow" || sourceType=="categoryrow" || sourceType=="subtotalrow")
		{
			ViewMoveDocHighlight("down");
		}
	}
	else if(keyCode == UPARROW_KEY)
	{
		if(sourceType=="datarow" || sourceType=="categoryrow" || sourceType=="subtotalrow")
		{
			ViewMoveDocHighlight("up");
		}
	}
	else if(keyCode == ESC_KEY)
	{
		if(sourceType=="datarow" || sourceType=="categoryrow" || sourceType=="subtotalrow" && objView.currentEntry != "") //select the entry only if it is highlighted
			{
				ViewResetEntryHighlight();
			}
		if(sourceType=="ftquery") {ViewFTClear(); $("#inpQuery").focus();}	
	}
	else if(keyCode == F9_KEY)
	{
		objView.Refresh(true, false, true);
	}	
	else if(keyCode == SPACE_KEY)
	{
		if(sourceType=="datarow" && objView.currentEntry != "") //select the entry only if it is highlighted
			{
				ViewDocSelectClick(document.getElementById(objView.currentEntry));
			}
		if(sourceType=="categoryrow" || sourceType== "categorycell") {ViewToggleCategory(currentRow);}	
		if(sourceType=="ftquery"){return;} //let it go
		 ViewClearEventState();
		CancelEvent(); //handled
	}
}


//===================== Event handler functions ===================

//----------------------------- highlight entry on click -------------------
function ViewHighlightEntry(source)
{
	if(!source) {return false;}
	objView.HighlightEntryById(source.id);
	CancelEvent();
}

//----------------------------- un-highlight entry on ESC key -------------------
function ViewResetEntryHighlight()
{
	objView.ResetHighlight();
}

//----------------------------- up/down keys on highlighted entry ------------------------
function ViewMoveDocHighlight(dir) //up/down arrow key handler
{
	objView.MoveEntryHighlight(dir) ;
	return CancelEvent();
}


// ----- called to refreesh the view after adding/editing a document --------------
function ViewReload(selectDoc)
{
	if(selectDoc) {objView.currentEntry = selectDoc;}
	objView.queryOptions = ViewGetQueryOptions();
	
	//-----If view is being filtered, reapply the filter-----
	if(docInfo.EnableFolderFiltering == "1"){
		$("#divViewContent").css("display", "none");	
		objView.Refresh(true,false,true);
		ApplyFolderFilter(true);
		$("#divViewContent").css("display", "");
	}else{
		objView.Refresh(true,false,true);
	}
}


//---- open specific document after opening the folder ---------
function ViewOpenDoc()
{
	try{
		if(docInfo.LoadDoc) {
			objView.HighlightEntryById(docInfo.LoadDoc);
		}
	
		if(docInfo.DocumentTypeOption=="N" && !docInfo.isRecycleBin){
			infoUrl=docInfo.ServerUrl + "/" + docInfo.NsfName + "/wFolderInfo?OpenForm&ParentUNID=" + docInfo.DocID;
			ViewLoadDocument(infoUrl);
		}

		if(docInfo.LoadDoc){
			(objView.currentEntry)? ViewLoadDocument() : OpenDocumentWindow(docInfo.LoadDoc);
		} //currentEntry will be set only if it can be located in the list
	}catch(err){}
}

//----------------  open/close document handlers -----------------------
function ViewLoadDocument(docUrl, docTypeName, isNewDoc, editMode)
{
	if(docInfo.isRecycleBin) // documents in recycle bin cannot be opened, just the properties dialog is displayed
	{
		
		return;
	}
	window.external.DOE_OpenDoc( objView.currentEntry);
	
	
}

function OpenDocumentWindow(docID, editMode) {
	var targetUnid=(docID)? docID : objView.currentEntry;
	if(!targetUnid){return false;}
	var action = "Open";
	if(editMode) { 
		//need to check if user is authorized to edit
		if(!mayUserEditDoc(objView.GetCurrentEntry().entryId)) {
			Docova.Utils.messageBox({
				title: "{% trans %}Not Authorized{% endtrans %}",
				prompt: "{% trans %}You are not authorized to edit this document.{% endtrans %}",
				icontype: 1,
				msgboxtype: 0
			});
			return
		}
		action = "Edit"; 
	}
	if (action == "Open") {
		var docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/ReadDocument/" + targetUnid + "?OpenDocument&ParentUNID=" + docInfo.DocID + "&mode=window";
	}
	else {
		var docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/EditDocument/" + targetUnid + "?editDocument&mode=window";
	}

	var leftPosition = (screen.width) ? (screen.width-700)/2 : 20;
	var topPosition = (screen.height) ? (screen.height-500)/2 : 20;
	dlgSize = "height=500,width=700,top=" + topPosition+ ",left=" + leftPosition;
	var dlgSettings = dlgSize + ",status=no,toolbar=no,menubar=no,location=no,scrollbars=yes,resizable=yes";
	return window.open(docUrl,targetUnid,dlgSettings); //Display the address dialog
}

function OpenFileWindow(filename){
	var targetUnid=objView.currentEntry;
	if(!targetUnid){return false;}
	
	var docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/ReadDocument/" + targetUnid + "/$file/" + filename + "?open&" + Math.random();

	return window.open(docUrl); //Display the address dialog

}

function ViewUnloadDocument(refreshView, selectDocId)
{
	ViewSetTitleOptions("Folder: " + docInfo.FolderName);
	window.parent.fsContentFrameset.rows = "*,0";	

	if(refreshView) 
		{
			ViewReload(selectDocId);
			return;
		}
		
	if(objView.currentEntry != "") 
		{
			objView.HighlightEntryById(objView.currentEntry);
		}
	else
		{
			$("#divViewContent").focus();
		}
	var curContentUrl = window.parent.fraContentBottom.location.href;
	if(curContentUrl.indexOf("/BlankContent?")==-1){
		var contentUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/" +  "BlankContent?OpenPage";
		window.parent.fraContentBottom.location.href=contentUrl ;
	}
}

//------------ perspective handlers -----------------------------

function ViewLoadPerspective()
{
	var perspectiveId = (currentPerspective)? currentPerspective : docInfo.DefaultPerspective;
	var el = document.getElementById("xmlViewPerspective");
	if(! el){
		return;
	}
	var perspectiveDocXml = el.textContent || el.innerText || el.nodeValue || el.innerHTML;	
	objView.SetViewParams(perspectiveDocXml);

	var perspectiveDoc = (new DOMParser()).parseFromString(perspectiveDocXml, "text/xml");
	if(Sarissa.getParseErrorText(perspectiveDoc) != Sarissa.PARSED_OK){  
  		var errorText = Sarissa.getParseErrorText(perspectiveDoc);
		alert("{% trans %}Error parsing xsl{% endtrans %}: " + errorText);
		perspectiveDoc = null;
		return;
	}					
	var isAutoCollapseNode = perspectiveDoc.selectSingleNode("viewperspective/autocollapse");
	if (isAutoCollapseNode == null){
		var isAutoCollapse = "0";
	}else{
		var isAutoCollapse = isAutoCollapseNode.textContent || isAutoCollapseNode.text;
	}
	
	jQuery("#inpSwitchPerspective").val(perspectiveId);
	ViewHighlightDefaultPerspective();
	objView.queryOptions = ViewGetQueryOptions();

	if(isAutoCollapse == "1"){
		$("#divViewContent").css("display", "none");
		if(docInfo.EnableFolderFiltering == "1"){ //Initialize and apply default filtering if enabled	, last "true" parameter on the .Refresh
			objView.Refresh(true,true,true,true,true);
		}else{
			objView.Refresh(true,true,true);
		}
		objView.CollapseAll();
		$("#divViewContent").css("display", "");
	} else {
	
		if(docInfo.EnableFolderFiltering == "1"){ //Initialize and apply default filtering if enabled, last "true" parameter on the .Refresh
			$("#divViewContent").css("display", "none");
			objView.Refresh(true,true,true,true,true);
			$("#divViewContent").css("display", "");
		}else{
			objView.Refresh(true,true,true);
		}
	}
}

function ViewHighlightDefaultPerspective()
{
	var selectBox = document.getElementById("inpSwitchPerspective");
	for(var i=0; i<selectBox.options.length; i++)
		{
			var optcolor = $(selectBox.options[i]).val() == docInfo.DefaultPerspective ? "#ff0000" : "";
			$(selectBox.options[i]).css("color",  optcolor);
		}
}

function ViewSwitchPerspective(perspectiveId)
{
	var processPerspective = false;
	var url = "";
	
	if(! perspectiveId) {return;}
	var el = document.getElementById("xmlViewPerspective");
		if(! el){
		return;
	}	

	var idParts = perspectiveId.split("_");
	if(idParts[0] == "system" || idParts[0] == "custom") //system perspectives are stored in the home database
	{
		var url=  docInfo.ServerUrl + docInfo.PortalWebPath + "/perspectives.xml?OpenPage&pid=" + idParts[1];	
		processPerspective = true;
	}
	else if(idParts[0] == "user") //user perspectives are stored in super cookie
	{
		return;
	}
	else //unknown location
	{
		return;
	}
	
	if(processPerspective) {
		$.ajax({
			'type' : "GET",
			'url' : url,
			'contentType': false,
			'async' : false,
			'dataType' : 'text'
		})
		.done(function(data) {
			if(!data) {
				obj.status="FAILED";
				obj.error = "No data received from server";
				return false;
			} else {
				var parser = new DOMParser();
				Sarissa.updateContentFromNode(parser.parseFromString(data,"text/xml"), el);
			}
		});
	}	

	currentPerspective = perspectiveId;
	ViewLoadPerspective();
}

function ShowPerspectiveProperties(clickSrc)
{
	var perspectiveDoc = doc.xmlViewPerspective.XMLDocument;
	var perspectiveDocXml = "";
	if(!perspectiveDoc)	{return false;}
	
	var descNode = perspectiveDoc.selectSingleNode("viewperspective/description");
	var nameNode = perspectiveDoc.selectSingleNode("viewperspective/name");
	var typeNode  = perspectiveDoc.selectSingleNode("viewperspective/type");
	var authorNode = perspectiveDoc.selectSingleNode("viewperspective/createdby");
	var createdNode = perspectiveDoc.selectSingleNode("viewperspective/createddate");
	var modifiedNode = perspectiveDoc.selectSingleNode("viewperspective/modifiedby");
	var modDateNode = perspectiveDoc.selectSingleNode("viewperspective/modifieddate");
			
	oPopup = window.createPopup();
	var popupHtml = '<div style="width:100%; height: 100%;background-color: white margin: 0px; scroll:no; border: solid 1px #7DA5E0;">';
	popupHtml += '<div style="width:100%; height: 18px; filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0, StartColorStr=\'#C8DFFB\', EndColorStr=\'#7DA5E0\'); font: 11px verdana,arial; padding: 2px 0px 2px 4px;"';
	popupHtml += '>';
	popupHtml += '<div style="float:left;">' + nameNode.text + '</div>';
	popupHtml += '<img style="float:right; background-color: #dd2200;" src="' + docInfo.ServerUrl + "/" + docInfo.NsfName + '/vpclose.gif"  onclick="document.oPopup.hide();"/>'; 
	popupHtml += '</div>';
	popupHtml += '<div style="width:100%; height: 150px; font: 11px verdana,arial; padding: 4px;">';
	popupHtml += '{% trans %}Type{% endtrans %}: ' + typeNode.text;
	popupHtml += '<br>{% trans %}Created by{% endtrans %}: ' + authorNode.text;
	popupHtml += '<br>{% trans %}Created on{% endtrans %}: ' + createdNode.text;
	popupHtml += '<br>{% trans %}Modified by{% endtrans %}: ' + modifiedNode.text;
	popupHtml += '<br>{% trans %}Modified on{% endtrans %}: ' + modDateNode.text;
	popupHtml += '<br>{% trans %}Description{% endtrans %}:<br>' + descNode.text;
	popupHtml += '</div>';
	popupHtml += '</div>';
	oPopup.document.oPopup = oPopup;
	oPopup.document.body.innerHTML = popupHtml; 
	oPopup.show(0,0, 220, 174, doc.inpSwitchPerspective);
}

function ViewSavePerspective()
{
	currentPerspective = $("#inpSwitchPerspective").val();
	var el = document.getElementById("xmlViewPerspective");
	if(! el){
		return;
	}

	var perspectiveXml = el.textContent || el.innerText || el.nodeValue || el.innerHTML;	
	var parser = new DOMParser;
	var perspectiveDoc = parser.parseFromString(perspectiveXml, "text/xml");

	var descNode = perspectiveDoc.selectSingleNode("viewperspective/description");
	var nameNode = perspectiveDoc.selectSingleNode("viewperspective/name");
	var autocollapseNode = perspectiveDoc.selectSingleNode("viewperspective/autocollapse");
	var typeNode  = perspectiveDoc.selectSingleNode("viewperspective/type");
	var unidNode  = perspectiveDoc.selectSingleNode("viewperspective/Unid");
	var idNode = perspectiveDoc.selectSingleNode("viewperspective/id");
	var libScope = perspectiveDoc.selectSingleNode("viewperspective/libscope");
	var libDefault = perspectiveDoc.selectSingleNode("viewperspective/libdefault");
	var dlgParams = new Array();
	dlgParams[0] = typeNode.text;
	dlgParams[1] = nameNode.text;
	dlgParams[2] = descNode.text;
	dlgParams[3] = unidNode.text;
	dlgParams[4] = idNode.text;
	dlgParams[5] = (libScope)? libScope.text : "";
	dlgParams[6] = (libDefault)?  libDefault.text : "";
	dlgParams[7] = (currentPerspective==docInfo.DefaultPerspective);	
	dlgParams[8]= (autocollapseNode)? autocollapseNode.text : "0";
	var dlgSettings = "dialogHeight: 560px; dialogWidth: 500px; dialogTop: px; dialogLeft: px; edge: raised; ";
	dlgSettings += "center: Yes; help: No; resizable: No; status: No;";

	var dlgUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/dlgSavePerspective?OpenForm&ParentUNID=" + docInfo.DocID;
	var retVal = window.showModalDialog(dlgUrl,dlgParams,dlgSettings);
	if(!retVal) {return false;} //dialog cancelled
			
	//--- processing agent url
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/FolderServices?OpenAgent";
	var request="";
		
	//--build the update request	
	request += "<Request>";
	request += "<Action>" + retVal["action"] + "</Action>";
	request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "<Unid>" + docInfo.DocID + "</Unid>";
	request += retVal["requestoptions"];
	request += "<viewperspective>";
	request += retVal["pespectiveoptions"];
	request += objView.GetViewParams();
	request += "</viewperspective>";
	request += "</Request>";	

	var httpObj = new objHTTP();
	if(!httpObj.PostData(request, url) || httpObj.status=="FAILED"){return false;}
	var perspectiveID=(currentPerspective)? currentPerspective : docInfo.DefaultPerspective;  // for facet map
	if(retVal["action"] == "NEWPERSPECTIVE" && httpObj.resultCount > 0) //added new perspective (save as action)
		{
			//add new perspective to the selection without reloading the view
			var newId = httpObj.results[0];
			var selectBox = document.getElementById("inpSwitchPerspective");
			var newOpt = document.createElement ("OPTION"); 
			selectBox.options.add (newOpt );
			$(newOpt).css("backgroundColor", "#C8DFFB");
			$(newOpt).html(retVal["name"]);
			$(newOpt).val(retVal["type"] + "_" + newId); 
			$(newOpt).prop("selected", true);
			if(retVal["makedefault"])
				{
					docInfo.DefaultPerspective = retVal["type"] + "_" + newId; 
				}
			ViewHighlightDefaultPerspective();
			ViewSwitchPerspective(retVal["type"] + "_" + newId)
		}
		else
		{
		}
}

function ViewDeletePerspective()
{
var perspectiveDoc = doc.xmlViewPerspective.XMLDocument;
var perspectiveDocXml = "";
	if(perspectiveDoc)
		{
			var typeNode  = perspectiveDoc.selectSingleNode("viewperspective/type");
			var unidNode  = perspectiveDoc.selectSingleNode("viewperspective/Unid");

			var dlgParams = new Array();
			dlgParams[0] = typeNode.text;
		
			var dlgSettings = "dialogHeight: 170px; dialogWidth: 280px; dialogTop: px; dialogLeft: px; edge: raised; "
			dlgSettings += "center: Yes; help: No; resizable: No; status: No;"

			var dlgUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/dlgDeletePerspective?OpenForm&ParentUNID=" + docInfo.DocID;
			var retVal = window.showModalDialog(dlgUrl,dlgParams,dlgSettings);
			if(!retVal) {return false;} //dialog cancelled

			//--- processing agent url
			var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/FolderServices?OpenAgent";
			var request="";
		
			//--build the update request	
			request += "<Request>";
			request += "<Action>" + retVal["action"] + "</Action>";
			request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
			request += "<Unid>" + docInfo.DocID + "</Unid>";
			request += "<viewperspective>";
			request += "<type>" + typeNode.text + "</type>";			
			request += "<Unid>" + unidNode.text + "</Unid>";
			request += "</viewperspective>";
			request += "</Request>";	

			var httpObj = new objHTTP();
			if(!httpObj.PostData(request, url) || httpObj.status=="FAILED"){return false;}
			location.replace(location.href);
			return true;
		}
}
//-------- column drag and drop --------------------
function ViewColumnDragStart(source)
{

}

function ViewColumnDrag(source)
{

}
function ViewColumnDragOver(source)
{

}
function ViewColumnDragDrop(source)
{

}

//-------- clipboard functions --------------------

function ViewCopySelected()
{
	if(objView.currentEntry =="" && objView.selectedEntries.length == 0) {return false;};
	ViewSetClipboard("copy");
}

function ViewCutSelected()
{
	if(objView.currentEntry =="" && objView.selectedEntries.length == 0) {return false;};
	ViewSetClipboard("cut");
}

function ViewSetClipboard(action)
{
	if(objView.currentEntry =="" && objView.selectedEntries.length == 0) {return false;};

	var clipdata="<srclibkey>" + docInfo.LibraryKey + "</srclibkey>";
	clipdata += "<srcfolderid>" + docInfo.FolderID + "</srcfolderid>"; // source folder id for refresh
	if(objView.selectedEntries.length > 0)
		{
			for(var k=0; k<objView.selectedEntries.length; k++)
				{
					clipdata+="<Unid>" + objView.selectedEntries[k] + "</Unid>";
				}
		}
		else
		{
			clipdata+="<Unid>" + objView.currentEntry  + "</Unid>";
		}

	Docova.Utils.setCookie({ keyname: "clipaction", keyvalue: action });
	Docova.Utils.setCookie({ keyname: "clipdata", keyvalue: clipdata });
}
function ViewPasteSelected()
{
	var clipdata = Docova.Utils.getCookie({ keyname: "clipdata", httpcookie: true });
	if(clipdata == "") {return false;}
	var action = Docova.Utils.getCookie({keyname: "clipaction", httpcookie: true });
	var request = "<Request>";
	request += "<Action>PASTE</Action>";
	request += "<clipaction>" + action + "</clipaction>";
	request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "<targetfolder>" + docInfo.FolderID + "</targetfolder>";
	request += clipdata;
	request += "</Request>";	

	if(action == "cut"){ //paste after cut is a one time shot
		var tmpXMLDocument =new ActiveXObject("Microsoft.XMLDOM");
		tmpXMLDocument.loadXML("<dummy>" + clipdata + "</dummy>");
		var node = tmpXMLDocument.documentElement.selectSingleNode("srcfolderid");
		if ( node != null ){
			var folderid = node.text.substring(2);
			if (window.parent.fraTabbedTable){ 
				window.parent.fraTabbedTable.objTabBar.RefreshHelper.AddFolderToRefreshList(folderid, ""); // added for source folder refresh
			}
		}
		Docova.Utils.showProgressMessage("{% trans %}Moving documents. Please wait{% endtrans %}...");
		Docova.Utils.setCookie({ keyname: "clipaction", keyvalue: "", httpcookie: true })
		Docova.Utils.setCookie({ keyname: "clipdata", keyvalue: "", httpcookie: true })
	} else {
		Docova.Utils.showProgressMessage("{% trans %}Pasting documents. Please wait{% endtrans %}...");
	}

	//--- processing agent url
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/ViewServices?OpenAgent";
	var httpObj = new objHTTP();

	var retStatus = httpObj.PostData(request, url);
	Docova.Utils.hideProgressMessage();
	
	if(!retStatus ){return false;}
	objView.queryOptions = ViewGetQueryOptions();
	
	if(docInfo.EnableFolderFiltering == "1"){
		$("#divViewContent").css("display", "none");
		objView.Refresh(true, false, true);
		ApplyFolderFilter(true);
		$("#divViewContent").css("display", "");
	}else{
		objView.Refresh(true, false, true);
	}
}

// ------------------------------------- selection checkbox handlers ------------------------------------------------------

function ViewDocSelectClick(source)
{
	if(!source) {return CancelEvent();}

	currentRow = $(source).closest("TR").get(0);
	parentRow = currentRow;

	if(!$(parentRow).attr("isRecord")) {return CancelEvent();}

	var chkbox = $(currentRow).find("INPUT").get(0);
	if( !$(chkbox).prop("checked"))
		{
		$(parentRow).attr("isChecked", true);
		if(chkbox) {objView.ToggleSelectEntryById($(parentRow).prop("id"), "check");}
		}
	else
	{
		$(parentRow).attr("isChecked", false);
		if(chkbox) {objView.ToggleSelectEntryById($(parentRow).prop("id"), "uncheck");}
	}

	return CancelEvent(); //handled
}

//--------------------------------------------- selecting documents by dragging mouse over selection boxes ------
function ViewDocSelectDrag(source, mouseButton)
{
	if(!source) {return false;}

if (mouseButton == 0 || mouseButton == 1)
	{
	var parentRow  = source.parentElement; //check if the handler should continue
	if((selectDragMode=="check" && parentRow.isChecked) || (selectDragMode=="uncheck" && !parentRow.isChecked))
		{
			return; //handled
		}
		else
		{
			ViewDocSelectClick(source); //call check handler
		}
	}
	return CancelEvent(); //handled
}

 
//--------------------------------------------- column sorting ----------------------------------------------------

function ViewSortColumn(source)
{
	var  colIdx = source.id.split("-")[1];
	objView.ToggleCustomSort(colIdx);
	return CancelEvent();
}

//--------------------------------------------- expand/collapse category ----------------------------------------------------

function ViewToggleCategory(currentRow)
{
	objView.ToggleCategory(currentRow.id);
	return CancelEvent();
}

//-------------------------------------- view header toolbars show/hide handler -------------------------------
function ViewToggleToolbar(toolbar, action)
{
	var toolbarObj = document.getElementById("divToolbar" + toolbar);

	if($(toolbarObj).css("display")=="none" || action=="show" )
	{
		$(toolbarObj).css("display", "");
		try{
			Docova.Utils.setCookie({
				keyname: "FolderToolbar" + toolbar,
				keyvalue: "show",
				httpcookie: true
			});
		}catch(err){}
	}
	else
	{
		$(toolbarObj).css("display", "none");
		try{
			Docova.Utils.setCookie({
				keyname: "FolderToolbar" + toolbar,
				keyvalue: "",
				httpcookie: true
			});
		}catch(err){}
	}
	checkAvailableHeight();
}

//---------------------------- keeps the onload folder state persistence ----------------------------------------

function ViewSetOnloadState()
{
var toolbarSearchDisplay = docInfo.UseContentPaging == "1" ? "show" : Docova.Utils.getCookie({ keyname: "FolderToolbarSearch", httpcookie: true });
var toolbarPerspectiveDisplay = Docova.Utils.getCookie({ keyname: "FolderToolbarPerspective", httpcookie: true })

if(toolbarSearchDisplay) {ViewToggleToolbar("Search", toolbarSearchDisplay);}
if(toolbarPerspectiveDisplay) {ViewToggleToolbar("Perspective", toolbarPerspectiveDisplay);}

}
//--------------------------------------------- execute full text search ----------------------------------------------------

function ViewFTSearch(customQuery)
{
	var query;
	if (customQuery) {
		query = customQuery;
	}else{
		query = document.getElementById("inpQuery").value;
		$(divQueryFields).html("") //clear QueryFields div in case residual info exists from a previous advanced search
		$("#MySavedSearches").multiselect("clearSingle");
		$("#btnDelete").button( "option", "disabled", true );
	}

	var scope = ($("#inpViewScope").prop("checked"))? "TREE" : "FOLDER";
	if(!query)
		{
			alert("{% trans %}Please enter the search query.{% endtrans %}");
			return CancelEvent(); 
		}
	if (query.indexOf('-') != -1 && (query.indexOf('?') != -1 || query.indexOf('*') != -1)) {
		alert("{% trans %}Searching using both wildcards and hyphens is not supported.\nPlease edit your search to remove either the wildcard characters (*, ?) or the hyphens (-).{% endtrans %}");
		return CancelEvent();
	}
	//-----Clear current filter and any column filter flags if filtering is on---
	if(docInfo.EnableFolderFiltering == "1"){
		$("#CurrentFilterDiv").html("");
		ClearAllColFilterFlags();
	}		
	objView.queryOptions = ViewGetQueryOptions();
	$("#divSearchQuery").html(query);
	objView.DoFTSearch(query, scope);
	$("#btnFTClear").button( "option", "disabled", false );

	if(objView.contentPaging) {
		disableContentPaging(true);		
	}
}

//--------------------------------------------- clear full text search ----------------------------------------------------

function ViewFTClear()
{
	objView.queryOptions = ViewGetQueryOptions();
	if(docInfo.EnableFolderFiltering == "1"){
		$("#divViewContent").css("display", "none");
		
		objView.ResetFTSearch();
		$("#btnFTClear").button( "option", "disabled", true );
		ApplyFolderFilter(false);
		$("#divViewContent").css("display", "");
		$("#divSearchQuery").html("");
		$("#divQueryFields").html("");
		Docova.Utils.setField({ field: "inpQuery", value: "" });
		$("#MySavedSearches").multiselect("clearSingle");
		$("#btnDelete").button( "option", "disabled", true );
	}else{
		objView.ResetFTSearch();
		$("#btnFTClear").button( "option", "disabled", true );
		$("#divSearchQuery").html("");
		$("#divQueryFields").html("");
		Docova.Utils.setField({ field: "inpQuery", value: "" });
		$("#MySavedSearches").multiselect("clearSingle");
		$("#btnDelete").button( "option", "disabled", true );
	}
	$("#divSearchResultCount").css("display", "none");
	if(objView.contentPaging) {
		disableContentPaging(false);
	}
}

//-------------------------------------------- save current search -----------------------------------------------
function openSaveSearch(){
	
	var dlgUrl = docInfo.ServerUrl + "/" + docInfo.PortalWebPath + "/dlgSaveSearch?OpenForm"
		
	Docova.Utils.createDialog({
		id: "divDlgSaveSrch", 
		url: dlgUrl,
		title: "Save Search",
		height: 200,
		width: 500, 
		useiframe: true,		
		buttons: [{
			id: "btnSaveUpdate",
			text: "Save As New Search",
			click: function() {	
				if($(divDlgSaveSrchIFrame)[0].contentWindow) {
					$(divDlgSaveSrchIFrame)[0].contentWindow.completeWizard();	
				} else {
					$(divDlgSaveSrchIFrame)[0].window.completeWizard();	
				}
			}
		},					
		{
        		text: "Cancel",	
			click: function() {	$( this ).dialog( "close" );}
      	}]
	});
}

function SaveSearch(retVal) {

	if(!retVal) { return false; } //dialog cancelled
	
	var searchkey = Docova.Utils.getField("MySavedSearches");
	var searchquery = document.getElementById("divSearchQuery").innerHTML;
	var queryfields = document.getElementById("divQueryFields").innerHTML;	
	var url = docInfo.ServerUrl + docInfo.PortalWebPath + "/UserDataServices?OpenAgent"
	var action;
	var request="";
	
	//----- The Update Search checkbox is returned in retVal[1] from the Save Search dialog.  If true, update the search, if false then
	//----- save the search as a new search
	if (retVal[1] == true){
		action = "UPDATESAVEDSEARCH";
	}else{
		action = "ADDSAVEDSEARCH";
	}

	//--build the saved search request
	request += "<Request>";
	request += "<Action>" + action + "</Action>";
	request += "<SearchName><![CDATA[" + retVal[0] + "]]></SearchName>";
	request += "<SearchKey>" + searchkey + "</SearchKey>";
	request += "<SearchQuery><![CDATA[" + searchquery + "]]></SearchQuery>";
	request += "<QueryFields><![CDATA[" + queryfields + "]]></QueryFields>"
	request += "<LibraryKey>" + docInfo.LibraryKey  + "</LibraryKey>";
	request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "</Request>";

	var httpObj = new objHTTP();
	if (httpObj.PostData(request, url))	{
		if (httpObj.status=="OK"){
			RefreshSavedSearches(); //Refreshes the saved searches in the MySavedSearches select field
			if(retVal[1] == true){  //if this was an update to a search...set MySavedSearches field to the current search after the refresh
				
				$("#MySavedSearches").multiselect({showSelected: true });
				$("#MySavedSearches").multiselect("refresh");
				$("#MySavedSearches").val(searchkey);
				GetSavedSearch(document.getElementById("MySavedSearches"));
				ViewFTSearch(document.getElementById("divSearchQuery").innerHTML);
			}
			Docova.Utils.messageBox({ prompt: "{% trans %}Your search was saved.{% endtrans %}", title: "{% trans %}Search Saved{% endtrans %}" });
			Docova.Utils.closeDialog({ id: "divDlgSaveSrch" });
			Docova.Utils.closeDialog({ id: "divDlgAdvancedSrch" });
			$("#MySavedSearches").multiselect("refresh");
			return true;
		}
	}
}

//----- Delete a saved search
function DeleteSearch(){		//updated
	var selectObj = document.getElementById("MySavedSearches");
	var SearchName = selectObj.options[selectObj.selectedIndex].text
	delmsgtxt = "{% trans with { '%searchname%' : '\'" + SearchName + "\''} %}You are about to delete the current Saved Search named %searchname%. Are you sure?{% endtrans %}";
	var choice = Docova.Utils.messageBox({ 
		prompt: delmsgtxt, 
		icontype: 2, 
		title: "{% trans %}Delete Saved Search{% endtrans %}", 
		width:400, 
		msgboxtype: 4,
		onNo: function() {return},
		onYes: function() {
			var url = docInfo.ServerUrl + docInfo.PortalWebPath + "/UserDataServices?OpenAgent"
			var searchkey = selectObj.value
			var request="";
			//--build the delete search request
			request += "<Request>";
			request += "<Action>DELETESAVEDSEARCH</Action>";
			request += "<SearchKey>" + searchkey + "</SearchKey>";
			request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
			request += "</Request>";
		
			var httpObj = new objHTTP()
			if (httpObj.PostData(request, url))	{
				if (httpObj.status=="OK"){
					RefreshSavedSearches()
					ViewFTClear()
					Docova.Utils.messageBox({
						title: "{% trans %}Search Deleted{% endtrans %}",
						prompt: "{% trans %}Your search was deleted.{% endtrans %}",
						icontype: 4,
						msgboxtype: 0
					});
					return true;
				}
			}
		}
	 });
}

function GetSavedSearch(obj){
	var SearchKey = $(obj).multiselect("getChecked").map(function(){ return this.value;}).get();	
	if(SearchKey == ""){
		$( "#btnDelete" ).button( "option", "disabled", true );
		ViewFTClear();
		return
	}
	$( "#btnDelete" ).button( "option", "disabled", false );
	var url = docInfo.ServerUrl + docInfo.PortalWebPath + "/UserDataServices?OpenAgent"
	var request="";
	var searchArr = new Array();
	var searchQuery;
	var queryfields = "";
	var searchLibUnidList = "";

	//--build the saved search request
	request += "<Request>";
	request += "<Action>GETSAVEDSEARCH</Action>";
	request += "<SearchKey>" + SearchKey + "</SearchKey>";
	request += "</Request>";

	var httpObj = new objHTTP();
	
	if (httpObj.PostData(request, url))	{
		searchArr = (httpObj.status).split(";");
		searchQuery = searchArr[0];
		queryfields = searchArr[1];
		$("#divSearchQuery").html(searchQuery);
		$("#divQueryFields").html(queryfields);
		Docova.Utils.setField({ field: "inpQuery", value: "" });
		ViewFTSearch(searchQuery);
	}
}

function RefreshSavedSearches(){
	var LKey = docInfo.LibraryKey;
	var PortalNsfName = docInfo.PortalNsfName;
	Docova.Utils.dbColumn({ 
		nsfname: PortalNsfName, 
		viewname: "luSavedSearches", 
		key: LKey, 
		column: "2", 
		htmllistbox: "MySavedSearches"
	});
	return;
}

//--------------------------------------------- get additional options for data retrieval ----------------------------------------------------
function ViewGetQueryOptions()
{
objView.disableFreeze = $("#inpViewScope").prop("checked");
var options= ($("#inpViewScope").prop("checked"))? "<viewscope>ST</viewscope>" :"";
objView.viewScope = (options)? "ST": "";
var versionOption = Docova.Utils.getField("selVersionScope");
objView.versionOption =  (versionOption)? versionOption :"";
options += (versionOption)? "<versions>" + versionOption  + "</versions>" :"";
return options;
}

//--------------------------------------------- get additional options for data retrieval ----------------------------------------------------
function ViewApplyQueryOptions()
{
	objView.queryOptions = ViewGetQueryOptions();
	if(objView.isFTSearch)
		{
			ViewFTSearch();
		}
	else
		{
			if(docInfo.EnableFolderFiltering == "1"){
				$("#divViewContent").css("display", "none");
				objView.Refresh(true,true,false);
				ApplyFolderFilter(false);
				$("#divViewContent").css("display", "");
			}else{
				objView.Refresh(true,true,false);
			}
		}
}

//--------------------------------------------- add doc to favorites ----------------------------------------------------
function ViewAddToFavorites()
{
	var entryObj = objView.GetCurrentEntry();
	if(!entryObj) {return; }
	
	if ( objView.isThumbnails){
		var docId = objView.currentEntry
	}else{
		var docId = entryObj.GetElementValue("docid");
	}

	//--- processing agent url
	var url = docInfo.ServerUrl + docInfo.PortalWebPath + "/UserDataServices?OpenAgent"
	var request="";
	var docDescription = ( objView.isThumbnails)? "" : entryObj.columnValues.join(", ");
	//--build the update request
	request += "<Request>";
	request += "<Action>ADDFAVORITES</Action>";
	request += "<LibraryKey>" + docInfo.LibraryKey  + "</LibraryKey>";
	request += "<Unid>" + docId +  "</Unid>";
	request += "</Request>";

	var httpObj = new objHTTP()
	
	if (httpObj.PostData(request, url))	{
		//all OK
		if (httpObj.status=="OK"){
			//----- refresh folder control --
			var objLeftFrame = window.parent.frames["fraLeftFrame"];	
			if (objLeftFrame){
				objLeftFrame.ReloadFavorites();
			}
			Docova.Utils.messageBox({
				title: "{% trans %}Add to favorites{% endtrans %}",
				prompt: "{% trans %}Document added to favorites.{% endtrans %}",
				icontype: 4,
				msgboxtype: 0
			});
			return true;
		}
	}

	return false;

}
//----------- utility functions ---------------

// clears the view event variables in case mouse cursor had wandered to far
function ViewClearEventState()
{
var dragSourceColumn=null;
var dragTargetColumn=null;
selectDragMode=null;
return true;
}

function CancelEvent()
{
	if(!window.event) {return;}
	window.event.cancelBubble = true;
	window.event.returnValue=false;
	return false;
}

// ------- context menu handler ---------
function ViewShowContextPopup(popupSource, sourceObject)
{

	if(popupSource=="viewheader" ){
	
	var colNo = parseInt($(sourceObject).attr("colIdx"))	
	curColumnObj = objView.columns[colNo];
	
	var ascIsCheckedIcon = curColumnObj.customSortOrder=="ascending" ? "ui-icon-check" : "";
	var descIsCheckedIcon = curColumnObj.customSortOrder=="descending" ? "ui-icon-check" : "";
	var defaultIsCheckedIcon = curColumnObj.customSortOrder=="none" ? "ui-icon-check" : "";
	var isColCategorizedIcon = curColumnObj.isCategorized ? "ui-icon-check" : "";
	var allowColCustomization = curColumnObj.parentObj.allowCustomization
	colAscSortAction = 'col-' + curColumnObj.colIdx + '-sort-ascending'
	colDescSortAction = 'col-' + curColumnObj.colIdx + '-sort-descending'
	colDefaultSortAction = 'col-' + curColumnObj.colIdx + '-sort-none'
	colCategorizeAction="col-" + curColumnObj.colIdx + "-cat"
	colFreezeAction="col-" + curColumnObj.colIdx + "-freeze"
	colDeleteAction="col-" + curColumnObj.colIdx + "-delete"
	colInsertAction="col-" + curColumnObj.colIdx + "-insert"
	colAppendAction="col-" + curColumnObj.colIdx + "-append"
	colPropertiesAction="col-" + curColumnObj.colIdx + "-properties"

	Docova.Utils.menu({
		delegate: sourceObject,
		width: 170,
		menus: [
				{ title: "{% trans %}Sort ascending{% endtrans %}", itemicon: ascIsCheckedIcon, action: "curColumnObj.ProcessContextAction(colAscSortAction)", disabled: !curColumnObj.hasCustomSort },
				{ title: "{% trans %}Sort descending{% endtrans %}", itemicon: descIsCheckedIcon, action: "curColumnObj.ProcessContextAction(colDescSortAction)", disabled: !curColumnObj.hasCustomSort  },
				{ title: "{% trans %}Default sort{% endtrans %}", itemicon: defaultIsCheckedIcon, action: "curColumnObj.ProcessContextAction(colDefaultSortAction)", disabled : !curColumnObj.hasCustomSort },
				{ separator: true },
				{ title: "{% trans %}Categorize{% endtrans %}", itemicon: isColCategorizedIcon, action: "curColumnObj.ProcessContextAction(colCategorizeAction)", disabled: !allowColCustomization },
				{ separator: true },
				{ title: "{% trans %}Delete Column{% endtrans %}", itemicon: "ui-icon-minus", action: "curColumnObj.ProcessContextAction(colDeleteAction)", disabled: !allowColCustomization },				
				{ title: "{% trans %}Insert Column{% endtrans %}", itemicon: "ui-icon-arrowthick-1-n", action: "InsertAppendEditColumn('insert')", disabled: !allowColCustomization },
				{ title: "{% trans %}Append Column{% endtrans %}", itemicon: "ui-icon-plus", action: "InsertAppendEditColumn('append')", disabled: !allowColCustomization },
				{ separator: true },
				{ title: "{% trans %}Properties{% endtrans %}", itemicon: "ui-icon-gear", action: "InsertAppendEditColumn('edit')", disabled: !allowColCustomization }
		]
	});
	}
}

//-----View Insert a new column-----
function InsertAppendEditColumn(actiontype){
	//actiontype is insert or append, the difference is just to +1 to the colIdx if appending
	if(actiontype == "append"){
		var srcColumnIdx = curColumnObj.colIdx + 1
	}else{
		var srcColumnIdx = curColumnObj.colIdx
	}
	var dlgUrl = curColumnObj.parentObj.columnPropertiesDialogUrl
	if(actiontype != "edit"){ //if append or inserting a column, create a new column obj
		var newColumnObj = new ObjViewColumn();
		curColumnObj = newColumnObj
	}
	
	var divDlgName = "divColPropertiesDlg"
	Docova.Utils.createDialog({
		id : divDlgName,
		url : dlgUrl,
		title: "{% trans %}Column Properties{% endtrans %}",
		height: 435,
		width: 620,
		autoopen: true,
		useiframe: true,
		buttons: {
        			"{% trans %}OK{% endtrans %}": function() {
						if($("#" + divDlgName + "IFrame")[0].contentWindow.completeWizard()){
							if(actiontype != "edit"){ //if append or insert then call InsertColumn method of viewobject
								objView.InsertColumn(srcColumnIdx, curColumnObj);
							}
							objView.Refresh(true, true, true);
							$( this ).dialog( "close" );
						}
        			},
        			"{% trans %}Cancel{% endtrans %}": function() {
						$( this ).dialog( "close" );
        			}
      		}
     });
}

//==========================================================================================
// View submenu
//==========================================================================================
function CreateViewSubmenu(actionButton) //creates right-click context menu
{
	if(!actionButton) {return}

	var isSearchOn = ($("#divToolbarSearch").css("display") == "")
	var isPerspectiveOn = ($("#divToolbarPerspective").css("display")=="");

	Docova.Utils.menu({
		delegate: $(actionButton),
		width: 170,
		menus: [
				{ title: "{% trans %}Search Bar{% endtrans %}", itemicon: "ui-icon-search", action: "viewbtnSearchBar()" },
				{ title: "{% trans %}View Options Bar{% endtrans %}", itemicon: "ui-icon-check", action: "ViewToggleToolbar('Perspective')" },
				{ title: "{% trans %}Folder Information{% endtrans %}", itemicon: "ui-icon-info", action: "viewbtnFolderInfo()", disabled : docInfo.isRecycleBin },
				{ separator: true },
				{ title: "{% trans %}Refresh{% endtrans %}", itemicon: "ui-icon-refresh", action: "viewbtnRefresh()" },
				{ title: "{% trans %}Expand All{% endtrans %}", itemicon: "ui-icon-plus", action: "objView.ExpandAll()", disabled: !objView.isCategorized },
				{ title: "{% trans %}Collapse All{% endtrans %}", itemicon: "ui-icon-minus", action: "objView.CollapseAll()", disabled: !objView.isCategorized }
		]
	})
	return false;
}

//----- View button menu functions -----
function viewbtnSearchBar(){
		ViewToggleToolbar("Search");
		if(objView.isFTSearch) {ViewFTClear();}
}

function viewbtnRefresh(){
	if(docInfo.EnableFolderFiltering == "1"){
		$("#divViewContent").css("display", "none")
		objView.Refresh(true,false,true,false,true);
		$("#divViewContent").css("display", "")
	}else{
		objView.Refresh(true,false,true);
	}
}

function viewbtnFolderInfo(){
	infoUrl=docInfo.ServerUrl + "/" + docInfo.NsfName + "/wFolderInfo?OpenForm&ParentUNID=" + docInfo.DocID;
	
	ViewLoadDocument(infoUrl);
}

//==========================================================================================
// Tools submenu
//==========================================================================================
function CreateToolsSubmenu(actionButton) //creates right-click contect menu
{
	if(!actionButton) {return}
	
	var objEntry = objView.GetCurrentEntry();	
	//----- vars for enabling/disabling menu options
	var showImportFiles = !docInfo.isRecycleBin && docInfo.CanCreateDocuments;
	var showExportFiles = !docInfo.isRecycleBin;
	var showImportMessages = !docInfo.isRecycleBin && docInfo.CanCreateDocuments;
	var flags = (objEntry ? objEntry.GetElementValue("flags") : false);
	var isBookmark = (objEntry ? (!objEntry.GetElementAttribute("bmk/img", "src") == "") : false);
	var showBookmark = (!docInfo.isRecycleBin) && (!isBookmark) && (objEntry && objEntry.isRecord) && (!docInfo.DisableBookmarks);
	var showForwardDocument = !docInfo.isRecycleBin && (objEntry && objEntry.isRecord) && (flags & 128);
	var showChangeDocType = !docInfo.isRecycleBin && docInfo.DocAccessLevel>="6" && !isBookmark && objView.currentEntry;
	var canSavePerspective = false;
	var canDeletePerspective = false;
	var perspectiveDoc = doc.xmlViewPerspective.XMLDocument;
	if(perspectiveDoc)
		{
			var typeNode  = perspectiveDoc.selectSingleNode("viewperspective/type");
			canDeletePerspective = (docInfo.DocAccessLevel>="6" && typeNode.text !="system")? true : false;
		}
	canSavePerspective = (docInfo.DocAccessLevel>="6" && !objView.isSummary)? true : false;	
	var showEditSavePerspective = !docInfo.isRecycleBin && canSavePerspective
	var showCanDeletePerspective = !docInfo.isRecycleBin && canDeletePerspective
	var showFolderProperties = !docInfo.isRecycleBin
	var showOpenFolderArchive = !docInfo.isRecycleBin
	var showArchiveSelected =  !docInfo.isRecycleBin && (docInfo.DocAccessLevel>="6")
	
//-----Build menu -----
	Docova.Utils.menu({
		delegate: $(actionButton),
		width: 210,
		menus: [
				{ title: "{% trans %}Export to Excel{% endtrans %}", itemicon: "ui-icon-arrowthickstop-1-s", action: "ViewExportToExcel()" },
				{ title: "{% trans %}Import Files{% endtrans %}", itemicon: "ui-icon-arrowthickstop-1-n", action: "ImportFiles()", disabled : !showImportFiles },
				{ title: "{% trans %}Export Files{% endtrans %}", itemicon: "ui-icon-circle-arrow-s", action: "ExportFiles()", disabled : !showExportFiles },
				{ title: "{% trans %}Import Messages{% endtrans %}", itemicon: "ui-icon-circle-arrow-n", action: "ImportMessages()", disabled : !showImportMessages },
				{ separator: true },
				{ title: "{% trans %}Send Email Notification{% endtrans %}", itemicon: "ui-icon-extlink", action: "SendDocumentMessage()" },
				{ title: "{% trans %}Forward Document{% endtrans %}", itemicon: "ui-icon-arrowthick-1-ne", action: "ForwardDocument()", disabled: !showForwardDocument },
				{ title: "{% trans %}Compare Documents{% endtrans %}", itemicon: "ui-icon-transferthick-e-w", action: "CompareSelectedWordDocuments()" },
				{ separator: true },
				{ title: "{% trans %}Copy Link{% endtrans %}", itemicon: "ui-icon-link", action: "CopyLink()" },
				{ title: "{% trans %}Create Bookmark{% endtrans %}", itemicon: "ui-icon-bookmark", action: "CreateBookmark()", disabled: !showBookmark },
				{ separator: true },
				{ title: "{% trans %}Edit/Save Perspective{% endtrans %}", itemicon: "ui-icon-circle-check", action: "ViewSavePerspective()", disabled: !showEditSavePerspective },
				{ title: "{% trans %}Delete Perspective{% endtrans %}", itemicon: "ui-icon-circle-close", action: "ViewDeletePerspective()", disabled: !showCanDeletePerspective },
				{ separator: true },
				{ title: "{% trans %}Folder Properties{% endtrans %}", itemicon: "ui-icon-gear", action: "ShowFolderProperties()", disabled: !showFolderProperties},
				{ title: "{% trans %}Open Folder Archive{% endtrans %}", itemicon: "ui-icon-folder-open", action: "ShowFolderArchive()", disabled: !showOpenFolderArchive },
				{ title: "{% trans %}Archive Selected Documents{% endtrans %}", itemicon: "ui-icon-tag", action: "ArchiveSelected()", disabled: !showArchiveSelected },
				{ title: "{% trans %}Change Document Type{% endtrans %}", itemicon: "ui-icon-newwin", action: "ChangeDocType()", disabled: !showChangeDocType }
		]
	});

}

function ViewExportToExcel(){
		var docids = objView.selectedEntries;
		var selectedonly = (docids.length > 0);
		objView.ExportToExcel(selectedonly);
}

//============ import files dialog ===============
function ImportFiles()
{
	
	var dlgUrl =docInfo.ServerUrl + "/" + docInfo.NsfName + "/" + "dlgFileImport?OpenForm&ParentUNID=" + docInfo.DocID + "&folderid=" + docInfo.FolderID;
	
	window.top.Docova.Utils.createDialog({
		 url:dlgUrl,
		 id: "dialogFileImport" ,
		 useiframe: true,
		 autoopen: true,
		 title: "{% trans %}Import Files{% endtrans %}",
		 width: "750",
		 height:"440",
		 buttons: [{
			 text: "Finish",
			 icons: {primary: "ui-icon-check"},
			 click: function() {
				 var iwin = $(this).find("iframe")[0].contentWindow;
				 if ( iwin.completeWizard() ){
      						
				 window.top.Docova.Utils.closeDialog({id: "dialogFileImport", useiframe:true});
				objView.Refresh(true, false, true);
					
				 return true;
				 }
			 }
		 	},
		 	{
			 text:"{% trans %}Cancel{% endtrans %}",
			 icons: { primary: "ui-icon-cancel"},
			 click: function(){
				 window.top.Docova.Utils.closeDialog({id: "dialogFileImport", useiframe:true});
			 }
		 	}]
		});
	
	
	
	
//****** Modify to include the refresh of the view with JR May 13 2015
//	objView.Refresh(true, false, true);
//******************************************************
//ALSO should be in ArchiveSelected() and  ImportMessages()		
}

//============ export folder dialog ===============
function ExportFiles()
{
	var dlgInputs = new Array();
	dlgInputs.push(window);
	dlgInputs.push(objView);
	
	window.top.Docova.GlobalStorage["dialogFileExport"] = { "dlginp" : dlgInputs };
	
	var dlgUrl =docInfo.ServerUrl + "/" + docInfo.NsfName + "/" + "dlgFileExport?OpenForm&ParentUNID=" + docInfo.DocID + "&folderid=" + docInfo.FolderID + "&currentonly=" + ((docInfo.DocAccessLevel > 2) ? "0" : "1")
	
	var expdialog = window.top.Docova.Utils.createDialog({
		 url:dlgUrl,
		 id: "dialogFileExport" ,
		 useiframe: true,
		 autoopen: true,
		 title: "{% trans %}Export Files{% endtrans %}",
		 width: "450",
		 height:"415",
		 buttons: [{
			 text: "Export",
			 icons: {primary: "ui-icon-check"},
			 click: function() {
				 var iwin = $(this).find("iframe")[0].contentWindow;
				 if ( iwin.exportFiles() ){
      						
				 window.top.Docova.Utils.closeDialog({id: "dialogFileImport", useiframe:true});
			
				 return true;
				 }
			 }
		 	},
		 	{
			 text:"{% trans %}Cancel{% endtrans %}",
			 icons: { primary: "ui-icon-cancel"},
			 click: function(){
				 window.top.Docova.Utils.closeDialog({id: "dialogFileExport", useiframe:true});
			 }
		 	}]
		});
	
	

}

//==========================================================================================
// Edit submenu
//==========================================================================================

function CreateEditSubmenu(actionButton) //creates drop down menu
{
	if(!actionButton) {return}

	var isthumbnailview =  objView.isThumbnails;
	var showClipActions =!isthumbnailview &&  !docInfo.isRecycleBin && !docInfo.CutCopyPaste
	var showCut = showClipActions && docInfo.CanDeleteDocuments && docInfo.CanCreateDocuments;
	var showPaste = showClipActions && Docova.Utils.getCookie({ keyname: "clipdata" }) != "" && docInfo.CanCreateDocuments
	var canDelete = !isthumbnailview && !docInfo.isRecycleBin && (objView.currentEntry !="" || objView.selectedEntries.length > 0)  && docInfo.CanSoftDeleteDocuments && docInfo.CanCreateDocuments && docInfo.CanDeleteDocuments;

	Docova.Utils.menu({
		delegate: $(actionButton),
		width: 170,
		menus: [
				{ title: "{% trans %}Cut{% endtrans %}", itemicon: "ui-icon-scissors", action: "ViewCutSelected()", disabled : !showCut },
				{ title: "{% trans %}Copy{% endtrans %}", itemicon: "ui-icon-copy", action: "ViewCopySelected()", disabled : !showClipActions },
				{ title: "{% trans %}Paste{% endtrans %}", itemicon: "ui-icon-clipboard", action: "ViewPasteSelected()", disabled : !showPaste },
				{ separator: true },
				{ title: "{% trans %}Select All{% endtrans %}", itemicon: "ui-icon-check", action: "objView.SelectAllEntries()" },
				{ title: "{% trans %}Deselect All{% endtrans %}", itemicon: "ui-icon-minus", action: "objView.DeselectAllEntries()" },
				{ separator: true },
				{ title: "{% trans %}Delete Selected{% endtrans %}", itemicon: "ui-icon-close", action: "ViewDeleteSelected()", disabled: !canDelete }
		]
	});
}

function ViewDeleteSelected(){
	if(docInfo.EnableFolderFiltering == "1"){
		objView.DeleteSelectedEntries();
		$("#divViewContent").css("display", "none")		
		ApplyFolderFilter(true);
		$("#divViewContent").css("display", "")
	}else{
		objView.DeleteSelectedEntries();
	}
}

function ViewSortThumbnails(id){
	
	objView.ToggleThumbnailSort(id);
}

//thumbnails submenu
function CreateThumbnailsSubmenu(clickObj){

if(!clickObj) {return}
	//alert(clickObj.tagName)
	var popup = new objPopupmenu();
	popup.textColumnWidth = 140;
	popup.actionHeight=18;
	popup.hasToggleIcons =true;
	var actionHandler = "parent.ProcessEntrySubmenuAction(this)";
	
	var showClipActions = !docInfo.isRecycleBin && !docInfo.CutCopyPaste

	popup.addAction(!docInfo.isRecycleBin, false, false, "Open File" , "openfile", "" , "", actionHandler);
	popup.addAction(!docInfo.isRecycleBin, false, false, "Open Document" , "open", "" , "", actionHandler);
	popup.addAction(!docInfo.isRecycleBin, false, false, "Open Document in New Window" , "openwindow", "" , "", actionHandler);
	popup.addDivider();
	popup.addAction(!docInfo.isRecycleBin, false, false, "Add to favorites" , "favorites", "" , "", actionHandler);
	popup.addAction(!docInfo.isRecycleBin, false, false, "Copy Link" , "copylink", "" , "", actionHandler);		
	
	popup.addDivider();
	popup.addAction(true  , false, false, "Properties" , "properties", "" , "", actionHandler);
	
	popup.height =138;	
	popup.width = 208;
	popup.offsetTop= 100;
	popup.offsetRight = 0;

	var oPopBody = oPopup.document.body;
	oPopBody.innerHTML = popup.innerHTML();

	oPopup.show(20, 70, popup.width, popup.height, clickObj);
	return false;


}


//==========================================================================================
// Entry submenu
//==========================================================================================

function CreateEntrySubmenu(clickObj) //creates right-click context menu
{
	if(!clickObj) {return}

	var objEntry = objView.GetCurrentEntry();	
	var showClipActions = !docInfo.isRecycleBin && !docInfo.CutCopyPaste
	var isBookmark = (objEntry ? (!objEntry.GetElementAttribute("bmk/img", "src") == "") : false);
	var showBookmark = !docInfo.isRecycleBin && !isBookmark && (objEntry && objEntry.isRecord) && !docInfo.DisableBookmarks; 
	var showChangeDocType = !docInfo.isRecycleBin && docInfo.DocAccessLevel>="6" && !isBookmark && objView.currentEntry;	
	var showChangeDocStatus = !docInfo.isRecycleBin && docInfo.DocAccessLevel>="6" && !isBookmark && objView.currentEntry;	
	var showCut = showClipActions && docInfo.CanDeleteDocuments
	var showPaste = showClipActions && (Docova.Utils.getCookie({ keyname: "clipdata" }) != "")
	var showDelete = !docInfo.isRecycleBin && docInfo.CanSoftDeleteDocuments && docInfo.CanDeleteDocuments

	Docova.Utils.menu({
		delegate: clickObj,
		width: 240,
		menus: [
				{ title: "{% trans %}Open{% endtrans %}", itemicon: "ui-icon-document", action: "ProcessEntrySubmenuAction('open')", disabled : docInfo.isRecycleBin },
				{ title: "{% trans %}Restore{% endtrans %}", itemicon: "ui-icon-newwin", action: "ProcessEntrySubmenuAction('restore')", disabled : !docInfo.isRecycleBin },
				{ separator: true },
				{ title: "{% trans %}Edit{% endtrans %}", itemicon: "ui-icon-pencil", action: "ProcessEntrySubmenuAction('edit')", disabled : docInfo.isRecycleBin },
				{ separator: true },
				{ title: "{% trans %}Print Attachments{% endtrans %}", itemicon: "ui-icon-print", action: "ProcessEntrySubmenuAction('printattachments')", disabled : docInfo.isRecycleBin },
				{ separator: true },
				{ title: "{% trans %}Add to Favorites{% endtrans %}", itemicon: "ui-icon-heart", action: "ProcessEntrySubmenuAction('favorites')", disabled : docInfo.isRecycleBin },
				{ title: "{% trans %}Copy Link{% endtrans %}", itemicon: "ui-icon-link", action: "ProcessEntrySubmenuAction('copylink')", disabled : docInfo.isRecycleBin },
				{ title: "{% trans %}Create Bookmark{% endtrans %}", itemicon: "ui-icon-bookmark", action: "ProcessEntrySubmenuAction('createbookmark')", disabled : !showBookmark },
				{ title: "{% trans %}Change Document Type{% endtrans %}", itemicon: "ui-icon-newwin", action: "ProcessEntrySubmenuAction('changedoctype')", disabled : !showChangeDocType },
				{ title: "{% trans %}Release Document(s){% endtrans %}", itemicon: "ui-icon-extlink", action: "ProcessEntrySubmenuAction('changedocstatus')", disabled : !showChangeDocStatus },								
				{ separator: true },
				{ title: "{% trans %}Cut{% endtrans %}", itemicon: "ui-icon-scissors", action: "ProcessEntrySubmenuAction('cut')", disabled : !showCut },
				{ title: "{% trans %}Copy{% endtrans %}", itemicon: "ui-icon-copy", action: "ProcessEntrySubmenuAction('copy')", disabled : !showClipActions },
				{ title: "{% trans %}Paste{% endtrans %}", itemicon: "ui-icon-clipboard", action: "ProcessEntrySubmenuAction('paste')", disabled : !showPaste },
				{ separator: true },
				{ title: "{% trans %}Delete{% endtrans %}", itemicon: "ui-icon-closethick", action: "ProcessEntrySubmenuAction('delete')", disabled : !showDelete },
				{ separator: true },
				{ title: "{% trans %}Properties{% endtrans %}", itemicon: "ui-icon-gear", action: "ProcessEntrySubmenuAction('properties')" }
		]
	});
}


//==========================================================================================
// Entry submenu handler
//==========================================================================================

function ProcessEntrySubmenuAction(action) //handle action from contect menu
{
	if(action == "" ) {return false};

	var entryObj = objView.GetCurrentEntry();
	if(!entryObj) {return; }
	
	if ( objView.isThumbnails ){
		var recType = null;
	}else{
		var recType = entryObj.GetElementValue("rectype");
	}

	if(action=="open"){
		ViewLoadDocument();
	}	
	else if ( action=="openfile"){
		var fname = entryObj.filename;
		OpenFileWindow(fname);
	}
	else if(action=="edit"){
		ViewLoadDocument("","","", true);
	}
	else if(action=="printattachments"){
		printAttachments();
	}		
	else if(action=="favorites"){
		ViewAddToFavorites();
	}
	else if(action=="copylink"){
		CopyLink(objView.currentEntry);
	}
	else if(action=="cut"){
		ViewCutSelected();
	}
	else if(action=="copy"){
		ViewCopySelected();
	}	
	else if(action=="paste"){
		ViewPasteSelected();
	}
	else if(action=="delete"){
		if(docInfo.isRecycleBin){
			objView.RemoveSelectedEntries(true)
		}else{
			if(docInfo.EnableFolderFiltering == "1"){
				objView.DeleteSelectedEntries(true);
				$("#divViewContent").css("display", "none");
				ApplyFolderFilter(true);
				$("#divViewContent").css("display", "");
			}else{
				objView.DeleteSelectedEntries(true);
			}
		}				
	}
	else if(action=="changedoctype"){
		ChangeDocType(objView.currentEntry);
	}
	else if(action=="changedocstatus"){
		ChangeDocStatus(objView.currentEntry);
	}	
	else if(action =="createbookmark")
	{
		CreateBookmark();
	}	
	else if(action=="restore")	{
		objView.UndeleteSelectedEntries(true);
		try	{
				parent.frames['fraLeftFrame'].ReloadLibraryByID( docInfo.LibraryKey, "", false);
			}
catch (e){}
	}
	else if(action=="properties"){
		if ( objView.isThumbnails ){
			ShowDocumentProperties();
			return;
		}
		if(recType == "fld")
			{
				ShowFolderProperties();
			}
		else if(recType == "doc")
			{
				ShowDocumentProperties();
			}
	}

	return;
}

//Release selected documents
function ChangeDocStatus(currentEntry)
{
	if ( currentEntry == undefined ) {
		currentEntry = objView.currentEntry
		if(objView.selectedEntries.length == 0 && ( currentEntry == undefined  || currentEntry == "" )){
			Docova.Utils.messageBox({
				title: "{% trans %}Choose a Document{% endtrans %}",
				prompt: "{% trans %}Please select at least one document to release.{% endtrans %}",
				icontype: 1,
				width: 400,
				msgboxtype: 0
			});
			return false;
		}
	}
	
	if (confirm("{% trans %}Are you sure that you want to Release the {% endtrans %}"+(objView.selectedEntries.length > 0 ? objView.selectedEntries.length + " " : "") +"{% trans %}selected document(s)?{% endtrans %}")==false)
			return;
	selStatus="Released"
	var request="";

	//--collect the xml for all nodes to be processed
	request += "<Request>";
	request += "<Action>CHANGEDOCSTATUS</Action>";
	request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "<Status>" + selStatus+ "</Status>";
		
	if(objView.selectedEntries.length> 0){
			for(var k=0; k<objView.selectedEntries.length; k++){
				request += (objView.selectedEntries[k])? "<Unid>" + objView.selectedEntries[k] +  "</Unid>" :"";
			}
	}else
	{
		request += "<Unid>" + currentEntry+  "</Unid>" ;
	}
	request += "</Request>";
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/DocumentServices?OpenAgent"

	var httpObj = new objHTTP();
	ShowProgressMessage("{% trans %}Processing request. Please wait{% endtrans %}...");
	var retVal=false;	
	if(httpObj.PostData(request, url))
	{
	 if(httpObj.status=="OK") {
		retVal=true;
		}
	}
	HideProgressMessage();
	objView.Refresh(true, false, true);
	return retVal;	
}


//------------------------------------ document properties dialog -------------------------------
function ShowDocumentProperties(docId)
{
	if(!objView.currentEntry) {return false;}
	var dlgParamaters = "dialogHeight: 390px; dialogWidth: 540px; dialogTop: px; dialogLeft: px; edge: raised; "
	dlgParamaters += "center: Yes; help: No; resizable: No; status: No;"
	var targetId = (docId)? docId : objView.currentEntry;
	var dlgUrl = docInfo.ServerUrl + "/" + docInfo.NsfName+ "/dlgDocumentProperties?OpenForm&ParentUNID=" + targetId + "&mode=R";
	var dlgParent = window;
	return window.showModalDialog(dlgUrl,dlgParent,dlgParamaters);
}


//------------------------------------ folder properties dialog -------------------------------
function ShowFolderProperties(folderId, forceMode)
{
	var targetID = (folderId)? folderId : docInfo.DocKey;
	var isManager = (docInfo.DocAccessLevel>="6");
	var mode = (isManager && !docInfo.isRecycleBin)? "E" : "R";
	mode = (forceMode)? forceMode : mode;
	var DLITFolderView = parent.frames['fraLeftFrame'].DLITFolderView;
	if(DLITFolderView){
			DLITFolderView.ShowProperties({"folderid" : targetID, "mode" : mode});
	}
}//--end ShowFolderProperties


//------------------------------------ folder archive dialog -------------------------------
function ShowFolderArchive()
{
	var dlgParamaters = "dialogHeight: 550px; dialogWidth: 750px; dialogTop: px; dialogLeft: px; edge: raised; "
	dlgParamaters += "center: Yes; help: No; resizable: Yes; status: No;"
	var dlgUrl = docInfo.ServerUrl + "/" + docInfo.NsfName+ "/dlgFolderArchive?OpenForm&parentUNID=" + docInfo.DocID;
	dlgUrl += (inpViewScope.checked)? "&viewscope=ST" : "&viewscope=";
	if( window.showModalDialog(dlgUrl,"",dlgParamaters)){
		//-- refresh view if documents were restored
		objView.Refresh(true, false, true);
	}
	
}


//---------------------------- create new document ----------------------------
function ViewCreateDocument()
{

	window.external.DOE_CreateDoc();
	objView.Refresh(true, false, true);
	
}//--end ViewCreateDocument

//================= sets header title ====================
function ViewSetTitleOptions(title)
{
	$("#divHeadingTitle").html(title);
}

// ---------- send mail memo with link to documents --------
function SendDocumentMessage()
{
	var objEntry = objView.GetCurrentEntry();
	var flags = (objEntry ? objEntry.GetElementValue("flags") : false) & 128;
	var dlgUrl =docInfo.ServerUrl + "/" + NsfName + "/" + "dlgSendLinkMessage?OpenForm&ParentUNID=" + docInfo.DocID + "&FwdAtt=" + flags;
	var dlgSettings = "dialogHeight:376px;dialogWidth:420px;center:yes; help:no; resizable:no; status:no;";
	var retValues =  window.showModalDialog(dlgUrl,window,dlgSettings); 
	if(!retValues) {return false;}
	var folderPath = docInfo.ServerUrl + docInfo.PortalWebPath + "/HomeFrame?ReadForm&goto=" + docInfo.LibraryKey + "," + docInfo.FolderID;
	var request = "<?xml version='1.0' encoding='UTF-8'?>";
	request += "<Request>";
	request += "<Action>";
		if (retValues.length>=5) //public access link provided
		request +="SENDPUBLICACCESSMSG";
	else
		request += (retValues[3]=="A")? "SENDATTACHMENTMSG" : "SENDLINKMSG";
	request += "</Action>";
	request += "<SendTo><![CDATA[" + retValues[0] +  "]]></SendTo>";
	request += "<Subject><![CDATA[" + retValues[1] +  "]]></Subject>";
	request += "<Body><![CDATA[" + retValues[2] +  "]]></Body>";
	request += "<UserName><![CDATA[" + docInfo.UserName +  "]]></UserName>";	
	request += "<FolderName><![CDATA[" + docInfo.FolderName +  "]]></FolderName>";
	request += "<FolderPath><![CDATA["  + folderPath +  "]]></FolderPath>";
	if (retValues.length>=5) //public access link provided
			request += "<PublicAccessLink><![CDATA[" + retValues[4] +  "]]></PublicAccessLink>";

	if(objView.selectedEntries.length != 0){
		for(var k=0; k<objView.selectedEntries.length; k++){
			request += (objView.selectedEntries[k])? "<Unid>" + objView.selectedEntries[k] +  "</Unid>" :"";
		}
	}

	request += "</Request>"

	//--- process on server --
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/MessagingServices?OpenAgent"
	var httpObj = new objHTTP();
	
	if(httpObj.PostData(encodeURIComponent(request), url)){
		 if(httpObj.status=="OK"){
				//all OK
				alert("Message was sent.")
				return true;
			}
	}
	return false;

}

//Forward a document as an email with an optional introduction
function ForwardDocument()
{
	var objEntry = objView.GetCurrentEntry();
	var selecteddocid = (objEntry && objEntry.isRecord ? objEntry.entryId : null);
	if(! selecteddocid){
		return false;
	}
	
	var forcesave = (objEntry.GetElementValue("flags") & 256);  //256 is the indicator for Force Save of Forwards
 	var promptsave = (objEntry.GetElementValue("flags") & 512);	//512 is the indicator for Prompt for Save of Forwards
  	var savecopyoption = (docInfo.CanCreateDocuments ? (forcesave ? "1" : (promptsave ? "2" : "0")) : "0");  //Disable save if user cannot create documents in folder

	var defsubject = encodeURIComponent(objEntry.GetElementValue("F8"));
	
	var dlgUrl =docInfo.ServerUrl + "/" + docInfo.NsfName + "/" + "dlgForwardDocument?OpenForm&SourceDocUNID=" + selecteddocid + "&savecopy=" + savecopyoption + "&DefaultSubject=" + defsubject ;
	var dlgSettings = "dialogHeight:500px;dialogWidth:580px;center:yes; help:no; resizable:no; status:no;";
	var retValues =  window.showModalDialog(dlgUrl,window,dlgSettings); 
	if(!retValues) {return false;}

	var request = retValues[0];

	//--- process on server --
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/MessagingServices?OpenAgent"
	var httpObj = new objHTTP();
	
	if(httpObj.PostData(encodeURIComponent(request), url)){
		Docova.Utils.hideProgressMessage();
		 if(httpObj.status=="OK"){
				//all OK
				alert("Message was forwarded.")
				return true;
			}
	}
	return false;
}


//Change the doctype of  a document
function ChangeDocType(currentEntry)
{
	if ( currentEntry == undefined ) {
		currentEntry = objView.currentEntry
		if(objView.selectedEntries.length == 0 && ( currentEntry == undefined  || currentEntry == "" )){
			Docova.Utils.messageBox({
				title: "{% trans %}Error{% endtrans %}",
				prompt: "{% trans %}Please select at least one document for changing the doc type.{% endtrans %}",
				icontype: 1,
				msgboxtype: 0
			});
			return false;
		}
	}
	
	
		var dlgUrl = "/" + docInfo.NsfName + "/" + "dlgSelectDocType?OpenForm&ParentUNID=" + docInfo.DocID + "&mode=change";
		var tmpDocova = (window.top.Docova ? window.top.Docova : Docova);
		var doctypedlg = tmpDocova.Utils.createDialog({
			id: "divDlgSelectDocType", 
			url: dlgUrl,
			title: "{% trans %}Change Document Type{% endtrans %}",
			height: 425,
			width: 400, 
			useiframe: true,
			buttons: {
				"Change Document Types" : function() {
					var result = jQuery("#" + this.id + "IFrame", this).get(0).contentWindow.completeWizard();
					if(result && result.DocumentType){
						doctypedlg.closeDialog();

						//--collect the xml for all nodes to be processed
						var request="";						
						request += "<Request>";
						request += "<Action>CHANGEDOCTYPE</Action>";
						request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
						request += "<TypeKey>" + result.DocumentType+ "</TypeKey>";	
						if(objView.selectedEntries.length> 0){
							for(var k=0; k<objView.selectedEntries.length; k++){
								request += (objView.selectedEntries[k])? "<Unid>" + objView.selectedEntries[k] +  "</Unid>" :"";
							}
						}else
						{
							request += "<Unid>" + currentEntry+  "</Unid>" ;
						}
						request += "</Request>";
						
						var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/DocumentServices?OpenAgent"	
						var httpObj = new objHTTP();
						Docova.Utils.showProgressMessage("Processing request. Please wait...");
						var retVal=false;
						if(httpObj.PostData(request, url))
						{
	 						if(httpObj.status=="OK") {
							retVal=true;
						}
					}
					Docova.Utils.hideProgressMessage();
					objView.Refresh(true, false, true);
					return retVal;	
				}
			},
        	"{% trans %}Cancel{% endtrans %}": function() {
				doctypedlg.closeDialog();
        	}
      	}
	});		
}
		
		
//-------------------------- manually archive selected documents ----------------------

function ArchiveSelected()
{

	if(objView.selectedEntries.length == 0){
		//thingFactory.MessageBox("Please select at least one document for archiving.", 16, "Error");
		Docova.Utils.messageBox({
			title: "Error",
			prompt: "{% trans %}Please select at least one document for archiving.{% endtrans %}",
			icontype: 1,
			msgboxtype: 0
		});		
		return false;
	}

	Docova.Utils.messageBox({
		title: "{% trans %}Archive documents?{% endtrans %}",
		prompt: "{% trans with {'%entries%' : '" + objView.selectedEntries.length + "'} %}You are about to archive %entries% document(s).  Are you sure?{% endtrans %}",
		icontype: 2,
		msgboxtype: 4,
		width : 400, 
		onYes: function(){
			var request="";

			//--collect the xml for all nodes to be processed
			request += "<Request>";
			request += "<Action>ARCHIVESELECTED</Action>";
			request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
			if(objView.selectedEntries.length != 0){
				for(var k=0; k<objView.selectedEntries.length; k++){
					request += (objView.selectedEntries[k])? "<Unid>" + objView.selectedEntries[k] +  "</Unid>" :"";
				}
			}
			request += "</Request>";
		
			//--- processing agent url
			var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/LibraryServices?OpenAgent";
			
			var httpObj = new objHTTP();
			Docova.Utils.showProgressMessage("Processing request. Please wait...");
			var retVal=false;
			if(httpObj.PostData(request, url))
			{
			 if(httpObj.status=="OK") {
				retVal=true;
				}
			}
			Docova.Utils.hideProgressMessage();
			//NOTE remember to refresh view with objView.Refresh(true, false, true); JR May 13 2015
			return retVal;	
		} //end onYes
	});
}

//-------------------------- import mail messages from email or dropbox ----------------------

function ImportMessages()
{
	var dlgParams = window;
	var dlgUrl =docInfo.MailAcquireMessagesDialogUrl;
	if (dlgUrl == ''){
			Docova.Utils.messageBox({
				title: "{% trans %}Import Messages Not Available{% endtrans %}",
				prompt: "{% trans %}Import Messages is not available for your current mail configuration.{% endtrans %}",
				icontype: 4,
				msgboxtype: 0
			});
			return false;
	}
	var dlgSettings = "dialogHeight:560px;dialogWidth:810px;center:yes; help:no; resizable:yes; status:no;";
	if( window.showModalDialog(dlgUrl,dlgParams,dlgSettings) > 0){
		objView.Refresh(true, false, true);
	}
//NOTE rember to refresh view with objView.Refresh(true, false, true); JR May 13 2015
}

//----------- advanced search ------------
function AdvancedSearch()	
{
	var ssObj = $("#single").multiselect("getChecked").map(function(){ return this.value;	}).get();	
	if(ssObj == ""){
		var dlgUrl = docInfo.ServerUrl + docInfo.PortalWebPath + "/dlgCustomSearch?OpenForm&edit=false&folder=true";
	}else{
		var dlgUrl = docInfo.ServerUrl + docInfo.PortalWebPath + "/dlgCustomSearch?OpenForm&edit=true&folder=true";
	}
	
	Docova.Utils.createDialog({
		id: "divDlgAdvancedSrch", 
		url: dlgUrl,
		title: "{% trans %}Advanced Search{% endtrans %}",
		height: 410,
		width: 650, 
		useiframe: true,
		defaultButton: 1,
		buttons: {
        	"{% trans %}Save{% endtrans %}": function() {
	        		var cmd = "";
				if($("#divDlgAdvancedSrchIFrame")[0].contentWindow) {	//Chrome/FF
					cmd = $("#divDlgAdvancedSrchIFrame")[0].contentWindow.SetQueryInfo();
				} else {
					cmd = $("#divDlgAdvancedSrchIFrame")[0].window.SetQueryInfo();	//IE
				}
				if(cmd) { openSaveSearch(); }
			},		
        	"{% trans %}Search{% endtrans %}": function() {
				if($("#divDlgAdvancedSrchIFrame")[0].contentWindow) {
					$("#divDlgAdvancedSrchIFrame")[0].contentWindow.CompleteWizard();
				} else {
					$("#divDlgAdvancedSrchIFrame")[0].window.CompleteWizard();
				}
        	},
        	"{% trans %}Close{% endtrans %}": function() {
				$( this ).dialog( "close" );
        	}
      	}
	});
}

//---------------- clipboard functions ----------------
function CopyLink(currentEntry)
{
	var docUrl=docInfo.ServerUrl + docInfo.PortalWebPath + "/wHomeFrame?ReadForm&goto=" + docInfo.LibraryKey + "," + docInfo.FolderID;
	docUrl += (currentEntry)? "," + currentEntry : ""
	 var objExt = doc.DLExtensions;
	 //-----------add 'text' format data to clipboard -----------
	 var flag = objExt.SetCBData("text", docUrl );
}

function CreateShortcut()
{
	var docUrl=docInfo.ServerUrl + docInfo.PortalWebPath + "/wHomeFrame?ReadForm&goto=" + docInfo.LibraryKey + "," + docInfo.FolderID;
	var objExt = doc.DLExtensions;
	//-------------------------------------------
	if(objExt.CreateIEShortcut("DocLogic folder - " + docInfo.FolderName.replace(/[\(\)\<\>\,\;\:\\\/\"\[\]]/, " "), docUrl, true)){
		alert("{% trans %}Folder shortcut was added to your desktop.{% endtrans %}");
	}
}


function ResetFolderFilter(){
//-----Reset the CurrentFolderDiv innerHTML to the folder's set filter and refresh-----
//-----This is different than the ClearAllFilterswhich clears all filters-----
	$("#CurrentFilterDiv").html("");
	var UseOriginalXML = true;
	ApplyDefaultFolderFilter(UseOriginalXML);
	return;
}

function ClearAllFilters()
{
	//-----Clears all filtering including the default folder filter if there is one----
	ClearAllColFilterFlags();
	$("#divViewContent").css("display", "none");
	objView.Refresh(true,true,true);
	ApplyFolderFilter(false);				
	$("#divViewContent").css("display", "");
	return;
}

function ClearAllFiltersSub(UseOriginalXML)
{
	//-----Clears all filtering including the default folder filter if there is one and when the Query option is set to All Versions----
	ClearAllColFilterFlags();
	if (UseOriginalXML) {
		objView.Refresh(true,true,false);
	}
	return;
}

function ClearAllColFilterFlags(){
	$("#CurrentFilterDiv").html("");
	for(var x=0; x<objView.columns.length; x++){
		var objColumn = objView.columns[x]
		$(objColumn).attr("isFiltered", false);
	}
	return;
}

function ClearColFilterFlag(NodeName){
	for(var x=0; x<objView.columns.length; x++){
		var objColumn = objView.columns[x]
		if(NodeName == objColumn.xmlNodeName){
			$(objColumn).attr("isFiltered", false);
		}
	}
	return;
}

function SetColumnFilterFlag(NodeName){
	for(var x=0; x<objView.columns.length; x++){
		var objColumn = objView.columns[x]
		if(NodeName == objColumn.xmlNodeName){
			$(objColumn).attr("isFiltered", true);
		}
	}
	return;
}

function SetAllColFilterFlags(){
	var filterexpArray;
	var filterarray = $("#CurrentFilterDiv").html().split("~");
	
	for (var x=0; x<objView.columns.length; x++){
		var objColumn = objView.columns[x]
		objColumn.isFiltered = false; //first we reset the columns as we come to them..then determine if they are to be set according to the current filter expression
		for (var i=0; i< filterarray.length; i++){
			filterexpArray = filterarray[i].split("=")
			if(filterexpArray[0] == objColumn.xmlNodeName){
				$(objColumn).attr("isFiltered", true);
			}
		}
	}
	return;
}

function CreateFolderFilterStyle(filterExpr){
    try
    {
	var xslFilter = '<?xml version="1.0"?>';
	xslFilter += '<xsl:stylesheet  version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" ><xsl:output method="xml"/>';
	xslFilter += '<xsl:template match="/">';
	xslFilter += '<documents>';
	xslFilter += '<xsl:for-each select="//document[' + filterExpr + ']">';
	xslFilter += '<xsl:copy-of select="."></xsl:copy-of>';
	xslFilter += '</xsl:for-each>';
	xslFilter += '</documents>';
	xslFilter += '</xsl:template>';
	xslFilter += '</xsl:stylesheet>';

	$("#FolderFilterXSL").html(xslFilter);	
		
	}
	catch(e)
	{   
		Docova.Utils.messageBox({
			title: "{% trans %}Filter error{% endtrans %}",
			prompt: "{% trans %}Could not create filter{% endtrans %}: " + e.message,
			icontype: 1,
			msgboxtype: 0
		});		
		return false;
	}    	
return true;
}

function ApplyFolderFilter(UseOriginalXML){

	ApplyQueryOptionToFilter();
	
	var filterexp = "";
	var CurrentFilter = $("#CurrentFilterDiv").html();
	var Fn = "";
	var FnExp = "";
	var NewExp;
	var expArray;
		
	if (CurrentFilter != ""){
		var CurrentFilterArray = CurrentFilter.split("~")
		for (var x=0; x<CurrentFilterArray.length; x++){
			if(CurrentFilterArray[x].indexOf(" or ") != -1){ 
				//----- if ' or ' is found in the string, that is, 'space or space', then we have an 'or' in the expression so just pass it through.
				NewExp = " (" + CurrentFilterArray[x] + ") "
			}else{ //----- ' or ' is not found in the string therefore we want to perform a 'contains"
				expArray = CurrentFilterArray[x].split("=")
				Fn = expArray[0]
				FnExp = "', " + rightBack(leftBack(expArray[1], "'"),"'") + ", '"
				NewExp = "contains(concat(concat(', ', " + Fn + "), ', '), " + FnExp + ")"				
			}

			if(filterexp == ""){
				filterexp = NewExp;
			}else{
				filterexp += " and " + NewExp
			}
		}	
	}
	
	if(filterexp == ""){
		ClearAllFiltersSub(UseOriginalXML);
	}else{
		if(CreateFolderFilterStyle(filterexp)){
			if(UseOriginalXML){
				objView.Refresh(true,false,true);
			}
			
			var el = document.getElementById("FolderFilterXSL");
			var xsl = el.textContent || el.innerText || el.nodeValue || el.innerHTML;
			var parser = new DOMParser();
			var objXSLDoc = parser.parseFromString(xsl,"text/xml");
			var processor = new XSLTProcessor();
			processor.importStylesheet(objXSLDoc); 
			objView.oXml = processor.transformToDocument(objView.oXml); 
			objView.Refresh(false,true,true);
		}
	}
	return;
}

function ApplyDefaultFolderFilter(UseOriginalXML){

	var userfilternodes = docInfo.UserFltrFieldNodes;
	var userfilternodevals = docInfo.UserFltrFieldNodeVals;
	var fltrNodes = docInfo.fltrFieldNodes;

	var userfilternodesArr = docInfo.UserFltrFieldNodes.split(";")
	var userfilternodevalsArr = docInfo.UserFltrFieldNodeVals.split(";")
	var fltrNodesArr = docInfo.fltrFieldNodes.split(";")
	var filterexp = ""

	for (i=0; i< fltrNodesArr.length; i++){
		for (j=0; j<userfilternodesArr.length;j++){
			if (fltrNodesArr[i] == userfilternodesArr[j] && fltrNodesArr[i] != ""){				
				if(filterexp == ""){
					filterexp = fltrNodesArr[i] + "=" + "'" + userfilternodevalsArr[j] + "'"
				}else{
					filterexp =filterexp + "~" + fltrNodesArr[i] + "=" + "'" + userfilternodevalsArr[j] + "'"
				}
			}
		}
	}
	$("#CurrentFilterDiv").html(filterexp);
	SetAllColFilterFlags();
	ApplyFolderFilter(UseOriginalXML);
	return;
}

function ViewColumnSelectFilter(source){
	if(docInfo.EnableFolderFiltering != "1"){return;}

	var NodeList
	var columnvals = "";
	var slist = ""; //sorted list
	var ulist = ""; //unique list
	var columnObj = objView.columns[$(source).attr("colidx")];
	
	if (columnObj == null){ return;}
	var NodeName = columnObj.xmlNodeName;
	var NodeExpr = "//" + NodeName;
	var CurrentSelectedOptionText;
	var NodeListText = "";
		
	NodeList = objView.oXml.selectNodes(NodeExpr) 
	if(NodeList[0]==null){   //no documents in the folder/view
		Docova.Utils.messageBox({ title: "{% trans %}Error{% endtrans %}", prompt: "{% trans %}There are no documents to filter.{% endtrans %}" });
		return;
	}
	
	//-----If NodeList length is greater than one then sort and unique the values-----
	if(NodeList.length > 1){
		for( var i = 0; i < NodeList.length; i++ ){ 
			NodeListText = NodeList[i].text || NodeList[i].textContent;			
			if (NodeListText.indexOf(",") > 0){
				NodeListText = NodeListText.replace(", ", "~")
			}
			if(columnvals == ""){
				columnvals += NodeListText;
			}else{
				columnvals += "~" + NodeListText;
			}
		} 
		slist = Docova.Utils.sort({ inputstr: columnvals, delimiterin: "~", delimiterout: "~" });
		ulist = Docova.Utils.unique({ inputstr: slist, delimiterin: "~", delimiterout: "~" });
	}else{
		ulist = NodeList[0].text;
	}

	CurrentSelectedOptionText = getCurrentSelectedOptionText(NodeName)

	var optionarray = ulist.split("~");
	var items = [];
	items.push("<select name='" + NodeName + "' id='" + NodeName + "' onchange='CreateFilter(this)'  onblur='HideFilterSelection(this)'><option value='All'>{% trans %}All{% endtrans %}</option>");

	for (var x = 0; x < optionarray.length; x ++) {
		if(optionarray[x] == CurrentSelectedOptionText) {
			items.push("<option selected=true value='" + optionarray[x] + "'>" + optionarray[x] + "</option>");
		} else {
			items.push("<option value='" + optionarray[x] + "'>" + optionarray[x] + "</option>");
		}
	}
	items.push('</select>');
	$("#SelectFilterDiv").html(items.join(''));
	
	$("#SelectFilterDiv").position({
		my: "left top",
		at: "left bottom",
		of: source
	});
	
	$("#" + NodeName).css("width", parseInt(columnObj.width) + 5);	
	$("#SelectFilterDiv").css("display", "" );
	var optionlist = "<select name='" + NodeName + "' id='" + NodeName + "' onchange='CreateFilter(this)'  onblur='HideFilterSelection(this)'><option value='All'>All</option>"
	for(var j = 0; j<optionarray.length; j++){
		if(optionarray[j] == CurrentSelectedOptionText){
			optionlist += "<option selected=true value='" + optionarray[j] + "'>" + optionarray[j] + "</option>"; 
		}else{
			optionlist += "<option value='" + optionarray[j] + "'>" + optionarray[j] + "</option>";
		}
	}
	optionlist += "</select>";
}

function CreateFilter(selectobj){
	var filterexp;
 	var NodeName = selectobj.name
 	var NodeValue = selectobj.options[selectobj.selectedIndex].value
 	var CurrentFilter;
 	var CurrentFilterArray;
 	var filterexp;
 	var newfilterexp;
 	var UseOriginalXML = false;

 	filterexp = NodeName + "='" + NodeValue + "'"
 	
 	if(NodeValue == "All"){
 		RemoveFromCurrentFilter(NodeName)
 		UseOriginalXML = true;
 	}else{
 		AddToCurrentFilter(filterexp)
 		SetColumnFilterFlag(NodeName)
 		UseOriginalXML = false;
 	}
 	
 	ApplyFolderFilter(UseOriginalXML)
 	
 	$(selectobj).css("display", "none");
}

function RemoveFromCurrentFilter(NodeName){
//-----Find the node and remove it-----
	var CurrentFilterTxt = $("#CurrentFilterDiv").html();
	var NewFilterTxt = "";
	var CurrentFilterArray = CurrentFilterTxt.split("~")
	var CurrentExpArray;
	
	for (var x=0; x<CurrentFilterArray.length; x++){
		CurrentExpArray = CurrentFilterArray[x].split("=")
		if (CurrentExpArray[0] != NodeName){
			if(NewFilterTxt == ""){
				NewFilterTxt = CurrentFilterArray[x]
			}else{
				NewFilterTxt += "~" + CurrentFilterArray[x]
			}
		}
	}
	ClearColFilterFlag(NodeName)
	$("#CurrentFilterDiv").html(NewFilterTxt);
}

function AddToCurrentFilter(filterexp){
	var CurrentFilterTxt = "";

	CurrentFilterTxt = $("#CurrentFilterDiv").html();
	if(CurrentFilterTxt == ""){
		$("#CurrentFilterDiv").html(filterexp);
	}else{
		if (CurrentFilterTxt.indexOf(filterexp) == -1){
			CurrentFilterTxt += "~" + filterexp;
			$("#CurrentFilterDiv").html(CurrentFilterTxt);
		}
	}
}

function getOffset( el ) {
	var _x = 0;     
	var _y = 0;
	while( el && !isNaN( el.offsetLeft ) && !isNaN( el.offsetTop ) ) {
		_x += el.offsetLeft - el.scrollLeft;
		_y += el.offsetTop - el.scrollTop;
		el = el.offsetParent;
	}

	return { top: _y, left: _x }; 
}  

function getCurrentSelectedOptionText(NodeName){

	var CurrentFilterTxt = $("#CurrentFilterDiv").html();
	var CurrentFilterArray = CurrentFilterTxt.split("~")
	var expValuesArray;
	var currentSelectedOptionText = "";

	for (var x=0; x<CurrentFilterArray.length; x++){
		expValuesArray = CurrentFilterArray[x].split("=")
		if(expValuesArray[0] == NodeName){
			currentSelectedOption = expValuesArray[1];
			currentSelectedOptionText = rightBack(leftBack(currentSelectedOption, "'"),"'")
			return currentSelectedOptionText;
		}
	}
	return currentSelectedOptionText;
}

function HideFilterSelection(objSelectFilterField){
	$(objSelectFilterField).css("display", "none");
}

function ApplyQueryOptionToFilter(){
	var addfilteroption = "";
	var currShowOption = Docova.Utils.getField("selVersionScope");

	if (currShowOption == "REL") {
		addfilteroption = "statno='1' or apflag='1'" //Released or allow preview flag
	}
	if (currShowOption == "NEW") {
		addfilteroption = "statno='0'" //Draft
	}			
	RemoveFromCurrentFilter("statno")
	AddToCurrentFilter(addfilteroption)
	return;
}


function CreateBookmark(currentEntry) {
	if (currentEntry == undefined) {
		currentEntry = objView.currentEntry
			if (currentEntry == undefined || currentEntry == "") {
				window.top.Docova.Utils.messageBox({
					title : "{% trans %}Error{% endtrans %}",
					prompt : "{% trans %}Please highlight a document to create a bookmark for.{% endtrans %}",
					icontype : 1,
					msgboxtype : 0
				});
				return;
			}
	}

	window.top.Docova.Utils.messageBox({
		title : "{% trans %}Create Bookmark?{% endtrans %}",
		prompt : "{% trans %}Would you like to create a Bookmark entry for the highlighted document?{% endtrans %}",
		icontype : 2,
		msgboxtype : 4,
		width : 400,
		onYes : function () {
			//-- choose target folder
			var dlgUrl = docInfo.ServerUrl + docInfo.PortalWebPath + "/dlgFolderSelect?ReadForm&flags=create,notcurrent,norecycle";
			var folderdbox = window.top.Docova.Utils.createDialog({
					id : "divDlgFolderSelect",
					url : dlgUrl,
					title : "{% trans %}Select Bookmark Folder{% endtrans %}",
					height : 420,
					width : 420,
					useiframe : true,
					sourcedocument : document,
					buttons : {
						"{% trans %}Create Bookmark{% endtrans %}" : function () {
							var returnValue = jQuery("#" + this.id + "IFrame", this).get(0).contentWindow.completeWizard();

							//-- returnValue [0]=LibraryID, [1]=FolderID, [2]=FolderUNID, [3]=FolderAccessLevel
							if (returnValue) {
								if (returnValue[1] == docInfo.FolderID) {
									alert("{% trans %}Unable to create bookmark in the same folder as the source document. Please choose an alternate folder.{% endtrans %}");
									return;
								}
								//---------------------------------- Check Folder Access Level -----------------------------------------
								if (Number(returnValue[3]) < 3) {
									alert("{% trans %}You do not have sufficient rights to create documents in the selected folder. Please choose an alternate folder.{% endtrans %}");
									return;
								}
								folderdbox.closeDialog();
								//--- processing agent url
								var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/DocumentServices?OpenAgent";
								//--build the CREATEBOOKMARK request
								var request = "";								
								request += "<Request>";
								request += "<Action>CREATEBOOKMARK</Action>";
								request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
								request += "<Unid>" + currentEntry + "</Unid>";
								request += "<LibraryID>" + returnValue[0] + "</LibraryID>";
								request += "<FolderID>" + returnValue[1] + "</FolderID>";
								request += "</Request>";
								var httpObj = new objHTTP();
								if (httpObj.PostData(request, url)) {
									if (httpObj.status == "OK") {
										if (httpObj.results.length > 0) {
											alert("{% trans %}Bookmark successfully created in chosen folder.{% endtrans %}");
										}
									}
								}
							}
						},
						"{% trans %}Cancel{% endtrans %}" : function () {
							folderdbox.closeDialog();
						}						
					}
				});  //end createDialog
		} //end onYes
	})
}//--end CreateBookmark


function printAttachments(){
	var result = selectDefaultPrinter();
	if(!result){
		alert("Print cancelled");
		return false;	
	}
	
	var folderid = docInfo.FolderID;
	var excludeextensions = "exe,com,dll,ocx";
	
	var tempfolder = DLExtensions.CreateTempFolder();
	if(tempfolder == ""){
		alert("Unable to create temporary folder.  Print cancelled");
		return false;
	}
	if (tempfolder.charAt(tempfolder.length-1) != "\\"){
		tempfolder = tempfolder + "\\";
	}
	
	var IDList = new Array();
	if(objView.selectedEntries.length > 0){
		IDList = objView.selectedEntries;
	}else if (objView.currentEntry !=""){
		IDList.push(objView.currentEntry);
	}else{
		alert("{% trans %}Please select documents to print.{% endtrans %}");
		return false;
	}; 
									
    var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/DocumentServices?OpenAgent&" + Math.random();
    var request = "";
    request += "<Request>";
    request += "<Action>GETATTACHMENTS</Action>";
    request += "<FolderID>" + folderid + "</FolderID>";
    request += "<SelectionType>1</SelectionType>";
    request += "<SelectedDocs>";
	for ( var j=0; j < IDList.length; j ++ ) {
		request += "<DocID>" + IDList[j] + "</DocID>";
	}     	
    request += "</SelectedDocs>";
    request += "<IncludeExtensions></IncludeExtensions>";
    request += "<ExcludeExtensions>"+ excludeextensions +"</ExcludeExtensions>";
    request += "<IncludeThumbnails></IncludeThumbnails>";
    request += "<AppendVersionInfo></AppendVersionInfo>";
    request += "</Request>";

    var shellObj = thingFactory.NewObject("Shell.Application");
      
    var httpObj = new objHTTP();
    httpObj.returnxml = true;
    if (httpObj.PostData(request, url)) {
        if (httpObj.status == "OK") {
            if(httpObj.results.length > 0){
				var returneddata = httpObj.results[0];
				httpObj = null;
				var xmldata = loadXMLString(returneddata);
				var fileNodes = xmldata.getElementsByTagName('File');
				for(var f = 0; f < fileNodes.length; f++){
					var fileNode = fileNodes[f];
					var fileName = fileNode.getElementsByTagName('FileName')[0].text;
					var fileUrl = fileNode.getElementsByTagName('URL')[0].text;
					if (fileName != ""){
						var targetFilePath = tempfolder + fileName;
						if (DLExtensions.DownloadFileFromURL(fileUrl, targetFilePath, true)){
						    shellObj.ShellExecute(targetFilePath, "", "", "print", "1");	
						}else{
 							alert("Error - Unable to print file " + fileName + ". \n\nPlease check that the source file is present and undamaged. \n\n Source file URL: '" + fileUrl + "'");
							break;
						}
					}															
				}		
			}      
        }
    }
    httpObj = null;
    shellObj = null;		
}

function loadXMLString(txt){
	if (window.DOMParser){
		parser=new DOMParser();
  		xmlDoc=parser.parseFromString(txt,"text/xml");
  	// Internet Explorer		
	}else {
  		xmlDoc=new ActiveXObject("Microsoft.XMLDOM");
  		xmlDoc.async="false";
  		xmlDoc.loadXML(txt); 
  	}
	return xmlDoc;
}

//--------------------------------------------------------------------------------------------------------------------
// getRegistryValue
// Description: retrieves a value from the windows registry key
// Input: sRootKeyName - string - root registry hive (eg. HKEY_LOCAL_MACHINE) to access
//           sSubKeyName - string - path to sub key (eg. SOFTWARE\Microsoft)
//           sValueName - string - name of field to return data for, or empty "" to return default
//           sDataType - string - data type of registry key to return (not implemented)
// Output: string - containing registry key value, or "" if no value found
function getRegistryValue(sRootKeyName, sSubKeyName, sValueName, sDataType){

     if (DLExtensions == null){
         alert("Unable to access DLExtensions object.");
         return false;
     }

     var regValue = DLExtensions.getRegistryValue(sRootKeyName, sSubKeyName, sValueName);     
     if((typeof regValue) === "undefined"){
        var regValue = "";
     }
     
     return regValue;
}//--end getRegistryValue

//-- set windows registry key value
function setRegistryValue(keyPath, keyValue, datatype){
     var shell = thingFactory.NewObject("WScript.Shell");
     if (shell == null){
         alert("Unable to access windows script shell object.");
         return false;
     }
     
     if(datatype == undefined){
        datatype = "REG_SZ";
     }

     var result = shell.RegWrite(keyPath, keyValue, datatype);
     shell = null;
     return result;
}

//-- get a listing of printers from registry
function getPrinters(appendport){
	var PrinterNames = new Array();
	
	var WshNetwork = thingFactory.NewObject("WScript.Network");
	if (WshNetwork == null){
         alert("Unable to access windows script network object.");
         return false;
    }
	
	var Printers = WshNetwork.EnumPrinterConnections();
	var tempname = "";
	var tempport = "";
	for(var x =0; x<Printers.Count(); x++){
		if (x%2 == 0){
			//printer port
			tempport = Printers.Item(x);
			tempname = "";
		}else{
			//printer name
			tempname = Printers.Item(x);
			if (appendport){
				tempname = tempname + "," + tempport;
			}
			PrinterNames.push(tempname);
		}		
	}
	
	WshNetwork = null;
	return PrinterNames;
}//--end getPrinters	


//-- set default windows printer
function setDefaultPrinter(printername){	
	if(printername == undefined || printername == ""){
		alert("Error: Unable to set default printer. No printer specified.");
		return false;
	}

	var device = getRegistryValue("HKEY_CURRENT_USER", "Software\\Microsoft\\Windows NT\\CurrentVersion\\Devices", printername, "REG_SZ");
	
	if(device == ""){
		alert("Error: Printer '" + printername + "' could not be selected as the default printer.");
		return false;
	}
	var newprinter = printername + "," + device;
	var DefaultPrinterKey = "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\Device";		
	setRegistryValue(DefaultPrinterKey, newprinter, "REG_SZ")
	
	return true;
}//--end setDefaultPrinter	

//-- get Default printer from registry
function getDefaultPrinter(){	
	var curprinter = getRegistryValue("HKEY_CURRENT_USER", "Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows", "Device", "REG_SZ");
	
	return curprinter;
}//--end getDefaultPrinter

//-- allow users to choose default printer
function selectDefaultPrinter(){
	var printerlist = getPrinters(false);
	var defaultprinter = getDefaultPrinter();
	var returnvalue = thingFactory.SelectKeyword( printerlist.join(","), ",", "Select Default Printer", defaultprinter, false, false, false);
	if (returnvalue == ""){
		return false;
	}
	return setDefaultPrinter(returnvalue);
}//--end selectDefaultPrinter


function checkAvailableHeight(){
	try{
		var vpheight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;	
		if(vpheight == 0){return;}  //-- in case we aren't able to get the height
		var buttonheader = document.getElementById("actionPaneHeader");
		var viewheader = document.getElementById("divViewHeader");
		var headingsheight = buttonheader.clientHeight + viewheader.clientHeight;
		var container = document.getElementById("divViewContent");
		$(container).css("height", vpheight  - headingsheight);
		}catch(e){}
}

//==========================================================================================
// Custom tools submenu
//==========================================================================================

function CreateCustomSubmenu(actionButton) //creates custom contect menu
{
	if(!actionButton) {return}
	var popup = new objPopupmenu();
	popup.textColumnWidth = 100;
	popup.actionHeight=18;
	popup.hasToggleIcons =true;
	var actionHandler = "parent.ProcessCustomSubmenuAction(this)";

//	addAction= function(isActive, isChecked, isBold, actionText, actionName, actionIconSrc, actionShortcutKeyText, actionHandler)

	popup.addAction(true , false, false, "Action 1" , "action1", "" , "", actionHandler);
	popup.addAction(true , false, false, "Action 2" , "action2", "" , "", actionHandler);
	popup.addDivider();
	popup.addAction(true , false, false, "Action 3" , "action3", "" , "", actionHandler);
	
	popup.height = 68;
	popup.width = 120;
	popup.offsetTop= 15;
	popup.offsetRight = 0;

	var oPopBody = oPopup.document.body;
	oPopBody.innerHTML = popup.innerHTML();

	oPopup.show(0, 20, popup.width, popup.height, actionButton);
	return false;

}


//==========================================================================================
//Custom tools submenu handler
//==========================================================================================

function ProcessCustomSubmenuAction(actionObj) //handle action from contect menu
{
	if(!actionObj ) {return false};
	if(oPopup) {oPopup.hide();}
	var action = actionObj.actionName.split("-")[0];
	if(action=="action1"){
		alert("Action 1");
	}
	else if(action=="action2"){
		alert("Action 2");
	}
	else if(action=="action3"){
		alert("Action 3");
	}
	return;
}

InitVars(info);
PreloadBaseImages();
</script>
</head>
<body text="#000000" bgcolor="#FFFFFF" SCROLL="no" oncontextmenu="return false;">
	<!-------------------------- non-scrollable header ----------------------->
	<div id="divHeaderSection" style="width: 100%;">
		<div id="actionPaneHeader" style="width: 100%; padding: 3px 6px 3px 6px; border-bottom: 1px solid #CCC; background-color: #EFEFEF;">
			<table border=0 cellspacing=0 cellpadding=0 width=100%>
				<tr>
					<td id="tdActionBar">
						{% if user_access.ccdocument and folder and (folder.getApplicableDocType|length > 0 or folder.getDefaultDocType != null) %}
						<a onclick="ViewCreateDocument(); return false;" href="" primary="ui-icon-document" secondary="">{% trans %}New Document{% endtrans %}</a>
						{% endif %}
						<a onclick="CreateViewSubmenu(this); return false;" href="" primary="ui-icon-image" secondary="ui-icon-triangle-1-s">{% trans %}View{% endtrans %}</a>
					</td>
					<td align="right"><span	style="font-size: 11px; color: #0050D1; display: none" id="divSearchResultCount"></span></td>
					<td align="right">&nbsp;</td>
				</tr>
			</table>
		</div>
		<!------------------------------------------------------>
		<div id="divViewEventCapture" tabindex="1">
			<!--- BEGIN Document View header ----->
			<div id="divViewHeader" style="width:100%;padding: 0px 0px 0px 0px;">
			<!------------------------------------------------------>
			<div id="divToolbarSearch" style="display:none; position:relative; top:35px; padding: 4px 6px 4px 6px; border-top: 1px solid #CCC;"> 
				<div id="divSearchQuery" style="display:none;"></div>
				<div id="divQueryFields" style="display:none;"></div>
				<span style="width: 75px;">{% trans %}Search for{% endtrans %}:</span>
				<input id="inpQuery" name="inpQuery" type="text" style="width: 330px;" />&nbsp;
				<button id="btnFTSearch">{% trans %}Full-text Search (incl. Attachments){% endtrans %}</button>&nbsp;
				<button id="btnAdvancedSearch">{% trans %}Advanced Search{% endtrans %}</button>&nbsp;
				<select name="MySavedSearches" id="MySavedSearches" onchange="GetSavedSearch(this)">
					<option selected value="0">-{% trans %}My Saved Searches{% endtrans %}-</option>
					{% if savedSearches|length %}
						{% for item in savedSearches %}
					<option value="{{ item.getId }}">{{ item.getSearchName }}</option>
						{% endfor %}
					{% endif %}
				</select>&nbsp;
				<button id="btnFTClear">{% trans %}Clear Search{% endtrans %}</button>&nbsp;
				<button id="btnDelete">{% trans %}Delete Current Saved Search{% endtrans %}</button>
				<span id="divToolbarFilter" align="right" style="display:{{ folder and folder.getFiltering ? '' : 'none' }}; border-left: groove 1px; padding: 4px 6px 4px 6px;">
					<span style="width: 40px;">{% trans %}Filters{% endtrans %}: </span>
					<button id="btnClearAllFilters" title="{% trans %}Clear all folder filtering{% endtrans %}" onclick="ClearAllFilters();">{% trans %}Clear All Filters{% endtrans %}</button>
					<button id="btnResetFolderFilter" title="{% trans %}Reset to folder's default filter{% endtrans %}" onclick="ResetFolderFilter();">{% trans %}Reset Folder Filter{% endtrans %}</button>
				</span>
			</div>
			<!------------------ Content Paging ------------------------------------>
			<div id="divContentPaging" disabled style="display:none; position:relative; top: 35px; border-top:1px solid #CCC; padding: 4px 6px 4px 6px;">
				<table style="font-size:8pt" border=0 cellpadding=0 cellspacing=0>
					<tr>
						<td width=290>{% trans %}Displaying records{% endtrans %} <span id=startCount>1</span>&nbsp;{% trans %}to{% endtrans %}&nbsp;
							<div id="currCount" style="background-color:white; padding-left:1px;padding-right:2px; height:13px; display:inline">100</div>
							<div id="currPic" style="width:50px; display:inline; background-color:white;" onclick="getDisplayCount(this);">&nbsp;
								<IMG SRC= "{{ asset('bundles/docova/images/downarrow-blk.gif') }}" Border=0>&nbsp;
							</div>&nbsp{% trans %}of{% endtrans %}&nbsp;
							<span id=totalCount></span>
						</td>
						<div id="countPicker" style="z-index:1000; position:absolute; display:none; background-color: white; border:1px solid grey; padding:2px"></div>
						<td width=190>
							<button id="btnContPage1" title="{% trans %}First{% endtrans %}"></button>
							<button id="btnContPage2" title="{% trans %}Previous{% endtrans %}"></button>
							<button id="btnContPage3" title="{% trans %}Next{% endtrans %}"></button>
							<button id="btnContPage4" title="{% trans %}Last{% endtrans %}"></button>
						</td>
						<td>{% trans %}Find{% endtrans %} <input type="text" onfocus="selText(this)" style="width:90px" onkeyup="triggerGetPage()" id="GetPage"/></td>
					</tr>
				</table>
			</div>
			<div ID="showDocCountDiv" style="display:none"></div>	
			<!--------------------- End Content Paging --------------------------------->
			<!------------------------------------------------------>
			<div id="divToolbarPerspective" style="display:none; position:relative; top:35px; width:100%; padding: 4px 6px 4px 6px; border-top: 1px solid #CCC;">
				<script id="xmlViewPerspective" type="text/xml">{{ system_perspective|raw }}</script>
				<span style="width: 75px;">{% trans %}Perspective{% endtrans %}:</span>
				<select name="inpSwitchPerspective" id="inpSwitchPerspective" style=" width: 200px;" onchange="ViewSwitchPerspective(this.options[this.selectedIndex].value)">
				{% if valid_perspectives|length %} 
					{% for perspective in valid_perspectives %}
					<option value="{% if perspective.getIsSystem == true %}system_{% else %}custom_{% endif %}{{ perspective.getId }}">{{ perspective.getPerspectiveName }}</option> 
					{% endfor %}
				{% endif %}
				</select>&nbsp;
				<span id="labelViewOptions">{% trans %}Show{% endtrans %}:
				    {% set CANSEEALL = (user_access.ccdocument or (folder ? folder.getSetDVA : false)) %}
                    {% set DEFSHOW = (user ? user.getUserProfile.getDefaultShowOption : '') %}
                    {% set SHOWTYPE = (CANSEEALL ? (DEFSHOW == "" ? "A" : DEFSHOW) : "C") %}					
					<select name="selVersionScope" id="selVersionScope" class="txFld" style=" width: 125px; height:18px;" onchange="ViewApplyQueryOptions();" {{ not folder or (not user_access.ccdocument and not folder.getSetDVA) ? 'disabled="disabled"' : '' }}>
						<option value="" {{ SHOWTYPE == 'A' ? 'selected' : ''  }}>{% trans %}All versions{% endtrans %}
						<option value="REL" {{ SHOWTYPE == 'C'  ? 'selected' : '' }}>{% trans %}Current versions{% endtrans %}
						<option value="NEW" {{ SHOWTYPE == 'P' ? 'selected' : ''  }}>{% trans %}Pending releases{% endtrans %}
					</select>&nbsp;
					<input type="checkbox" id="inpViewScope" value="1" onclick="ViewApplyQueryOptions();" />{% trans %}Include subfolders{% endtrans %}
				</span>
			</div>
			<!------------------------------------------------------>
			</div>
			<!--- END Document View header ----->
		
			<!-------------------------- scrollable content----------------------->
			<!--- BEGIN Document view contents----->
			<div id="divViewContent" style="position:relative; top:35px; width: 100%; padding: 0px; margin: 0px;overflow: auto" ></div>
			<!--- END Document view contents----->
			<!--- End event capture area ----->
		</div>
		<!--- BEGIN Folder filter components----->
		<script id="FolderFilterXSL" type="text/xml"></script>
		<div id="SelectFilterDiv" style="display:none; position:absolute; z-index:100;" ></div>
		<div id="CurrentFilterDiv" style="display:none; position:absolute; top:0px; left:0px;"></div>
		<!--- END Folder filter components----->
		<script language="javascript">InitPage();</script>
		<!------------------ SUBFORM sfKillCache ------------>
		<!------------------Microsoft suggestion to force no cacheing of documents------------>
<HEAD>
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="CACHE-CONTROL" CONTENT="0">
<META HTTP-EQUIV="EXPIRES" CONTENT="0">
</HEAD>
<!------------------END SUBFORM sfKillCache  ------------>
</body>
</html>