<!doctype html>
<html>
<head>
<title>{% trans %}Search{% endtrans %}</title>
<META content="0" http-equiv="expires">
<META content="0" http-equiv="cache-control">
<META content="no-cache" http-equiv="Pragma">

<link rel="stylesheet" href="{{ asset('bundles/docova/css/smoothness/jquery-ui.css') }}">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/styleFormsViews.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/css/styleFolderBase.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/css/multiselect.css') }}" type="text/css" />
<script type="text/javascript" language="JavaScript" src="{{ asset('bundles/docova/jquery/jquery.js') }}"></script>
<script type="text/javascript" language="JavaScript" src="{{ asset('bundles/docova/jquery/jquery-ui.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/commonFunctions.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/toolbar.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/sarissa.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/sarissa_ieemu_xpath.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/viewObjects.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/multiselect.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/Docova.js') }}"></script>
{% include 'DocovaBundle:Default:scriptMessagesTranslation.html.twig' %}
<script language="JavaScript" type="text/javascript">
var SUBJECTNODE = "F8";
var info = {
	"UserName" : "{{ user.getUserNameDn|replace({'\\': '\\\\'}) }}",
	"UserNameAB" : "{{ user.getUserNameDnAbbreviated|replace({'\\': '\\\\'}) }}",
	"UserNameCN" : "{{ f_Name("[CN]", user.getUserNameDnAbbreviated)|replace({'\\': '\\\\'}) }}",
	"UserRoles" : "$$WebClient;[User]",
	"HTTP_Referer" : "{{ url('docova_homepage') }}?ReadForm",
	"Query_String" : "ReadForm",
	"Query_String_Decoded" : "ReadForm",
	"Path_Info_Decoded" : "{{ path('docova_search') }}?ReadForm",
	"ServerName" : "{{ app.request.server.get('HTTP_HOST') }}",
	"ServerNameNotes" : "",
	"ServerUrl" : "{{ app.request.getscheme }}://{{ app.request.server.get('HTTP_HOST') }}",
	"NsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
	"PortalWebPath" : "{{ path('docova_homepage')[:path('docova_homepage')|length - 1] }}",
	"PortalNsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
	"CanDeleteDocuments" : "true",
	"DefaultPerspective" : "{{ default_perspective.getIsSystem ? 'system_' : 'custom_' }}{{ default_perspective.getId }}",
	"FacetMapID" : "system_{{ default_perspective.getFacetMap.getId }}",
	"FacetMapFields" : "{{ default_perspective.getFacetMap.getFacetMapFields }}",
	"FacetMapName" : "{{ default_perspective.getFacetMap.getFacetMapName }}", 
	"EnableDomainSearch" : "{% if global_settings.getEnableDomainSearch is defined %}true{% else %}false{% endif %}",
	"VideoCategory" : "Search",
	"EnableFolderFiltering" : "1",
	"refreshView" : '{% trans %}Refresh view{% endtrans %}',
	"selectAll" : '{% trans %}Select All{% endtrans %}',
	"deselectAll" : '{% trans %}Deselect All{% endtrans %}',
	"expandAll" : '{% trans %}Expand All{% endtrans %}',
	"collapseAll" : '{% trans %}Collapse All{% endtrans %}',
	"sortAscending" : '{% trans %}Sort ascending{% endtrans %}',
	"sortDescending" : '{% trans %}Sort descending{% endtrans %}',
	"sortDefault" : '{% trans %}Default sort{% endtrans %}',
	"deleteColumn" : '{% trans %}Delete column{% endtrans %}',
	"insertColumn" : '{% trans %}Insert column{% endtrans %}',
	"appendColumn" : '{% trans %}Append column{% endtrans %}',
	"categorize" : '{% trans %}Categorize{% endtrans %}',
	"properties" : '{% trans %}Properties{% endtrans %}',
	"SessionDateFormat" : "{{ global_settings.getDefaultDateFormat|lower }}"	
};

var objView = null; //view object
var currentPerspective = ""; //current perspective id
var isiPad = navigator.userAgent.match(/iPad/i) != null; //Detects if User is using an iPad.  Used to handle things like double click.

var dlgParams = new Array();  //params array that gets used by dialogs
var retValues = new Array(); //ret params array that can be used by dialogs

$(document).ready(function() {
	if ($('#divTab_2').length) {
		$('#custom_search_tab').show();
	}
	$('#search_tabs').tabs({ heightStyle: 'fill' });

	$('.expandcollapse').on('click', function() {
		if ($(this).prop('title') == 'expand') {
			$(this).hide();
			$('.expandcollapse[title=collapse]').show();
			$('#searchOptionSection').show();
		}
		else {
			$(this).hide();
			$('.expandcollapse[title=expand]').show();
			$('#searchOptionSection').hide();
		}
		checkAvailableHeight();
	});

	$('.tree').on('click', function(){
		var child = $(this).attr('expcol');
		if ($(this).prop('title') == 'expand') {
			$('#' + child).show();
			$(this).prop('alt', '-');
			$(this).prop('title', 'collapse');
			$(this).prop('src', '{{ asset('bundles/docova/images/minus.gif') }}');
		}
		else {
			$('#' + child).hide();
			$(this).prop('alt', '+');
			$(this).prop('title', 'expand');
			$(this).prop('src', '{{ asset('bundles/docova/images/plus.gif') }}');
		}
	});

	$('#inpQuery').on('keypress', function(e) {
		if (e.which == 13) {
			ViewFTSearch();
		}
	});

	$('input[name=selsub]').on('click', function() {
		if ($(this).prop('checked')) {
			$(this).parent().next().find('input').each(function() {
				$(this).prop('checked', true);
			});
		}
		else {
			$(this).parent().next().find('input').each(function() {
				$(this).prop('checked', false);
			});
		}
	});

	$('#imgDeselectAll').on('click', function() {
		$('ul[id=tblLibraryData] :input').prop('checked', false);
	});

	$('#imgSelectAll').on('click', function() {
		$('ul[id=tblLibraryData] :input').prop('checked', true);
	});

	$('input:text')
 		.button()
		.css({
			'font' : 'inherit',
			'color' : 'inherit',
			'text-align' : 'left',
			'outline' : 'none',
			'cursor' : 'text',
			'background' : '#ffffff',
			'padding' : '.35em'		
	}).off('keydown');
	$('input:text').hover( function() {$('input:text').css("background", "#ffffff");});
	$('#inpQuery').hover( function() {$('#inpQuery').css("background", "#ffffff").removeAttr("placeholder");});
	
	$("#MySavedSearches").multiselect({
		multiple: false,
		header: false,		
		noneSelectedText: "{% trans %}My Saved Searches{% endtrans %}",
		selectedList: 1,
		height: "auto",
		showSelected: false
	});	
	$("#MySavedSearches").multiselect("clearSingle");
	$("#MySavedSearchesbtn").css({ 'vertical-align': 'bottom' });
	
	$("#inpSwitchPerspective").multiselect({
		multiple: false,
		header: false,		
		noneSelectedText: "{% trans %}Results Perspective{% endtrans %}",
		selectedList: 1,
		height: "auto"
	});	
	
	$( "#SearchType" ).css("display", "none");
	$( "#SearchType" ).buttonset();
	
	$("#MaxResults").multiselect({
		multiple: false,
		header: false,
		minWidth: 70,
		selectedList: 1,
		height: "auto",
		open: function(event, ui){$(".ui-icon-circle-close").hide();}
	});	

	$("#btnFTSearch").button({
		text: true,	
		icons: { primary: "ui-icon-search"}
	}).click(function(event){
		event.preventDefault();
		ViewFTSearch();
	});

	$("#btnAdvancedSearch").button({
		text: true,
		icons: { primary: "ui-icon-zoomin"}
	}).click(function(event){
		event.preventDefault();
		AdvancedSearch();
	});
	
	$("#btnFTClear").button({
		text: true,
		disabled: true,
		icons: { primary: "ui-icon-arrowrefresh-1-e"}
	}).click(function(event){
		event.preventDefault();
		ViewFTClear();
	});
	
	$("#btnDelete").button({
		text: true,
		disabled: true,
		icons: { primary: "ui-icon-trash"}
	}).click(function(event){
		event.preventDefault();
		DeleteSearch();
	});
	
	$("#btnExportToExcel").button({
		text: true,
		disabled: true,		
		icons: { primary: "ui-icon-suitcase"}
	}).click(function(event){
		event.preventDefault();
		exportToExcel();
	});
	
	$("#divOptions").accordion({
        collapsible: true,
        active: 0,
        heightStyle: "content"
	});
	
	$(".dateField").datepicker();	
	
	InitVars(info);

	//-- if custom search panel has been configured trigger it's post load function --
	try{customSearchPostLoad();}catch(err){}

	ViewLoadDefaultPerspective();  
	
	//-- resize the form and add event handler to handle on-resize event
	checkAvailableHeight();
	if ( ! isiPad )
		window.addEventListener("resize", checkAvailableHeight);	
});

function SetRowColor(obj, mode){
	//done dataisland
	if (mode == true){
		obj.style.backgroundColor='#dfefff';
	}else{
		obj.style.backgroundColor='';
	}	
}


// ------------- preloads icons used in view object---------------
function PreloadBaseImages()	//done
{
	var curNsf = "/" + NsfName + "/";
	var imgArray = new Array();
	var imgNames = "cat-collapse.gif,cat-expand.gif,coloptions.gif,pincolumn.gif,viewRefreshGreen.gif,chkrbrdclosed.gif,chkrbrdopened.gif,icn16-stddoc.gif,icn16-unknowndoc.gif,icn16-webpage.gif,sortadred-default.gif";
	var imgList = imgNames.split(",");

	for (k=0; k<imgList.length; k++)
	{
	imgArray[k] = new Image();
	imgArray[k].src = curNsf + imgList[k] + "?Open";
	}
}

// ------------- sets the view object and loads default view perspective---------------
function ViewLoadDefaultPerspective()		//done
{
	objView = new ObjView("divViewContent");
	objView.iconBaseUrl = "/" + NsfName + "/";
	objView.imgPath = "{{ asset('bundles/docova/images/') }}";
	objView.baseUrl = "/" + NsfName + "/";
	objView.baseXmlUrl="/" + NsfName + "/search.xml?OpenAgent" ;
	objView.showSelectionMargin = false;
	objView.folderID = ""; 
	objView.columnPropertiesDialogUrl = "/" + NsfName + "/dlgViewColumnProperties?OpenForm&LibraryID=GLOBALSEARCH"; 
	objView.serverName=ServerName;
	objView.nsfName=NsfName;
	objView.serviceAgent="ViewServices";
	objView.dateFormat = docInfo.SessionDateFormat.toUpperCase();

	ViewLoadPerspective(true);
	ViewAttachEvents();
}

// ======================= view event handlers =======================

//Global varables
var selectDragMode; //specifies how the drag selection over checkboxes should be handled;

// event attacher
function ViewAttachEvents()		//daw1
{
	var paneObj = document.getElementById("divViewEventCapture");
	if(!paneObj) {return false;}
	$(paneObj).on("mousedown", function(e){ ViewHandleEvent(e); });
	$(paneObj).on("dblclick", function(e){ ViewHandleEvent(e); }); //e.stopPropagation(); 
	$("#divViewEventCapture").on("keydown", function(e){ ViewHandleEvent(e); });
	$(paneObj).on("contextmenu", function(e){ ViewHandleEvent(e);});
	
	document.body.onmouseup=ViewClearEventState;
}


//=====================  event dispatcher ===========================
function ViewHandleEvent(event)		//done
{
	var eventSource = event.target; //what actually fired the event
	var eventType = event.type; 
	var sourceClass = $.trim(eventSource.className); 
	var sourceId = $.trim(eventSource.id); 
	var keyCode = event.keyCode;
	var currentRow; //table row containing the eventSource
	var sourceType="";
		
	//console.log('ViewHandleEvent >> eventSource.tagName: ' + eventSource.tagName + '; eventType: ' + eventType + '; sourceClass: ' + sourceClass + '; sourceId: ' + sourceId + '; keyCode: ' + keyCode) //daw1	
	
	if(!eventSource){return}
	
	currentRow = $(eventSource).closest("TR").get(0);
	//------------------ check if there are any event handlers for the event source --------
	 if (  $(eventSource).hasClass("far") ||$(eventSource).hasClass("fas") ||$(eventSource).hasClass("fab")  )
	 {
		if ( $(eventSource).hasClass(objView.categoryExpandClass) || $(eventSource).hasClass(objView.categoryCollapseClass) )
		{
			ViewEventDispatch(event, eventType, eventSource, "categorytoggle", keyCode, currentRow);
			return;
		}else if ($(eventSource).hasClass("fa-sync")  ){
			ViewEventDispatch(event, eventType, eventSource, "viewrefresh", keyCode);
			 return;
		}else if ( $(eventSource).hasClass("sorting")){
			 ViewEventDispatch(event, eventType, eventSource, "viewsort", keyCode);
			 return;
		}
	 }

	//------------- clickable images
	if(eventSource.tagName == "IMG" ) 
		{
			if(sourceClass=="listsorticon")
			{
				 ViewEventDispatch(eventType, eventSource, "viewsort", keyCode, currentRow, event);
				 return;
			}
			else if(sourceClass=="listviewrefresh")
			{
				ViewEventDispatch(eventType, eventSource, "viewrefresh", keyCode, currentRow, event);
				return;
			}
			else if(sourceClass=="listexpandericon")
			{
				//currentRow = eventSource.parentElement.parentElement.parentElement;
				ViewEventDispatch(eventType, eventSource, "categorytoggle", keyCode, currentRow, event);
				return;
			}			
		}
	
	//------------ input fields		
	if(eventSource.tagName == "INPUT" ){
		if(sourceId=="inpQuery"){
		 	ViewEventDispatch(eventType, eventSource, "ftquery", keyCode, currentRow, event);
		 	return;				
		}else if(sourceId.substring(0, 14)  =="inpQueryCustom"){
		 	ViewEventDispatch(eventType, eventSource, "ftquerycustom", keyCode, currentRow, event);
		 	return;
		}
	}

	//------------ cells/rows
	//while(eventSource.tagName != "BODY")
	//{	
	if(eventSource.tagName == "TD" || eventSource.tagName == "TH" )
	{
		//currentRow = eventSource.parentElement;
		if(sourceClass=="listheader" || sourceClass=="listheaderfr" || sourceClass=="listheaderfltr" || sourceClass=="listheaderfrfltr") //column heading
		{
			ViewEventDispatch(eventType, eventSource, "viewheader", keyCode, currentRow, event);
			return;
		}
		else if(sourceClass=="listselheader") //selection column heading
		{
			ViewEventDispatch(eventType, eventSource, "viewselectheader", keyCode, currentRow, event);
			return;
		}
		else if(sourceClass=="listitem" || sourceClass=="listitemfr") //data or total cell
		{
			if(currentRow.isRecord || currentRow.attributes.isRecord)
			{
				ViewEventDispatch(eventType, eventSource, "datarow", keyCode, currentRow, event);
				return;
			}
			if(currentRow.isCategory) 
			{
				ViewEventDispatch(eventType, eventSource, "categoryrow", keyCode, currentRow, event);
				return;
			}
			if(currentRow.isSubtotal)
			{
				ViewEventDispatch(eventType, eventSource, "subtotalrow", keyCode, currentRow, event);
				return;
			}
			if(currentRow.isTotal)
			{
				ViewEventDispatch(eventType, eventSource, "totalrow", keyCode, currentRow, event);
				return;
			}
		}
		else if(sourceClass=="listcat" || sourceClass=="listcatfr") //category heading cell
		{
			ViewEventDispatch(eventType, eventSource,  "categoryrow", keyCode, currentRow, event);
			return;
		}
		else if(sourceClass=="listsel") //selection margin cell
		{
			ViewEventDispatch(eventType, eventSource,  "selectcell", keyCode, currentRow, event);
			return;
		}
	}
	eventSource = eventSource.parentElement;
	sourceClass = eventSource.className; 
	sourceId = eventSource.id; 
	//}

	ViewEventDispatch(eventType, eventSource,  "", keyCode, currentRow, event);
}

//------------------ dispatch event handler based on event source and type --------
function ViewEventDispatch(eventType, eventSource, sourceType, keyCode, currentRow, event)		//done
{

	//console.log('ViewEventDispatch >> eventType: ' + eventType + '; eventSource: ' + eventSource + '; sourceType: ' + sourceType + '; keyCode: ' + keyCode + '; currentRow: ' + currentRow + '; event: ' + event) //daw
	
	/*	if(eventType=="mousemove") {
		if(sourceType=="selectcell") {ViewDocSelectDrag(eventSource);return CancelEvent();} //doc selection column
		if(sourceType=="viewheader" ) {ViewColumnDrag(eventSource);return CancelEvent();} //doc selection column */
	if(eventType=="mousedown" && event.which == 1) {
		//$("#divViewContent").focus(); //daw1
		if(sourceType=="selectcell"){ViewDocSelectClick(eventSource);} //doc selection column
		if(sourceType=="viewsort") {ViewSortColumn(eventSource);}
		if(sourceType=="viewrefresh" || sourceType=="viewselectheader") { //view refresh icon
			if(docInfo.EnableFolderFiltering == "1") {
				$("#divViewContent").css("display", "none");
				objView.Refresh(true,false,true,false,false);
				$("#divViewContent").css("display", "");
			} else {
				objView.Refresh(true, false, true);
			}
		} 
		if(sourceType=="categorytoggle") {ViewToggleCategory(currentRow);}
		if(sourceType=="datarow" || sourceType=="subtotalrow" || sourceType=="categoryrow" || sourceType=="thumbnail") {
			if(isiPad){  //if single click on an iPad, if row is already highlighted then open doc like a double click.
				if( currentRow.id == objView.currentEntry){ //check to ensure a doc is highlighted
					if(sourceType=="datarow" || sourceType=="subtotalrow" || sourceType=="categoryrow" || sourceType =="thumbnail" ) {ViewHighlightEntry(currentRow);}
					if(sourceType=="datarow"){CreateEntrySubmenu(eventSource);}
				}else{
					ViewHighlightEntry(currentRow);
				}
			}else{
				ViewHighlightEntry(currentRow);
			}
		}
		if(sourceType=="viewheader" ) {ViewColumnSelectFilter(eventSource);}	
	}
	/*else if(eventType=="mouseover")
		{
		if(sourceType=="viewheader" ) {ViewColumnDragOver(eventSource);}
		}
	else if(eventType=="mouseup")
		{
		if(sourceType=="viewheader" ) {ViewColumnDragDrop(eventSource, eventType);}
		return ViewClearEventState();
		}
	else if(eventType=="click" && event.which == 1)
		{
		return CancelEvent();
		}*/
	else if(eventType=="dblclick" )
	{
		if(sourceType=="datarow") {
			//--check for special case of using domain search
			if(docInfo.EnableDomainSearch){
				var searchUnsubscribed = Docova.Utils.getField({ field: "SearchUnsubscribed" });		
				if (searchUnsubscribed == '') {
					//-- if not using domain search in this case open normally
					ViewLoadDocument(false);
				}else{
					//-- open doc using url since it may be on a different server				
					OpenDomainSearchDocument();
				}
			} else {
				ViewLoadDocument(false);
			}
		}
		if(sourceType=="categoryrow" ) {ViewToggleCategory(currentRow);}	
		if(sourceType=="thumbnail"){ViewLoadDocument(false);}
		if ( sourceType=="coverflow"){ViewHighlightEntry(currentRow);ViewLoadDocument(false);}
	}
	/*else if(eventType=="mouseout")
		{
		return ViewClearEventState();
		}*/
	else if(eventType=="keydown")
	{
		ViewHandleKeyboardEvent(eventType, eventSource, sourceType, keyCode, currentRow);
	}
	/*else if(eventType=="selectstart")
		{
		if(sourceType !="ftquery" && sourceType != "ftquerycustom") {return CancelEvent();}
		}*/
	else if(eventType=="contextmenu")
	{
		if(sourceType=="datarow" || sourceType=="subtotalrow" || sourceType=="categoryrow" || sourceType =="thumbnail" ) {ViewHighlightEntry(currentRow);}
		if(sourceType=="datarow"){CreateEntrySubmenu(eventSource);}
		if(sourceType=="thumbnail"){CreateThumbnailsSubmenu(eventSource);}
		if(sourceType=="viewheader" || sourceType=="viewselectheader" || sourceType=="viewrefresh") {
			ViewShowContextPopup(sourceType, eventSource);
			return CancelEvent(event);
		}
		return CancelEvent(event);
	}
}

function CreateEntrySubmenu(clickObj) //creates right-click context menu		//done
{
	if(!clickObj) {return;}

	Docova.Utils.menu({
		delegate : clickObj,  
		width : 190,
		position : 'XandY',
		menus : [
			{ disabled: docInfo.isRecycleBin, title : '{% trans %}Open in New Window{% endtrans %}', itemIcon: "newwin", action : 'OpenDocumentWindow();' },
			{ disabled: docInfo.isRecycleBin, title : '{% trans %}Add to favorites{% endtrans %}', itemIcon: "star", action : 'ViewAddToFavorites()' },
			{ separator : true },
			{ disabled: docInfo.isRecycleBin && !docInfo.CanDeleteDocuments, title: "{% trans %}Cut{% endtrans %}", itemIcon: "scissors", action: "ViewCutSelected()" },
			{ disabled: docInfo.isRecycleBin, title: "{% trans %}Copy{% endtrans %}", itemIcon: "copy", action: "ViewCopySelected()" }
		]
	});
}

function ViewAddToFavorites()		//done
{
	var entryObj = objView.GetCurrentEntry();
	if(!entryObj) {return; }
	var docId = entryObj.GetElementValue("docid");
	var dataRow = document.getElementById(objView.currentEntry );
	//--- processing agent url
	var url = docInfo.ServerUrl  + docInfo.PortalWebPath + "/UserDataServices?OpenAgent";
	var request="";
	var docDescription = entryObj.columnValues.join(", ");
	//--build the update request
	request += "<Request>";
	request += "<Action>NEW</Action>";
	request += "<LibraryKey>DK" + dataRow.attributes.librarykey.value  + "</LibraryKey>";
	request += "<Unid>" + docId +  "</Unid>";
	request += "</Request>";

	var httpObj = new objHTTP();
	if (httpObj.PostData(request, url))	{
		//all OK
		if (httpObj.status=="OK"){
			//----- refresh folder control --
			var objLeftFrame = window.parent.frames["fraLeftFrame"];	
			if (objLeftFrame){
				objLeftFrame.ReloadFavorites();
			}
			Docova.Utils.messageBox({ prompt: "{% trans %}Document added to favorites.{% endtrans %}", title: "{% trans %}Add to favorites{% endtrans %}" });
			return true;
		}
	}
	return false;
}


//-------- clipboard functions --------------------

function ViewCopySelected()		//done
{
	if(objView.currentEntry =="" && objView.selectedEntries.length == 0) {return false;};
	ViewSetClipboard("copy");
}

function ViewCutSelected()		//done
{
	if(objView.currentEntry =="" && objView.selectedEntries.length == 0) {return false;};
	ViewSetClipboard("cut");
}

function ViewSetClipboard(action)		//done
{
	if(objView.currentEntry =="" && objView.selectedEntries.length == 0) {return false;};
	var dataRow = document.getElementById(objView.currentEntry );
	
	
	var clipdata="<srclibkey>" + "DK"+dataRow.attributes.librarykey.value + "</srclibkey>";
	
	if(objView.selectedEntries.length > 0)
	{
		for(var k=0; k<objView.selectedEntries.length; k++)
		{
			clipdata+="<Unid>" + objView.selectedEntries[k] + "</Unid>";
		}
	}
	else
	{
		clipdata+="<Unid>" + objView.currentEntry  + "</Unid>"
	}
	Docova.Utils.setCookie({ keyname: "clipaction", keyvalue: action });
	Docova.Utils.setCookie({ keyname: "clipdata", keyvalue: clipdata });
}

function OpenDocumentWindow(docID)		//done
{
	var targetUnid=(docID)? docID : objView.currentEntry;
	var entryObj=objView.GetCurrentEntry();
	if(!targetUnid){return false;}

	var dataRow = document.getElementById(objView.currentEntry );
	
	var isArchive=false;
	var docUrl = "";
	if ( entryObj ){
		var libid = entryObj.GetElementValue("libid");
		var isapp = entryObj.GetElementValue("isapp");
		
		if(libid.indexOf("A_") != -1){
			libid=libid.split("_")[1];
			isArchive=true;
		}
		if(isArchive){
			var exists = false;
			$('input[name=selectedlib]').each(function() {
				if ($(this).val() == libid) {
					exists = true;
					return false;
				}
			});

			if(!exists) {return Docova.Utils.messageBox({ prompt: "{% trans %}Document Url cannot be located.{% endtrans %}", icontype: 1, title: "{% trans %}Error{% endtrans %}" });}
			docUrl = libPath.text  + "/wDocument?ReadForm&mode=preview&";
			docUrl += "&typekey=" + entryObj.GetElementValue("typekey") + "&datadocsrc=A&datadoc=" + objView.currentEntry;
		}
	}
	
	if ( docUrl == "" ) {
		if (isapp == 1) {
			docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/wReadDocument/" + targetUnid + "?OpenDocument&ParentUNID=" + libid + "&mode=window";
		}
		else {
			docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/ReadDocument/" + targetUnid + "?OpenDocument&ParentUNID=" + docInfo.DocID + "&mode=window";
		}
	}

	var leftPosition = (screen.width) ? (screen.width-700)/2 : 20;
	var topPosition = (screen.height) ? (screen.height-500)/2 : 20;
	dlgSize = "height=500,width=700,top=" + topPosition+ ",left=" + leftPosition;
	var dlgSettings = dlgSize + ",status=no,toolbar=no,menubar=no,location=no,scrollbars=yes,resizable=yes";
	return window.open(docUrl,targetUnid,dlgSettings); //Display the address dialog
}

// ------------------------------------ document list key handlers ------------------------------------------------

function ViewHandleKeyboardEvent(eventType, eventSource, sourceType, keyCode, currentRow) //done
{
	var DEL_KEY = 46;
	var ENTER_KEY = 13;
	var DOWNARROW_KEY = 40;
	var UPARROW_KEY = 38;
	var F9_KEY = 120;
	var SPACE_KEY= 32;
	var ESC_KEY= 27;

	//The keydown event.target is different in different browsers. Use view object currentEntry to re-set currentRow
	//and sourceType
	if(objView.currentEntry){
		currentRow = $("#divViewEventCapture").find("#" + objView.currentEntry).get(0);
		if($(currentRow).attr("isRecord")){sourceType = "datarow";}
		if($(currentRow).attr("isCategory")){sourceType = "categoryrow";}
		if($(currentRow).attr("isSubtotal")){sourceType = "subtotalrow";}
		if($(currentRow).attr("isTotal")){sourceType = "totalrow";}
	}


	if(keyCode == DEL_KEY) {
		if(sourceType=="datarow" ){objView.DeleteSelectedEntries();}
	}
	else if(keyCode == ENTER_KEY) {
		if(sourceType=="datarow" && objView.currentEntry != "") //process entry only if it is highlighted
		{
			ViewLoadDocument(false);
		}
		if(sourceType=="categoryrow" || sourceType== "categorycell") {ViewToggleCategory(currentRow);}	
		if(sourceType=="ftquery") {ViewFTSearch();}	
	}
	else if(keyCode == DOWNARROW_KEY) {
		if(sourceType=="datarow" || sourceType=="categoryrow" || sourceType=="subtotalrow")
		{
			ViewMoveDocHighlight("down");
		}
	}
	else if(keyCode == UPARROW_KEY) {
		if(sourceType=="datarow" || sourceType=="categoryrow" || sourceType=="subtotalrow")
		{
			ViewMoveDocHighlight("up");
		}
	}
	else if(keyCode == ESC_KEY) {
		return;
		if(sourceType=="datarow" || sourceType=="categoryrow" || sourceType=="subtotalrow" && objView.currentEntry != "") //select the entry only if it is highlighted
			{
				ViewResetEntryHighlight();
			}
		if(sourceType=="ftquery") {ViewFTClear(); document.getElementById("inpQuery").focus();}	
		if(sourceType=="ftquerycustom") {ViewFTClear();}
		ViewUnloadDocument("close");
	}
	else if(keyCode == F9_KEY) {
		objView.Refresh(true, false, true);
	}	
	
	else if(keyCode == SPACE_KEY) {
		if(sourceType=="datarow" && objView.currentEntry != "") //select the entry only if it is highlighted
			{
				ViewDocSelectClick(document.getElementById(objView.currentEntry));
			}
		if(sourceType=="categoryrow" || sourceType== "categorycell") {ViewToggleCategory(currentRow);}	
		if(sourceType=="ftquery"){return;} //let it go
		if(sourceType=="ftquerycustom"){return;} //let it go
		ViewClearEventState();
		CancelEvent(); //handled
	}
}


//===================== Event handler functions ===================

//----------------------------- highlight entry on click -------------------
function ViewHighlightEntry(source)
{
	if(!source) {return false;}
	objView.HighlightEntryById(source.id);
	CancelEvent();
}

//----------------------------- un-highlight entry on ESC key -------------------
function ViewResetEntryHighlight()
{
	objView.ResetHighlight();
}

//----------------------------- up/down keys on highlighted entry ------------------------
function ViewMoveDocHighlight(dir) //up/down arrow key handler
{
	objView.MoveEntryHighlight(dir) ;
	return CancelEvent();
}


// ----- called to refreesh the view after adding/editing a document --------------
function ViewReload(selectDoc)
{
	objView.currentEntry = selectDoc;
	objView.Refresh(true,false,true);
}

//----------------  open/close document handlers -----------------------

function ViewLoadDocument(docUrl)
{
	if(!docUrl && objView.currentEntry)
	{
		var entryObj=objView.GetCurrentEntry();
		var isArchive=false;
		var libid = entryObj.GetElementValue("libid");
		var isapp = entryObj.GetElementValue("isapp");
		var folderID = isapp == 1 ? null : entryObj.GetElementValue("folderid");
		var folderunid = isapp == 1 ? null :  folderID.substring(2);
		if(libid.indexOf("A_") != -1){
			libid=libid.split("_")[1];
			isArchive=true;
		}
		var mode = null;
		var exists = false;
		$('input[name=selectedlib]').each(function() {
			if ($(this).val() == libid) {
				exists = true;
				return false;
			}
		});
		if(!exists && !$('#SearchUnsubscribed').is(':checked')) {return Docova.Utils.messageBox({ prompt: "{% trans %}Document Url cannot be located.{% endtrans %}", icontype: 1, title: "{% trans %}Error{% endtrans %}" });}
		else if (exists || $('#SearchUnsubscribed').is(':checked')) {
			var libPath = docInfo.PortalWebPath;
//			if ($('#SearchUnsubscribed').is(':checked')) {
//				mode = 'window';
//			}
		}
		if(isArchive){
			docUrl = libPath + "/wDocument?ReadForm&mode=preview";
			docUrl += "&typekey=" + entryObj.GetElementValue("typekey") + "&datadocsrc=A&datadoc=" + objView.currentEntry;
		}
		else{
			if (mode == 'window') {
				if (isapp == 1) {
					docUrl = libPath + "/wReadDocument/" + objView.currentEntry + "?OpenDocument&ParentUNID="+libid+"&mode=" + mode ;
				}
				else {
					docUrl = libPath + "/ReadDocument/" + objView.currentEntry + "?OpenDocument&ParentUNID=wSearchResults&mode=" + mode ;
				}
			}
			else {
				if (isapp == 1) {
					docUrl = libPath + "/wReadDocument/" + objView.currentEntry + "?OpenDocument&ParentUNID="+libid;
				}
				else {
					docUrl = libPath + "/ReadDocument/" + objView.currentEntry + "?OpenDocument&ParentUNID=wSearchResults";
				}
			}
		}
	}
	if(!docUrl) {return Docova.Utils.messageBox({ prompt: "{% trans %}Document Url cannot be located.{% endtrans %}", icontype: 1, title: "{% trans %}Error{% endtrans %}" });}
	
	var title = entryObj.GetElementValue(SUBJECTNODE);
	var searchtabwin = window.top.Docova.getUIWorkspace(document).getDocovaFrame("searchtabs", "window");
	searchtabwin.objTabBarSearch.CreateTab(title, objView.currentEntry, "A", docUrl, "", false);
	return;
}

function ViewUnloadDocument()
{
	window.parent.fsContentFrameset.rows = "0,*";
	ViewRestoreFocus();
	var curContentUrl = window.parent.fraContentBottom.location.href;
	if(curContentUrl.indexOf("about:blank")==-1){
		window.parent.fraContentBottom.location.href = "about:blank" ;
	}
}

function ViewRestoreFocus()
{
	if(!objView) {return;}
	if(objView.currentEntry) 
	{
		objView.HighlightEntryById(objView.currentEntry);
	}
	else
	{
		$("#divViewContent").focus();
	}
}
//------------ perspective handlers -----------------------------

function ViewLoadPerspective(noDataRefresh)		//done
{
	var perspectiveId = (currentPerspective)? currentPerspective : docInfo.DefaultPerspective;
	var loadData = (noDataRefresh)? false : true;
	var el = document.getElementById("xmlViewPerspectiveSrc");
	if(!el){
		return;
	}

	var perspectiveDocXml = el.textContent || el.innerText || el.nodeValue || el.innerHTML;		
	objView.SetViewParams(perspectiveDocXml);
			
	jQuery("#inpSwitchPerspective").val(perspectiveId);
	//ViewHighlightDefaultPerspective();
	objView.Refresh(loadData,true,true);	
}

/*function ViewHighlightDefaultPerspective()	//done
{
	var selectBox = document.getElementById("inpSwitchPerspective");
	for(var i=0; i<selectBox.options.length; i++) {
		selectBox.options[i].style.color = (selectBox.options[i].value == docInfo.DefaultPerspective)? "#ff0000" : "";
	}
}*/

function ViewSwitchPerspective(perspectiveId)	 //done
{
	if(!perspectiveId) {return;}
	var idParts = perspectiveId.split("_");
	if(idParts[0] == "system" || idParts[0] == "custom")
	{
		perspectiveId = idParts[1];
	}
	else {return;}

	var el = document.getElementById("xmlViewPerspectiveSrc");
	if(!el){
		return;
	}
	
	var url= "/" + NsfName + "/perspectives.xml?OpenPage&pid=" + perspectiveId;  
	$.ajax({
		'type' : "GET",
		'url' : url,
		'contentType': false,
		'async' : false,
		'dataType' : 'text'
	})
	.done(function(data) {
		if(!data) {
			obj.status="FAILED";
			obj.error = "{% trans %}No data received from server{% endtrans %}";
			return false;
		} else {
			var parser = new DOMParser();
			Sarissa.updateContentFromNode(parser.parseFromString(data,"text/xml"), el);
		}
	});

	 currentPerspective = perspectiveId;
	 if (!$('#divSearchResultCount').is(':visible') || $.trim($('#divSearchResultCount').text()) == '0 documents found') 
	 	ViewLoadPerspective(true);
	 else 
		ViewLoadPerspective();
}

//-------- column drag and drop -------------------- //daw
//function ViewColumnDragStart(source){}
//function ViewColumnDrag(source){}
//function ViewColumnDragOver(source){}
//function ViewColumnDragDrop(source){}

// ------------------------------------- selection checkbox handlers ------------------------------------------------------

function ViewDocSelectClick(source)
{

	if(!source) {return CancelEvent();}
	var parentRow  = (source.tagName != "TR")? source.parentElement : source;
	if(!parentRow.isRecord) {return CancelEvent();}
	var chkbox = source.all.tags("INPUT")[0];

	if( !chkbox.checked || selectDragMode=="check" )
	{
		if(! selectDragMode) {selectDragMode="check";} //handling initial click
		parentRow.isChecked=true;
		if(chkbox) {objView.ToggleSelectEntryById(parentRow.id, "check");}
	}
	else
	{
		if(! selectDragMode) {selectDragMode="uncheck";} //handling initial click
		parentRow.isChecked=false;
		if(chkbox) {objView.ToggleSelectEntryById(parentRow.id, "uncheck");}
	}

	return CancelEvent(); //handled
}

//--------------------------------------------- selecting documents by dragging mouse over selection boxes ------
function ViewDocSelectDrag(source)
{
	if(!source) {return false;}

	if (event.button == 1)
	{
		var parentRow  = source.parentElement; //check if the handler should continue
		if((selectDragMode=="check" && parentRow.isChecked) || (selectDragMode=="uncheck" && !parentRow.isChecked))
		{
			return; //handled
		}
		else
		{
			ViewDocSelectClick(source); //call check handler
		}
	}
	return CancelEvent(); //handled
}

 
//--------------------------------------------- column sorting ----------------------------------------------------

function ViewSortColumn(source)
{
	var  colIdx = source.id.split("-")[1];
	objView.ToggleCustomSort(colIdx);
	return CancelEvent();
}

//--------------------------------------------- expand/collapse category ----------------------------------------------------

function ViewToggleCategory(currentRow)
{
	objView.ToggleCategory(currentRow.id);
	return CancelEvent();
}

//--------------------------------------------- execute full text search ----------------------------------------------------

function ViewFTSearch(customQuery)
{	
	var libUnidList = GetSelectedLibraries();
	var searchUnsubscribed = Docova.Utils.getField({ field: "SearchUnsubscribed"});	

	//---- Return blank if no library has been selected for searching -----
	if(libUnidList == "" && searchUnsubscribed ==""){
		Docova.Utils.messageBox({ title: "{% trans %}Library Selection Required{% endtrans %}", prompt: "{% trans %}Please select at least one library to search.{% endtrans %}", width: 350});
		return false; 
	}

	var query;
	if (customQuery) {
		query = customQuery;
	}else{
		var query = Docova.Utils.getField({ field: "inpQuery"});
		if(query != ""){
			if (query.indexOf('-') != -1 && (query.indexOf('?') != -1 || query.indexOf('*') != -1)) {
				Docova.Utils.messageBox({ title: "{% trans %}Search Query{% endtrans %}", prompt:"{% trans %}Searching using both wildcards and hyphens is not supported.\nPlease edit your search to remove either the wildcard characters (*, ?) or the hyphens (-).{% endtrans %}"});
				return CancelEvent();
			}
			document.getElementById("divQueryFields").innerHTML = "";	//clear QueryFields div in case residual info exists from a previous advanced search
			document.getElementById("btnDelete").disabled = true;
			$("#MySavedSearches").multiselect("clearSingle");
		}else{
			var mySS = Docova.Utils.getField({ field: "MySavedSearches" });
			if(mySS != 0){
				query = document.getElementById("divSearchQuery").innerHTML;
			}
		}
	}	

	if(!query)
	{
		Docova.Utils.messageBox({ title: "{% trans %}Search Query{% endtrans %}", prompt: "{% trans %}Please enter the search query.{% endtrans %}", width: 300 });
		return false;
	}
	if (query.indexOf('-') != -1 && (query.indexOf('?') != -1 || query.indexOf('*') != -1)) {
		alert("{% trans %}Searching using both wildcards and hyphens is not supported.\nPlease edit your search to remove either the wildcard characters (*, ?) or the hyphens (-).{% endtrans %}");
		return CancelEvent();
	}
	if (query.indexOf('-') != -1 && query.indexOf('"') == -1) {
		query = '"' + query + '"';
	}
	if(query=="Sexy Pirate!"){
		var dlgUrl = docInfo.ServerUrl + docInfo.PortalWebPath + "/DocovaOvum.htm";
		var btns = [{ text : "OK",  click: function() { Docova.Utils.closeDialog({ id: "pirate" }); } }];
		Docova.Utils.createDialog({  id: "pirate", url: dlgUrl, width: 800, height: 600, title: "DOCOVA", autoopen: true, useiframe: true, scrolling: "yes", buttons: btns});
		return;
	}
	var maxRes = Docova.Utils.getField({ field: "MaxResults" });
	if(maxRes == ""){maxRes="100";}
	var searchArchive = Docova.Utils.getField({ field: "SearchArchive" });
	var searchtype = (searchUnsubscribed == "1") ?  "DOMAIN" : "GLOBAL"; 
	$('#CurrentFilterDiv').html('');
	ClearAllColFilterFlags();

	var tempquery = query;
	//-- look for presence of AND OR NOT in query if found leave it alone
	if(tempquery.match(/\s(and|or|not)\s/i) === null){
		//-- look for presence of spaces dashes forward slash backslash in query if found encapsulate in quotes, unless quote found
		if(tempquery.match(/\s|\-|\/|\\/) !== null && tempquery.match(/"/) === null){
			tempquery = '"' + tempquery + '"'; 
		}
	}		
	objView.DoFTSearch(tempquery, searchtype,libUnidList ,maxRes, searchArchive);
	$( "#btnFTClear" ).button( "option", "disabled", false );
	$( "#btnExportToExcel" ).button( "option", "disabled", false );
	return true;
}

//--------------------------------------------- clear full text search ----------------------------------------------------
function ViewFTClear()   //done
{
	$("#CurrentFilterDiv").html('');
	ClearAllColFilterFlags();
	$("#MySavedSearches").multiselect("clearSingle");
	objView.ResetFTSearch(true);
	$( "#btnFTClear" ).button( "option", "disabled", true );
	$( "#btnExportToExcel" ).button( "option", "disabled", true );	
	$("#divSearchQuery").html('');
	$("#divQueryFields").html('');
	$("#divSearchLibUnidList").html('');
	Docova.Utils.setField({ field: "inpQuery", value: "" });
	$( "#btnDelete" ).button( "option", "disabled", true );
	$("#divSearchResultCount").hide();
	$('#imgDeselectAll').click();
	return CancelEvent();
}

//-------------------------------------------- save current search -----------------------------------------------
function openSaveSearch(){ 

	//store selected Saved Search so dlg can access
	var ssValue = $("#MySavedSearches").multiselect("getChecked").map(function(){ return this.value; }).get();
	var ssText = $("#MySavedSearches option[value='" + ssValue + "']").text(); 
	dlgParams[0] = "";
	if(ssValue != "") {	dlgParams[0] = ssText; }
	
	retValues.length = 0;
	var dlgUrl = docInfo.ServerUrl + docInfo.PortalWebPath + "/dlgSaveSearch?OpenForm";
		
	var dlgSaveSearch = window.top.Docova.Utils.createDialog({
		id: "divDlgSaveSrch", 
		url: dlgUrl,
		title: "Save Search",
		height: 220,
		width: 500, 
		useiframe: true,
		sourcedocument: document,
		sourcewindow: window,
		buttons: [{
			id: "btnSaveUpdate",
			text: "{% trans %}Save As New Search{% endtrans %}",
			click: function() {	
				if(window.top.$("#divDlgSaveSrchIFrame")[0].contentWindow) {
					window.top.$("#divDlgSaveSrchIFrame")[0].contentWindow.completeWizard();	
				} else {
					window.top.$("#divDlgSaveSrchIFrame")[0].window.completeWizard();	
				}
			}
		},					
		{
        	text: "{% trans %}Cancel{% endtrans %}",	
			click: function() {	dlgSaveSearch.closeDialog();}
      	}]
	});	
}

function SaveSearch(){

	var KeepLibUnidList = "";
	var searchkey = Docova.Utils.getField("MySavedSearches");
	var searchquery = $("#divSearchQuery").html();
	var queryfields = $("#divQueryFields").html();
	var url = docInfo.ServerUrl + docInfo.PortalWebPath + "/UserDataServices?OpenAgent";
	var action;
	var request="";
	
	//----- The Update Search checkbox is returned in retVal[1] from the Save Search dialog.  If true, update the search, if false then
	//----- save the search as a new search
	if (retValues[1] == true){
		action = "UPDATESAVEDSEARCH";
	}else{
		action = "ADDSAVEDSEARCH";
	}

	if (retValues[2] == true){ //If the save/update dialog returns back that the user wants to include the libraries list as part of the search.
		KeepLibUnidList = GetSelectedLibraries();
	}

	//--build the saved search request
	request += "<Request>";
	request += "<Action>" + action + "</Action>";
	request += "<SearchName><![CDATA[" + retValues[0] + "]]></SearchName>";
	request += "<SearchKey>" + searchkey + "</SearchKey>";
	request += "<SearchQuery><![CDATA[" + searchquery + "]]></SearchQuery>";
	request += "<QueryFields><![CDATA[" + queryfields + "]]></QueryFields>";
	request += "<LibraryKey>" + "Global"  + "</LibraryKey>";  //Global searches just use "Global" as the library key
	request += "<LibraryUnidList>" + KeepLibUnidList + "</LibraryUnidList>";
	request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "</Request>";

	var httpObj = new objHTTP();
	if (httpObj.PostData(request, url))	{
		if (httpObj.status=="OK"){
			RefreshSavedSearches(); //Refreshes the saved searches in the MySavedSearches select field
			if(retValues[1] == true){  //if this was an update to a search...set MySavedSearches field to the current search after the refresh
				
				$("#MySavedSearches").multiselect({showSelected: true });
				$("#MySavedSearches").multiselect("refresh");
				$("#MySavedSearches").val(searchkey);
				GetSavedSearch(document.getElementById("MySavedSearches"));
				ViewFTSearch($("#divSearchQuery").html());
			}
			window.top.Docova.Utils.messageBox({ prompt: "{% trans %}Your search was saved.{% endtrans %}", title: "{% trans %}Search Saved{% endtrans %}" });
			window.top.Docova.Utils.closeDialog({ id: "divDlgSaveSrch" });
			window.top.Docova.Utils.closeDialog({ id: "divDlgAdvancedSrch" });
			$("#MySavedSearches").multiselect("refresh");
			return true;
		}
	}
}

//----- Delete a saved search
function DeleteSearch(){		//updated
	var selectObj = document.getElementById("MySavedSearches");
	var SearchName = selectObj.options[selectObj.selectedIndex].text;
	delmsgtxt = "{% trans with {'%searchname%' : '\'" + SearchName + "\''} %}You are about to delete the current Saved Search named %searchname%.  Are you sure?{% endtrans %}";
	var choice = Docova.Utils.messageBox({ 
		prompt: delmsgtxt, 
		icontype: 2, 
		title: "{% trans %}Delete Saved Search{% endtrans %}", 
		width:300, 
		msgboxtype: 4,
		onNo: function() {return;},
		onYes: function() {
			var url = docInfo.ServerUrl + docInfo.PortalWebPath + "/UserDataServices?OpenAgent";
			var searchkey = selectObj.value;
			var request="";
			//--build the delete search request
			request += "<Request>";
			request += "<Action>DELETESAVEDSEARCH</Action>";
			request += "<SearchKey>" + searchkey + "</SearchKey>";
			request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
			request += "</Request>";
		
			var httpObj = new objHTTP();
			if (httpObj.PostData(request, url))	{
				if (httpObj.status=="OK"){
					RefreshSavedSearches();
					ViewFTClear();
					//Docova.Utils.messageBox({ prompt: "Your search was deleted.", title: "Search Deleted" });
					return true;
				}
			}		
		}
	 });
}

function GetSavedSearch(obj){	//done
	var SearchKey = obj.value;
	if(SearchKey == ""){
		$( "#btnDelete" ).button( "option", "disabled", true );
		ViewFTClear();
		return;
	}
	$( "#btnDelete" ).button( "option", "disabled", false );
	var url = docInfo.ServerUrl + docInfo.PortalWebPath + "/UserDataServices?OpenAgent";
	var request="";
	var searchArr = new Array();
	var searchQuery;
	var queryfields = "";
	var searchLibUnidList = "";

	//--build the saved search request
	request += "<Request>";
	request += "<Action>GETSAVEDSEARCH</Action>";
	request += "<SearchKey>" + SearchKey + "</SearchKey>";
	request += "</Request>";

	var httpObj = new objHTTP();
	
	if (httpObj.PostData(request, url))	{
		searchArr = (httpObj.status).split(";");
		searchQuery = searchArr[0];
		queryfields = searchArr[1];
		searchLibUnidList = searchArr[2];
		$("#divSearchQuery").html(searchQuery);
		$("#divQueryFields").html(queryfields);
		$("#divSearchLibUnidList").html(searchLibUnidList);
		Docova.Utils.setField({ field: "inpQuery", value: "" });
		if (searchLibUnidList != ""){
			if (searchLibUnidList != 'DOMAINSEARCH') {
				//-----Select libraries search is to be performed on-----
				SetLibraries(searchLibUnidList);
			}
			else {
				$('#SearchUnsubscribed').attr('checked', true);
				toggleDomainSearch($('#SearchUnsubscribed'));
			}
		}
		ViewFTSearch(searchQuery);
	}
}

function SetLibraries(libList){	//done
	var libListArr = new Array();
	libListArr = libList.split(",");
	var x;
	$('input[name=selectedlib]').each(function() {
		for(x=0; x<libListArr.length; x++){
			if($(this).val() == libListArr[x]){
				$(this).prop('checked', true);
			}
		}
	});
	return;
}

function GetSelectedLibraries(){
	if ($('#SearchUnsubscribed').is(':checked')) {
		return 'DOMAINSEARCH';
	}
	var libUnidList = "";
	//----- Get the library keys for the libraries the user has selected -----
	$('input[name=selectedlib]').each(function() {
		if ($(this).prop('checked')) {
			libUnidList += ($(this).val() + ',');
		}
	});
	if (libUnidList && libUnidList != '') {
		libUnidList = libUnidList.slice(0, -1);
	}
	return libUnidList;
}

function RefreshSavedSearches(){  //done
	var LKey = "Global"; 	//Global searches just use "Global" as the library key
	var PortalNsfName = docInfo.PortalNsfName;
	//Should change the following to ajax call
	Docova.Utils.dbColumn({ 
		nsfname: PortalNsfName, 
		viewname: "luSavedSearches", 
		key: LKey, 
		column: "2", 
		htmllistbox: "MySavedSearches"
	});
	return;
}

//----------- utility functions ---------------

// clears the view event variables in case mouse cursor had wandered to far
function ViewClearEventState()
{
	selectDragMode=null;
	return true;
}

function CancelEvent(event)
{
	if(event) {event.preventDefault();}
	if(!window.event) {return;}
	window.event.cancelBubble = true;
	window.event.returnValue = false;
	return false;
}

// ------- context menu handler ---------
function ViewShowContextPopup(popupSource, sourceObject)
{
	if(popupSource=="viewheader")
	{
		if(!sourceObject.colIdx){return;}
		var colNo = parseInt(sourceObject.colIdx);
		var offsetX = (event)? event.clientX - sourceObject.offsetLeft : 0;
		curContextObj = objView.columns[colNo]; //object handling the action click
		var contextMenu = objView.columns[colNo].CreateContextMenu(offsetX);
	}
	else if(popupSource=="viewselectheader" || popupSource=="viewrefresh"  )
	{
		curContextObj = objView;
		var offsetX = (event)? event.clientX - sourceObject.offsetLeft : 0;
		var contextMenu = objView.CreateContextMenu("selectheader", sourceObject, offsetX);
	}
		
	if(contextMenu)
	{
		var oPopBody = oPopup.document.body;
		oPopBody.innerHTML = contextMenu.innerHTML();
		oPopup.show(contextMenu.offsetRight, contextMenu.offsetTop, contextMenu.width, contextMenu.height, event.srcElement);
		return false;
	}
}

//----------- advanced search ------------
function AdvancedSearch()
{
	if(GetSelectedLibraries() == '') {
		Docova.Utils.messageBox({ title: "{% trans %}Library Selection Required{% endtrans %}", prompt: "{% trans %}Please select at least one library to search.{% endtrans %}", width: 350});
		return false;
	}
	
	var ssObj = $("#MySavedSearches").multiselect("getChecked").map(function(){ return this.value;	}).get();		
	if(ssObj == ""){
		var dlgUrl = docInfo.ServerUrl + docInfo.PortalWebPath + "/dlgCustomSearch?OpenForm&edit=false&folder=false";
	}else{
		var dlgUrl = docInfo.ServerUrl + docInfo.PortalWebPath + "/dlgCustomSearch?OpenForm&edit=true&folder=false";
	}
	
	var dlgAdvancedSearch = window.top.Docova.Utils.createDialog({
		id: "divDlgAdvancedSrch", 
		url: dlgUrl,
		title: "Advanced Search",
		height: 410,
		width: 650, 
		useiframe: true,
		defaultButton: 1,
		sourcewindow: window,
		buttons: {
    		"Save": function() {
        		var cmd = "";
				if(window.top.$("#divDlgAdvancedSrchIFrame")[0].contentWindow) {	//Chrome/FF
					cmd = window.top.$("#divDlgAdvancedSrchIFrame")[0].contentWindow.SetQueryInfo();
				} else {
					cmd = window.top.$("#divDlgAdvancedSrchIFrame")[0].window.SetQueryInfo();	//IE
				}
				if(cmd) { openSaveSearch(); }        		
			},		
    		"Search": function() {
				if(window.top.$("#divDlgAdvancedSrchIFrame")[0].contentWindow) {
					window.top.$("#divDlgAdvancedSrchIFrame")[0].contentWindow.CompleteWizard();				
				} else {
					window.top.$("#divDlgAdvancedSrchIFrame")[0].window.CompleteWizard();				
				}
    		},				
    		"Close": function() {
				dlgAdvancedSearch.closeDialog();
       		}
      	}
	});		
}

//----------------helper function to open a given folder 

function OpenFolder( folderID ){
	var docUrl;
	var entryObj=objView.GetCurrentEntry();
	var libid = entryObj.GetElementValue("libid");
			
	var exists = false;
	$('input[name=selectedlib]').each(function() {
		if ($(this).val() == libid) {
			exists = true;
			return false;
		}
	});
	if(!exists) {return thingFactory.MessageBox("{% trans %}Document Url cannot be located.{% endtrans %}", 16, "Error");}
	var libPath = docInfo.PortalWebPath;
	docUrl = libPath.text + "/luAllByDocKey/" + folderID + "?OpenDocument&syncnav=1";
	
	parent.frames["fraLeftFrame"].LoadFrame( docUrl );
	try {
		parent.frames['fraToolbar'].btnClick(parent.frames['fraToolbar'].document.all.btnContent);
	}catch (e) {
		//
	}
}

function toggleDomainSearch(box){
	//$("#btnAdvancedSearch").toggle();
	$("#advSearchSpace").toggle();
	$("#tblLibraryData").toggle();
	$("#imgSelectAll").toggle();
	$("#imgDeselectAll").toggle();
	$('#allSelection').toggle();
	$("#SearchAllLibrariesMsg").toggle();
}

function OpenDomainSearchDocument(){
	var targetUnid=objView.currentEntry;
	if(!targetUnid){return false;}
	
	var serverurl = docInfo.ServerUrl;

	var entryObj=objView.GetCurrentEntry();
	var xmlNode = entryObj.xmlNode;
	var isapp = entryObj.GetElementValue("isapp");
	var servernode=xmlNode.getElementsByTagName("server")[0];
	if(servernode) {
		var servername = servernode.childNodes[0].nodeValue;
		//-- if server is non blank and different than current server lets get the proper url for the other server
		if ((servername != "") && (servername != docInfo.ServerName) && (servername != docInfo.ServerNameNotes)) {
			//--- processing agent url
			var url = docInfo.ServerUrl  + docInfo.PortalWebPath + "/ApplicationServices?OpenAgent";
			var request="";
			//--build the request
			request += "<Request>";
			request += "<Action>GETSERVERURL</Action>";
			request += "<Server><![CDATA["+ servername + "]]></Server>";
		 	request += "</Request>";

			var httpObj = new objHTTP();
			if (httpObj.PostData(request, url))	{
				//all OK
				if (httpObj.status=="OK"){
					//----- override server url based on response results
					if(httpObj.results.length > 0){
						serverurl = httpObj.results[0];
					}      
				}
			}
		}	
	}
	var libnsfnode = xmlNode.getElementsByTagName("libnsf")[0];
	if(libnsfnode){
		var libnsf = libnsfnode.childNodes[0].nodeValue;
	}else{
		return false;
	}
	if (isapp == 1) {
		var libid = entryObj.GetElementValue("libid");
		var docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/wReadDocument/" + targetUnid + "?OpenDocument&ParentUNID="+ libid +"&mode=window";
	}
	else {
		var docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/ReadDocument/" + targetUnid + "?OpenDocument&ParentUNID=wSearchResults&mode=window";
	}
	var leftPosition = (screen.width) ? (screen.width-700)/2 : 20;
	var topPosition = (screen.height) ? (screen.height-500)/2 : 20;
	dlgSize = "height=500,width=700,top=" + topPosition+ ",left=" + leftPosition;
	var dlgSettings = dlgSize + ",status=no,toolbar=no,menubar=no,location=no,scrollbars=yes,resizable=yes";
	return window.open(docUrl,targetUnid,dlgSettings); //Display the document dialog
}


function ResetFolderFilter(){
//-----Reset the CurrentFolderDiv innerHTML to the folder's set filter and refresh-----
//-----This is different than the ClearAllFilterswhich clears all filters-----
	$("#CurrentFilterDiv").html('');
	var UseOriginalXML = false;
	//ApplyDefaultFolderFilter(UseOriginalXML); //daw
	return;
}

function ClearAllFilters()
{
	//-----Clears all filtering including the default folder filter if there is one----
	ClearAllColFilterFlags();
	$("#divViewContent").hide();
	objView.Refresh(true,true,true);
	ApplyFolderFilter(false);				
	$("#divViewContent").show();
	return;
}

function ClearAllFiltersSub()
{
	//-----Clears all filtering including the default folder filter if there is one and when the Query option is set to All Versions----
	ClearAllColFilterFlags();
	objView.Refresh(true,true,false);
	return;
}

function ClearAllColFilterFlags(){
	$("#CurrentFilterDiv").html('');
	for(var x=0; x<objView.columns.length; x++){
		var objColumn = objView.columns[x];
		objColumn.isFiltered = false;
	}
	return;
}

function ClearColFilterFlag(NodeName){
	for(var x=0; x<objView.columns.length; x++){
		var objColumn = objView.columns[x];
		if(NodeName == objColumn.xmlNodeName){
			objColumn.isFiltered = false;
		}
	}
	return;
}

function SetColumnFilterFlag(NodeName){
	for(var x=0; x<objView.columns.length; x++){
		var objColumn = objView.columns[x];
		if(NodeName == objColumn.xmlNodeName){
			objColumn.isFiltered = true;
		}
	}
	return;
}

function SetAllColFilterFlags(){
	var filterexpArray;
	var filterarray = $("#CurrentFilterDiv").html().split("~");
	
	for (var x=0; x<objView.columns.length; x++){
		var objColumn = objView.columns[x];
		objColumn.isFiltered = false; //first we reset the columns as we come to them..then determine if they are to be set according to the current filter expression
		for (var i=0; i< filterarray.length; i++){
			filterexpArray = filterarray[i].split("=");
			if(filterexpArray[0] == objColumn.xmlNodeName){
				objColumn.isFiltered = true;
			}
		}
	}
	return;
}

function CreateFolderFilterStyle(filterExpr){	//daw1
    try
    {
		//var folderfilterObj = FolderFilterXSL.XMLDocument
		var folderfilterObj = document.getElementById("FolderFilterXSL");
		if(! folderfilterObj){
			Docova.Utils.messageBox({ prompt: "Unable to connect to FolderFilterXSL"  , icontype: 1, title: "Filter error" });
			return;
		}

		var xslFilter = '<?xml version="1.0"?>';
		xslFilter += '<xsl:stylesheet  version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" ><xsl:output method="xml"/>';
		xslFilter += "<xsl:variable name='APOS'>'</xsl:variable>";
		xslFilter += '<xsl:template match="/">';
		xslFilter += '<documents>';
		xslFilter += '<xsl:for-each select="//document[' + filterExpr + ']">';
		xslFilter += '<xsl:copy-of select="."/>';
		xslFilter += '</xsl:for-each>';
		xslFilter += '</documents>';
		xslFilter += '</xsl:template>';
		xslFilter += '</xsl:stylesheet>';

		//folderfilterObj.loadXML(xslFilter)	
		var parser = new DOMParser();
		Sarissa.updateContentFromNode(parser.parseFromString(xslFilter,"text/xml"), folderfilterObj);
	}
	catch(e)
	{   
		Docova.Utils.messageBox({ prompt: "{% trans %}Could not create filter{% endtrans %}: " + e.message  , icontype: 1, title: "{% trans %}Filter error{% endtrans %}" });
		return false;
	}    	
	return true;
}

function ApplyFolderFilter(UseOriginalXML){	//done

	ApplyQueryOptionToFilter();
	
	var filterexp = "";
	var CurrentFilter = $("#CurrentFilterDiv").html();
	var Fn = "";
	var FnExp = "";
	var NewExp;
	var expArray;
	if (CurrentFilter != ""){
		var CurrentFilterArray = CurrentFilter.split("~")
		for (var x=0; x<CurrentFilterArray.length; x++){
			if(CurrentFilterArray[x].indexOf(" or ") != -1){ 
				//----- if ' or ' is found in the string, that is, 'space or space', then we have an 'or' in the expression so just pass it through.
				NewExp = " (" + CurrentFilterArray[x] + ") "
			}else{ //----- ' or ' is not found in the string therefore we want to perform a 'contains"
				expArray = CurrentFilterArray[x].split("=")
				Fn = expArray[0];
				tmp = expArray[1];
				if (expArray[1].indexOf("'") > -1 && expArray[1].lastIndexOf("'") > -1 && expArray[1].lastIndexOf("'") != expArray[1].indexOf("'")) 
				{
					tmp = expArray[1].substring(expArray[1].indexOf("'") + 1, expArray[1].lastIndexOf("'"));
				}
				FnExp = tmp.replace("'", "',$APOS,'");

				FnExp = "concat (  &apos;, ', '" +FnExp + "', ', &apos;)";
//				FnExp = "', " + tmp + ", '"
				NewExp = "contains(concat(concat(', ', " + Fn + "), ', '), " + FnExp + ")";
			}

			if(filterexp == ""){
				filterexp = NewExp;
			}else{
				filterexp += " and " + NewExp
			}
		}	
	}
	
	if(filterexp == ""){
		ClearAllFiltersSub();
	}else{
		if(CreateFolderFilterStyle(filterexp)){
			if(UseOriginalXML){
				objView.Refresh(true,false,true);
			}
			var el = document.getElementById("FolderFilterXSL");
			var xsl = el.textContent || el.innerText || el.nodeValue || el.innerHTML;	
			var parser = new DOMParser();
  			var objXSLDoc = parser.parseFromString(xsl,"text/xml");				
			var processor = new XSLTProcessor();
			processor.importStylesheet(objXSLDoc); 
			objView.oXml = processor.transformToDocument(objView.oXml); 
			objView.Refresh(false,true,true);
		}
	}
	return;
}

/*function ApplyDefaultFolderFilter(UseOriginalXML){	//daw  I don't think this is needed - doesn't apply to search
	
	var userInfo = parent.frames['fraToolbar'].getinfovar(); //daw1
	
	var userfilternodes = userInfo.UserFltrFieldNodes;
	var userfilternodevals = userInfo.UserFltrFieldNodeVals;
	var fltrNodes = docInfo.fltrFieldNodes;

	var userfilternodesArr = userInfo.UserFltrFieldNodes.split(";")
	var userfilternodevalsArr = userInfo.UserFltrFieldNodeVals.split(";")
	var fltrNodesArr = docInfo.fltrFieldNodes.split(";")
	var filterexp = ""

	for (i=0; i< fltrNodesArr.length; i++){
		for (j=0; j<userfilternodesArr.length;j++){
			if (fltrNodesArr[i] == userfilternodesArr[j]){
				if(filterexp == ""){
					filterexp = fltrNodesArr[i] + "=" + "'" + userfilternodevalsArr[j] + "'"
				}else{
					filterexp =filterexp + "~" + fltrNodesArr[i] + "=" + "'" + userfilternodevalsArr[j] + "'"
				}
			}
		}
	}
	document.getElementById("CurrentFilterDiv").innerHTML = filterexp
	SetAllColFilterFlags();
	ApplyFolderFilter(UseOriginalXML);
	return;
}*/

function ViewColumnSelectFilter(source){		//done  daw - needs cleanup
	if(docInfo.EnableFolderFiltering != "1"){return;}

	var NodeList;
	var columnvals = "";
	var slist = ""; //sorted list
	var ulist = ""; //unique list
	//var columnObj = objView.columns[source.colIdx] //daw
	var columnObj = objView.columns[$(source).attr("colidx")];
	
	if (columnObj == null){ return;}
	//columnObj.isFiltered = true;
	var NodeName = columnObj.xmlNodeName;
	var NodeExpr = "//" + NodeName;
	var CurrentSelectedOptionText;
	var NodeListText = "";
		
	NodeList = objView.oXml.selectNodes(NodeExpr); 
	if(NodeList[0]==null){   //no documents in the folder/view
	Docova.Utils.messageBox({ title: "Error", prompt: "{% trans %}There are no documents to filter.{% endtrans %}" });
		return;
	}
	
	//-----If NodeList length is greater than one then sort and unique the values-----
	if(NodeList.length > 1){

		for( var i = 0; i < NodeList.length; i++ ){ 
			NodeListText = (NodeList[i].text == undefined ? (NodeList[i].textContent == undefined ? "" : NodeList[i].textContent) : NodeList[i].text);			
			if (NodeListText.indexOf(",") > 0){
				NodeListText = NodeListText.replace(", ", "~");
			}
			if(columnvals == ""){
				//columnvals += NodeList[i].text
				columnvals += NodeListText;
			}else{
				//columnvals += "~" + NodeList[i].text
				columnvals += "~" + NodeListText;
			}
		} 
		slist = Docova.Utils.sort({ inputstr: columnvals, delimiterin: "~", delimiterout: "~" });
		ulist = Docova.Utils.unique({ inputstr: slist, delimiterin: "~", delimiterout: "~" });
	}else{
		ulist = (NodeList[0].text == undefined ? (NodeList[0].textContent == undefined ? "" : NodeList[0].textContent) : NodeList[0].text);			
	}

	CurrentSelectedOptionText = getCurrentSelectedOptionText(NodeName);

	var optionarray = ulist.split("~");
	//-------------------------------------------------------------------------
	var items = [];
	items.push("<select name='" + NodeName + "' id='" + NodeName + "' onchange='CreateFilter(this)'  onblur='HideFilterSelection(this)'><option value='All'>{% trans %}All{% endtrans %}</option>");

	for (var x = 0; x < optionarray.length; x ++) {
		if(optionarray[x] == CurrentSelectedOptionText) {
			items.push("<option selected=true value='" + optionarray[x].replace(/'/g, '&apos;') + "'>" + optionarray[x] + "</option>");
		} else {
			items.push("<option value='" + optionarray[x].replace(/'/g, '&apos;') + "'>" + optionarray[x] + "</option>");
		}
	}
	items.push('</select>');
	$("#SelectFilterDiv").html(items.join(''));
	
	$("#SelectFilterDiv").position({
		my: "left top",
		at: "left bottom",
		of: source
	});
	
	$("#" + NodeName).css("width", parseInt(columnObj.width) + 5);	
	$("#SelectFilterDiv").css("display", "" );
	
	//$("#SelectFilterDiv").focus();  //daw is focus really needed ??
	//$("#" + NodeName).focus();
	
	//SelectFilterDiv.style.left = getOffset(source).left;
	//SelectFilterDiv.style.top = getOffset(source).top + source.offsetHeight;
	//var selectObj = document.getElementById(NodeName);
	//selectObj.style.width = columnObj.width;

	//document.getElementById("SelectFilterDiv").style.display = "";
	//selectObj.focus();
}

function CreateFilter(selectobj){	//done
	var filterexp;
 	var NodeName = selectobj.name;
 	var NodeValue = selectobj.options[selectobj.selectedIndex].value;
 	var CurrentFilter;
 	var CurrentFilterArray;
 	var filterexp;
 	var newfilterexp;
 	var UseOriginalXML = false;

 	NodeValue = NodeValue.replace(/'/g, '&apos;');
 	filterexp = NodeName + "='" + NodeValue + "'";
 	
 	if(NodeValue == "All"){
 		RemoveFromCurrentFilter(NodeName);
 		UseOriginalXML = true;
 	}else{
 		AddToCurrentFilter(filterexp);
 		SetColumnFilterFlag(NodeName);
 		UseOriginalXML = false;
 	}
 	
 	ApplyFolderFilter(UseOriginalXML);
 	
 	selectobj.style.display= "none";
}

function RemoveFromCurrentFilter(NodeName){		//done
//-----Find the node and remove it-----
	var CurrentFilterTxt = $("#CurrentFilterDiv").html();
	var NewFilterTxt = "";
	var CurrentFilterArray = CurrentFilterTxt.split("~");
	var CurrentExpArray;
	
	for (var x=0; x<CurrentFilterArray.length; x++){
		CurrentExpArray = CurrentFilterArray[x].split("=");
		if (CurrentExpArray[0] != NodeName){
			if(NewFilterTxt == ""){
				NewFilterTxt = CurrentFilterArray[x];
			}else{
				NewFilterTxt += "~" + CurrentFilterArray[x];
			}
		}
	}
	ClearColFilterFlag(NodeName);
	$("#CurrentFilterDiv").html(NewFilterTxt);
}

function AddToCurrentFilter(filterexp){		//done
	var CurrentFilterTxt = "";

	CurrentFilterTxt = $("#CurrentFilterDiv").html();
	if(CurrentFilterTxt == ""){
		$("#CurrentFilterDiv").html(filterexp);
	}else{
		if (CurrentFilterTxt.indexOf(filterexp) == -1){
			CurrentFilterTxt += "~" + filterexp;
			$("#CurrentFilterDiv").html(CurrentFilterTxt);
		}
	}
}

function getCurrentSelectedOptionText(NodeName){	//daw

	var CurrentFilterTxt = $("#CurrentFilterDiv").html();
	var CurrentFilterArray = CurrentFilterTxt.split("~");
	var expValuesArray;
	var currentSelectedOptionText = "";

	for (var x=0; x<CurrentFilterArray.length; x++){
		expValuesArray = CurrentFilterArray[x].split("=");
		if(expValuesArray[0] == NodeName){
			currentSelectedOption = expValuesArray[1];
			currentSelectedOptionText = rightBack(leftBack(currentSelectedOption, "'"),"'");
			return currentSelectedOptionText;
		}
	}
	return currentSelectedOptionText;
}

function HideFilterSelection(objSelectFilterField){
	objSelectFilterField.style.display = "none";
}

function ApplyQueryOptionToFilter(){		//daw not needed, commented out in old versions
	//	var addfilteroption = "";
	//	var currShowOption = doc.selVersionScope.options[doc.selVersionScope.selectedIndex].value;
	
	//	if (currShowOption == "REL") {
	//		addfilteroption = "statno='1' or apflag='1'" //Released or allow preview flag
	//	}
	//	if (currShowOption == "NEW") {
	//		addfilteroption = "statno='0'" //Draft
	//	}			
	//	RemoveFromCurrentFilter("statno")
	//	AddToCurrentFilter(addfilteroption)
	return;
}

function checkAvailableHeight(){
	try{
		var vpheight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;	
		if(vpheight == 0){return;}  //-- in case we aren't able to get the height
		var viewheader = document.getElementById("divViewHeader");
		var searchOptions = document.getElementById('searchOptionSection');
		if (searchOptions.style.display == 'none') {
			var headingsheight = viewheader.clientHeight + 25;
		}
		else {
			var headingsheight = searchOptions.clientHeight - viewheader.clientHeight + 85;
		}
		var container = document.getElementById("divViewContent");
		tabframe = parent.document.getElementById("fraTabbedTableSearch");
		$("#divViewContent").css("height", vpheight  - (viewheader.clientHeight));
	}catch(e){}
}

function exportToExcel(){
	var docids = objView.selectedEntries;
	var selectedonly = (docids.length > 0);
	objView.ExportToExcel(selectedonly);
}
</script>
<style type="text/css">
#SearchType {margin-top:2px;}
#divViewHeader { border-top: 0px !important}
#divLibraryData UL {
	margin: 0;
	padding: 1px;
	list-style: none;
}
#divLibraryData LI {
	padding: 1px 0 1px 16px;
}
#divLibraryData LI.nopad {
	padding-left: 3px;
}
#divLibraryData .tree, #tblTabbed .clsTab {
	cursor: pointer;
}
</style>
</head>
<body text="#000000" class="ui-widget-content" SCROLL="no">
	<!--- BEGIN event capture area ----->
	<div style="padding:5px; border-bottom:1px #CCC solid;display:inline-block; width:100%;">
		<IMG SRC= "{{ asset('bundles/docova/images/cat-expand.gif') }}" border=0 style="float:left;display:none;margin:3px 0px 3px 4px;" align="middle" title="expand" class="expandcollapse">
		<IMG SRC= "{{ asset('bundles/docova/images/cat-collapse.gif') }}" border=0 style="float:left;margin:3px 0px 3px 4px;" align="middle" title="collapse" class="expandcollapse">
		<strong style="float:left;margin:2px 0 1px 5px;">Search Options</strong>
	</div>
	<div id="searchOptionSection" style="margin-top:-5px; height: auto; overflow: hidden;">
		<table style="width:100%;" border=0 cellspacing=1 cellpadding=1>
		<tr valign="bottom">
			<td style="padding:12px 12px 5px 12px;">
				<div id="search_tabs">
					<ul>
						<li><a href="#divTab_1">{% trans %}Standard Search{% endtrans %}</a></li>
						<li id="custom_search_tab" style="display:none;"><a href="#divTab_2">{% trans %}Custom Search{% endtrans %}</a></li>
					</ul>
					<div id="divTab_1">
						<!-- REMOVED: ( Use AND, OR, and wildcards like *, ? To search for exact phrase use &quot; ) -->
						<div style="font: 11px verdana, arial; margin: 3px 0px 3px 0px;">{% trans %}Search for: {% endtrans %}</div>
						<input name="inpQuery" id="inpQuery" type="text" style="width: 70%; font: 11px verdana, arial; height: 13px;" />&nbsp;&nbsp;
						<button id="btnFTSearch">{% trans %}Search{% endtrans %}</button>
						&nbsp;
						<button id="btnAdvancedSearch">{% trans %}Advanced{% endtrans %}</button><br />
						<div style="padding-top:5px">
							<select onchange="GetSavedSearch(this)" id="MySavedSearches" style="padding-left: 20px; WIDTH: 200px;" name="MySavedSearches">
								<option selected value="0">-{% trans %}My Saved Searches{% endtrans %}-</option>
								{% if savedSearches|length %}
									{% for item in savedSearches %}
								<option value="{{ item.getId }}">{{ item.getSearchName }}</option>
									{% endfor %}
								{% endif %}
							</select>
							&nbsp;
							<button id="btnFTClear">{% trans %}Clear{% endtrans %}</button>
							&nbsp;
							<button id="btnDelete">{% trans %}Delete{% endtrans %}</button>
						</div>
					</div>
					<!-- ------- CUSTOM SEARCH SUBFORM IF EXISTS ------- -->
					{% include 'DocovaBundle:Subform:sfCustomSection-CustomSearch.html.twig' ignore missing %}
					<!-- ----------- END CUSTOM SEARCH SUBFORM --------- -->						
				</div>
			</td>
			<td width="40%" style="padding-bottom:5px;">
				<table border=0 cellpadding=1 cellspacing=1 style="width:100%; border-collapse:separate;">
					<tr valign="top">
						<td colspan="3" style="padding-top:3px;">{% trans %}<strong>Application and/or Libraries to search</strong>{% endtrans %}:&nbsp;</td>
					</tr>
					<tr valign="bottom">
						<td width="110">
							<span id="allSelection">Select/Deselect All<br></span>
							<IMG id="imgSelectAll" SRC="{{ asset('bundles/docova/images/checkbox-on.gif') }}" border=0 style="margin: 0px 0px 2px 4px;" align="middle" title="{% trans %}Select All{% endtrans %}" > 
							<IMG id="imgDeselectAll" SRC="{{ asset('bundles/docova/images/checkbox-off.gif') }}" border=0 style="margin: 0px 0px 2px 19px;" align="middle" title="{% trans %}Deselect All{% endtrans %}" >
						</td>
						<td style="padding-left:15px">
							<label style="font: 11px verdana, arial;"><input type="checkbox" id="SearchArchive" name="SearchArchive" value="1" /> {% trans %}Include archives{% endtrans %}</label>
							{% if global_settings.getEnableDomainSearch %}
							<br>
							<label style="font: 11px verdana,arial;">
								<input type="checkbox" name="SearchUnsubscribed" value="1" onclick="toggleDomainSearch(this)" </input> 
								{% trans %}Include Unsubscribed libraries{% endtrans %}
							</label>
							{% endif %}
						</td>
						<td width=165>
							<span style="font: 11px verdana, arial; color: #335588;">{% trans %}Max results{% endtrans %}:</span>
							<select name="MaxResults" id="MaxResults">
								<option value="50">50
								<option value="100" selected>100
								<option value="250">250
								<option value="500">500
							</select>
						</td>
					</tr>
				</table>
				<div id="divLibraryData" style="background-color:white;height:170px;width:99%;border:1px solid #88aacc;overflow:auto;margin-top:1px;">
				{% if libraries %}
					<ul id="tblLibraryData">
		                <!-- DEAN added this customisation----->
	                    {% trans %}Only selected libraries will be searched. {% endtrans %}
	                    <!-- End customisation----->
					{% for key, item in libraries %}
						{% if key and key == 'community' %}
							{% for ckey, community in item %}
						<li class="nopad">
							<img src="{{ asset('bundles/docova/images/plus.gif') }}" class="tree" alt="+" title="expand" expcol="sub_{{ ckey|replace({' ':'_', '.':'_', '&':'_'}) }}" />
							<img src="{{ asset('bundles/docova/images/file248.bmp') }}" alt="community" title="community" />
							<label><input type="checkbox" name="selsub" value="cm_{{ ckey|replace({' ':'_', '.':'_', '&':'_'}) }}" /> {{ ckey }}</label>
							<ul id="sub_{{ ckey|replace({' ':'_', '.':'_', '&':'_'}) }}" style="display:none;">
								{% for rkey, realms in community %}
								{% if rkey and rkey == 'realm' %}
									{% for lkey, realm in realms %}
								<li>
									<img src="{{ asset('bundles/docova/images/plus.gif') }}" class="tree" alt="+" title="expand" expcol="sub_{{ lkey|replace({' ':'_', '.':'_', '&':'_'}) }}" />
									<img src="{{ asset('bundles/docova/images/file249.bmp') }}" alt="realm" title="realm" />
									<label><input type="checkbox" name="selsub" value="cm_{{ lkey|replace({' ':'_', '.':'_', '&':'_'}) }}" /> {{ lkey }}</label>
									<ul id="sub_{{ lkey|replace({' ':'_', '.':'_', '&':'_'}) }}" style="display:none">
										{% for libs in realm %}
										<li>
											<img src="{{ asset('bundles/docova/images/file23.bmp') }}" alt="lib" />
											<label><input type="checkbox" name="selectedlib" value="{{ libs['id'] }}"> {{ libs['Library_Title'] }}</label></li>
										{% endfor %}
									</ul>
								</li>
									{% endfor %}
								{% else %}
								<li>
									<img src="{{ asset('bundles/docova/images/file23.bmp') }}" alt="lib" />
									<label><input type="checkbox" name="selectedlib" value="{{ realms['id'] }}"> {{ realms['Library_Title'] }}</label>
								</li>
								{% endif %}
								{% endfor %}
							</ul>
						</li>
							{% endfor %}
						{% elseif key and key == 'realm' %}
							{% for lkey, realm in item %}
						<li class="nopad">
							<img src="{{ asset('bundles/docova/images/plus.gif') }}" class="tree" alt="+" title="expand" />
							<img src="{{ asset('bundles/docova/images/file249.bmp') }}" alt="libs" title="libraries" expcol="sub_{{ lkey|replace({' ':'_', '.':'_', '&':'_'}) }}" />
							<label><input type="checkbox" name="selsub" value="cm_{{ lkey|replace({' ':'_', '.':'_', '&':'_'}) }}" /> {{ lkey }}</label>
							<ul id="sub_{{ lkey|replace({' ':'_', '.':'_', '&':'_'}) }}">
								{% for libs in realm %}
								<li>
									<img src="{{ asset('bundles/docova/images/file23.bmp') }}" alt="lib" />
									<label><input type="checkbox" name="selectedlib" value="{{ libs['id'] }}"> {{ libs['Library_Title'] }}</label>
								</li>
								{% endfor %}
							</ul>
						</li>
							{% endfor %}
						{% else %}
						<li class="nopad">
							<img src="{{ asset('bundles/docova/images/file23.bmp') }}" alt="lib" />
							<label><input type="checkbox" name="selectedlib" value="{{ item['id'] }}"> {{ item['Library_Title'] }}</label>
						</li>
						{% endif %}
					{% endfor %}
					</ul>
				{% else %}
					<!------------------------------------------------------------>
					<div id="NoLibraryDataMsg" style="font: 11px verdana, arial;">{% trans %}You have not subscribed to any libraries.{% endtrans %}</div>
				{% endif %}
					<!------------------------------------------------------------>
					<div id="SearchAllLibrariesMsg" style="display: none; font: 11px verdana, arial;">{% trans %}All libraries will be searched. Even unsubscribed libraries.{% endtrans %}</div>
					<!------------------------------------------------------------>
				</div>
			</td>
		</tr>
		</table>
	</div>
	<div id="divViewEventCapture">
		<!--- BEGIN Document View header ----->
		<div id="divViewHeader" style="width: 100%; padding: 5px 10px 6px 10px; top: 30px;">
			<div id="divSearchQuery" style="display:none;"></div>
			<div id="divQueryFields" style="display:none;"></div>
			<div id="divSearchLibUnidList" style="display:none;"></div>
			<!------------------------------------------------------------>
			<div id="divToolbarPerspective" style="width:100%;margin-top:5px;">{% trans %}Results perspective{% endtrans %}: 
				<select name="inpSwitchPerspective" id="inpSwitchPerspective" style=" width: 240px;" onchange="ViewSwitchPerspective(this.options[this.selectedIndex].value)">
				{% if search_perspectives|length > 0 %}
					{% for perspective in search_perspectives %}
						{% if perspective.getIsSystem  %}
							{% set value = 'system_' ~ perspective.getId %}
						{% else %}
							{% set value = 'custom_' ~ perspective.getId %}
						{% endif %}
						<option {{ perspective.getDefaultFor == 'Global Search' ? 'selected' : '' }} value="{{ value }}">{{ perspective.getPerspectiveName }}</option>
					{% endfor %}
				{% endif %}
				</select>
				<IMG SRC="{{ asset('bundles/docova/images/propinfodiamond.gif') }}" border=0 style="margin: 0px 0px 3px 4px;" align="middle" title="{% trans %}Click to see perspective information{% endtrans %}" onclick="ShowPerspectiveProperties(this);"> 
				<span style="color:#0050D1;display:none;padding-left:20px;" id="divSearchResultCount"></span>
				&nbsp;<button id="btnExportToExcel">{% trans %}Export Results To Excel{% endtrans %}</button>
				{% include '::customSearchActionButtons.html.twig' ignore missing %}
			</div>
			<!------------------------------------------------------------>
		</div>
		<!--- END Document View header ----->
		
		<!--- BEGIN Document view contents----->
		<div id="divViewContent" tabindex="1" style="width: 100%; padding: 0px; margin: 0px; overflow: auto;"></div>
		<div id="SelectFilterDiv" style="display:none; position:absolute; z-index:100;" ></div>
		<div id="CurrentFilterDiv" style="display:none; position:absolute; top:0px; left:0px;"></div>
		<script id="xmlViewPerspectiveSrc" type="text/dummy"><viewperspective><type>system</type><id>system_default_search</id><Unid>{{ default_perspective.getId }}</Unid><name><![CDATA[Global search]]></name><description><![CDATA[{{ default_perspective.getDescription }}]]></description><createdby><![CDATA[{{ default_perspective.getCreator.getUserNameDnAbbreviated }}]]></createdby><createddate>{{ default_perspective.getDateCreated.format('m/d/Y h:i:s A') }}</createddate><modifiedby><![CDATA[{{ default_perspective.getModifier ? default_perspective.getModifier.getUserNameDnAbbreviated }}]]></modifiedby><modifieddate>{{ default_perspective.getDateModified ? default_perspective.getDateModified.format('m/d/Y h:i:s A') }}</modifieddate>{{ default_perspective.getXmlStructure|raw }}</viewperspective></script>
		<script id = "FolderFilterXSL" type="text/xml"></script>"
		<!--- END Document view contents----->
		<!--- End event capture area ----->
	</div>

	<!--------  This is a dummy div to force a refresh on the ipad...this div is updated when the user clicks the Libraries and Applications tab in an ipad----->
	<div id="ipad" style="position:absolute; left:-300px; top:-300px" ></div>
</body>
</html>