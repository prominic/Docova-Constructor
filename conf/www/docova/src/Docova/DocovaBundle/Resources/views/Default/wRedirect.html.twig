<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>{% trans %}My Docova{% endtrans %}</title>
<META content="0" http-equiv="expires">
<META content="0" http-equiv="cache-control">
<META content="no-cache" http-equiv="Pragma">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/styleFormsViews.css') }}" type="text/css" />
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/commonFunctions.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/popupmenu.js') }}" charset="UTF-8"></script>
{% include 'DocovaBundle:Default:scriptMessagesTranslation.html.twig' %}
<script language="JavaScript" type="text/javascript">
var waitcount = 0;
var waitlimit = 30;
var info = {
  "UserName" : "{{ user.getUserNameDn|replace({'\\': '\\\\'}) }}",
  "UserNameAB" : "{{ user.getUserNameDnAbbreviated|replace({'\\': '\\\\'}) }}",
  "UserNameCN" : "{{ user.getUserProfile.getDisplayName }}",
  "UserRoles" : "$$WebClient;[User]",
  "HTTP_Referer" : "{{ url('docova_libraries') }}?goto={{ app.request.query.get('goto') }}",
  "Query_String" : "goto={{ app.request.query.get('goto') }}",
  "Query_String_Decoded" : "goto={{ app.request.query.get('goto') }}",
  "Path_Info_Decoded" : "{{ path('docova_redirectto') }}?goto={{ app.request.query.get('goto') }}",
  "ServerName" : "{{ app.request.server.get('HTTP_HOST') }}",
  "ServerUrl" : "{{ app.request.getscheme }}://{{ app.request.server.get('HTTP_HOST') }}",
  "NsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
  "PortalWebPath" : "{{ path('docova_homepage')[:path('docova_homepage')|length - 1] }}",
  "PortalNsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
  "Goto" :  "{{ app.request.query.get('goto') }}",
  "GotoLibUrl" :  "{{ path('docova_homepage')[:path('docova_homepage')|length - 1] }}",
  {% if app.request.query.get('goto') == 'wf' %}{%  set gotourl = path('docova_workflowtasks') %}
  {% elseif app.request.query.get('goto') == 'todo' %}{% set gotourl = path('docova_tasks') %}
  {% elseif app.request.query.get('goto') == 'fav' %}{% set gotourl = path('docova_watchlists') %}
  {% elseif app.request.query.get('goto') == 'search' %}{% set gotourl = path('docova_search') %}
  {% elseif app.request.query.get('goto')|trim != '' %}
  	{% set params = app.request.query.get('goto')|split(',') %}
  	{% if params|length == 1 %}{{ path('docova_librarywelcome') ~ '?lib=' ~ params[0] }}
  	{% else %}{% set gotourl = path('docova_allbydockey', {key : params[1]}) ~ '?syncnav=1' %}
  		{% set gotourl = params[2] is defined and params[2] ? gotourl ~ '&loaddoc=' ~ params[2] : gotourl %}
  	{% endif %}
  {% endif %}
  "GOTOUrl" : "{{ gotourl|raw }}"
};

function getinfovar(){
	return info;
}		

InitVars(info);

function HandleGoto(){

	var frame = parent.document.getElementById("fraLeftFrame");
     if (frame.scrollWidth == 0){
     	window.parent.fsSubLayout.cols = "251,*";	
     }
  
     var gotoArr = docInfo.Goto.split(",");
   	var retval = false;
   	
   	 if ( gotoArr.length > 1 ) {
     	 var FolderUnid = gotoArr[1];	 
     	 //if ( FolderUnid.substring(0,2) != "DK" ) FolderUnid = "DK" + FolderUnid;
     	 
          var FolderUrl = docInfo.GOTOUrl;
    		openDocovaFolder(FolderUnid, FolderUrl);   	
     }
     //-- Set Library/Application tab as active
     waitAndOpenLibraries(2, 0);
}

function waitAndOpenLibraries(wait, iterations){    
    var iterations = (iterations == undefined) ? 0 : iterations;
    var waitfortop = false;
    try{
	    top.fraToolbar.OpenLibraries();
	}catch(e){
	    waitfortop = true;
	}
    
    if(waitfortop==true){
        iterations ++;
        var param = "waitAndOpenLibraries(" +  wait.toString() + "," + iterations.toString() + ")";
        window.setTimeout(param, wait * 1000);
    }
}


function openDocovaFolder(folderID, FolderUrl){
	var frame = parent.document.getElementById("fraLeftFrame");
	 var folderObj = frame.contentWindow.document.all.DLITFolderView;

	if ((! folderObj) || (! folderObj.IsInitialized) || folderObj.IsLoading ){ 
		waitcount ++;
		if (waitcount < waitlimit){
	 		setTimeout (function () { openDocovaFolder(folderID, FolderUrl); }, 1000);
	 		return;
	 	}else{
	 		alert("{% trans %}Unable to open folder. The requested folder could not be opened.{% endtrans %}");
	 	}
	}
 	
	//-- check to see if libraries are configured to load at startup or not
 	if (! folderObj.LoadAllAtStartup){
	 	var libID = docInfo.Goto.split(",")[0];
 		//-- if not, then we need to load the library contents
 		folderObj.RefreshLibrary(libID, false);
 	}
	//-- now try and open the folder 	
	var result = folderObj.OpenFolder(folderID, false );
	if (result){
	    	frame.contentWindow.LoadFrame(FolderUrl);
	}else{
	    	frame.contentWindow.LoadFrame(docInfo.GOTODocUrl);		
	}
}

//------------ progress bar
//progress bar vars
var w3c=(document.getElementById)?true:false;
var ie=(document.all)?true:false;
var N=-1;
var bars=new Array();
function createBar(w,h,bgc,brdW,brdC,blkC,speed,blocks){
if(ie||w3c){
var t='<div style="position:relative; overflow:hidden; width:'+w+'px; height:'+h+'px; background-color:'+bgc+'; border-color:'+brdC+'; border-width:'+brdW+'px; border-style:solid; font-size:1px;">';
t+='<span id="blocks'+(++N)+'" style="left:-'+(h*2+1)+'px; position:absolute; font-size:1px">';
for(i=0;i<blocks;i++){
t+='<span style="background-color:'+blkC+'; left:-'+((h*i)+i)+'px; font-size:1px; position:absolute; width:'+h+'px; height:'+h+'px; ';
t+=(ie)?'filter:alpha(opacity='+(100-i*(100/blocks))+')':'-Moz-opacity:'+((100-i*(100/blocks))/100);
t+='"></span>';
}
t+='</span></div>';
document.write(t);
var bA=(ie)?document.all['blocks'+N]:document.getElementById('blocks'+N);
bA.blocks=blocks;
bA.w=w;
bA.h=h;
bars[bars.length]=bA;
setInterval('startBar('+N+')',speed);
}}

function startBar(bn){
var t=bars[bn];
t.style.left=((parseInt(t.style.left)+t.h+1-(t.blocks*t.h+t.blocks)>t.w)? -(t.h*2+1) : parseInt(t.style.left)+t.h+1)+'px';
}

function showBar()
{
	var msgDiv = document.all.divWaitMsg;
	msgDiv.style.display="";
}

function hideBar()
{
	var msgDiv = document.all.divWaitMsg;
	msgDiv.style.display="none";
}
//=========================
</script>
</head>
<body text="#000000" bgcolor="#FFFFFF" SCROLL="no" onload="HandleGoto();">
	<div id="divWaitMsg" style="width: 100%; font: normal 11px verdana, arial, sans-serif; color: #0000ff;text-align:center;display:none;">
		<br><br><br><br>&nbsp;{% trans %}Retrieving data. Please wait{% endtrans %}...<br>
		<div style="padding: 5px 0px 0px 5px;">
			<script type="text/javascript">
			createBar(300,10,'white',1,'#6CAFD3','#6CAFD3',85,10);
			</script>
		</div>
	</div>
</body>
</html>