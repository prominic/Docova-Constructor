<!DOCTYPE html>
<html>
<head>
<META content="0" http-equiv="expires">
<META content="0" http-equiv="cache-control">
<META content="no-cache" http-equiv="Pragma">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/smoothness-flat/jquery-ui.css') }}">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/styleFolderBase.css') }}">
<link rel="stylesheet" href="{{ asset('bundles/docova/font-awesome/css/all.min.css') }}" type="text/css" />
{% include 'DocovaBundle:Default:scriptMessagesTranslation.html.twig' %}
<script type="text/javascript" src="{{ asset('bundles/docova/jquery/jquery.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/docova/jquery/jquery-ui.js') }}"></script>
<script type="text/javascript" language="JavaScript" src="{{ asset('bundles/docova/js/Docova.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/viewObjects.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/sarissa.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/sarissa_ieemu_xpath.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/docova/js/commonFunctions.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/admin/appBuilderJS.js') }}"></script>
<script language="JavaScript" type="text/javascript">
var SUBJECTNODE = "F8" //to pass doc subject to tab function
var objView = null; //view object
var curColumnObj = null //view column object
var currentPerspective=""; //current perspective id
var isiPad = navigator.userAgent.match(/iPad/i) != null; //Detects if User is using an iPad.  Used to handle things like double click.

var dlgParams = new Array();  //params array that gets used by dialogs
var retValues = new Array(); //ret params array that can be used by dialogs

var shiftkeypressed = false;
var ctrlkeypressed = false;
var DLExtensions = null;

//Column actions, set as global to pass to Docova.menu function
var colAscSortAction=""; 
var colDescSortAction=""; 
var colDefaultSortAction=""; 
var colCategorizeAction="";
var colFreezeAction="";
var colDeleteAction="";
var colInsertAction="";
var colAppendAction="";
var colPropertiesAction="";
//---------------------------------------------------------------------
//var aBar = new objCustomActionBar(false, "aBar");
var info = {
    "UserName" : "{{ user.getUserNameDn|replace({'\\': '\\\\'}) }}",
    "UserNameAB" : "{{ user.getUserNameDnAbbreviated|replace({'\\': '\\\\'}) }}",
    "UserNameCN" : "{{ user.username }}",
    "SystemKey" :  "{{ settings.getSystemKey }}",
    "Query_String" : "ReadForm&DesignElement={{ app.request.query.get('DesignElement') }}&isEmbedded=true",
    "Query_String_Decoded" : "ReadForm&DesignElement={{ app.request.query.get('DesignElement') }}&isEmbedded=true",
    "Path_Info_Decoded" : "{{ path('docova_notesview') }}?ReadForm&DesignElement={{ app.request.query.get('DesignElement') }}&isEmbedded=true",
    "ServerName" : "{{ app.request.server.get('HTTP_HOST') }}",
    "NsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
    "ServerUrl" : "{{ app.request.getscheme }}://{{ app.request.server.get('HTTP_HOST') }}",
    "PortalWebPath" : "{{ url('docova_homepage') }}",
    "PortalNsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
    "ViewName" : "{{ app.request.query.get('DesignElement') }}",
    "IsAppBuilder" : "1",
    "RestrictToCategory" :"{{ app.request.query.get('restrictToCategory') is not null ?  app.request.query.get('restrictToCategory') : '--none--' }}",
    "IsEmbedded": {{ app.request.query.get('isEmbedded') == 'true' or app.request.query.get('isEmbedded') == '1' ? 'true' : 'false' }},	
    "ShowSearch": "{{ app.request.query.get('showSearch') }}",
    "SessionDateFormat" : "{{ settings.getDefaultDateFormat|replace({'YYYY' : 'yy'})|lower }}",
    "ViewID": "",
    "AppID": "0",
    "UseContentPaging" : "0",
    "MaxDocCount" : "2",
    "OpenDocInEditMode": "",
    "TitleNode": "",
    "HideActions" : {{ app.request.query.get('HideActions') == 'true' ? 'true' : 'false' }}
};
function getinfovar(){
	return info;
}
InitVars(info);
PreloadBaseImages();

$(document).ready(function(){
	DLExtensions = window.top.DocovaExtensions;
	var objContent = $("#divViewContent");
	objContent.disableSelection();
		
	//if no buttons in the action pane, then hide the header
	if ( $("#tdActionBar > button, #tdActionBar > a").length == 0 ){
		$("#actionPaneHeader").hide();
		$("#divViewContent").css("top", "0px");
		$("#divToolbarSearch").css("top", "0px");
		$("#divContentPaging").css("top", "0px");
	}
	checkAvailableHeight();
	$('#divViewContent').scroll(moveScroll);
	
	//handle toolbar buttons
	$("#tdActionBar").find("button,a").each(function() 
	{ 
		var icnrght = $(this).attr("iconright");
		var icnleft= $(this).attr("iconleft");
		var title = $(this).attr("title");
		
		$(this).button({
			label: title,	
			icons: { primary: icnleft, secondary: icnrght}
		});
	});
	
	$(".listheader").resizable({ handles: "e" });

	//show/reveal view after all elements are loaded
	$("#viewMainContainer").css("display", "");
	$("#divViewEventCapture").prop('tabIndex', 1);
	InitPage();
});   

function moveScroll() {
	var scroll = $('#divViewContent').offset().top;
	var anchor_top = $("#VDataTable").offset().top;
//	var anchor_bottom = $("#bottom_anchor").offset().top;

	if (scroll > anchor_top){ //&& scroll < anchor_bottom) {

		clone_table = $("#clone");
		
		if (clone_table.length === 0) {
			var top = $("#actionPaneHeader").outerHeight();
			if (  ($("#divToolbarSearch").css("display") != "none") )
				top += $("#divToolbarSearch").outerHeight();
			if  ($("#divToolbarPerspective").css("display")!="none")
				top += $("#divToolbarPerspective").outerHeight();
			if  ($("#divContentPaging").css("display")!="none")
				top +=$("#divContentPaging").outerHeight();
		    top= top
			clone_table = $("#VDataTable").clone().find("tbody > tr").remove().end().find('.ui-resizable-handle').remove().end();
			clone_table.attr({
				id : "clone"
			}).css({
				position : "fixed",
				//"pointer-events" : "none",
				left : $("#VDataTable").offset().left + 'px',
				"z-index": "100",
				"border-top" : "solid 1px silver",
				top : top
			}).width($("#VDataTable").width());
				
    		$("#divViewContent").append(clone_table);
    		$("#clone").width($("#VDataTable").width());
        
    		$("#clone thead").css({
    			visibility : "true"
    		});
    
    		// clone tbody is hidden
    		$("#clone tbody").css({
    			visibility : "hidden",
    		});
    
    		var footEl = $("#clone tfoot");
    		if (footEl.length) {
    			footEl.css({ visibility : "hidden"});
    		}
			
			$("#clone").find("td.listheader").resizable({
				handles: "e",
				resize: function(event){
					var tdid = jQuery(event.target).attr("colidx");
					var tdwidth = jQuery(event.target).width();
					$("#VDataTable").find("td.listheader[colidx=" + tdid + "]").width(tdwidth);
				}
			});
		}
	} else {
		$("#clone").remove();
	}
}

function mayUserEditDoc(docID) {
	//supports folder context menu option 'Edit' and 'Edit in New Window'
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/DocumentServices?OpenAgent";
	var request="";
	request += "<Request>";
	request += "<Action>MAYUSEREDIT</Action>";
	request += "<Unid>" + docID + "</Unid>";
	request += "</Request>";	

	var httpObj = new objHTTP();
	if(!httpObj.PostData(request, url) || httpObj.status=="FAILED") {return false; }

	return httpObj.results[0];
}

//=================== Content Paging ==========================
var typingTimer;                //timer identifier 

function disableContentPaging(disabled)
{
	//this function is called by viewObjects prior to the document.ready firing
	//button definitions have to be included here.
	$("#btnContPage1").prop("disabled", disabled );
	$("#btnContPage2").prop("disabled", disabled );
	$("#btnContPage3").prop("disabled", disabled );
	$("#btnContPage4").prop("disabled", disabled );	

	if(disabled) {
		$("#currPic").css("background-color", "#DFDFDF");
		$("#currCount").css("background-color", "#DFDFDF");		
		$("#GetPage").css("background-color", "#DFDFDF");				
		$("#GetPage").attr("disabled", "disabled");		
	} else {
		$("#currPic").css("background-color", "white");
		$("#currCount").css("background-color", "white");	
		$("#GetPage").css("background-color", "white");	
		$("#GetPage").removeAttr("disabled");	
	}
}
 
//on keyup, start the countdown 
function triggerGetPage() { 
	clearTimeout(typingTimer);	
	typingTimer = setTimeout(getPage, 600);  
}  

function selText(obj){
	obj.select();
}

function getPage() {
	//if(doc.GetPage.value == "") {return}
	if(document.getElementById("GetPage").value == "") {return}
	//objView.docSubject = doc.GetPage.value;
	objView.docSubject = document.getElementById("GetPage").value;
	objView.exactMatch = false;
	if(docInfo.EnableFolderFiltering == "1"){
		//doc.CurrentFilterDiv.innerHTML = "";	
		$("#CurrentFilterDiv").html("")
		ClearAllColFilterFlags();
	}
	objView.getTotal = false;
	objView.Refresh(true,true,true);
	$(".listheader").resizable({ handles: "e" })
}

var total = 0;
var count = 0;
var start = 1;
var currCnt = null;
var origCount = 0;	
var buttonsDisabled = null;

//----- object presence testers ----
function HasUploaderResize()
{
	try	{
		if(SetUploaderDimensions){return true;}
	}
	catch (e)
	{
		return false;
	}
	return false;
}

function HasViewPane()
{
	try	{
		if(ViewLoadDefaultPerspective){return true;}
	}
	catch (e)
	{
		return false;
	}
	return false;
}
// ------------- preloads icons used in view object---------------

function PreloadBaseImages()
{
	var curNsf = docInfo.ServerUrl + "{{ asset('bundles/docova/images/') }}";
    var imgArray = new Array();
    var imgNames = "cat-collapse.gif,cat-expand.gif,coloptions.gif,pincolumn.gif,viewRefreshGreen.gif,chkrbrdclosed.gif,chkrbrdopened.gif,icn16-stddoc.gif,icn16-unknowndoc.gif,icn16-webpage.gif,sortadred-default.gif,popmenu-check.gif";
    var imgList = imgNames.split(",");
    
    for (k=0; k<imgList.length; k++)
    {
    	imgArray[k] = new Image();
    	imgArray[k].src = curNsf + imgList[k] + "?Open";
    }
}

//--------------------------------------Initializepage --------------------------
function InitPage()
{
	ViewSetOnloadState();
	ViewLoadDefaultPerspective();
	ViewOpenDoc();
	
	if(objView.contentPaging) {
		$("#totalCount").html(objView.totalDocCount);
	}	
	checkAvailableHeight();
	if ( ! isiPad ){
		$(window).on("resize", function(){ checkAvailableHeight() });
	}
}

// ------------- sets the view object and loads default view perspective---------------
function ViewLoadDefaultPerspective()
{
	objView = new ObjView("divViewContent", true);
	objView.iconBaseUrl = "{{ asset('bundles/docova/images/') }}";
	objView.imgPath = "{{ asset('bundles/docova/images/') }}";
	objView.iconBaseUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/";
	objView.baseUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/";
	objView.baseXmlUrl=docInfo.ServerUrl + "/" + docInfo.NsfName + "/readfolderdataview.xml?OpenAgent" ;
	
	objView.folderID = docInfo.FolderID; 
	objView.columnPropertiesDialogUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/dlgViewColumnProperties?OpenForm&FolderID=" + docInfo.FolderID; 
	objView.serverName=docInfo.ServerName;
	objView.nsfName=docInfo.NsfName;
	objView.serviceAgent=docInfo.ServerUrl + "/" + docInfo.NsfName + "/ViewServices?OpenAgent";
	objView.dateFormat = docInfo.SessionDateFormat;
	objView.embView = (docInfo.IsEmbedded || false);
	
	if ( docInfo.RestrictToCategory != "--none--" )
	{
		objView.restrictToCategory = docInfo.RestrictToCategory;
	}
	
	if(docInfo.UseContentPaging == "1") {	
		objView.contentPaging = true;
		objView.docCount = docInfo.MaxDocCount;
	}

	ViewLoadPerspective();
	ViewAttachEvents();
}

//------------ perspective handlers -----------------------------

function ViewLoadPerspective()
{
	var perspectiveId = (currentPerspective)? currentPerspective : docInfo.DefaultPerspective;
	var el = document.getElementById("xmlViewPerspective");
	if(! el){
		return;
	}
	var perspectiveDocXml = el.textContent || el.innerText || el.nodeValue || el.innerHTML;	
	objView.SetViewParams(perspectiveDocXml);

	var perspectiveDoc = (new DOMParser()).parseFromString(perspectiveDocXml, "text/xml");
	if(Sarissa.getParseErrorText(perspectiveDoc) != Sarissa.PARSED_OK){  
  		var errorText = Sarissa.getParseErrorText(perspectiveDoc);
		alert("Error parsing xsl: " + errorText);
		perspectiveDoc = null;
		return;
	}					
	var isAutoCollapseNode = perspectiveDoc.selectSingleNode("viewperspective/autocollapse");
	if (isAutoCollapseNode == null){
		var isAutoCollapse = "0";
	}else{
		var isAutoCollapse = isAutoCollapseNode.textContent || isAutoCollapseNode.text;
	}
	
	jQuery("#inpSwitchPerspective").val(perspectiveId);

	objView.queryOptions = ViewGetQueryOptions();

	if(isAutoCollapse == "1"){
		$("#divViewContent").css("display", "none")	
		if(docInfo.EnableFolderFiltering == "1"){ //Initialize and apply default filtering if enabled	, last "true" parameter on the .Refresh
			objView.Refresh(true,true,true,true,true);
			$(".listheader").resizable({ handles: "e" });
		}else{
			objView.Refresh(true,true,true);
			$(".listheader").resizable({ handles: "e" });
		}
		objView.CollapseAll();
		$("#divViewContent").css("display", "");
	} else {
	
		if(docInfo.EnableFolderFiltering == "1"){ //Initialize and apply default filtering if enabled, last "true" parameter on the .Refresh
			$("#divViewContent").css("display", "none");
			objView.Refresh(true,true,true,true,true);
			$(".listheader").resizable({ handles: "e" });
			$("#divViewContent").css("display", "");
		}else{
			objView.Refresh(true,true,true);
			$(".listheader").resizable({ handles: "e" });
		}
	}
}

// ======================= view event handlers =======================
//Global varables
var dragSourceColumn; //column heading being dragged into new location
var dragTargetColumn; //target column heading for dragover and drop 
var selectDragMode; //specifies how the drag selection over checkboxes should be handled
var viewContainer ; //object where the view contents will be plugged
mouseX; //mouse coordinates
mouseY;

//event attacher
function ViewAttachEvents()
{
	var paneObj = document.getElementById("divViewContent"); //#divViewEventCapture
	if(!paneObj) {return false;}
	$(paneObj).on("mousedown", function(e){ ViewHandleEvent(e) });
	$(paneObj).on("dblclick", function(e){ e.stopPropagation(); ViewHandleEvent(e); });
	$("#divViewEventCapture").on("keydown", function(e){ ViewHandleEvent(e); });
	$("#divViewEventCapture").on("keyup", function(e){  ViewHandleEvent(e); });
	if (  docInfo.IsEmbedded  !== true)
		$(paneObj).on("contextmenu", function(e){ e.preventDefault(); ViewHandleEvent(e); })
}


//=====================  event dispatcher ===========================
function ViewHandleEvent(event)
{
	var eventSource = event.target;
	var eventType = event.type;
	var sourceClass=eventSource.className || "";
	sourceClass = jQuery.trim(sourceClass.replace("ui-resizable", "")); 
	var sourceId=$.trim(eventSource.id); 
	var keyCode = event.keyCode;
	var currentRow; //table row containing the eventSource
	var sourceType="";
	
	if(!eventSource){return}
	currentRow = $(eventSource).closest("TR").get(0);
	var tagname = $(eventSource).prop("tagName").toUpperCase();

	if ( $(eventSource).hasClass("far") ||$(eventSource).hasClass("fas") ||$(eventSource).hasClass("fab")  )
	{
	 	if ( $(eventSource).hasClass(objView.categoryExpandClass.split(" ")[1]) || $(eventSource).hasClass(objView.categoryCollapseClass.split(" ")[1]) )
	 	{
	 		ViewEventDispatch(event, eventType, eventSource, "categorytoggle", keyCode, currentRow);
			return;
		}else if ($(eventSource).hasClass("fa-sync")  ){
			ViewEventDispatch(event, eventType, eventSource, "viewrefresh", keyCode);
			 return;
		}else if ( $(eventSource).hasClass("sorting")){
			 ViewEventDispatch(event, eventType, eventSource, "viewsort", keyCode);
			 return;
		}
	}

	//------------------ check if there are any event handlers for the event source --------
	//------------- clickable images
	if (tagname == "IMG") {
		if(sourceClass=="listsorticon")
		{
			ViewEventDispatch(event, eventType, eventSource, "viewsort", keyCode);
			return;
		}
			
		else if ( sourceClass=="reflection" || sourceClass=="content portray" || sourceClass=="content landscape"){
			ViewEventDispatch(event, eventType, eventSource, "coverflow", keyCode, currentRow);
			return;
		}
			
		else if(sourceClass=="listviewrefresh")
		{
			ViewEventDispatch(event, eventType, eventSource, "viewrefresh", keyCode);
			return;
		}		
		else if(sourceClass=="listexpandericon")
		{
			ViewEventDispatch(event, eventType, eventSource, "categorytoggle", keyCode, currentRow)
			return;
		}else if ( sourceClass=="shadow"){
			eventSource = eventSource.parentNode;
			currentRow = eventSource;
			ViewEventDispatch(event, eventType, eventSource, "thumbnail", keyCode, currentRow);
		}		
	
	//------------ input fields		
	}else if (tagname == "INPUT") {
		if(sourceId=="inpQuery")
		{
		 	ViewEventDispatch(event, eventType, eventSource, "ftquery", keyCode);
		 	return;
		}
		else if(sourceId=="GetPage") {
		 	return;
		}
		else if(sourceId == "ExportSelectCb"){
			ViewEventDispatch(event, eventType, eventSource,  "selectcell", keyCode, currentRow);
			return;
		}

	//------------ cells/rows
	}else if (tagname == "TD" || tagname == "TH" || tagname == "SPAN") {
		//thumbnail column
		if ( sourceClass == "thumbnail" ) {
			currentRow = eventSource;
			ViewEventDispatch(event, eventType, eventSource, "thumbnail", keyCode, currentRow);
			return;
		}
		//column heading	
		else if(sourceClass=="listheader" || sourceClass=="listheaderfr" || sourceClass=="listheaderfltr" || sourceClass=="listheaderfrfltr") //column heading
		{
			ViewEventDispatch(event, eventType, eventSource, "viewheader", keyCode, currentRow);
			return;
		}
		//selection column heading	
		else if(sourceClass=="listselheader") //selection column heading
		{
			ViewEventDispatch(event, eventType, eventSource, "viewselectheader", keyCode, currentRow);
			return;
		}
		//data or total cell
		else if(sourceClass=="listitem" || sourceClass=="listitemfr") //data or total cell
		{
			if($(currentRow).attr("isRecord"))
			{		
				ViewEventDispatch(event, eventType, eventSource, "datarow", keyCode, currentRow);
				return;
			}										
			else if($(currentRow).attr("isCategory")) 
			{
				ViewEventDispatch(event, eventType, eventSource, "categoryrow", keyCode, currentRow);
				return;
			}
			else if($(currentRow).attr("isSubtotal"))
			{
				ViewEventDispatch(event, eventType, eventSource, "subtotalrow", keyCode, currentRow);
				return;
			}
			else if($(currentRow).attr("isTotal"))
			{
				ViewEventDispatch(event, eventType, eventSource, "totalrow", keyCode, currentRow);
				return;
			}
		}
		//category heading cell			
		else if(sourceClass=="listcat" || sourceClass=="listcatfr") //category heading cell
		{
			ViewEventDispatch(event, eventType, eventSource,  "categoryrow", keyCode, currentRow);
			return;
		}
		//selection margin cell					
		else if(sourceClass=="listsel") //selection margin cell
		{
			ViewEventDispatch(event, eventType, eventSource,  "selectcell", keyCode, currentRow);
			return;
		}
	}
	ViewEventDispatch(event, eventType, eventSource,  "", keyCode, currentRow);
}

//------------------ dispatch event handler based on event source and type --------
function ViewEventDispatch(event, eventType, eventSource, sourceType, keyCode, currentRow)
{
	if(eventType=="mousemove")
	{
		if(sourceType=="selectcell") {
			ViewDocSelectDrag(eventSource, event.which);
			return CancelEvent();
		} //doc selection column
		if(sourceType=="viewheader" ) {
			ViewColumnDrag(eventSource);
			return CancelEvent();
		} //doc selection column
	}
	else if(eventType=="mousedown" && (event.which == 1 || event.which == 3)) //left mouse button or right mouse button
	{
		$("#divViewContent").focus();
		checkAvailableHeight();
		if ( sourceType =="selectcell" && event.which ==3){ViewShowContextPopup(sourceType, eventSource);return CancelEvent();}
		if(sourceType=="selectcell"){ViewDocSelectClick(eventSource);} //doc selection column
		if(sourceType=="viewsort") {ViewSortColumn(eventSource);}
		if(sourceType=="viewrefresh" || sourceType=="viewselectheader")
		{ //view refresh icon
			if(docInfo.EnableFolderFiltering == "1")
			{
				$("#divViewContent").css("display", "none");
				objView.Refresh(true,false,true,false,false, true);
				$(".listheader").resizable({ handles: "e" });
				$("#divViewContent").css("display", "");
			}else{
				objView.Refresh(true, false, true);
				moveScroll(); //in case view list is scrolled we need to reset the header
				$(".listheader").resizable({ handles: "e" })
			}
		} 
		if(sourceType=="categorytoggle") {ViewToggleCategory(currentRow);}
		if(sourceType=="datarow" || sourceType=="subtotalrow" || sourceType=="categoryrow" || sourceType=="thumbnail")
		{	
			if(isiPad){  //if single click on an iPad, if row is already highlighted then open doc like a double click.
				if( currentRow.id == objView.currentEntry){ //check to ensure a doc is highlighted
					if(sourceType=="datarow" || sourceType=="subtotalrow" || sourceType=="categoryrow" || sourceType =="thumbnail" ) {ViewHighlightEntry(currentRow);}
					//if(sourceType=="datarow"){CreateEntrySubmenu(eventSource);}
					if(sourceType=="datarow"){CreateEntrySubmenu(event);}
				}else{
					ViewHighlightEntry(currentRow);
				}
			}else{
				ViewHighlightEntry(currentRow);
			}
		}
		if(sourceType=="viewheader" ) {ViewColumnSelectFilter(eventSource);}
	}
	else if(eventType=="mouseover")
	{
		if(sourceType=="viewheader" ) {ViewColumnDragOver(eventSource);}
	}
	else if(eventType=="mouseup")
	{
		if(sourceType=="viewheader" ) {ViewColumnDragDrop(eventSource, eventType);}
		return ViewClearEventState();
	}
	else if(eventType=="click")
	{
		return CancelEvent();
	}
	else if(eventType=="dblclick" )
	{
		if(sourceType=="datarow") {
			var uiView = Docova.getUIView();
			if (  uiView._triggers['dblclick'] )  {
				if ( uiView.triggerHandler('dblclick', uiView) ) 
					 ViewLoadDocument(false);
			}else{
				ViewLoadDocument(false);
			}
		}
		if(sourceType=="categoryrow" ) {ViewToggleCategory(currentRow);}	
		if(sourceType=="thumbnail"){ViewLoadDocument(false);}
		if(sourceType=="coverflow"){ViewHighlightEntry(currentRow);ViewLoadDocument(false);}
	}
	else if(eventType=="mouseout")
	{
		return ViewClearEventState();
	}
	else if(eventType=="keydown")
	{
		var isIE = false || !!document.documentMode;
		if (isIE)
			event.preventDefault();
		ViewHandleKeyboardEvent(eventType, eventSource, sourceType, keyCode, currentRow);
	}
	else if ( eventType == "keyup")
	{
 		var isIE = false || !!document.documentMode;
		if (isIE)
			event.preventDefault();
		shiftkeypressed = false;
		ctrlkeypressed = false;
		return;
	}
	else if(eventType=="selectstart")
	{
		if(sourceType !="ftquery") {return CancelEvent();}
	}
	else if(eventType=="contextmenu")
	{
		if(sourceType=="datarow" || sourceType=="subtotalrow" || sourceType=="categoryrow" || sourceType =="thumbnail" ) {ViewHighlightEntry(currentRow);}
		if(sourceType=="datarow"){CreateEntrySubmenu(event);}
		if(sourceType=="thumbnail"){CreateThumbnailsSubmenu(event, eventSource);}
		if(sourceType=="viewheader" || sourceType=="viewselectheader" || sourceType=="viewrefresh") {
			ViewShowContextPopup(sourceType, eventSource);
			return CancelEvent();
		}
		return CancelEvent();
	}
}

// ------------------------------------ document list key handlers ------------------------------------------------

function ViewHandleKeyboardEvent(eventType, eventSource, sourceType, keyCode, currentRow)
{
	var DEL_KEY = 46;
	var ENTER_KEY = 13;
	var DOWNARROW_KEY = 40;
	var UPARROW_KEY = 38;
	var F9_KEY = 120;
	var SPACE_KEY= 32;
	var ESC_KEY= 27;
	var SHIFT_KEY=16;
	var CTRL_KEY = 17;
	var C_KEY  = 67;
	var V_KEY = 86;
	var X_KEY = 88;
    var A_KEY = 65;


	//The keydown event.target is different in different browsers. Use view object currentEntry to re-set currentRow
	//and sourceType
	if(objView.currentEntry){
		currentRow = $("#divViewEventCapture").find("#" + objView.currentEntry).get(0);
		if($(currentRow).attr("isRecord")){sourceType = "datarow";}
		if($(currentRow).attr("isCategory")){sourceType = "categoryrow";}
		if($(currentRow).attr("isSubtotal")){sourceType = "subtotalrow";}
		if($(currentRow).attr("isTotal")){sourceType = "totalrow";}
	}
	
	if(keyCode == DEL_KEY)
	{
		if(docInfo.CanDeleteDocuments) {
			if(sourceType=="datarow" ){
				if(docInfo.EnableFolderFiltering == "1"){
					objView.DeleteSelectedEntries();
					$("#divViewContent").css("display", "none")	
					ApplyFolderFilter(true);
					$("#divViewContent").css("display", "")	
				}else{
					objView.DeleteSelectedEntries();
				}
			}
		}
	}
	else if ( keyCode == SHIFT_KEY )
	{
		shiftkeypressed = true;
	}else if ( keyCode == CTRL_KEY ){
		ctrlkeypressed = true;
	}else if ( keyCode == C_KEY ){
		if ( ctrlkeypressed ) {
			ViewCopySelected();
		}
	}else if ( keyCode == V_KEY ) {
		if ( ctrlkeypressed ) {
			ViewPasteSelected();
		}
	}else if ( keyCode == X_KEY ){
		if ( ctrlkeypressed ) {
			ViewCutSelected();
		}
	}else if ( keyCode == A_KEY ){
		if ( ctrlkeypressed ) {
			objView.SelectAllEntries();
			$("#divViewContent").triggerHandler( "focus" )
		}
	}
	else if(keyCode == ENTER_KEY)
	{
		if(sourceType=="datarow" && objView.currentEntry != "") //process entry only if it is highlighted
		{
			ViewLoadDocument(false);
		}
		if(sourceType=="categoryrow" || sourceType== "categorycell") {ViewToggleCategory(currentRow);}	
		if(sourceType=="ftquery") {ViewFTSearch();}	
	}
	else if(keyCode == DOWNARROW_KEY)
	{
		if(sourceType=="datarow" || sourceType=="categoryrow" || sourceType=="subtotalrow")
		{
			ViewMoveDocHighlight("down");
		}
	}
	else if(keyCode == UPARROW_KEY)
	{
		if(sourceType=="datarow" || sourceType=="categoryrow" || sourceType=="subtotalrow")
		{
			ViewMoveDocHighlight("up");
		}
	}
	else if(keyCode == ESC_KEY)
	{
		if(sourceType=="datarow" || sourceType=="categoryrow" || sourceType=="subtotalrow" && objView.currentEntry != "") //select the entry only if it is highlighted
		{
			ViewResetEntryHighlight();
		}
		if(sourceType=="ftquery") {ViewFTClear(); $("#inpQuery").focus();}	
	}
	else if(keyCode == F9_KEY)
	{
		objView.Refresh(true, false, true);
		$(".listheader").resizable({ handles: "e" })
	}	
	else if(keyCode == SPACE_KEY)
	{
		if(sourceType=="datarow" && objView.currentEntry != "") //select the entry only if it is highlighted
		{
			ViewDocSelectClick(document.getElementById(objView.currentEntry));
		}
		if(sourceType=="categoryrow" || sourceType== "categorycell") {ViewToggleCategory(currentRow);}	
		if(sourceType=="ftquery"){return;} //let it go
		ViewClearEventState();
		CancelEvent(); //handled
	}
}


//===================== Event handler functions ===================

//----------------------------- highlight entry on click -------------------
function ViewHighlightEntry(source)
{
	if (!source) {
		return false;
	}
	if ( source.className == "thumbnail" ){
		$(".thumbnail").css("background", "");
		$(source).css("background", "lightgray" );
	}
	//if shift is being pressed then set checkbox
	if ( shiftkeypressed ) {
		var startid = objView.currentEntry;
		if (startid == "")
			return;
		var endid =  source.id;
		objView.ShiftSelectEntries  (startid, endid )
	}else if ( ctrlkeypressed ){
		var id =   source.id;
		objView.CtrlSelectEntries(id );
	}else{
		if(objView.isAppView){
			objView.HighlightEntryByRowIndex(source.rowIndex);
		}else{
			objView.HighlightEntryById(source.id);
		}
	}
	CancelEvent();
}

//----------------------------- un-highlight entry on ESC key -------------------
function ViewResetEntryHighlight()
{
	objView.ResetHighlight();
}

//----------------------------- up/down keys on highlighted entry ------------------------
function ViewMoveDocHighlight(dir) //up/down arrow key handler
{
	objView.MoveEntryHighlight(dir) ;
	return CancelEvent();
}


// ----- called to refreesh the view after adding/editing a document --------------
function ViewReload(selectDoc)
{
	if(selectDoc) {objView.currentEntry = selectDoc;}
	objView.queryOptions = ViewGetQueryOptions();
	
	//-----If view is being filtered, reapply the filter-----
	if(docInfo.EnableFolderFiltering == "1"){
		$("#divViewContent").css("display", "none")	
		objView.Refresh(true,false,true);
		ApplyFolderFilter(true);
		$(".listheader").resizable({ handles: "e" })
		$("#divViewContent").css("display", "")	
	}else{
		objView.Refresh(true,false,true);
		$(".listheader").resizable({ handles: "e" })
	}
}

//---- open specific document after opening the folder ---------
function ViewOpenDoc()
{
//	try{
	if(docInfo.LoadDoc) {
		objView.HighlightEntryById(docInfo.LoadDoc);
	}

	if(docInfo.DocumentTypeOption=="N" && !docInfo.isRecycleBin){
		infoUrl=docInfo.ServerUrl + "/" + docInfo.NsfName + "/wFolderInfo?OpenForm&ParentUNID=" + docInfo.DocID;
		ViewLoadDocument(infoUrl);
	}

	if(docInfo.LoadDoc){
		(objView.currentEntry)? ViewLoadDocument() : OpenDocumentWindow(docInfo.LoadDoc);
	} //currentEntry will be set only if it can be located in the list
//		}catch(err){}
}

//----------------  open/close document handlers -----------------------
function ViewLoadDocument(docUrl, docTypeName, isNewDoc, editMode)
{
	if(docInfo.isRecycleBin) // documents in recycle bin cannot be opened, just the properties dialog is displayed
	{
		var entryObj = objView.GetCurrentEntry();
		if(!entryObj) {return; }
		var recType = entryObj.GetElementValue("rectype");
		if(recType == "fld") //deleted folder
		{
			ShowFolderProperties(entryObj.entryId);
		}
		else if(recType == "doc") //deleted doc
		{
			ShowDocumentProperties(entryObj.entryId);
		}
		return;
	}
	var action = "Open";
	if(editMode) { 
		//need to check if user is authorized to edit
		if(!mayUserEditDoc(objView.GetCurrentEntry().entryId)) {
			Docova.Utils.messageBox({
				title: "{% trans %}Not Authorized{% endtrans %}",
				prompt: "{% trans %}You are not authorized to edit this document.{% endtrans %}",
				icontype: 1,
				msgboxtype: 0
			});
			return
		}
		action = "Edit" 
	}
	
	//check if the view defaults to open the doc in edit mode
	if ( docInfo.OpenDocInEditMode == "1" )
		action = "Edit"
	
	// regular folder
	if(!docUrl && objView.currentEntry)
	{
		if (action == 'Edit') {
			docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/wViewForm/0/" + objView.currentEntry + "?EditDocument";
		}
		else {
			docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/wReadDocument/" + objView.currentEntry + "?OpenDocument";
		}
	}
	if(!docUrl) {
		Docova.Utils.messageBox({
			title: "{% trans %}Error{% endtrans %}",
			prompt: "{% trans %}Document Url cannot be located.{% endtrans %}",
			icontype: 1,
			msgboxtype: 0
		});
		return;
	}
	
	//------------- tabbed interface ----------------------------------
	var entryObj = objView.GetCurrentEntry();

	var frameID = "";
	var title = "";
	if(isNewDoc) {
		frameID = window.parent.fraTabbedTable.objTabBar.GetNewDocID();
		if(docTypeName == undefined || docTypeName == "") {
			docTypeName = "Document";
		}
		title = "{% trans with {'%vname%' : '" + docTypeName'} %}New %vname%{% endtrans %};	
	} else if(entryObj) {

		frameID = entryObj.entryId; 
		//thumbnails have a docid~attachment name as id.
		//if this is the case, get the docid alone
		
		if ( frameID.indexOf("~" ) > 0 ){
			frameID = frameID.substring(0, frameID.indexOf("~") );
		}
		
		if ( docInfo.TitleNode  != "" )
			title = entryObj.GetElementValue(docInfo.TitleNode);
		else
			title = entryObj.GetElementValue("CF0");
	}

	try	{
		if(onDocumentOpen()){ return true;}
	}
	catch (e)
	{
		if ( docInfo.IsEmbedded === true )
			window.parent.parent.fraTabbedTable.objTabBar.CreateTab(title, frameID, "D", docUrl, docInfo.DocID, isNewDoc)
		else 
			window.parent.fraTabbedTable.objTabBar.CreateTab(title, frameID, "D", docUrl, docInfo.DocID, isNewDoc);
	}
}

function ViewUnloadDocument(refreshView, selectDocId)
{
	ViewSetTitleOptions("Folder: " + docInfo.FolderName);
	window.parent.fsContentFrameset.rows = "*,0";	

	if(refreshView) 
	{
		ViewReload(selectDocId);
		return;
	}
		
	if(objView.currentEntry != "") 
	{
		objView.HighlightEntryById(objView.currentEntry);
	}
	else
	{
		$("#divViewContent").focus();
	}
	var curContentUrl = window.parent.fraContentBottom.location.href;
	if(curContentUrl.indexOf("/BlankContent?")==-1){
		var contentUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/" +  "BlankContent?OpenPage";
		window.parent.fraContentBottom.location.href=contentUrl ;
	}
}
//-------- clipboard functions --------------------
function ViewCopySelected()
{
	if(objView.currentEntry =="" && objView.selectedEntries.length == 0) {return false;};
	ViewSetClipboard("copy");
}

function ViewCutSelected()
{
	if(objView.currentEntry =="" && objView.selectedEntries.length == 0) {return false;};
	ViewSetClipboard("cut");
}

function ViewSetClipboard(action)
{
	if(objView.currentEntry =="" && objView.selectedEntries.length == 0) {return false;};

	var clipdata="<srclibkey>" + docInfo.LibraryKey + "</srclibkey>";
	clipdata += "<srcfolderid>" + docInfo.FolderID + "</srcfolderid>"; // source folder id for refresh
	if(objView.selectedEntries.length > 0)
	{
		for(var k=0; k<objView.selectedEntries.length; k++)
		{
			clipdata+="<Unid>" + objView.selectedEntries[k] + "</Unid>";
		}
	}
	else
	{
		clipdata+="<Unid>" + objView.currentEntry  + "</Unid>"
	}

	Docova.Utils.setCookie({ keyname: "clipaction", keyvalue: action })
	Docova.Utils.setCookie({ keyname: "clipdata", keyvalue: clipdata })
}

function ViewPasteSelected()
{
	var clipdata = Docova.Utils.getCookie({ keyname: "clipdata" })
	if(clipdata == "") {return false;}
	var action = Docova.Utils.getCookie({keyname: "clipaction" })
	

	var request = "<Request>";
	request += "<Action>PASTE</Action>";
	request += "<clipaction>" + action + "</clipaction>";
	request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "<targetfolder>" + docInfo.FolderID + "</targetfolder>";
	request += clipdata;
	request += "</Request>";	

	if(action == "cut"){ //paste after cut is a one time shot	
 		var parser = new DOMParser();
		var tmpXMLDocument = parser.parseFromString("<dummy>" + clipdata + "</dummy>","text/xml");		
		var node = tmpXMLDocument.documentElement.selectSingleNode("srcfolderid");
		if ( node != null ){
			var folderid = node.textContent || node.text;
			var unid = folderid.substring(2);
			if (window.parent.fraTabbedTable){ 
				window.parent.fraTabbedTable.objTabBar.RefreshHelper.AddFolderToRefreshList(unid, ""); // added for source folder refresh
			}
		}
		Docova.Utils.showProgressMessage("{% trans %}Moving documents. Please wait{% endtrans %}...")
		Docova.Utils.setCookie({ keyname: "clipaction", keyvalue: "" }) 
		Docova.Utils.setCookie({ keyname: "clipdata", keyvalue: "" }) 
	} else {
		Docova.Utils.showProgressMessage("{% trans %}Pasting documents. Please wait{% endtrans %}...")
	}

	//--- processing agent url
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/ViewServices?OpenAgent";
	var httpObj = new objHTTP();

	var retStatus = httpObj.PostData(request, url);
	Docova.Utils.hideProgressMessage();
	
	if(!retStatus ){return false;}
	objView.queryOptions = ViewGetQueryOptions();
	
	if(docInfo.EnableFolderFiltering == "1"){
		$("#divViewContent").css("display", "none")	
		objView.Refresh(true, false, true)
		ApplyFolderFilter(true);
		$(".listheader").resizable({ handles: "e" })
		$("#divViewContent").css("display", "")	
	}else{
		objView.Refresh(true, false, true)
		$(".listheader").resizable({ handles: "e" })
	}
}

// ------------------------------------- selection checkbox handlers ------------------------------------------------------

function ViewDocSelectClick(source)
{
	if(!source) {return CancelEvent();}

	currentRow = $(source).closest("TR").get(0)
	parentRow = currentRow

	if(!$(parentRow).attr("isRecord")) {return CancelEvent();}

	var chkbox = $(currentRow).find("INPUT").get(0)
	if( !$(chkbox).prop("checked"))
		{
		$(parentRow).attr("isChecked", true);
		if(chkbox) {objView.ToggleSelectEntryById($(parentRow).prop("id"), "check");}
		}
	else
	{
		$(parentRow).attr("isChecked", false);
		if(chkbox) {objView.ToggleSelectEntryById($(parentRow).prop("id"), "uncheck");}
	}

	return CancelEvent(); //handled
}

//--------------------------------------------- selecting documents by dragging mouse over selection boxes ------
function ViewDocSelectDrag(source, mouseButton)
{
	if(!source) {return false;}

	if (mouseButton == 0 || mouseButton == 1)
	{
		var parentRow  = source.parentElement; //check if the handler should continue
		if((selectDragMode=="check" && parentRow.isChecked) || (selectDragMode=="uncheck" && !parentRow.isChecked))
		{
			return; //handled
		}
		else
		{
			ViewDocSelectClick(source); //call check handler
		}
	}
	return CancelEvent(); //handled
}

 
//--------------------------------------------- column sorting ----------------------------------------------------

function ViewSortColumn(source)
{
	var  colIdx = source.id.split("-")[1];
	objView.ToggleCustomSort(colIdx)
	moveScroll();  //-- in case we resorted while scrolled down the page
	$(".listheader").resizable({ handles: "e" })
	return CancelEvent();
}

//--------------------------------------------- expand/collapse category ----------------------------------------------------

function ViewToggleCategory(currentRow)
{
	objView.ToggleCategory(currentRow.id);
	return CancelEvent();
}

//-------------------------------------- view header toolbars show/hide handler -------------------------------
function ViewToggleToolbar(toolbar, action)
{
	var toolbarObj = document.getElementById("divToolbar" + toolbar);

	if($(toolbarObj).css("display")=="none" || action=="show" )
	{
		$(toolbarObj).css("display", "")
		try{
			Docova.Utils.setCookie({
				keyname: "FolderToolbar" + toolbar,
				keyvalue: "show",
				httpcookie: true
			})
		}catch(err){}
	}
	else
	{
		$(toolbarObj).css("display", "none")
		try{
			Docova.Utils.setCookie({
				keyname: "FolderToolbar" + toolbar,
				keyvalue: "",
				httpcookie: true
			})
		}catch(err){}
	}
	checkAvailableHeight();
}

//---------------------------- keeps the onload folder state persistence ----------------------------------------

function ViewSetOnloadState()
{
	var toolbarSearchDisplay = docInfo.UseContentPaging == "1" ? "show" : Docova.Utils.getCookie({ keyname: "FolderToolbarSearch", httpcookie: true });
	var toolbarPerspectiveDisplay = Docova.Utils.getCookie({ keyname: "FolderToolbarPerspective", httpcookie: true })

	if ( docInfo.IsEmbedded === true && docInfo.ShowSearch != "1"){
		toolbarSearchDisplay = false;
		toolbarPerspectiveDisplay = false;
	}

	if(toolbarSearchDisplay) {ViewToggleToolbar("Search", toolbarSearchDisplay);}
	if(toolbarPerspectiveDisplay) {ViewToggleToolbar("Perspective", toolbarPerspectiveDisplay);}
}

//--------------------------------------------- get additional options for data retrieval ----------------------------------------------------
function ViewGetQueryOptions()
{
    objView.disableFreeze = $("#inpViewScope").prop("checked");
    var options= ($("#inpViewScope").prop("checked"))? "<viewscope>ST</viewscope>" :"";
    objView.viewScope = (options)? "ST": "";
    var versionOption = Docova.Utils.getField("selVersionScope")
    objView.versionOption =  (versionOption)? versionOption :"";
    options += (versionOption)? "<versions>" + versionOption  + "</versions>" :"";
    return options;
}

//--------------------------------------------- get additional options for data retrieval ----------------------------------------------------
function ViewApplyQueryOptions()
{
	objView.queryOptions = ViewGetQueryOptions();
	if(objView.isFTSearch)
	{
		ViewFTSearch();
	}
	else
	{
		if(docInfo.EnableFolderFiltering == "1"){
			$("#divViewContent").css("display", "none")
			objView.Refresh(true,true,false);
			ApplyFolderFilter(false);
			$(".listheader").resizable({ handles: "e" })
			$("#divViewContent").css("display", "")
		}else{
			objView.Refresh(true,true,false);
			$(".listheader").resizable({ handles: "e" })
		}
	}
}

//----------- utility functions ---------------
// clears the view event variables in case mouse cursor had wandered to far
function ViewClearEventState()
{
    var dragSourceColumn=null;
    var dragTargetColumn=null;
    selectDragMode=null;
    return true;
}

function CancelEvent()
{
	if(!window.event) {return;}
	window.event.cancelBubble = true;
	window.event.returnValue=false;
	return false;
}

// ------- context menu handler ---------
function ViewShowContextPopup(popupSource, sourceObject) //eventSource instead of sourcObject??
{
	if(popupSource=="viewheader" )
	{
		var colNo = parseInt($(sourceObject).attr("colIdx"))	
		curColumnObj = objView.columns[colNo];
		
		var ascIsCheckedIcon = curColumnObj.customSortOrder=="ascending" ? "ui-icon-check" : "";
		var descIsCheckedIcon = curColumnObj.customSortOrder=="descending" ? "ui-icon-check" : "";
		var defaultIsCheckedIcon = curColumnObj.customSortOrder=="none" ? "ui-icon-check" : "";
		var isColCategorizedIcon = curColumnObj.isCategorized ? "ui-icon-check" : "";
		var allowColCustomization = curColumnObj.parentObj.allowCustomization
		colAscSortAction = 'col-' + curColumnObj.colIdx + '-sort-ascending'
		colDescSortAction = 'col-' + curColumnObj.colIdx + '-sort-descending'
		colDefaultSortAction = 'col-' + curColumnObj.colIdx + '-sort-none'
		colCategorizeAction="col-" + curColumnObj.colIdx + "-cat"
		colFreezeAction="col-" + curColumnObj.colIdx + "-freeze"
		colDeleteAction="col-" + curColumnObj.colIdx + "-delete"
		colInsertAction="col-" + curColumnObj.colIdx + "-insert"
		colAppendAction="col-" + curColumnObj.colIdx + "-append"
		colPropertiesAction="col-" + curColumnObj.colIdx + "-properties"

		Docova.Utils.menu({
			delegate: sourceObject,
			width: 170,
			menus: [
				{ title: "{% trans %}Sort ascending{% endtrans %}", itemicon: ascIsCheckedIcon, action: "curColumnObj.ProcessContextAction(colAscSortAction)", disabled: !curColumnObj.hasCustomSort },
				{ title: "{% trans %}Sort descending{% endtrans %}", itemicon: descIsCheckedIcon, action: "curColumnObj.ProcessContextAction(colDescSortAction)", disabled: !curColumnObj.hasCustomSort  },
				{ title: "{% trans %}Default sort{% endtrans %}", itemicon: defaultIsCheckedIcon, action: "curColumnObj.ProcessContextAction(colDefaultSortAction)", disabled : !curColumnObj.hasCustomSort },
				{ separator: true },
				{ title: "{% trans %}Categorize{% endtrans %}", itemicon: isColCategorizedIcon, action: "curColumnObj.ProcessContextAction(colCategorizeAction)", disabled: !allowColCustomization },
				{ separator: true },
				{ title: "{% trans %}Delete Column{% endtrans %}", itemicon: "ui-icon-minus", action: "curColumnObj.ProcessContextAction(colDeleteAction)", disabled: !allowColCustomization },				
				{ title: "{% trans %}Insert Column{% endtrans %}", itemicon: "ui-icon-arrowthick-1-n", action: "InsertAppendEditColumn('insert')", disabled: !allowColCustomization },
				{ title: "{% trans %}Append Column{% endtrans %}", itemicon: "ui-icon-plus", action: "InsertAppendEditColumn('append')", disabled: !allowColCustomization },
				{ separator: true },
				{ title: "{% trans %}Properties{% endtrans %}", itemicon: "ui-icon-gear", action: "InsertAppendEditColumn('edit')", disabled: !allowColCustomization }
			]
		})
	}else if ( popupSource=="selectcell"){
		Docova.Utils.menu({
			delegate: sourceObject,
			width: 170,
			menus: [
				{ title: "{% trans %}Select All{% endtrans %}", itemicon: ascIsCheckedIcon, action: "objView.SelectAllEntries()", disabled: false}
			]
		})
	}
}

function viewbtnRefresh(){
	if(docInfo.EnableFolderFiltering == "1"){
		$("#divViewContent").css("display", "none")
		objView.Refresh(true,false,true,false,false, true)
		$("#divViewContent").css("display", "")
	}else{
		objView.Refresh(true,false,true);
	}
}

function viewbtnFolderInfo(){
	var dlgUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/dlgFolderInfo?OpenForm&ParentUNID=" + docInfo.DocID;
	var folderInfoDialog = window.top.Docova.Utils.createDialog({
		id: "divFolderInfo", 
		url: dlgUrl,
		title: "{% trans %}Folder Information{% endtrans %}",
		height: 400,
		width: 700, 
		useiframe: true,
		sourcedocument: document,
		buttons: {
       		"{% trans %}Close{% endtrans %}": function() {
				folderInfoDialog.closeDialog();
       		}
      	}
	});
}

//==========================================================================================
// Edit submenu
//==========================================================================================
function CreateEditSubmenu(actionButton) //creates drop down menu
{
	if(!actionButton) {return}

	var isthumbnailview =  objView.isThumbnails;
	var showClipActions =!isthumbnailview &&  !docInfo.isRecycleBin && !docInfo.CutCopyPaste
	var showCut = showClipActions && docInfo.CanDeleteDocuments && docInfo.CanCreateDocuments;
	var showPaste = showClipActions && Docova.Utils.getCookie({ keyname: "clipdata" }) != "" && docInfo.CanCreateDocuments
	var canDelete = !isthumbnailview && !docInfo.isRecycleBin && (objView.currentEntry !="" || objView.selectedEntries.length > 0)  && docInfo.CanSoftDeleteDocuments && docInfo.CanCreateDocuments && docInfo.CanDeleteDocuments;

	Docova.Utils.menu({
		delegate: $(actionButton),
		width: 170,
		menus: [
				{ title: "{% trans %}Cut{% endtrans %}", itemicon: "ui-icon-scissors", action: "ViewCutSelected()", disabled : !showCut },
				{ title: "{% trans %}Copy{% endtrans %}", itemicon: "ui-icon-copy", action: "ViewCopySelected()", disabled : !showClipActions },
				{ title: "{% trans %}Paste{% endtrans %}", itemicon: "ui-icon-clipboard", action: "ViewPasteSelected()", disabled : !showPaste },
				{ separator: true },
				{ title: "{% trans %}Select All{% endtrans %}", itemicon: "ui-icon-check", action: "objView.SelectAllEntries()" },
				{ title: "{% trans %}Deselect All{% endtrans %}", itemicon: "ui-icon-minus", action: "objView.DeselectAllEntries()" },
				{ separator: true },
				{ title: "{% trans %}Delete Selected{% endtrans %}", itemicon: "ui-icon-close", action: "ViewDeleteSelected()", disabled: !canDelete }
		]
	});
}

function ViewDeleteSelected(){
	if(docInfo.EnableFolderFiltering == "1"){
		objView.DeleteSelectedEntries();
		$("#divViewContent").css("display", "none")		
		ApplyFolderFilter(true);
		$("#divViewContent").css("display", "")
	}else{
		objView.DeleteSelectedEntries();
	}
}

function ViewSortThumbnails(id)
{
	objView.ToggleThumbnailSort(id);
}

//==========================================================================================
// Entry submenu
//==========================================================================================
function CreateEntrySubmenu(clickObj) //creates right-click context menu
{
	if(!clickObj) {return}

	var objEntry = objView.GetCurrentEntry();	
	var showClipActions = !docInfo.isRecycleBin && !docInfo.CutCopyPaste
	var isBookmark = (objEntry ? (!objEntry.GetElementAttribute("bmk/img", "src") == "") : false);
	var showBookmark = !docInfo.isRecycleBin && !isBookmark && (objEntry && objEntry.isRecord) && !docInfo.DisableBookmarks; 
	var showChangeDocType = !docInfo.isRecycleBin && docInfo.DocAccessLevel>="6" && !isBookmark && objView.currentEntry;	
	var showChangeDocStatus = !docInfo.isRecycleBin && docInfo.DocAccessLevel>="6" && !isBookmark && objView.currentEntry;	
	var showCut = showClipActions && docInfo.CanDeleteDocuments
	var showPaste = showClipActions && (Docova.Utils.getCookie({ keyname: "clipdata" }) != "")
	//var showDelete = !docInfo.isRecycleBin && docInfo.CanSoftDeleteDocuments && docInfo.CanDeleteDocuments

	var winwidth = $(window).width();
	var winheight = $(window).height();
	var posX = clickObj.pageX;
	var posY = clickObj.pageY; 
	var menuwidth = 150;
	var menuheight = 150;

	if((posY + menuheight) > winheight){
		shiftY = winheight - (posY+menuheight)
	}else{
		shiftY = 2; //default
	}

	if((posX + menuwidth) > winwidth){
		shiftX = winwidth - (posX+menuwidth)
	}else{
		shiftX = 5; //default
	}

/*	Docova.Utils.menu({
		delegate: clickObj,
		width: 240,
		position: "XandY",
		shiftX: shiftX,
		shiftY: shiftY,		
		menus: [
				{ title: "Open", itemicon: "ui-icon-document", action: "ProcessEntrySubmenuAction('open')", disabled : docInfo.isRecycleBin },
				{ title: "Restore", itemicon: "ui-icon-newwin", action: "ProcessEntrySubmenuAction('restore')", disabled : !docInfo.isRecycleBin },
				{ separator: true },
				{ title: "Edit", itemicon: "ui-icon-pencil", action: "ProcessEntrySubmenuAction('edit')", disabled : docInfo.isRecycleBin },
				{ separator: true },
				{ title: "Print Attachments", itemicon: "ui-icon-print", action: "ProcessEntrySubmenuAction('printattachments')", disabled : docInfo.isRecycleBin },
				{ separator: true },
				{ title: "Add to Favorites", itemicon: "ui-icon-heart", action: "ProcessEntrySubmenuAction('favorites')", disabled : docInfo.isRecycleBin },
				{ title: "Copy Link", itemicon: "ui-icon-link", action: "ProcessEntrySubmenuAction('copylink')", disabled : docInfo.isRecycleBin },
				{ title: "Create Bookmark", itemicon: "ui-icon-bookmark", action: "ProcessEntrySubmenuAction('createbookmark')", disabled : !showBookmark },
				{ title: "Change Document Type", itemicon: "ui-icon-newwin", action: "ProcessEntrySubmenuAction('changedoctype')", disabled : !showChangeDocType },
				{ title: "Release Document(s)", itemicon: "ui-icon-extlink", action: "ProcessEntrySubmenuAction('changedocstatus')", disabled : !showChangeDocStatus },								
				{ separator: true },
				{ title: "Cut", itemicon: "ui-icon-scissors", action: "ProcessEntrySubmenuAction('cut')", disabled : !showCut },
				{ title: "Copy", itemicon: "ui-icon-copy", action: "ProcessEntrySubmenuAction('copy')", disabled : !showClipActions },
				{ title: "Paste", itemicon: "ui-icon-clipboard", action: "ProcessEntrySubmenuAction('paste')", disabled : !showPaste },
				{ separator: true },
				{ title: "Delete", itemicon: "ui-icon-closethick", action: "ProcessEntrySubmenuAction('delete')", disabled : !showDelete },
				{ separator: true },
				{ title: "Properties", itemicon: "ui-icon-gear", action: "ProcessEntrySubmenuAction('properties')" }
		]
	})*/
	
	//	var menuwidth = 240;
	//var menuheight = 360;
	
	Docova.Utils.menu({
		delegate: clickObj,
		width: menuwidth,
		height: menuheight,
		position: "XandY",
		shiftX: shiftX,
		shiftY: shiftY,		
		menus: [
				{ title: "{% trans %}Open{% endtrans %}", itemicon: "ui-icon-document", action: "ProcessEntrySubmenuAction('open')" },
				{ separator: true },
				{ title: "{% trans %}Copy{% endtrans %}", itemicon: "ui-icon-clipboard", action: "Docova.getUIView().copy({ type: 'current' })" },
				{ title: "{% trans %}Copy selected{% endtrans %}", itemicon: "ui-icon-check", action: "Docova.getUIView().copy({ type: 'selected' })" },	
				{ title: "{% trans %}Paste{% endtrans %}", itemicon: "ui-icon-copy", action: "Docova.getUIView().paste()" },
				{ separator: true },
				{ title: "{% trans %}Delete{% endtrans %}", itemicon: "ui-icon-closethick", action: "ProcessEntrySubmenuAction('delete')" },
				{ title: "{% trans %}Delete selected{% endtrans %}", itemicon: "ui-icon-circle-close", action: "ProcessEntrySubmenuAction('deleteselected')" }
		]
	})	
}

//==========================================================================================
// Entry submenu handler
//==========================================================================================
function ProcessEntrySubmenuAction(action) //handle action from contect menu
{
	if(action == "" ) {return false};

	var entryObj = objView.GetCurrentEntry();
	if(!entryObj) {return; }
	
	if ( objView.isThumbnails ){
		var recType = null;
	}else{
		var recType = entryObj.GetElementValue("rectype");
	}

	if(action=="open"){
		ViewLoadDocument();
	}	
	else if ( action=="openfile"){
		var fname = entryObj.filename;
		OpenFileWindow(fname);
	}
	else if ( action=="openfilethumb"){
		var fname = $(entryObj.parentRow).attr("filename");
		OpenFileWindow(fname);
	}
	else if(action=="edit"){
		ViewLoadDocument("","","", true);
	}
	else if(action=="printattachments"){
		printAttachments();
	}		
	else if(action=="favorites"){
		ViewAddToFavorites();
	}
	else if(action=="copylink"){
		CopyLink(objView.currentEntry);
	}
	else if(action=="cut"){
		ViewCutSelected();
	}
	else if(action=="copy"){
		ViewCopySelected();
	}	
	else if(action=="paste"){
		ViewPasteSelected();
	}
	else if(action=="delete"){
		if (!confirm("{% trans %}Are you sure you want to delete the current Widget design element?{% endtrans %}")) {return false;}
		objView.RemoveSelectedEntries(true);
/**
* THE FOLLOWING CONDITIONS ARE MOVED TO BACK-END PHP SIDE
* THIS MEANS ALL FUNCTIONALITY TO DELETE EITHER A DESIGN ELEMENT OR
* AN ACTUAL DOCUMENT RECORD ARE MOVED TO viewServices IN BACK-END IN SE
* 
		//if this is a system view then delete design doc and related system design elements
		if(docInfo.ViewName=="AppForms"){  //delete form
			DeleteDesignElement("form", objView.currentEntry)
		}else if(docInfo.ViewName=="AppSubForms"){	//delete subform
			DeleteDesignElement("subform", objView.currentEntry)
		}else if(docInfo.ViewName=="AppLayouts"){ //delete layout
			objView.RemoveSelectedEntries(true);
		}else if(docInfo.ViewName=="AppViews"){ //delete view
			DeleteDesignElement("view", objView.currentEntry)
		}else if(docInfo.ViewName=="AppPages"){ //delete page
			DeleteDesignElement("page", objView.currentEntry)
		}else if(docInfo.ViewName=="AppOutlines"){ //delete outline
			objView.RemoveSelectedEntries(true);
		}else if(docInfo.ViewName=="AppFiles"){ //delete image
			DeleteDesignElement("image", objView.currentEntry)	
		}else if(docInfo.ViewName=="luWorkflow"){ //delete workflow
			DeleteDesignElement("workflow", objView.currentEntry)
		}else if(docInfo.ViewName=="AppJS"){ //delete JS Library
			DeleteDesignElement("jslib", objView.currentEntry)
		}else if(docInfo.ViewName=="AppCSS"){ //delete CSS
			DeleteDesignElement("css", objView.currentEntry)	
		}else{
			objView.RemoveSelectedEntries(true);
		}
*/
	}
	else if(action == "deleteselected"){
		if (!confirm("{% trans %}Are you sure you want to delete the currently selected Widget design elements?{% endtrans %}")) {return false;}
		objView.RemoveSelectedEntries();
/**
* SAME AS COMMEMTED SECTION ABOVE
* 
		if(docInfo.ViewName=="AppForms"){  //delete form
			DeleteSelectedDesignElements("form", objView.selectedEntries)
		}else if(docInfo.ViewName=="AppSubForms"){	//delete subform
			DeleteSelectedDesignElements("subform", objView.selectedEntries)
		}else if(docInfo.ViewName=="AppLayouts"){ //delete layout
			objView.RemoveSelectedEntries();
		}else if(docInfo.ViewName=="AppViews"){ //delete view
			DeleteSelectedDesignElements("view", objView.selectedEntries)
		}else if(docInfo.ViewName=="AppPages"){ //delete page
			DeleteSelectedDesignElements("page", objView.selectedEntries)
		}else if(docInfo.ViewName=="AppOutlines"){ //delete outline
			objView.RemoveSelectedEntries();
		}else if(docInfo.ViewName=="AppFiles"){ //delete image
			DeleteSelectedDesignElements("image", objView.selectedEntries)	
		}else if(docInfo.ViewName=="luWorkflow"){ //delete workflow
			DeleteSelectedDesignElements("workflow", objView.selectedEntries)
		}else if(docInfo.ViewName=="AppJS"){ //delete JS Library
			DeleteDesignElement("jslib", objView.selectedEntries)
		}else if(docInfo.ViewName=="AppCSS"){ //delete CSS
			DeleteDesignElement("css", objView.selectedEntries)	
		}else{
			objView.RemoveSelectedEntries();
		}
*/
	}	
	else if(action=="changedoctype"){
		ChangeDocType(objView.currentEntry);
	}
	else if(action=="changedocstatus"){
		ChangeDocStatus(objView.currentEntry);
	}	
	else if(action =="createbookmark")
	{
		CreateBookmark();
	}	
	else if(action=="restore")	{
		objView.UndeleteSelectedEntries(true);
		try	{
				parent.frames['fraLeftFrame'].ReloadLibraryByID( docInfo.LibraryKey, "", false);
			}
		catch (e){}
	}
	else if(action=="properties"){
		if ( objView.isThumbnails ){
			ShowDocumentProperties();
			return;
		}
		if(recType == "fld")
		{
			ShowFolderProperties();
		}
		else if(recType == "doc")
		{
			ShowDocumentProperties();
		}
	}
	return;
}

//---------------------------- create new document ----------------------------
function ViewCreateDocument()
{
	var docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/Document?OpenForm&ParentUNID=" + docInfo.DocID;
	
	var docTypeArray=docInfo.DocumentType.split(", ");
	if(docTypeArray.length==1 && docTypeArray[0] !="")
	{
		docUrl += "&typekey=" + docInfo.DocumentType;
		ViewLoadDocument(docUrl, docInfo.DocumentTypeName, true);
	}
	else
	{		
		var dlgUrl = "/" + docInfo.NsfName + "/" + "dlgSelectDocType?OpenForm&ParentUNID=" + docInfo.DocID;
		var tmpDocova = (window.top.Docova ? window.top.Docova : Docova);
		var doctypedlg = tmpDocova.Utils.createDialog({
			id: "divDlgSelectDocType", 
			url: dlgUrl,
			title: "{% trans %}New Document{% endtrans %}",
			height: 425,
			width: 400, 
			useiframe: true,
			buttons: {
				"{% trans %}Create Document{% endtrans %}" : function() {
					var result = jQuery("#" + this.id + "IFrame", this).get(0).contentWindow.completeWizard();
					if(result && result.DocumentType){
						docUrl += "&typekey=" + result.DocumentType;
						doctypedlg.closeDialog();
						ViewLoadDocument(docUrl, result.DocumentTypeName, true);
					}
				},
    			"{% trans %}Cancel{% endtrans %}": function() {
					doctypedlg.closeDialog();
    			}
      		}
		});		
	}
}//--end ViewCreateDocument

//================= sets header title ====================
function ViewSetTitleOptions(title)
{
	$("#divHeadingTitle").html(title);
}

function getOffset( el ) {
	var _x = 0;     
	var _y = 0;
	while( el && !isNaN( el.offsetLeft ) && !isNaN( el.offsetTop ) ) {
		_x += el.offsetLeft - el.scrollLeft;
		_y += el.offsetTop - el.scrollTop;
		el = el.offsetParent;
	}

	return { top: _y, left: _x }; 
}  

function checkAvailableHeight(){
	try{
		
		var vpheight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;	
		if(vpheight == 0){return;}  //-- in case we aren't able to get the height
		var buttonheader = document.getElementById("actionPaneHeader");
		var viewheader = document.getElementById("divViewHeader");
		var headingsheight = buttonheader.clientHeight + viewheader.clientHeight;
		var container = document.getElementById("divViewContent");
		var hght = vpheight  - headingsheight;
		if ( hght > 0 )
			$(container).css("height", vpheight  - headingsheight);
		}catch(e){}
}

function checkAvailableHeight3(){
	try{
		var totalwidth = 0;
		var lastcellwidth = 0;
		var $table = $('#VDataTable'),
    		$bodyCells = $table.find('tbody tr[isRecord="true"]').children(),
    	colWidth;
	// Get the tbody columns width array
    colWidth = $bodyCells.map(function() {
        return $(this).width();
    }).get();
    
    // Set the width of thead columns
    $table.find('thead tr').children().each(function(i, v) {
    		totalwidth += colWidth[i];
    		lastcellwidth= colWidth[i];
      //  $(v).width(colWidth[i]);
    });    
    var finalWidth = totalwidth-lastcellwidth;
    
  	if (  $(window).width() > finalWidth)
		$("#VDataTable").width($(window).width() );
	$("#VDataTable tbody tr[isRecord='true'] td:last").width ( $(window).width() - finalWidth );
	$("#VDataTable thead tr:first td:last").width ( $(window).width() - finalWidth );
		
		var vpheight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;	
		if(vpheight == 0){return;}  //-- in case we aren't able to get the height
		var headingsheight = $("#actionPaneHeader").outerHeight() + $("#divViewHeader").outerHeight() +$("#VDataTable thead").outerHeight();
		var container = $("#VDataTable tbody");
		var hght = vpheight  - headingsheight;
		console.log ( headingsheight  +  "actionPaneHader " + $("#actionPaneHeader").outerHeight() + " divViewHeader " + $("#divViewHeader").outerHeight() + " thead " + $("#VDataTable thead").outerHeight() );
		if ( hght > 0 )
			container.css("height", hght);
		}catch(e){}
}

function DeleteDesignElement(type, unid){
	
	if (!confirm("{% trans with {'%etype%' : '" + type +  "'} %}Are you sure you want to delete the current %etype% design element?{% endtrans %}")) {return false;}
	
	var uname = docInfo.UserNameAB
	var agentName = "DesignServices"
	var library = docInfo.NsfName

	var request = "<Request><Action>DELETEELEMENT</Action><UserName><![CDATA[" + uname + "]]></UserName>"
	request += "<Document>"
	request += "<ElementType>" + type + "</ElementType>"
	request += "<unid>" + unid + "</unid>"
	request += "<apppath>" + docInfo.AppFilePath + "</apppath>"
	request += "</Document>"
	request += "</Request>"

	var result = SubmitRequest(request, agentName);
	if(result == true){
		objView.RemoveSelectedEntries(true);
	}
	return result
}

function DeleteSelectedDesignElements(type, unidArray){
	if (!confirm("{% trans with {'%etype%' : '" + type +  "'} %}Are you sure you want to delete the currently selected %etype% design elements?{% endtrans %}")) {return false;}
	
	var uname = docInfo.UserNameAB
	var agentName = "DesignServices"
	var library = docInfo.NsfName
	var unid;
	var request;
	var result;
	
	for(var x=0; x<unidArray.length; x++){
		unid = unidArray[x]
		request = "<Request><Action>DELETEELEMENT</Action><UserName><![CDATA[" + uname + "]]></UserName>"
		request += "<Document>"
		request += "<ElementType>" + type + "</ElementType>"
		request += "<unid>" + unid + "</unid>"
		request += "<apppath>" + docInfo.AppFilePath + "</apppath>"
		request += "</Document>"
		request += "</Request>"

		result = SubmitRequest(request, agentName);
	}
		objView.RemoveSelectedEntries();
}

function SubmitRequest(request, agentName){
	//send the request to server
	var processUrl = docInfo.ServerUrl + docInfo.PortalWebPath + "/" + agentName  + "?OpenAgent"
	var httpObj = new objHTTP();
	if(!httpObj.PostData(request, processUrl) || httpObj.status=="FAILED"){
		HideProgressMessage();
		return false;
	}

	return (httpObj.results.length)? httpObj.results[0] : true;
} 
{% if app.request.query.get('DesignElement') == 'customwidgets' %}
function runme(event)
{ 
    event.preventDefault(); 
    var frameID = window.parent.fraTabbedTable.objTabBar.GetNewDocID();
    var docUrl = docInfo.PortalWebPath + "AppWidgetBuilder?openForm";
    window.parent.fraTabbedTable.objTabBar.CreateTab("{% trans %}New Widget{% endtrans %}", frameID, "D", docUrl, "appBuilderMain", true); 
} 

function onDocumentOpen()
{
	var entryObj = objView.GetCurrentEntry();
	var frameID = "";
	var title = "";
	frameID = entryObj.entryId;

	if (!canEditWidget(frameID)) { return false; } 

	title = entryObj.GetElementValue("CF0");
	var docUrl = docInfo.PortalWebPath + "AppWidgetBuilder/"+ entryObj.entryId +'?openForm'; 
	window.parent.fraTabbedTable.objTabBar.CreateTab(title, frameID, "D", docUrl, docInfo.DocID, false);
}

function canEditWidget(widgetID)
{
	var request = "<Request><Action>CANEDITWIDGET</Action><UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += '<Document><Unid>'+ widgetID +'</Unid></Document>';
	request += "</Request>";

	var processUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/DesignServices?OpenAgent";
	var httpObj = new objHTTP();
	if(!httpObj.PostData(request, processUrl) || httpObj.status=="FAILED"){
		var msg = false;
	}
	var msg = (httpObj.results.length && httpObj.results[0] == 'NOACCESS') ? false : true;
	if (msg === false)
	{
		window.top.Docova.Utils.messageBox({
			prompt: "{% trans %}You don't have sufficient rights to edit this widget.{% endtrans %}",
			icontype: 1,
			msgboxtype: 0,
			title: "{% trans %}Open Widget{% endtrans %}",
			width: 350
		});
		return false;
	}
	return true;
}
{% else %}
function onDocumentOpen()
{
	var entryObj = objView.GetCurrentEntry();
	var frameID = "";
	var title = "";
	frameID = entryObj.entryId; 

	title = entryObj.GetElementValue("CF0");
	window.top.Docova.Utils.messageBox({
		prompt: "{% trans with {'%wtitle%' : '"+ title +"'} %}The '%wtitle%' is a system widget and cannot be edited.<br><br>Widget Description{% endtrans %}:<br>" + entryObj.GetElementValue("CF1"),
		icontype: 1,
		msgboxtype: 0,
		title: "{% trans %}Open Widget{% endtrans %}",
		width: 400
	});
	return true;	
}
{% endif %}
function toggleActivation(e)
{
	var entryObj = objView.GetCurrentEntry();
	if (!entryObj || !entryObj.entryId) {
		window.top.Docova.Utils.messageBox({
			prompt: "{% trans %}Please select a widget first.{% endtrans %}",
			icontype: 1,
			msgboxtype: 0,
			title: '{% trans %}Widget{% endtrans %}',
			width: 300
		});
		return false;
	}
	
	var request = "<Request><Action>TOGGLEWIDGETSTATUS</Action><UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += '<Document><Unid>'+ entryObj.entryId +'</Unid></Document>';
	request += "</Request>";

	var processUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/DesignServices?OpenAgent";
	var httpObj = new objHTTP();
	if(!httpObj.PostData(request, processUrl) || httpObj.status=="FAILED"){
		window.top.Docova.Utils.hideProgressMessage();
		return false;
	}
	var msg = (httpObj.status == 'OK' && httpObj.results.length) ? httpObj.results[0] : false;
	window.top.Docova.Utils.messageBox({
		prompt: "{% trans %}Selected widget was successfully{% endtrans %} " + msg.toLowerCase(),
		icontype: 1,
		msgboxtype: 0,
		title: '{% trans %}Widget{% endtrans %}',
		width: 400
	});
	ViewReload();
}
</script>
</head>
<body text="#000000" bgcolor="#FFFFFF" SCROLL="no" oncontextmenu="return false;">
	<form onsubmit="doUpdate(); return true;" action="">
		<div id="viewMainContainer" style="display: none;">
			<!-------------------------- non-scrollable header ----------------------->
			<div id="divHeaderSection" style="width: 100%;">
				<div id="actionPaneHeader" class="wrapper" style="width: 100%; padding: 4px 6px 3px 6px;">
					<table border=0 cellspacing=0 cellpadding=0 width=100%>
						<tr>
							<td id="tdActionBar">
							{% if app.request.query.get('DesignElement') == 'customwidgets' and (user.getUserProfile.getCanCreateApp or is_granted('ROLE_ADMIN')) %}
								<button title="{% trans %}New Widget{% endtrans %}" icon="ui-icon-newwin" onclick="runme(event); return false;" />
							{% endif %}
								<button title="{% trans %}Toggle Widget Status{% endtrans %}" icon="ui-icon-newwin" onclick="toggleActivation(event); return false;" style="margin-left:2px;" />
							</td>
							<td align="right">
								<span style="font-size: 11px; color: #0050D1; display: none" id="divSearchResultCount"></span>
							</td>
							<td align="right">&nbsp</td>
						</tr>
					</table>
				</div>
				<div id="currCount" style="display:none">2</div>
			</div>
			<!------------------------------------------------------>
			<div id="divViewEventCapture" tabindex="1">
				<!--- BEGIN Document View header ----->
				<div id="divViewHeader" style="width: 100%; padding: 0px 0px 0px 0px; display:none;">
					<!------------------ Content Paging ------------------------------------>
					<div ID="showDocCountDiv" style="display: none"></div>
					<!--------------------- End Content Paging --------------------------------->
					{% if app.request.query.get('DesignElement') == 'customwidgets' %}
					<script id="xmlViewPerspective" type="text/xml"><viewperspective><viewsettings><viewproperties><type>system</type><id>system_default_folder</id><Unid/><name>Built-in perspective</name><description/><createdby/><createddate/><modifiedby/><modifieddate/><autocollapse>0</autocollapse><responseColspan></responseColspan><isSummary/><showSelectionMargin>1</showSelectionMargin><allowCustomization>1</allowCustomization><extendLastColumn/><categoryBorderStyle>border-bottom : solid 2px #aaccff;</categoryBorderStyle></viewproperties><columns><column><title>{% trans %}Widget Name{% endtrans %}</title><xmlNodeName>CF0</xmlNodeName><width>200</width><dataType>text</dataType><isCategorized></isCategorized></column><column><title>{% trans %}Description{% endtrans %}</title><xmlNodeName>CF1</xmlNodeName><width>300</width><dataType>text</dataType><isCategorized></isCategorized></column><column><title>{% trans %}Status{% endtrans %}</title><xmlNodeName>CF2</xmlNodeName><width>50</width><dataType>html</dataType><isCategorized></isCategorized><align>center</align></column><column><title>{% trans %}Last Modified{% endtrans %}</title><xmlNodeName>CF3</xmlNodeName><width>140</width><dataType>datetime</dataType></column><column><title>{% trans %}Last Modified By{% endtrans %}</title><xmlNodeName>CF4</xmlNodeName><width>200</width><dataType>text</dataType></column></columns></viewsettings></viewperspective></script>
					{% else %}
					<script id="xmlViewPerspective" type="text/xml"><viewperspective><viewsettings><viewproperties><type>system</type><id>system_default_folder</id><Unid/><name>Built-in perspective</name><description/><createdby/><createddate/><modifiedby/><modifieddate/><autocollapse>0</autocollapse><responseColspan></responseColspan><isSummary/><showSelectionMargin>1</showSelectionMargin><allowCustomization>1</allowCustomization><extendLastColumn/><categoryBorderStyle>border-bottom : solid 2px #aaccff;</categoryBorderStyle></viewproperties><columns><column><title>{% trans %}Widget Name{% endtrans %}</title><xmlNodeName>CF0</xmlNodeName><width>200</width><dataType>text</dataType><isCategorized></isCategorized></column><column><title>{% trans %}Description{% endtrans %}</title><xmlNodeName>CF1</xmlNodeName><width>450</width><dataType>text</dataType><isCategorized></isCategorized></column><column><title>{% trans %}Status{% endtrans %}</title><xmlNodeName>CF2</xmlNodeName><width>50</width><dataType>html</dataType><isCategorized></isCategorized><align>center</align></column></columns></viewsettings></viewperspective></script>
					{% endif %}
				</div>
				<!--- END Document View header ----->
				<!--- BEGIN Document view contents----->
				<div id="divViewContent" style="position:relative; top:1px; width: 100%; padding: 0px; margin: 0px; overflow:auto;" tabindex="14" ></div>
				<!--- END Document view contents----->
				<!--- End event capture area ----->
			</div>
		</div>
		<!--- END viewMainContainer--->
		<!------------------ SUBFORM sfKillCache ------------>
		<!------------------Microsoft suggestion to force no cacheing of documents------------>
		<HEAD>
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="CACHE-CONTROL" CONTENT="0">
<META HTTP-EQUIV="EXPIRES" CONTENT="0">
		</HEAD>
		<!------------------END SUBFORM sfKillCache  ------------>
	</form>
</body>
</html>