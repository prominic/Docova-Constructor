<!DOCTYPE HTML>
<html>
<head>
<title>{{ folder.getFolderName }}</title>
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="CACHE-CONTROL" CONTENT="0">
<META HTTP-EQUIV="EXPIRES" CONTENT="0">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/smoothness/jquery-ui.css') }}">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/styleDialogBase.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/css/autoCompleteNamePicker.css') }}" type="text/css" />
<script type="text/javascript" language="JavaScript" src="{{ asset('bundles/docova/jquery/jquery.js') }}"></script>
<script type="text/javascript" language="JavaScript" src="{{ asset('bundles/docova/jquery/jquery-ui.js') }}" ></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/autoCompleteNamePicker.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/sarissa.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/sarissa_ieemu_xpath.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/Docova.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/commonFunctions.js') }}" charset="UTF-8"></script>
{% include 'DocovaBundle:Default:scriptMessagesTranslation.html.twig' %}
<script language="JavaScript" type="text/javascript">
var dlgForm = null; //declare global variable to represent current form
var dlgDoc = null;
var oPopup = null;
var srcWindow = window.dialogArguments;
var info = {
	"FolderID" : "{{ folder ? folder.getId : -1 }}",
	"LibraryKey" : "{{ folder ? folder.getLibrary.getId : '' }}",
	"UserName" : "{{ user.getUserNameDn|replace({'\\': '\\\\'}) }}",
	"UserNameAB" : "{{ user.getUserNameDnAbbreviated|replace({'\\': '\\\\'}) }}",
	"UserNameCN" : "{{ f_Name("[CN]", user.getUserNameDnAbbreviated)|replace({'\\': '\\\\'}) }}",
	"UserRoles" : "$$WebClient;[User]",
	"ParentAuthors" : "{{ folder ? authors_list : '' }}",
	"ParentReaders" : "{{ folder ? readers_list : '' }}",
	"InheritedManagers" : "{{ folder ? parent_managers : '' }}",
	"RestrictedNamesList" : "",
	"isRootFolder" : "{% if not folder or mode != 'R' or not folder.getParentfolder %}true{% endif %}",
	"isSuperuser" : "",
	"isEditMode" : "",
	"HTTP_Referer" : "",
	"Query_String" : "OpenForm&ParentUNID={{ folder and mode != 'R' ? folder.getId : -1 }}&mode={{ mode }}&1363014537670",
	"Query_String_Decoded" : "OpenForm&ParentUNID={{ folder and mode != 'R' ? folder.getId : -1 }}&mode={{ mode }}&1363014537670",
	"Path_Info_Decoded" : "{{ path('docova_folderproperties') }}?OpenForm&ParentUNID={{ folder and mode != 'R' ? folder.getId : -1 }}&mode={{ mode }}&1363014537670",
	"ServerName" : "{{ app.request.server.get('HTTP_HOST') }}",
	"ServerUrl" : "{{ app.request.getscheme }}://{{ app.request.server.get('HTTP_HOST') }}",
	"NsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
	"PortalWebPath" : "{{ path('docova_homepage') }}",
	"PortalNsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
	"DefaultPerspective" : "system_default_folder",
	"FolderDocTypes" : "",
	"DocumentTypeList" : "",
	"OriginalDefaultDocumentType" : "",
	"FolderMetaDataSubform" : "",
	"SessionDateFormat" : "mm/dd/yyyy",
	"mode" : "{{ mode }}"
};
function getinfovar() {
	return info;
}

var managerArray = null;
var editorArray = null;
var authorArray = null;
var readerArray = null;
var defDocTypeArrayList = new Array();
var nameList = [];
var xmlDataDocumentLog = null; //data island object
var UpdatePropertyList = [];
/**
 * DOESN'T WORK WITH NEW CHANGES
var Docova = window.top.Docova;  //reference to global docova object
var DocovaUIW = Docova.getUIWorkspace(document);  //Docova UI Workspace Object
var DocovaUIDoc = DocovaUIW.CurrentDocument;   //Docova UI Document Object
*
*/
//document.oncontextmenu=stopContextMenu;

jQuery.widget( "custom.iconselectmenu", jQuery.ui.selectmenu, {
	_renderItem: function( ul, item ) {
		var li = jQuery( "<li>", { text: item.label } );
		if ( item.disabled ) {
          	li.addClass( "ui-state-disabled" );
		}

		var tempstyle="background-image: url('{{ asset('bundles/docova/images/') }}" + item.element.attr( "data-style" ) + "');";
			
		jQuery( "<span>", {
			style: tempstyle,
			"class": "ui-icon " + item.element.attr( "data-class" )
		})
		.appendTo( li );
 
		return li.appendTo( ul );
	}
});

// -------------------------- OnLoad initialization ----------------------------------------------
function initDialog()
{
	var w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
	var h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);

	jQuery("#formSections").height(h).width(w);
	
	jQuery(".accordion" ).accordion({
		collapsible: true,
      	heightStyle: "content"
   	});

   	jQuery('.innerTabs').tabs();	
	
	jQuery( "button" ).button();
	
	InitVars(info);
	
	jQuery( ".dateField").datepicker({
		dateFormat: docInfo.SessionDateFormat,
		changeMonth: true,
		changeYear: true
	});	

	$("#btnDeselectPerspectives").button({
		icons: { primary: "ui-icon-circle-close" },
		label: "Deselect All",
		text: true
	}).click(function(event){
		$("input[name=FolderPerspectives]").prop("checked", false);
		UpdateDefaultPerspectiveList();
		event.preventDefault();
	});

	if(docInfo.ParentReaders != ""){
		nameList = docInfo.RestrictedNamesList.split(',');
	}
	$('.multipleNamePicker').autoComplete({
		url : '{{ path('docova_usernamelookup_json') }}',
		ristrictTo: ($(this).attr('traget') == 'SyncUsers' ? [] : nameList),
		selectionContainer : $(this).attr('target'),
		shortName : (docInfo.ShortName == '1' ? true : false)
	});
	
	populateFolderIcons();
	
	InitFields();
	
	//---------------------------------------------
	// get current names lists for change detection
	managerArray=Docova.Utils.getField("Managers") ? Docova.Utils.getField("Managers").replace(/, /g, ",").split(",") : [];
	editorArray=Docova.Utils.getField("Editors") ? Docova.Utils.getField("Editors").replace(/, /g, ",").split(",") : [];
	authorArray=Docova.Utils.getField("Authors") ? Docova.Utils.getField("Authors").replace(/, /g, ",").split(",") : [];
	readerArray=Docova.Utils.getField("Readers") ? Docova.Utils.getField("Readers").replace(/, /g, ",").split(",") : [];

	//--------------------------------------------
	// load any meta data fields
	loadFolderMetaData();

	//--------------------------------------------
	// load any log entries	
	loadDataDocumentLog();
}//--end initDialog

function InitFields(){
	//-----This function initializes some fields that need to be disabled or enabled upon loading based on some condition-----//
	dlgDoc = document.all;
	
	//-- if editing folder properties
	if (docInfo.isEditMode) {
		//--Readers button - should be disabled if the Readers field is "Only Authors above"
		if(dlgDoc.Readers.value == "Only Authors above"){
			dlgDoc.btnReaderNames.style.visibility = 'hidden';
		}
	
		//-- document type options
		UpdateDocumentTypeList();
	
		//-- perspective data
		UpdateDefaultPerspectiveList();				
		
		//-- folder template settings
		//updateFolderTemplateFields();
	//-- if reading folder properties
	}else{	
		enableFields("SECURITYADVANCED", false);	

		//-- document type options
		UpdateDocumentTypeList();	

		enableFields("FOLDERICON", false);		
		enableFields("DOCUMENTTYPE", false);
		enableFields("CONTENTPAGING", false);	
		enableFields("METADATA", false);		
	}
	
	//-- local file sync options
	EnableSyncFields();
		
	//-- column filtering fields
	EnableFilterFields();
}//--end initFields


function loadDataDocumentLog(){
	if(xmlDataDocumentLog){
		xmlDataDocumentLog.reload();
	}else{
		xmlDataDocumentLog = new xmlDataIsland();
		xmlDataDocumentLog.setSrc ("/" + docInfo.NsfName + "/luLogsByFullKeyWeb/" + docInfo.FolderID + "?Open&cache=" +  Math.random());
		xmlDataDocumentLog.id = "xmlDataDocumentLog";
		xmlDataDocumentLog.setTemplateName( "otblxmlDataDocumentLog");
		xmlDataDocumentLog.ondatasetcomplete = function() {}
		xmlDataDocumentLog.process();	
	}
}//--end loadDataDocumentLog



function populateFolderIcons(){
	var $iconfield = jQuery("#IconNormal");
	var curval = $iconfield.val();
	var curicon = "";
	
	var iconlist = new Array("Folder|0|FIcon_FolderClosed.png",
						"Folder Open|FIcon_FolderOpen.png",
						"Binder Clip|FIcon_BinderClip.png",	
						"Blue Document|FIcon_BlueDoc.png",
						"Calendar|FIcon_Calendar.png",
						"Checkmark|FIcon_Checkmark.png",
						"Checklist|FIcon_Checklist.png",						
						"Discuss|FIcon_Discuss.png",
						"Documents|FIcon_Docs.png",
						"Favorite|FIcon_Favorite.png",
						"Gear|FIcon_Gear.png",
						"Gears|FIcon_Gears.png",						
						"Global Find|FIcon_GlobalFind.png",
						"Global|FIcon_Earth.png",
						"Green Diamond|FIcon_GDiamond.png",
						"Green Document|FIcon_GreenDoc.png",
						"Home|FIcon_Home.png",
						"Inbox|FIcon_Inbox.png",
						"Inbox (2)|FIcon_Inbox2.png",
						"Issue|FIcon_Issue.png",						
						"Mail|FIcon_Mail.png",
						"Mail (2)|FIcon_Mail2.png",	
						"Mail Send|FIcon_MailSend.png",	
						"Network|FIcon_Network.png",
						"News|FIcon_News.png",
						"Note Pad|FIcon_Notepad.png",			
						"Note Pad (2)|FIcon_Notepad2.png",												
						"Pen and Paper|FIcon_PenPaper.png",
						"Plan|FIcon_Plan.png",						
						"Process|FIcon_Process.png",						
						"Read Only|FIcon_ReadOnly.png",
						"Red Document|FIcon_RedDoc.png",
						"Red Swirl|FIcon_RedSwirl.png",
						"Response|FIcon_Response.png",
						"Risk|FIcon_Risk.png",						
						"Tasks|FIcon_Tasks.png",
						"To Do|FIcon_Todo.png",
						"Trash|FIcon_Trash.png",	
						"Trash (2)|FIcon_Trash2.png",
						"Trash (2) Full|FIcon_Trash2Full.png",							
						"Workflow|FIcon_Workflow.png");
	
	var optionslist = "";
	for(var x=0; x<iconlist.length; x++){
		var tempitem = iconlist[x].split("|");
		var iconindex = 1;
		
		optionslist += '<option ';
		if(tempitem.length > 1){
			if(tempitem.length > 2){
				iconindex = 2;
			}
			optionslist += ' data-class="customicon" data-style="' + tempitem[iconindex] + '"';
		}
		var itemval = (tempitem.length > 1 ? tempitem[1] : tempitem[0]);
		optionslist += ' value="' + itemval + '"';
		if(itemval == curval){
			optionslist += ' selected="1"';
			if(tempitem.length > 1){
				curicon = tempitem[iconindex];
			}
		}
		optionslist += '>';
		optionslist +=  tempitem[0];
		optionslist += '</option>';
	}
	
	$iconfield.empty().append(optionslist);
	
	$iconfield.iconselectmenu({
			width: 200,
			change: function(event, ui){
 				jQuery("#" + this.id + "-button").css({
					"padding-left": "10px",
					"background-repeat": "no-repeat",
					"background-position": "left center",
					"background-image": "url('{{ asset('bundles/docova/images/') }}" + ui.item.element.data( "style" ) + "')"
 				});
			}
	}).iconselectmenu("menuWidget").addClass("ui-menu-icons customicons");

	jQuery("#" + $iconfield.attr("id") + "-button").css({
		"padding-left": "10px",
		"background-repeat": "no-repeat",
		"background-position": "left center",
		"background-image": "url('{{ asset('bundles/docova/images/') }}" + curicon + "')"
 	});
	
}


function showHideAltURL() {
	obj = document.getElementById("AltURL");
	if(obj.style.display == "none") {
		obj.style.display = "inline";
	} else {
		obj.style.display = "none";
	}
}

//content paging related function
function showMaxDocCount(obj){
	if(obj.checked) {
		doc.maxCount.style.display = "block";
	} else {
		doc.maxCount.style.display = "none";
	}
}



function stopContextMenu()
{
	return false;
}



function sendUpdateRequest(updateList)
{
	var result = false;
	
	//--- processing agent url
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/FolderServices?OpenAgent";
	var request="";

	//--build the update request
	request += "<Request>";
	request += "<Action>UPDATE</Action>";
	request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "<Name><![CDATA[" + Docova.Utils.getField( "FolderName") + "]]></Name>";
	request += "<Unid>" + docInfo.FolderID + "</Unid>";

	request += '<AddedManagers multi="1" dt="names"><![CDATA[' + GetAddedNames("Managers") + ']]></AddedManagers>' ;
	request += '<DeletedManagers multi="1" dt="names"><![CDATA[' + GetRemovedNames("Managers") + ']]></DeletedManagers>' ;	
	
	request += '<AddedEditors multi="1" dt="names"><![CDATA[' + GetAddedNames("Editors") + ']]></AddedEditors>' ;
	request += '<DeletedEditors multi="1" dt="names"><![CDATA[' + GetRemovedNames("Editors") + ']]></DeletedEditors>' ;		
	
	request += '<AddedAuthors multi="1" dt="names"><![CDATA[' + GetAddedNames("Authors") + ']]></AddedAuthors>' ;
	request += '<DeletedAuthors multi="1" dt="names"><![CDATA[' + GetRemovedNames("Authors") + ']]></DeletedAuthors>' ;	
	
	request += '<AddedReaders multi="1" dt="names"><![CDATA[' + GetAddedNames("Readers") + ']]></AddedReaders>' ;
	request += '<DeletedReaders multi="1" dt="names"><![CDATA[' + GetRemovedNames("Readers") + ']]></DeletedReaders>' ;		
	request += updateList;
	
	request += "<Fields>";
	request += "<FolderName><![CDATA[" + Docova.Utils.getField( "FolderName") + "]]></FolderName>";
	request += "<Description><![CDATA[" + Docova.Utils.getField( "Description") + "]]></Description>";
	request += "<Sync><![CDATA[" + Docova.Utils.getField( "Sync") + "]]></Sync>";
	request += "<SyncUsers><![CDATA[" + Docova.Utils.getField( "SyncUsers") + "]]></SyncUsers>";
	request += "<SyncSubfolders><![CDATA[" + Docova.Utils.getField( "SyncSubfolders") + "]]></SyncSubfolders>";
	request += "<IconNormal>" + Docova.Utils.getField( "IconNormal") + "</IconNormal>";
	request += "<IconSelected>" + Docova.Utils.getField( "IconSelected") + "</IconSelected>";
	var typeOption=Docova.Utils.getField( "DocumentTypeOption");
	request += '<DocumentType multi="1">' + (typeOption =='S' ? Docova.Utils.getField({field : "DocumentType", separator : ","}) : '') +'</DocumentType>';	
	request += '<DocumentTypeOption>' + typeOption + "</DocumentTypeOption>";
	request += '<DefaultDocumentType>' + Docova.Utils.getField("DefaultDocumentType") + '</DefaultDocumentType>';
	request += '<SortOrder>' + Docova.Utils.getField("SortOrder") + '</SortOrder>';
	var foldertemplatesetting = Docova.Utils.getField("FolderTemplate");
	request += '<FolderOpenAction>' + Docova.Utils.getField('FolderOpenAction') + '</FolderOpenAction>';
	request += '<FolderOpenUrl><![CDATA[' + (Docova.Utils.getField('FolderOpenAction') == '1' ? Docova.Utils.getField('ContentURL') : '') + ']]></FolderOpenUrl>';	
	request += '<Managers multi="1"><![CDATA[' + Docova.Utils.getField( "Managers").replace(", ", ",") + "]]></Managers>";
	request += '<Editors multi="1"><![CDATA[' + Docova.Utils.getField( "Editors").replace(", ", ",") + "]]></Editors>";	
	request += '<Authors multi="1" dt="names"><![CDATA[' + Docova.Utils.getField( "Authors").replace(", ", ",") + "]]></Authors>";
	request += '<Readers multi="1" dt="names"><![CDATA[' + Docova.Utils.getField( "Readers").replace(", ", ",") + "]]></Readers>";
	request += '<FolderPerspectives multi="1">' + Docova.Utils.getField({field: "FolderPerspectives", separator : ","}) + "</FolderPerspectives>";
	request += "<DefaultPerspective>" + Docova.Utils.getField( "DefaultPerspective") + "</DefaultPerspective>";
	request += "<UseContentPaging>" + Docova.Utils.getField( "UseContentPaging") + "</UseContentPaging>";
	request += "<MaxDocCount>" + Docova.Utils.getField( "MaxDocCount") + "</MaxDocCount>";
	request += "<AuthorsCanNotCreateFolders>" + Docova.Utils.getField("AuthorsCanNotCreateFolders") + "</AuthorsCanNotCreateFolders>";
	request += "<AllowUnrestrictedRevisions>" + Docova.Utils.getField( "AllowUnrestrictedRevisions") + "</AllowUnrestrictedRevisions>";
	request += "<KeepDraftsPrivate>" + Docova.Utils.getField( "KeepDraftsPrivate") + "</KeepDraftsPrivate>";
	request +="<AuthorsCanEditDrafts>" + Docova.Utils.getField("AuthorsCanEditDrafts") + "</AuthorsCanEditDrafts>";
	request += '<DeleteRights multi="1" dt="names"><![CDATA[' + Docova.Utils.getField( "DeleteRights").replace(", ", ",") + "]]></DeleteRights>";
	request += "<OnlyAuthorsAreReaders>" + Docova.Utils.getField("OnlyAuthorsAreReaders") + "</OnlyAuthorsAreReaders>";
	request += "<ReadersSeeDrafts>" + Docova.Utils.getField("ReadersSeeDrafts") + "</ReadersSeeDrafts>";	
	request += '<DisableCutCopyPaste>' + Docova.Utils.getField("DisableCutCopyPaste") + '</DisableCutCopyPaste>';	
	request += '<DisableBookmarks>' + Docova.Utils.getField("DisableBookmarks") + '</DisableBookmarks>';
	request += '<DefaultDocumentType>' + Docova.Utils.getField("DefaultDocumentType") + '</DefaultDocumentType>';
	request += '<EnableFolderFiltering>' + Docova.Utils.getField("EnableFolderFiltering") + '</EnableFolderFiltering>';
	request += '<fltrField1>' + Docova.Utils.getField("fltrField1") + '</fltrField1>';
	request += '<fltrField2>' + Docova.Utils.getField("fltrField2") + '</fltrField2>';	
	request += '<fltrField3>' + Docova.Utils.getField("fltrField3") + '</fltrField3>';	
	request += '<fltrField4>' + Docova.Utils.getField("fltrField4") + '</fltrField4>';		
	
	request += getFolderMetaDataFieldsXML();
	
	request += "</Fields>";
	request += "</Request>";

	//=====================================
	Docova.Utils.showProgressMessage("{% trans %}Updating folder and document properties. Please wait{% endtrans %}...");
	var httpObj = new objHTTP();
	
	if(httpObj.PostData(encodeURIComponent(request), url))
	{
	 if(httpObj.status=="OK") //all OK
		{
			result = true;
		}
	}
	
	Docova.Utils.hideProgressMessage();
	return result;
}

function UpdateDefaultPerspectiveList()
{
	//clear all custom perspectives from the default perspective selection box
	var defaultPerspectiveSelect = document.getElementById("DefaultPerspective");
	if(!defaultPerspectiveSelect) {return;}
	for(var i=defaultPerspectiveSelect.options.length-1 ; i>=0 ; i--)
		{
		if(defaultPerspectiveSelect.options[i].style.backgroundColor)
			{
				if(defaultPerspectiveSelect.options[i].selected) {docInfo.DefaultPerspective="system_default_folder";}
				defaultPerspectiveSelect.remove(i);
			}
		}
	
	//add selected custom perspectives to the default perspective selection box
	var customPerspectiveCheck = $("input[name='FolderPerspectives']:checked").map(function(){ return $(this).val(); }).get();
	var customPerspectiveList = document.getElementById("tmpCustomPerspectiveList");	

	for(var i=0; i< customPerspectiveCheck.length; i++)
	{
		for( var k=0; k<customPerspectiveList.options.length; k++)
		{
			if(customPerspectiveCheck[i] == customPerspectiveList.options[k].value)
			{
				var newOpt = document.createElement("OPTION");
				defaultPerspectiveSelect.options.add(newOpt);
				newOpt.value = customPerspectiveList.options[k].value;
				newOpt.text = customPerspectiveList.options[k].text;
				newOpt.style.backgroundColor = "#C8DFFB";
			}
		}
	}

	//reselect the option
	Docova.Utils.setField({field: "DefaultPerspective", value : docInfo.DefaultPerspective});
}

function UpdateDocumentTypeList()
{
	var val = jQuery("#DocumentTypeOption:checked").val();
	jQuery("#DefaultDocumentType").closest("tr").css("display", (val == "N") ? "none" :"");
	jQuery("#divTypeSelect").css("display", (val == "S") ? "block" :"none");	
	populateDefaultDocumentList(val);
}

function ArrayDifference(testArray, baseArray)
{

    var result = new Array();

	//----------------------------------------
	if(Array.isArray(testArray)){
		// returns the elements in the test array that are not in the base array		
		for( x in testArray){
		     if(jQuery.inArray(x, baseArray) === -1){
		     	result.push(x);
		     }
		}
		result = TrimArray(result);
	}
	return result;
}


function TrimArray(srcArray)
{
	var retArray = new Array();
	for( x in srcArray){
		if(srcArray[x].replace(" ", "") != ""){
			retArray[retArray.length] = srcArray[x];
		}
	}
	return retArray;
}

function GetRemovedNames(fieldName)
{
	var currentNamesArray = Docova.Utils.getField(fieldName).replace(/, /g, ",").split(",");
	if(fieldName=="Managers"){
		return  ArrayDifference(managerArray, currentNamesArray).join(",");
	}
	else if(fieldName=="Editors"){
		return  ArrayDifference(editorArray, currentNamesArray).join(",");
	}
	else if(fieldName=="Authors"){
		return  ArrayDifference(authorArray, currentNamesArray).join(",");
	}
	else if(fieldName=="Readers"){
		return  ArrayDifference(readerArray, currentNamesArray).join(",");
	}
}

function GetAddedNames(fieldName)
{
	var currentNamesArray = Docova.Utils.getField(fieldName).replace(/, /g, ",").split(",");
	if(fieldName=="Managers"){
		return  ArrayDifference(currentNamesArray, managerArray).join(",");
	}
	else if(fieldName=="Editors"){
		return  ArrayDifference(currentNamesArray, editorArray).join(",");
	}
	else if(fieldName=="Authors"){
		return  ArrayDifference(currentNamesArray, authorArray).join(",");
	}
	else if(fieldName=="Readers"){
		return  ArrayDifference(currentNamesArray, readerArray).join(",");
	}
}

function ShowInheritedManagers()
{
	if(docInfo.isRootFolder){
		alert("{% trans %}This is a root level folders hence it does not inherit any editors.{% endtrans %}");
	}
	else{
		alert("{% trans %}The following editors of higher level folders can manage this folder{% endtrans %}:\r" + docInfo.InheritedManagers.split(";").join(", "));
	}
}

function ShowNamePicker(fieldName, title)
{
	if(docInfo.ParentReaders =="" || fieldName == "SyncUsers"){
		if(docInfo.MembersEnabled){
			parent.Docova.Utils.showAddressDialog({
				"fieldname": fieldName, 
				"dlgtype": "multi",
				"title": title,
				"sourcedocument" : document,
				"restricttolibrarymembers" : docInfo.LibraryKey,				
				"dlgdivname" : "divDlgFolderProperties"
			});
		}else{
			parent.Docova.Utils.showAddressDialog({
				"fieldname": fieldName, 
				"dlgtype": "multi",
				"title": title,
				"sourcedocument" : document,
				"dlgdivname" : "divDlgFolderProperties"
			});
		}
	}else{
		ShowLocalNamesPicker(fieldName, title);	
	}
	return false;
}

function ShowLocalNamesPicker(fieldName, title)
{
	var availablenames = docInfo.RestrictedNamesList;
	var defaultnames = Docova.Utils.getField(fieldName).replace(/, /g, ",");
	
	Docova.Utils.selectKeyword({
		"windowtitle" : title ,
		"choicelist" : availablenames,
		"defaultvalues" : defaultnames,
		"delimiterin" : ",",
		"delimiterout" : ",",
		"multiselect" : true,
		"onbeforecomplete" : function(data){
			if(fieldName=="Readers" && (data == null || data=="") && docInfo.ParentReaders !=""){
				//current readers list cannot be emptied if parent folder has readers
				alert("{% trans %}Since parent folder has read restrictions, you cannot completely remove read restrictions from the current folder.{% endtrans %}");
				return false;
			}else{
				return true;
			}
		},		
		"oncomplete" : function(data){
			Docova.Utils.setField({"field": fieldName, "value": data, "separator" : ","});
		}
	});
}//--end ShowLocalNamesPicker


//--------Default document type ---------------------------------
function updateDefaultDocumentTypeList(cBoxObj)
{

	var defDocTypeArrayList = getDefaultDocumentTypeArray();

	var optExist = false;
	for (var i=0; i<doc.DefaultDocumentType.length; i++)
	{
		if(cBoxObj.value == doc.DefaultDocumentType.options[i].value)
		{
			optExist = true;
			//check if the check box is to be removed
			if (!cBoxObj.checked)
			{
				doc.DefaultDocumentType.remove(i);
			}
		}
	}
	//add new option to the list
	if (cBoxObj.checked && !optExist)
	{
		var optText=defDocTypeArrayList[cBoxObj.value];
		var optValue=cBoxObj.value;
		addOption(doc.DefaultDocumentType, $.trim(optText), optValue);
	}
}

function getDefaultDocumentTypeArray()
{
	var defDocTypeArrayList = new Array();
	var tempArrayList = new Array();
	var eachKeyTextList = new Array();
	tempArrayList = docInfo.DocumentTypeList.split(",");	
	for(var i=0; i<tempArrayList.length;i++)
	{
		eachKeyTextList = 	tempArrayList[i].split("|");
		if(eachKeyTextList.length)
		{
			defDocTypeArrayList[eachKeyTextList[1]]=eachKeyTextList[0]
		}
	}
	return defDocTypeArrayList;
}

//--------------- populates default document list ------
function populateDefaultDocumentList(radioVal)
{
	var defDocTypeArrayList = getDefaultDocumentTypeArray();

	if (radioVal=='A')
	{
		var oldchoice = Docova.Utils.getField("DefaultDocumentType");
		doc.DefaultDocumentType.disabled=false;
		removeAllOptions(doc.DefaultDocumentType); // clear list
		//add all
		for(var iValue in defDocTypeArrayList)
		{
			addOption(doc.DefaultDocumentType, $.trim(defDocTypeArrayList[iValue]), iValue); 			// takes obj, text and value
		}
		Docova.Utils.setField({field: "DefaultDocumentType", value : oldchoice});
	}
	else if (radioVal=='S')
	{
		var oldchoice = Docova.Utils.getField("DefaultDocumentType");	
		doc.DefaultDocumentType.disabled=false;
		removeAllOptions(doc.DefaultDocumentType);
		var sizeCBoxes = doc.DocumentType.length
		var chkObj = doc.DocumentType;
		txt = ""
		for (i = 0; i < sizeCBoxes; i++) 
		{
			if (chkObj[i].checked) 
			{
				addOption(doc.DefaultDocumentType,$.trim(defDocTypeArrayList[chkObj[i].value]), chkObj[i].value);
			}
		}
		Docova.Utils.setField({field: "DefaultDocumentType", value : oldchoice});		
	}
	else
	{
		//disable the default list
		doc.DefaultDocumentType.disabled=true;
	}
}

//-------- empties drop down list --------
function removeAllOptions(dropList)
{
	var i;
	for(i=dropList.options.length-1;i>=0;i--)
	{
		dropList.remove(i);
	}

}
//---------- adds drop down option -----------
function addOption(dropListObj,optText,optValue)
{
		var optn = document.createElement("OPTION");
		optn.text = optText;
		optn.value = optValue;
  		if (optValue==docInfo.OrignalDefaultDocumentType)
  		{
  			optn.selected=true;
  		}
		dropListObj.add(optn);
}

function EnableFilterFields(){
		jQuery("#EnableFolderFiltering").prop("disabled", !docInfo.isEditMode);

		var filteringchecked = (jQuery("#EnableFolderFiltering:checked").length > 0);
		if(filteringchecked){
			jQuery("[name^=fltrField]").prop("disabled", ! docInfo.isEditMode);		
		}else{	
			jQuery("[name^=fltrField]").val("0");
		}	
		jQuery("#divAutoFilterFields").closest("tr").css("display", ((filteringchecked) ? "" : "none"));	
}

function EnableSyncFields(){
		//--Sync options 		
		var syncedfromparent = (docInfo.SyncedFromParent == "1");
		var enablesyncfields = (docInfo.isEditMode ? (! syncedfromparent) : false);
		var syncchecked = ((jQuery("#Sync:checked").length > 0) || syncedfromparent);
		var syncsubfoldersenabled = (((jQuery("#SyncSubfolders:checked").length > 0) || syncedfromparent) && syncchecked);
		var enablesyncusers = enablesyncfields && syncchecked;

		jQuery("#Sync").prop("checked", syncchecked).prop("disabled", ! enablesyncfields);		
		jQuery("#SyncSubfolders").prop("checked", syncsubfoldersenabled).prop("disabled", ! (syncchecked && enablesyncfields));		
		jQuery("#SyncUsers").closest("tr").css("display", ((syncedfromparent || enablesyncusers) ? "" : "none"));
		jQuery("#btnSyncUsers").css("display", (enablesyncusers ? "" : "none"));
}




//--Identify any folder meta-data fields based on naming convention
function getFolderMetaDataFields(fieldtype){
	var founditems = new Array();
	
	var namesearch = "";
	switch(fieldtype){
		case 0: //FLDMD_ and FLDMD1_ only
			namesearch = "[name^=FLDMD_],[name^=FLDMD1_]";
			break;
		case 1: //FLDMD_ and FLDMD0_ and FLDMD1_
			namesearch = "[name^=FLDMD_],[name^=FLDMD0_],[name^=FLDMD1_]";					
			break;
	}	
	
	jQuery(namesearch).each(function(index){
		founditems.push(this.name);					
	}); 		

	return founditems;
}

//-- return xml for folder meta-data field content
function getFolderMetaDataFieldsXML(){
	var fieldnames, index, i, len, fieldname, formelem, attrib, attribs;
	var attriblist = ["dt", "sep", "multi", "notrim", "ignoreblanks"];
	var xmlout = "";
	var ignoreblanks = false;
	var fieldval = "";
	
	fieldnames = getFolderMetaDataFields(1);
	for (index = 0; index < fieldnames.length; ++index) { 
		 attribs = "";
		fieldname = fieldnames[index];
		formelem=jQuery("[name=" + fieldname + "]").get(0); 
		for ( var i=0, len=attriblist.length; i<len; ++i ){
			attrib = formelem.getAttribute(attriblist[i]);
			if (attrib) attribs += (attrib != '') ? (" "+attriblist[i] +"=\"" + attrib + "\"") : "";			
		}
		fieldval = Docova.Utils.getField(fieldname);
		xmlout += "<" + fieldname + attribs + "><![CDATA[" + fieldval + "]]></"+ fieldname +">";
	}
	return xmlout;
}

//-- load Folder meta-data from folder
function loadFolderMetaData(){
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/FolderServices?OpenAgent";
	var action = "GETMETADATA";
	var request = "";
	request += "<Request>";
	request += "<Action>" + action + "</Action>";
	request += "<Unid>" + docInfo.FolderID + "</Unid>";         
	request += "</Request>";
	 
	var httpObj = new objHTTP();
	if (httpObj.PostData(encodeURIComponent(request), url)) {
		if (httpObj.status == "OK") {
			if(httpObj.resultNodes.length > 0){
				jQuery(httpObj.resultNodes[0]).find("Fields").children().each(function(index){
					var $fobj = jQuery(this);
					var fieldname = $fobj.get(0).nodeName;					
					if (fieldname.substr(0, 6) == "FLDMD_" || fieldname.substr(0, 7) == "FLDMD0_" || fieldname.substr(0, 7) == "FLDMD1_"){
						var fieldvalue = $fobj.text();								
						var attriblist = $fobj.get(0).attributes;
						if (attriblist) {
							var ismulti = ($fobj.attr("multi") == "1");
							var sep = ($fobj.attr("sep")) ? $fobj.attr("sep") : ",";
							var dt = ($fobj.attr("dt")) ? $fobj.attr("dt") : "";
							var re = new RegExp(sep,"g"); 
							fieldvalue = (ismulti) ? fieldvalue.replace(re, ",") : fieldvalue;			     	
							switch (dt){
								case "text":
									//add any special text formatting here
									break;
								case "date":
									fieldvalue = fieldvalue.split(" ", 1)[0]
									break;
								case "number":
									//add any special number formatting here
									break;
								case "names":
									//add any special name formatting here
									break;
							}
						}				
						if (fieldvalue != "") {		
							Docova.Utils.setField({field: fieldname, value: fieldvalue});
						}
					}
				});
			}
		}
	}
}				

function loadXMLString(txt){
	if (window.DOMParser) {
		parser=new DOMParser();
		xmlDoc=parser.parseFromString(txt,"text/xml");
	} else {
		xmlDoc=new ActiveXObject("Microsoft.XMLDOM");
		xmlDoc.async="false";
		xmlDoc.loadXML(txt); 
	}
	return xmlDoc;
}


function selectFolder(){

	var dlgUrl =docInfo.ServerUrl + docInfo.PortalWebPath + "/dlgFolderSelect?ReadForm&flags=create,notcurrent,norecycle";	
	var folderdbox = Docova.Utils.createDialog({
		id: "divDlgFolderSelect", 
		url: dlgUrl,
		title: "Select Template Folder",
		height: 420,
		width: 420, 
		useiframe: true,
		sourcedocument : document,		
		buttons: {
    		"Cancel": function() {
   				folderdbox.closeDialog();
   			},
   			"Done": function() {
       			var returnValue = jQuery("#" + this.id + "IFrame", this).get(0).contentWindow.completeWizard();
	        			
   				//-- returnValue [0]=LibraryID, [1]=FolderID, [2]=FolderUNID, [3]=FolderAccessLevel 	
				if(returnValue){
					folderdbox.closeDialog();
					if (returnValue[1] == docInfo.FolderID) {
						alert("{% trans %}You cannot select the current folder.{% endtrans %}");
						return false;
					}
		
					if (returnValue[0] != "" && returnValue[1] != ""){
						//-- check that the folder is available to be selected as a template folder
						if (getFolderInfo(returnValue[0], returnValue[1], "FolderTemplateType") == "2"){
							Docova.Utils.setField({field: "FolderTemplateSource",  value : returnValue[0] + ":" + returnValue[1]});			
							var pathinfo = getFolderInfo(returnValue[0], returnValue[1], "FolderPath");
							if (pathinfo){
								Docova.Utils.setField({field: "FolderTemplateSourceFolder", value : pathinfo});
							}
							var libname = getLibraryInfo(returnValue[0], "LibraryName");
							if (libname){
								Docova.Utils.setField({field: "FolderTemplateSourceLibrary", value : libname});
							}
						}else{  //-- folder is not a template source folder
							alert("The folder you selected is not configured as a template folder. Please choose a folder that has been configured to be a template for other folders.");
							return false;
						}
					}
		   		}
        	}
      	}
	});
}


function updateFolderTemplateFields(){
   var foldertemplatetype = Docova.Utils.getField("FolderTemplate");
   
   if (foldertemplatetype == "1"){  //-- folder inherits from template
     doc.divFolderTemplateSource.style.display = "block";
	doc.divFolderTemplateOptions.style.display = "none";
	jQuery("#btnSelectFolderTemplate").show();	
	enableFields("FOLDERTEMPLATE", false);
	var fixedname = Docova.Utils.getField({field: "FolderTemplateOptions", separator : ","});
     fixedname = fixedname.split(",");
    	enableFields("FOLDERNAME", (ArrayGetIndex(fixedname, "1") < 0));	
   }else if(foldertemplatetype == "2"){  //-- folder is a template
     doc.divFolderTemplateSource.style.display = "none";
	doc.divFolderTemplateOptions.style.display = "block";
	jQuery("#btnSelectFolderTemplate").hide();		
   	enableFields("FOLDERTEMPLATE", true);	
	var val = Docova.Utils.getField( "DocumentTypeOption");
	enableFields("DOCUMENTTYPE", true);
    	enableFields("FOLDERNAME", true);	
    	EnableFilterFields();
   }else{ //-- normal folder
   	doc.divFolderTemplateSource.style.display = "none";
   	doc.divFolderTemplateOptions.style.display = "none";   
	jQuery("#btnSelectFolderTemplate").hide();	   	
   	enableFields("FOLDERTEMPLATE", true);
	var val = Docova.Utils.getField( "DocumentTypeOption");
	enableFields("DOCUMENTTYPE", true);  	
	enableFields("FOLDERNAME", true);	
	EnableFilterFields();
   }
}

function enableFields(fieldflag, enable){
	var affectedfields = new Array();
	
	switch(fieldflag){
	case "CONTENTPAGING":
		affectedfields = ["UseContentPaging", "MaxDocCount"];					
		break;
	case "DOCUMENTTYPE":
		affectedfields = ["DocumentTypeOption", "DocumentType", "DefaultDocumentType"];						
		break;
	case "FOLDERICON":
		jQuery("#IconNormal").iconselectmenu("option", "disabled", !enable);	
		break;
	case "FOLDERTEMPLATE":
		affectedfields = ["DocumentTypeOption", "DocumentType", 
								"DefaultDocumentType", "DefaultPerspective", "UseContentPaging", "MaxDocCount",
								"EnableFolderFiltering", "fltrField1", "fltrField2", "fltrField3", "fltrField4", "divTypeSelect", "btnTypeSelect"];
		jQuery("#IconNormal").iconselectmenu("option", "disabled", !enable);								
		break;
	case "FOLDERNAME":
   		affectedfields = ["FolderName"];	
		break;
	case "FILTERING":
		affectedfields = ["fltrField1", "fltrField2", "fltrField3", "fltrField4"];
		break;
	case "METADATA":
		affectedfields =  getFolderMetaDataFields(1);
		break;
	case "SECURITYADVANCED":
  		affectedfields = ["AuthorsCanNotCreateFolders", "KeepDraftsPrivate", "AuthorsCanEditDrafts", 
		"AllowUnrestrictedRevisions", "OnlyAuthorsAreReaders", "ReadersSeeDrafts", "DisableCutCopyPaste", "DisableBookmarks"];	
		break;
	default:
		break;
	}

	for (var i=0; i<affectedfields.length; i++){	
		enableElement(affectedfields[i], enable);
	}
}

function getFolderInfo(libid, folderid, infotype){
	var result = false;
	
	var httpObj = new objHTTP();
	
	if (libid == ""){
		var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/FolderServices?OpenAgent";	
	}else{
		var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/LibraryServices?OpenAgent";
		//--build the request
		var request="";
		request += "<Request>";
		request += "<Action>GETNSFNAMEBYLIBRARYKEY</Action>";
		request += "<LibraryKey>" + libid + "</LibraryKey>";
		request += "</Request>";

		if(httpObj.PostData(encodeURIComponent(request), url)){
			if(httpObj.status=="OK") //all OK
			{			
				var urlPath = leftBack(docInfo.NsfName ,"/");
				var url = docInfo.ServerUrl + "/" + urlPath +  "/" + httpObj.results[0] +  "/FolderServices?OpenAgent";
			}else{
				return false;
			}
		}else{
			return false;
		}
	}
	
	//--build the final request
	var request="";
	request += "<Request>";
	request += "<Action>GETFOLDERINFO</Action>";
	request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "<DocKey>" + folderid + "</DocKey>";
	request += "<InfoType>" + infotype +"</InfoType>";
	request += "</Request>";
				
	if(httpObj.PostData(encodeURIComponent(request), url)){
		 if(httpObj.status=="OK") //all OK
		{
			return httpObj.results[0];
		}
	}
	
	return false;
}

function getLibraryInfo(libid, infotype){
	var result = false;
	
	var httpObj = new objHTTP();
	
	var url = docInfo.ServerUrl + docInfo.PortalWebPath + "/LibraryServices?OpenAgent";
	
	//--build the request
	var request="";
	request += "<Request>";
	request += "<Action>GETLIBRARYINFO</Action>";
	request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "<LibraryKey>" + libid + "</LibraryKey>";
	request += "<InfoType>" + infotype +"</InfoType>";
	request += "</Request>";
				
	if(httpObj.PostData(encodeURIComponent(request), url)){
		 if(httpObj.status=="OK") //all OK
		{
			return httpObj.results[0];
		}
	}
	
	return false;
}

function enableElement(elementname, enable){
   var $elem = jQuery("[id=" + elementname +"]");
   if($elem.length == 0){
   	$elem = jQuery("[name="+elementname+"]");
   }
   if($elem.length == 0){
   	return false;
   }
   
	$elem.each(function(){jQuery(this).prop("disabled", !enable)});
	return true;
}

function setAdvancedSaveOptions()
{
	var saveoptions = [
		"Managers|Managers",
		"Editors|Editors",
		"Authors|Authors",
		"Readers|Readers",
		"Authors can not create sub-folders|AuthorsCanNotCreateFolders",
		"Right for authors to create revisions of documents they have not authored|AllowUnrestrictedRevisions",
		"Restriction limiting access to draft documents to document editors|KeepDraftsPrivate",
		"Authors can edit each others draft documents|AuthorsCanEditDrafts",
		"Restrict who can delete documents|DeleteRights",
		"Restrict readers to authors list|OnlyAuthorsAreReaders",
		"Readers can see drafts|ReadersSeeDrafts",
		"Disable Cut/Copy/Paste|DisableCutCopyPaste",
		"Disable Tools - Create Bookmark|DisableBookmarks",
		"Folder icon|IconNormal;IconSelected",
		"Allowed Document Types|DocumentTypeOption;DocumentType",		
		"Applicable custom perspectives|FolderPerspectives",
		"Default perspective|DefaultPerspective",
		"Content Paging|UseContentPaging;MaxDocCount",
		"Enable Folder Filtering|EnableFolderFiltering",
		"Auto Filter Fields|fltrField1;fltrField2;fltrField3;fltrField4",
		"Folder Meta-Data Fields|FolderMetaDataFields"		
	];

	Docova.Utils.selectKeyword({
		"windowtitle" : "Advanced Save Options",
		"prompt" : "When applying changes, copy the following settings to all subfolders of the current folder.",
		"choicelist" : saveoptions,	
		"defaultvalues" : ((UpdatePropertyList) ? UpdatePropertyList : ""),
		"multiselect" : true,
		"width" : 660,
		"onbeforecomplete" : function(data){
			var result = true;
			if(data && data.length > 0){
				result = confirm("The selected properties will be updated on all sub folders when changes are saved.  Are you sure you want to update these settings on all sub folders as well?");
			}
			return result;
		},		
		"oncomplete" : function(data){
			UpdatePropertyList = data;
		}
	});
}//--end setAdvancedSaveOptions

function completeWizard()
{
	var result = false;

	if(Docova.Utils.getField( "FolderName") == "")
	{
		return alert("{% trans %}Folder name is required.{% endtrans %}");
	}
	
	if(Docova.Utils.getField( "DocumentTypeOption") == "S" && Docova.Utils.getField( "DocumentType") =="")
	{
		return alert("{% trans %}Please select at least one document type.{% endtrans %}");
	}
/*	
	if(Docova.Utils.getField( "FolderTemplate") == "1" && Docova.Utils.getField( "FolderTemplateSource") =="")
	{
		return alert("Please choose a source template for this folder, or change the Folder Template option.");
	}

*/	
//	var createdby = Docova.Utils.getField("CreatedBy");
	var managerlist = Docova.Utils.getField("Managers");
//THESE LINES WIPE OUT THE MANAGERS FIELD ALWAYS
//	if(managerlist.indexOf(createdby) == -1){
//		Docova.Utils.setField({field: "Managers", value: createdby, separator: ", "});
//	}
	var updatesString = UpdatePropertyList.join(";"); //global variable set by advanced save options dialog
	
	//-- special processing for folder meta-data fields since they are dynamic and need to be computed
	var updatesArray = updatesString.split(";");
	var itempos = ArrayGetIndex(updatesArray, "FolderMetaDataFields");
	if ( itempos >= 0) {
		updatesArray.splice(itempos, 1); 
		updatesArray = updatesArray.concat(getFolderMetaDataFields(0));
		updatesString = updatesArray.join(";");
	}
	var updateList = "<PropagateFields>" + updatesString + "</PropagateFields>";
	result =  sendUpdateRequest(updateList);
	return result;
}//--end completeWizard
</script>
<style>
#formSections {
	overflow: auto;
}
#divTypeSelect {
	height: 100px; 
	overflow-y: auto; 
	overflow-x: hidden;
	border-style: solid;
	border-width: 1px;
}
.selectDefault {
	width: 320px;
}
.inputDefault {
	width: 320px;
}
/* select with CSS custom icons */
option.customicon {
	background-repeat: no-repeat !important;
	padding-left: 20px;
}
.customicon .ui-icon {
	background-position: left top;
}
#IconNormal-menu {
	max-height: 200px;
}
#IconNormal-button {
	width: 50px;
	background: transparent;
	color: black;
	border-color: black;
}
.innerTabs LI {
	list-style-type:none;
	list-style: none !important;
}
</style>
</head>
<body text="#000000" bgcolor="#FFFFFF" onload="initDialog();">
<form onsubmit="return(false); return true;" method="post" action="{{ path('docova_folderproperties') }}?OpenForm&amp;ParentUNID={{ folder.getId }}&amp;Seq=1&amp;mode={{ mode }}&amp;1456326895412" name="_dlgFolderProperties"></form>
<!--Start Top Level Sections -->
<div id="formSections" class="accordion">
	<!-- General Section : 1-->
	<h3>{% trans %}General{% endtrans %}</h3>
	<div id="section1">
		<table class="tblFields" width="100%" border="0" cellspacing="0" cellpadding="0">
			<tr valign="top">
				<td width="10%">{% trans %}Folder Name{% endtrans %}:</td>
				<td width="90%">{{ folder.getFolderName }}</td>
			</tr>
			<tr valign="top">
				<td width="10%">{% trans %}Description{% endtrans %}:</td>
				<td width="90%">{{ folder.getDescription }}</td>
			</tr>
			<tr valign="top">
				<td width="10%">{% trans %}Icon{% endtrans %}:</td>
				<td width="90%">
					<select id="IconNormal" name="IconNormal">
						<option value="{{ not folder.getIconNormal ? '0' : folder.getIconNormal }}" selected="1">{{ not folder.getIconNormal ? 'Folder' : folder.getIconNormal }}</option>
					</select>
				</td>
			</tr>
		</table>
	</div><!--end section1-->
	<!-- Security Section : 2-->
	<h3>{% trans %}Security{% endtrans %}</h3>
	<div id="section2">
    		<div class="innerTabs">
    			<ul>
					<li><a href="#members">{% trans %}Folder Members{% endtrans %}</a></li>
					<li><a href="#filesync">{% trans %}File Sync{% endtrans %}</a></li>
					<li><a href="#advanced">{% trans %}Advanced Options{% endtrans %}</a></li>
    			</ul>
    			<!-- Security - Basics - Section : 2-1-->
    			<div id="members">
					<table class="tblFields" width="100%" border="0" cellspacing="0" cellpadding="0">
						<tr valign="top">
							<td width="14%">
								<span title="{% trans %}People and Groups in this field can modify folder properties in addition to editors of any folders above in the hierarchy. Click to see the names of inherited editors.{% endtrans %}" onclick="ShowInheritedManagers();">{% trans %}Managers{% endtrans %}:</span>
							</td><td width="86%">
								{{ owners }}
							</td>
						</tr>
						<tr valign="top">
							<td width="14%">
								<span title="{% trans %}Identify who can create and edit documents in this folder. Folder Managers listed above can always create and edit documents.{% endtrans %}" >{% trans %}Editors{% endtrans %}:</span>
							</td><td width="86%">
								{{ editors }}
							</td>
						</tr>
						<tr valign="top">
							<td width="14%">
								<span title="{% trans %}Restrict who can create documents in this folder. Folder Editors listed above can always create documents. Leave blank to allow default Author access.{% endtrans %}" >{% trans %}Authors{% endtrans %}:</span>
							</td><td width="86%">
								{{ authors_list }}
							</td>
						</tr>
						<tr valign="top">
							<td width="14%">
								<span title="{% trans %}Restrict who can see this folder and its subfolders. Folder Authors and Editors listed above always have access. Leave blank to allow default Reader access.{% endtrans %}" >{% trans %}Readers{% endtrans %}:</span>
							</td><td width="86%">
								{{ readers_list }}
							</td>
						</tr>
					</table>
    			</div>
    			<!-- Security - File Sync - Section : 2-2-->
    			<div id="filesync">
					<table class="tblFields" width="100%" border="0" cellspacing="0" cellpadding="0">
						<tr valign="top">
							<td width="14%">
								<span title="{% trans %}Enabling File Sync allows select users to synchronize the contents of this folder with their local pc. Users must also enable File Sync locally in their DOCOVA Explorer client.{% endtrans %}" >{% trans %}File Sync{% endtrans %}:</span>
							</td><td width="86%">
								<label><input type="checkbox" name="Sync" value="1" id="Sync" {{ folder.getSynched ? 'checked' : '' }} disabled="disabled">{% trans %}Enable File Sync{% endtrans %}</label>&nbsp;&nbsp;&nbsp;
								<label><input type="checkbox" name="SyncSubfolders" value="1" id="SyncSubfolders" {{ folder.getSyncSubfolders ? 'checked' : '' }} disabled="disabled">{% trans %}Sync Subfolders{% endtrans %}</label>
							</td>
						</tr>
						{% set SyncUsers = '' %}
						{% if (folder.Synched or folder.getSyncedFromParent) and folder.getSynchUsers.count > 0 %}
							{% for item in folder.getSynchUsers %}
								{% set SyncUsers = SyncUsers ~ item.getUserNameDnAbbreviated ~ ',' %}
							{% endfor %}
							{% set SyncUsers = SyncUsers != '' ? SyncUsers[:SyncUsers|length - 1] : '' %}
						{% endif %}
						{% if folder.Synched or folder.getSyncedFromParent %}
						<tr valign="top">
							<td width="14%">
								{% trans %}Sync Users{% endtrans %}:
							</td><td width="86%">
								{{ SyncUsers }}
							</td>
						</tr>
						{% endif %}
					</table>
    			</div>
    			<!-- Security - Advanced - Section: 2-3-->
    			<div id="advanced">
					<table class="tblFields" width="100%" border="0" cellspacing="0" cellpadding="0">
						<tr valign="top">
							<td width="14%">
								<span title="{% trans %}Set additional editing options for Authors of this folder.{% endtrans %}" >{% trans %}Authors{% endtrans %}:</span>
							</td><td width="86%">
								<span style="font: 11px verdana, arial, sans-serif;margin-top:5px;">
									<label><input type="checkbox" name="AuthorsCanNotCreateFolders" value="1" {% if folder.getDisableACF %}checked="checked"{% endif %} disabled="disabled">{% trans %}Authors can not create sub-folders{% endtrans %}</label>
								</span></br>
								<span style="font: 11px verdana, arial, sans-serif;margin-top:5px;">
									<label><input type="checkbox" name="KeepDraftsPrivate" value="1" {% if folder.getPrivateDraft %}checked="checked"{% endif %} disabled="disabled">{% trans %}Keep drafts private{% endtrans %}</label>
								</span></br>
								<span style="font: 11px verdana, arial, sans-serif;margin-top:5px;">
									<label><input type="checkbox" name="AuthorsCanEditDrafts" value="1" {% if folder.getPrivateDraft %}checked="checked"{% endif %} disabled="disabled">{% trans %}Default new documents to include Authors as additional editors{% endtrans %}</label>
								</span></br>
								<span style="font: 11px verdana, arial, sans-serif;margin-top:5px;">
									<label><input type="checkbox" name="AllowUnrestrictedRevisions" value="1" {% if folder.getEnableACR %}checked="checked"{% endif %} disabled="disabled">{% trans %}Allow authors to create revisions of documents they have not authored{% endtrans %}</label>
								</span>
							</td>
						</tr>
						<tr valign="top">
							<td width="14%">
								<span title="{% trans %}Restrict who can delete documents in this folder. Add users/groups here to restrict who can delete documents in this folder. By default (blank) all Editors/Authors can delete content.{% endtrans %}" >{% trans %}Deletion Rights{% endtrans %}:</span>
							</td><td width="86%">
								{{ delete_list }}
							</td>
						</tr>
						<tr valign="top">
							<td width="14%">
								<span title="{% trans %}Set additional options for Readers of this folder.{% endtrans %}" >{% trans %}Readers{% endtrans %}:</span>
							</td><td width="86%">
								<span style="font: 11px verdana, arial, sans-serif;margin-top:5px;">
									<label><input type="checkbox" name="OnlyAuthorsAreReaders" value="1" {% if folder.getRestrictRTA %}checked="checked"{% endif %} disabled="disabled">{% trans %}Restrict Readers to Authors list{% endtrans %}</label>
								</span></br>
								<span style="font: 11px verdana, arial, sans-serif;margin-top:5px;">
									<label><input type="checkbox" name="ReadersSeeDrafts" value="1" {% if folder.getSetDVA %}checked="checked"{% endif %} disabled="disabled">{% trans %}Readers Can See Drafts{% endtrans %}</label>
								</span>
							</td>
						</tr>
						<tr valign="top">
							<td width="14%">
								<span title="{% trans %}Set additional restrictions on what users can do in this folder.{% endtrans %}" >{% trans %}Other{% endtrans %}:</span>
							</td><td width="86%">
								<span style="font: 11px verdana, arial, sans-serif;margin-top:5px;">
									<label><input type="checkbox" name="DisableCutCopyPaste" value="1" {% if folder.getDisableCCP %}checked="checked"{% endif %} disabled="disabled">{% trans %}Disable Cut/Copy/Paste{% endtrans %}</label>
								</span></br>
								<span style="font: 11px verdana, arial, sans-serif;margin-top:5px;">
									<label><input type="checkbox" name="DisableBookmarks" value="1" {% if folder.getDisableTCB %}checked="checked"{% endif %} disabled="disabled">{% trans %}Disable Tools - Create Bookmark{% endtrans %}</label>
								</span>
							</td>
						</tr>
					</table>
    			</div>
    		</div>
	</div><!--end section 2-->
	<h3>{% trans %}Content/Layout{% endtrans %}</h3>
	<div id="section3">
			<div class="innerTabs">
				<ul>
					<li><a href="#doctypes">{% trans %}Document Types{% endtrans %}</a></li>
					<li><a href="#folderlayout">{% trans %}Folder Layout{% endtrans %}</a></li>
				</ul>
				<!-- Content/Layout - Document Types - Section : 3-1-->
				<div id="doctypes">
					<table class="tblFields" width="100%" border="0" cellspacing="0" cellpadding="0">
						<tr valign="top">
							<td width="16%">{% trans %}Allowed Document Types{% endtrans %}:</td>
							<td width="84%">
								<span>
									<label><input type="radio" name="DocumentTypeOption" value="A" {% if folder.getApplicableDocType|length == 0 and folder.getDefaultDocType != null %}checked{% endif %} id="DocumentTypeOption" disabled="disabled">{% trans %}All{% endtrans %}</label>
									<label><input type="radio" name="DocumentTypeOption" value="S" {% if folder.getApplicableDocType|length > 0 %}checked{% endif %} id="DocumentTypeOption" disabled="disabled">{% trans %}Selected{% endtrans %}</label>
									<label><input type="radio" name="DocumentTypeOption" value="N" {% if folder.getApplicableDocType|length == 0 and folder.getDefaultDocType == null %}checked{% endif %} id="DocumentTypeOption" disabled="disabled">{% trans %}None{% endtrans %}</label>
								</span><br/>
								{% if folder.getApplicableDocType|length > 0 and applicable_doctypes %}
								<div id="divTypeSelect">
									{% for doctype in applicable_doctypes %}
									{% set checked = '' %}
									{% if folder_doctypes %}
										{% for dt in folder_doctypes %}
											{% if doctype.getId == dt.getId %}
												{% set checked = 'checked' %}
											{% endif %}
										{% endfor %}
									{% endif %}
									<label><input type="checkbox" name="DocumentType" size="20" {{ checked }} value="{{ doctype.getId }}" disabled="disabled" class="txField"> {{ doctype.getDocName }}</label><br> 
									{% endfor %}
								</div>
								{% endif %}
							</td>
						</tr>
						<tr valign="top">
							<td width="16%"></td>
							<td width="84%"><font size="2">
								<select name="DefaultDocumentType" id="DefaultDocumentType" class="selectDefault" disabled="disabled">
									<option value="None">{% trans %}Select{% endtrans %} ...</option>
								{% if folder_doctypes|length > 0 %}
									{% for doctype in folder_doctypes %}
									<option {% if doctype.getId == folder.getDefaultDocType %}selected{% endif %} value="{{ doctype.getId }}">{{ doctype.getDocName }}</option>
									{% endfor %}
								{% elseif applicable_doctypes|length > 0 %}
									{% for doctype in applicable_doctypes %}
									<option {% if doctype.getId == folder.getDefaultDocType %}selected{% endif %} value="{{ doctype.getId }}">{{ doctype.getDocName }}</option>
									{% endfor %}
								{% endif %}
								</select></font>
							</td>
						</tr>
					</table>
				</div>
				<!-- Content/Layout - Folder Layout - Section : 3-2-->
				<div id="folderlayout">
					<table class="tblFields" width="100%" border="0" cellspacing="0" cellpadding="0">
						<tr valign="top">
							<td width="23%">
								<span title="{% trans %}Manage custom perspectives for this folder.{% endtrans %}">{% trans %}Custom Perspectives{% endtrans %}:</span>
							</td><td width="77%">
								{% if perspectives['custom']|length > 0 %}
								<div id="appCustomPerspectivesShow">
									<span style="font: 11px verdana;"> 
									{% for item in perspectives['custom'] %}
										<label><input type="checkbox" name="FolderPerspectives" size="20" value="{{ item.getId }}" {% if folder.getDefaultPerspective.getId == item.getId %}checked{% endif %} disabled="disabled" class="txField">{{ item.getPerspectiveName }}</label>
									{% endfor %}
									</span>
								</div>
								{% else %}
								<!-- show below when there is not custom perspective -->
								<span id="appCustomPerspectivesShowBlankMsg">{% trans %}None{% endtrans %}</span>
								{% endif %}
							</td>
						</tr>
						<tr valign="top">
							<td width="23%" valign="middle">
								<span title="{% trans %}Choose a default perspective that should be used for displaying the contents of this folder.{% endtrans %}">{% trans %}Default Perspective{% endtrans %}:</span>
							</td><td width="77%" valign="middle">
								{{ folder.getDefaultPerspective ? folder.getDefaultPerspective.getPerspectiveName : '' }}
							</td>
						</tr>
						<tr valign="top">
							<td width="23%">
								<span title="{% trans %}Enabling content paging for folders with a large number of documents will display a subset of documents a page at a time.{% endtrans %}">{% trans %}Content Paging{% endtrans %}:</span>
							</td><td width="77%">
								<label><input type="checkbox" name="UseContentPaging" value="1" {% if folder.getPagingCount %}checked{% endif %} disabled="disabled">{% trans %}Enable Content Paging{% endtrans %}</label><br><br>
								{% if folder.getPagingCount %}
								<span id=maxCount>
									{% trans with {'%pagecounter%' : (folder.getPagingCount ? folder.getPagingCount : 100)} %}Display %pagecounter% documents per page{% endtrans %}
								</span>
								{% endif %}
							</td>
						</tr>
						<tr valign="top">
							<td width="23%">
								<span title="{% trans %}Enabling filtering will allow users to click on the column headers of this folder/view to filter content.{% endtrans %}">{% trans %}Column Filtering{% endtrans %}:</span>
							</td><td width="77%">
								<label><input type="checkbox" name="EnableFolderFiltering" value="1" {% if folder.getFiltering %}checked{% endif %} id="EnableFolderFiltering" disabled="disabled">{% trans %}Enable Column Filtering{% endtrans %}</label>
							</td>
						</tr>
						{% if folder.getFiltering %}
						<tr valign="top">
							<td width="23%">
								<span title="{% trans %}Select user filter fields (as defined in their user profile) that should be used to auto-filter content in this folder.{% endtrans %}">{% trans %}Auto Filter By{% endtrans %}:</span>
							</td><td width="77%">
								<div id="divAutoFilterFields">
									<table width="100%" border="0" cellspacing="0" cellpadding="0">
										<tr valign="top">
											<td width="12%"><img width="1" height="1" src="{{ asset('bundles/docova/images/icons/ecblank.gif') }}" border="0" alt=""></td>
											<td width="88%">
												<select name="fltrField1" class="selectDefault" disabled="disabled">
												<option value="0">{% trans %}None{% endtrans %}
												{% if view_columns|length > 0 %}
													{% for vc in view_columns %}
													<option value="{{ vc.getXMLName }}" {% if folder.getFltrField1 and vc.getId == folder.getFltrField1.getId %}selected{% endif %}>{{ vc.getTitle }}</option>
													{% endfor %}
												{% endif %}
												</select>
											</td>
										</tr>
										<tr valign="top">
											<td width="12%"><div align="right">and&nbsp;</div></td>
											<td width="88%">
												<select name="fltrField2" class="selectDefault" disabled="disabled">
												<option value="0">{% trans %}None{% endtrans %}
												{% if view_columns|length > 0 %}
													{% for vc in view_columns %}
													<option value="{{ vc.getXMLName }}" {% if folder.getFltrField2 and vc.getId == folder.getFltrField2.getId %}selected{% endif %}>{{ vc.getTitle }}
													{% endfor %}
												{% endif %}
												</select>
											</td>
										</tr>
										<tr valign="top">
											<td width="12%"><div align="right">and&nbsp;</div></td>
											<td width="88%">
												<select name="fltrField3" class="selectDefault" disabled="disabled">
												<option value="0">{% trans %}None{% endtrans %}
												{% if view_columns|length > 0 %}
													{% for vc in view_columns %}
													<option value="{{ vc.getXMLName }}" {% if folder.getFltrField3 and vc.getId == folder.getFltrField3.getId %}selected{% endif %}>{{ vc.getTitle }}
													{% endfor %}
												{% endif %}
												</select>
											</td>
										</tr>
										<tr valign="top">
											<td width="12%"><div align="right">and&nbsp;</div></td>
											<td width="88%">
												<select name="fltrField4" class="selectDefault" disabled="disabled">
												<option value="0">{% trans %}None{% endtrans %}
												{% if view_columns|length > 0 %}
													{% for vc in view_columns %}
													<option value="{{ vc.getXMLName }}" {% if folder.getFltrField3 and vc.getId == folder.getFltrField3.getId %}selected{% endif %}>{{ vc.getTitle }}
													{% endfor %}
												{% endif %}
												</select>
											</td>
										</tr>
									</table>
								</div>
							</td>
						</tr>
						{% endif %}
					</table>
				</div>
			</div>
	</div><!--end section 3-->
	<h3>{% trans %}Audit Log{% endtrans %}</h3>
	<div id="section4">
		<script id="xmlDataDocumentLog" type="text/xml"></script>
		<table id="tblxmlDataDocumentLog" datasrc="#xmlDataDocumentLog" class="tblFields">
			<thead>
			<tr>
				<td><b>{% trans %}Date{% endtrans %}</b></td>
				<td><b>{% trans %}Time{% endtrans %}</b></td>
				<td><b>{% trans %}Who{% endtrans %}</b></td>
				<td><b>{% trans %}Details{% endtrans %}</b></td>
			</tr>
			</thead>
			<tbody id="otblxmlDataDocumentLog">
			<tr>
				<td><span datafld="logdate"></span>&nbsp;</td>
				<td><span datafld="logtime"></span>&nbsp;</td>
				<td><span datafld="logauthor"></span>&nbsp;</td>
				<td><span datafld="logdetails"></span>&nbsp;</td>
			</tr>
			</tbody>
		</table>
	</div>
</div>
<!--end formSections-->	
<!------------------ SUBFORM sfKillCache ------------>
<!------------------Microsoft suggestion to force no cacheing of documents------------>
<HEAD>
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="CACHE-CONTROL" CONTENT="0">
<META HTTP-EQUIV="EXPIRES" CONTENT="0">
</HEAD>
<!------------------END SUBFORM sfKillCache  ------------>
</body>
</html>