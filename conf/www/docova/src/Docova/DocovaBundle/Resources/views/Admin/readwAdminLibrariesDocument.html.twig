<!DOCTYPE html>
<html>
<head>
<title>{%trans%}Library Settings{%endtrans%}</title>
<!--  common javascript & CSS header -->
{% include 'DocovaBundle:Admin:sfWebAdminCommonScriptHeader.html.twig'%}
<script type="text/javascript" src="{{ asset('bundles/docova/js/viewObjects.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/docova/js/embeddedViewObjects.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/docova/js/sarissa.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/docova/js/sarissa_ieemu_xpath.js') }}"></script>
<style type="text/css">
TD.listselheader { width: 10px !important; }
TD.listselheader, TD.listheader, TD.listitem, TD.listsel { padding: 1px !important; font-weight: normal !important; }
</style>
<script language="JavaScript" type="text/javascript">
var subscribedUsers = null;
var MembersView = null; //embedded view object
var SubscribersView = null; //embedded view object
var dlgParams = new Array();  //params array that gets used by dialogs
var retValues = new Array(); //ret params array that can be used by dialogs

$(function() {
	$('#frmEmulator').height($(window).height() - 46);

	$('#divFormContainer').accordion({
		heightStyle: "content",
		collapsible: true
	});

	$('#btnAddSubscriber').button({
		icons : {
			primary : 'ui-icon-plusthick'
		}		
	})
	.click(function(e) {
		AddSubscribers();
		e.preventDefault();
	});

	$("#btnSubscribers").button({
		text: false
	})
	.click(function(event){
		window.top.Docova.Utils.showAddressDialog({ fieldname: "Subscribers", dlgtype: "multi", sourcedocument:document });    			
		event.preventDefault();
	});

	$( "#btn-AddMember" )
		.button({
			text: false,
			label: "Add Member",		
			icons: {primary:  "ui-icon-plus"}
		})
		.click(function( event ) {
			event.preventDefault();
			AddMembers();
	});
	$( "#btn-CreateMember" )
		.button({
			text: false,
			label: "Create a new Member",		
			icons: {primary:  "ui-icon-person"}
		})
		.click(function( event ) {
			event.preventDefault();
			CreateMember();
	});
	$( "#btn-DeleteMember" )
		.button({
			text: false,
			label: "Remove Member(s)",		
			icons: {primary:  "ui-icon-trash"}
		})
		.click(function( event ) {
			event.preventDefault();
			RemoveMembers();
	});
	$( "#btn-ChangeMemberAccess" )
		.button({
			text: false,
			label: "Change Member Access",		
			icons: {primary:  "ui-icon-unlocked"}
		})
		.click(function( event ) {
			event.preventDefault();
			ChangeMemberAccess();
	});	
	
	InitMembers(); //Initialize membership data island
	loadSubscribedUsers();
});

//create XML request for agent
function AddSubscribers() {
	window.top.Docova.Utils.showAddressDialog({
		dlgtype: "multi",
		sourcedocument: document,
		cb: function(result){
			var request = "";
   		 	var agentName = "LibraryServices";
			if (result){
				request += "<Request><Action>ADDSUBSCRIBERS</Action>";
				request += "<UserName><![CDATA[" + docInfo.UserNameAB+ "]]></UserName>";
				request += "<Document>";
				request += "<LibKey>"+ docInfo.DocKey +"</LibKey>";
				request += generateXMLSubscriberList(result);
				request += "</Document>";
				request += "</Request>";
				var responseResult=Submit_XMLRequest(request,agentName);
				if(responseResult){
					loadSubscribedUsers();
					window.top.Docova.Utils.messageBox({
						title: "{% trans %}Subscription(s) created.{% endtrans %}",
						prompt: "{% trans %}The Subscription(s) have been created successfully.{% endtrans %}",
						icontype: 4,
						msgboxtype: 0,
						width: 300
					});					
				}else{
					window.top.Docova.Utils.messageBox({
						title: "{% trans %}Subscription(s) not created.{% endtrans %}",
						prompt: "{% trans %}The subscription(s) were not created successfully.<br>Try again or contact the Adminstrator.{% endtrans %}",
						icontype: 1,
						msgboxtype: 0,
						width:300
					});
				}
			}			
		}
	});
}

//tokenize subscibers
function generateXMLSubscriberList(userList)
{
	var xmlText="";
	if(typeof userList == "string"){
		var arrSubscribers = userList.split(",");
		for (var x=0; x < arrSubscribers.length; x++){
			 xmlText += "<SubscriberName><![CDATA[" + arrSubscribers[x]  + "]]></SubscriberName>";
		}
	}
	return xmlText;
}

//submits XML request to the agent
function Submit_XMLRequest(request, agentName)
{
	//send the request to server
	var processUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/" + agentName  + "?OpenAgent";
	window.top.Docova.Utils.showProgressMessage("{%trans%}Processing request. Please wait{%endtrans%}...");
	var httpObj = new objHTTP();
	if(!httpObj.PostData(request, processUrl) || httpObj.status=="FAILED")
	{
		alert(httpObj.status);
		window.top.Docova.Utils.hideProgressMessage();
		return false;
	}
	window.top.Docova.Utils.hideProgressMessage();
	return (httpObj.results.length) ? httpObj.results[0] : true;
}

function RemoveMembers(){
	if(MembersView.objEmbView.hasData && MembersView.objEmbView.selectedEntries.length>0 )
	{	
		var removalwarning = false
		var tmpArray = new Array();
		tmpArray = MembersView.objEmbView.selectedEntries;
		
		for(i=0; i<tmpArray.length; i++){
			var entry = MembersView.objEmbView.GetEntryById(tmpArray[i])
			if(docInfo.UserNameAB == entry.GetElementValue("MemberName")){
				removalwarning = true
			}
		}
		if(removalwarning){
			removalwarningmsgtxt = "You have selected to remove yourself as a Library Administrator from this application/library." + "</b><br><br>Are you sure you want to continue?"
			var choice = window.top.Docova.Utils.messageBox({ 
			prompt: removalwarningmsgtxt, 
			icontype: 2, 
			title: "Remove Library Administration Access for yourself?", 
			width:450, 
			msgboxtype: 4,
			onNo: function() {return},
			onYes: function() {
			 	DoRemoveMembers(true);
			}
	 		});
		}else{
			DoRemoveMembers(false);
		}
	}else{
		window.top.Docova.Utils.messageBox({
			prompt: "Please select one or more member names to remove.",
			icontype: 1,
			msgboxtype: 0, 
			title: "Select Members.",
			width: 300
		})
		return;
	}	
}

function DoRemoveMembers(reloadwindow){
		var tmpArray = new Array();
		tmpArray = MembersView.objEmbView.selectedEntries;

		delmsgtxt = "You have chosen to remove member names from this application/library." + "</b><br><br>Do you wish to continue?"
		var choice = window.top.Docova.Utils.messageBox({ 
		prompt: delmsgtxt, 
		icontype: 2, 
		title: "Remove Members?", 
		width:400, 
		msgboxtype: 4,
		onNo: function() {return},
		onYes: function() {
			var agentName = "LibraryServices";
			//--build the remove memberrequest
			var request="";
			request += "<Request>";
           	request += "<Action>REMOVELIBRARYMEMBERS</Action>";
			request += "<UserName><![CDATA[" + docInfo.UserNameAB+ "]]></UserName>";
			request +="<LibKey>"+ docInfo.DocKey +"</LibKey>";
			for(var i=0; i < tmpArray.length ; i++) {
				var entry = MembersView.objEmbView.GetEntryById(tmpArray[i])
				if(entry){
					request +="<Member>";
						 request +="<MemberName><![CDATA[" + entry.GetElementValue("MemberName")  + "]]></MemberName>";
					request +="</Member>";
				}
			}		 
			 request += "</Request>";
			 //---submit request
			 var responseResult = Submit_XMLRequest(request, agentName);
			if(responseResult){
				RefreshMembers();
				if(reloadwindow){
					//if one of the removed members was the current user, who would be a Library Administrator, then reload the window
					window.top.location.reload();
				}
			}else{					
				window.top.Docova.Utils.messageBox({
							title: "Error Removing Library/Application Members",
							prompt: "An error occured while removing members, check event logs for error.",
							icontype: 1,
							msgboxtype: 0,
							width:300
				});
			}				 
		}
	 });
}//--end DoRemoveMembers

function ChangeMemberAccess(){
	if(MembersView.objEmbView.hasData && MembersView.objEmbView.selectedEntries.length>0 )
	{	
		var tmpArray = new Array();
		tmpArray = MembersView.objEmbView.selectedEntries;
		
		var result = window.top.Docova.Utils.selectKeyword({
			choicelist: "User;Library Administrator",
			windowtitle: "New Access Level",
			delegate: window,			
			oncomplete: function(data){
				var newaccess = data;
				changemsgtxt = "You have chosen to change the access level of the selected members to [" + newaccess +"]. Do you wish to continue?"
				var choice = window.top.Docova.Utils.messageBox({ 
				prompt: changemsgtxt, 
				icontype: 2, 
				title: "Change Member Access?", 
				width:400, 
				msgboxtype: 4,
				onNo: function() {return},
				onYes: function() {
					var agentName = "LibraryServices";
					//--build the remove memberrequest
					var request="";
					request += "<Request>";
          			request += "<Action>UPDATELIBRARYMEMBERS</Action>";
					request += "<UserName><![CDATA[" + docInfo.UserNameAB+ "]]></UserName>";
					request +="<LibKey>"+ docInfo.DocKey +"</LibKey>";
					for(var i=0; i < tmpArray.length ; i++) {
						var entry = MembersView.objEmbView.GetEntryById(tmpArray[i])
						if(entry){
							request +="<Member>";
						 	request +="<MemberName><![CDATA[" + entry.GetElementValue("MemberName")  + "]]></MemberName>";
						 	request +="<MemberAccess>" + newaccess + "</MemberAccess>";
							request +="</Member>";
						}
					}		 
			 		request += "</Request>";
					 //---submit request
					var responseResult=Submit_XMLRequest(request,agentName);
					if(responseResult){
						RefreshMembers();
					}else{					
						window.top.Docova.Utils.messageBox({
							title: "Error Changing Member Access",
							prompt: "An error occured while changing member access, check event logs for error.",
							icontype: 1,
							msgboxtype: 0,
							width:300
						});
					}	
				}
	 		});				
			}
		});
	}else{
		//thingFactory.MessageBox("Please select one or more member names that you wish to change the access level of.", 64, "Select Members:");
		window.top.Docova.Utils.messageBox({
			prompt: "Please select one or more member names that you wish to change the access level of.",
			icontype: 1,
			msgboxtype: 0, 
			title: "Select Members.",
			width: 300
		})
	}	
}//--end ChangeMemberAccess

function RefreshMembers(){
	MembersView.objEmbView.DeselectAllEntries();
	MembersView.objEmbView.Refresh(true,false,false); 
	MembersView.objEmbView.ResetHighlight();
	MembersView.EmbViewReload();
}//--end RefreshMembers

function CreateMember(){
	var dlgUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/dlgCreateMember?OpenForm";
	var dlgCreateMember = window.top.Docova.Utils.createDialog({
		id: "divDlgCreateMember", 
		url: dlgUrl,
		title: "Create Member",
		height: 320,
		width: 500,
		useiframe: true,
		sourcedocument: document,
		sourcewindow: window,
		buttons: {
			"Create": function() {
			var dlgDoc = window.top.$("#divDlgCreateMemberIFrame")[0].contentWindow.document
			var agentName = "LibraryServices";
			var mtype = $("input[name=nType]:checked", dlgDoc).val();
			//----- Validate for Person or Group and build request -----
			if(mtype == "Person"){
				//----- Validate for Person and build request -----
				var fn = $("#nFirstName", dlgDoc).val();
				var ln = $("#nLastName", dlgDoc).val();
				var email = $("#nEmail", dlgDoc).val();
				var un = $('#nUsername', dlgDoc).val();
				var pw = $("#nPassword", dlgDoc).val();
				var access = $("#nAccessLevel",dlgDoc).val();

				//-----Validate first name
				if(fn == ""){
					window.top.Docova.Utils.messageBox({
						prompt: "Please provide a First Name for this Member.",
						title: "Missing First Name",
						icontype: 1,
						width: 300
					});
					return;
				}
				//-----Validate last name
				if(ln == ""){
					window.top.Docova.Utils.messageBox({
						prompt: "Please provide a Last Name for this Member.",
						title: "Missing Last Name",
						icontype: 1,
						width: 300
					});				
					return;
				}
				//-----Validate pw
				if(pw == ""){
					window.top.Docova.Utils.messageBox({
						prompt: "Please provide a Password for this Member.",
						title: "Missing Password",
						icontype: 1,
						width: 300
					});
					return;				
				}
				//------Prompt for empty un
				if(un == ""){
					window.top.Docova.Utils.messageBox({
						prompt: "Combination of First Name and Last Name, which does not exist in DB, will be set as Username.",
						title: "Empty Username",
						icontype: 1,
						width: 300
					});
				}
				var request = "";
				request += "<Request>";
          		request += "<Action>ADDLIBRARYMEMBERS</Action>";
          		request += "<Register>1</Register>";
				request += "<UserName><![CDATA[" + docInfo.UserNameAB+ "]]></UserName>";
				request +="<LibKey>"+ docInfo.DocKey +"</LibKey>";
				request +="<Member>";
				request +="<MemberFirstName><![CDATA[" + fn + "]]></MemberFirstName>";
				request +="<MemberLastName><![CDATA[" + ln + "]]></MemberLastName>";
				request +="<MemberUsername><![CDATA[" + un + "]]></MemberUsername>";
				request +="<MemberEmail><![CDATA[" + email + "]]></MemberEmail>";
				request +="<MemberPassword><![CDATA[" + pw + "]]></MemberPassword>";				
				request +="<MemberType>" + mtype + "</MemberType>";
				request +="<MemberAccess>" + access + "</MemberAccess>";
				request +="</Member>";
				request += "</Request>";
			}
			if(mtype == "Group"){
				var gn = $("#nGroupName", dlgDoc).val();
				var gm = $("#nGroupMembers", dlgDoc).val().replace(/,/g, ":");
				var access = $("#nAccessLevel",dlgDoc).val();			    
				//-----Validate Group Name
				if(gn == ""){
					window.top.Docova.Utils.messageBox({
						prompt: "Please provide a Group Name for this Group.",
						title: "Missing Group Name",
						icontype: 1,
						width: 300
					});
					return;				
				}
				var request = "";
				request += "<Request>";
          		request += "<Action>ADDLIBRARYMEMBERS</Action>";
          		request += "<Register>1</Register>";
				request += "<UserName><![CDATA[" + docInfo.UserNameAB+ "]]></UserName>";
				request +="<LibKey>"+ docInfo.DocKey +"</LibKey>";
				request +="<Member>";
				request +="<GroupName><![CDATA[" + gn + "]]></GroupName>";
				request +="<GroupMembers><![CDATA[" + gm + "]]></GroupMembers>";							
				request +="<MemberType>" + mtype + "</MemberType>";
				request +="<MemberAccess>" + access + "</MemberAccess>";
				request +="</Member>";
				request += "</Request>";				    
			}

			var responseResult=Submit_XMLRequest(request,agentName);
			if(responseResult){
				RefreshMembers();
			}else{					
				window.top.Docova.Utils.messageBox({
					title: "Error Creating Members",
					prompt: "An error occured while creating a new member, check event logs for error.",
					icontype: 1,
					msgboxtype: 0,
					width:300
				});
			}	
			dlgCreateMember.closeDialog()
		},
		"Cancel": function() {
			dlgCreateMember.closeDialog()
		}
	}
	}) //--end dlgCreateMember dialog					
}

function EditMember(entryObj, docUrl){
	var docKey = entryObj.GetElementValue("docid");
	var membername = entryObj.GetElementValue("MemberName");
	var membertype = entryObj.GetElementValue("MemberType");
	var maintainedby = entryObj.GetElementValue("MaintainedBy");
	
	if(maintainedby == "DOCOVA" && membertype == "Group"){
		var agentName = "LibraryServices";
		var processUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/" + agentName  + "?OpenAgent"
		var request = "";
		request += "<Request>";
          request += "<Action>GETLIBRARYGROUPMEMBERS</Action>";
		request += "<UserName><![CDATA[" + docInfo.UserNameAB+ "]]></UserName>";
		request +="<GroupName><![CDATA[" + membername + "]]></GroupName>";
		request += "</Request>";
		
		request = encodeURIComponent(request);
		window.top.Docova.Utils.showProgressMessage("Processing request.  One moment...")
		
		$.ajax({
			type: "POST",
			url: processUrl,
			data: request,
			cache: false,
			async: false,
			dataType: "xml",
			success: function(xml){
				var xmlobj = jQuery(xml);
				var statustext = xmlobj.find("Result").first().text();
				if(statustext == "OK"){
					var memberlist = xmlobj.find("Result[ID=Ret1]").text();
					dlgParams.length = 0;
					dlgParams[0] = membername;
					dlgParams[1] = memberlist.replace(/:/g, ",");
					var dlgUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/dlgEditMember?OpenForm";
					var dlgEditMember = window.top.Docova.Utils.createDialog({
						id: "divDlgEditMember", 
						url: dlgUrl,
						title: "Edit Member",
						height: 300,
						width: 530,
						useiframe: true,
						sourcedocument: document,
						sourcewindow: window,
						buttons: {
       						"Update": function() {
									var dlgDoc = window.top.$("#divDlgEditMemberIFrame")[0].contentWindow.document
									var groupmembers = $("#nGroupMembers", dlgDoc).val().replace(/,/g , ":");

									var agentName = "LibraryServices";
									var request = "";
									request += "<Request>";
          							request += "<Action>UPDATELIBRARYGROUPMEMBERS</Action>";
									request += "<UserName><![CDATA[" + docInfo.UserNameAB+ "]]></UserName>";
									request +="<GroupName><![CDATA[" + membername + "]]></GroupName>";
									request +="<GroupMembers><![CDATA[" + groupmembers + "]]></GroupMembers>";							
									request += "</Request>";

									var responseResult=Submit_XMLRequest(request,agentName);	 	
									if (! responseResult ) {
										window.top.Docova.Utils.messageBox({
											title: "Error Updating Group Members",
											prompt: "An error occured while updating group members, check event logs for error.",
											icontype: 1,
											msgboxtype: 0,
											width:300
										});
									}				
									dlgEditMember.closeDialog();
        						},
							"Cancel": function() {
									dlgEditMember.closeDialog()
     						}
 						}
					}) //--end dlgEditMember dialog								
				}
				window.top.Docova.Utils.hideProgressMessage();
			},
			error: function(){
				window.top.Docova.Utils.hideProgressMessage();
			}
		}) //end ajax call
	}else{
		window.top.Docova.Utils.messageBox({
			title: "Member edit restrictions.",
			prompt: "Only Group Members maintained by DOCOVA can be edited.",
			icontype: 4,
			msgboxtype: 0,
			width: 400
		});
	}
}

// create XML request to add members for agent
function AddMembers(accesstype, membernames, updateaccess) {
	var delimiter = ",";
	var fieldName = "hiddenMembers";

	if(!accesstype && !membernames){
		jQuery(fieldName).val("");		
	}

	if(!accesstype){	
		window.top.Docova.Utils.selectKeyword({
			choicelist: "User;Library Administrator",
			windowtitle: "Member Access Level",
			delegate: window,
			oncomplete: function(accesslevel){
				AddMembers(accesslevel);
			}
		});
	}
	
	if(accesstype && !membernames){	
		window.top.Docova.Utils.showAddressDialog({
			"fieldname": fieldName, 
				"dlgtype": "multi",
				"title": "Member Selection",
				"separator": delimiter,
				"sourcedocument" : document,
				"returntypes": true,
				"cb": function(memberdata){
					if(memberdata){
						AddMembers(accesstype, memberdata);
					}
				}
			});		
	}
	
	if(accesstype && membernames){
	 	var agentName = "LibraryServices";
		var request = "";	
		request += "<Request>";
    		request += "<Action>ADDLIBRARYMEMBERS</Action>";
		request += "<UserName><![CDATA[" + docInfo.UserNameAB+ "]]></UserName>";
		request +="<LibKey>"+ docInfo.DocKey +"</LibKey>";
		if(updateaccess == false){
			request +="<UpdateAccess>" + updateaccess + "</UpdateAccess>"
		}		
 
 		var arrNames=membernames.split(delimiter);
	 	for (var x=0;x<arrNames.length;x++){
		 	var tempinfo = arrNames[x].split("|");
		 	request +="<Member>";
			request +="<MemberName><![CDATA[" + tempinfo[0]  + "]]></MemberName>";
			request +="<MemberType>" + (tempinfo[1] ? tempinfo[1] : "Unknown") + "</MemberType>";
			request +="<MemberAccess>" + accesstype + "</MemberAccess>";
			request +="</Member>";
	 	 }
		 request += "</Request>";

		var responseResult=Submit_XMLRequest(request,agentName);
		if(responseResult){
			RefreshMembers();
		}else{					
			window.top.Docova.Utils.messageBox({
				title: "Error Adding Members.",
				prompt: "An error occured while adding new library members, check event logs for error.",
				icontype: 1,
				msgboxtype: 0,
				width:300
			});
		}	
	}
	
}//--end AddMembers

//check if there is any data
function checkSubscriptionOnLoad(){
	var emptyNodeChk = subscribedUsers.XMLDocument.selectSingleNode("documents/h2");
	if (emptyNodeChk !=null){
		$('#trUserSubscription').addClass('hidden');
	}else{
		$('#trUserSubscription').removeClass('hidden');
	}
}

function loadSubscribedUsers()
{
	if (!$('#btnAddSubscriber').hasClass('hidden'))
	{
		if (subscribedUsers) {
			subscribedUsers.reload();
		}
		else {
			subscribedUsers = new xmlDataIsland();
			subscribedUsers.setSrc("{{ path('docova_admin_usersubscription') }}?RestrictToCategory={% if library is defined %}{{ library.getId }}{% endif %}&{{ 'now'|date('m/d/Y h:i:s A') }}");
			subscribedUsers.id = "xmlUserSubscription";
			subscribedUsers.setTemplateName( "otblSubscribedUsers");
			subscribedUsers.ondatasetcomplete = function() { checkSubscriptionOnLoad(); };
			//subscribedUsers.process();
		}
		$('#trUserSubscription').removeClass('hidden');
	}
	else {
		$('#trUserSubscription').addClass('hidden');
	}
}

function InitMembers() {
	MembersView = new EmbViewObject;
	MembersView.embViewID = "divMembers";	
	MembersView.captureEventDiv = "divMembersCapture";
	MembersView.perspectiveID = "xmlMembers";
	MembersView.lookupURL = docInfo.ServerUrl + "/" + docInfo.NsfName + "/LibraryMembers.xml?OpenPage&RestrictToCategory=" + docInfo.DocKey;
	MembersView.onRowClick = "EditMember";
	MembersView.maxHeight = "300";
	MembersView.fixedHeight = "";
	MembersView.imgPath = '{{ asset('bundles/docova/images/') }}';
	MembersView.idPrefix = "Members";
	MembersView.usejQuery = false;
	MembersView.EmbViewInitialize();
}
</script>
{% include 'DocovaBundle:Admin:sfWebAdminCommonFields.html.twig' with { 
	'document' : library, 
	'view_name' : 'wAdminLibraries', 
	'view_title' : 'Libraries', 
	'path_info' : path('docova_admin_readdocument', { 'view_name' : 'wAdminLibraries', 'doc_id' : library.getId }) ~ '?OpenDocument&ParentUNID=',
	'mode' : 'read' 
} %}
<style type="text/css">
#trUserSubscription TABLE {
	width: 100%;
	display: block;
	height: 114px;
	overflow: auto;
}
#otblSubscribedUsers {
	width: 100%;
	display: table;
}
#otblSubscribedUsers TD:hover {
	background-color: #E7E7E7;
}
#ChangeStatus {
	width: 110px;
}
.ui-icon-group {
	background-image: url('{{ asset('bundles/docova/images/icons/vwicn004.gif') }}') !important;
	background-position: center;	
}
</style>
</head>
<body scroll="no">
	<ul class="ui-widget-header actionBar hidetoload">
		{% if can_edit %}
		<a id="editBtn" href="{{ path('docova_admin_editdocument', { 'view_name' : 'wAdminLibraries', 'doc_id' : library.getId }) }}">{% trans %}Edit{% endtrans %}</a>
		{% endif %}
		<li id="closeBtn">{% trans %}Close{% endtrans %}</li>
	</ul>
	<div id="frmEmulator" class="hidetoload">
		<h3 class="adjusted headings1">{% trans %}Library Settings{% endtrans %}</h3>
		<div id="divFormContainer">
			<h3>{%trans%}General Settings{%endtrans%}</h3>
			<div>
				<table class="elmContainer" cellspacing="0">
					<tr>
						<td class="firstRw">{%trans%}Set Status{%endtrans%}:</td>
						<td class="firstRw">{% if not library.getStatus %}<b class="red">{%trans%}Off-Line{%endtrans%}</b>{% else %}<b class="green">{%trans%}On-Line{%endtrans%}</b>{% endif %}</td>
					</tr>
					<tr>
						<td>{%trans%}Title{%endtrans%}:</td>
						<td>{{ library.getLibraryTitle }}</td>
					</tr>
					<tr>
						<td>{% trans %}Source Template{% endtrans %}:</td>
						<td>{{ sourceTemplate }}</td>
					</tr>
					<tr>
						<td>{%trans%}Description{%endtrans%}:</td>
						<td>{{ library.getDescription|nl2br }}</td>
					</tr>
					<tr>
						<td>{%trans%}Library Key{%endtrans%}:</td>
						<td>{{ library.getId }}</td>
					</tr>
					<tr>
						<td>{%trans%}Recycle Bin retentions{%endtrans%}:</td>
						<td>{{ library.getRecycleRetention }} {%trans%}day(s){%endtrans%}</td>
					</tr>
					<tr>
						<td>{%trans%}Archive retention{%endtrans%}:</td>
						<td>{{ library.getArchiveRetention }} {%trans%}day(s){%endtrans%}</td>
					</tr>
					<tr>
						<td>{%trans%}Document Log retention{%endtrans%}:</td>
						<td>{{ library.getDocLogRetention }} {%trans%}day(s) after the document is permanently deleted.{%endtrans%}</td>
					</tr>
					<tr>
						<td>{%trans%}Event log retention{%endtrans%}:</td>
						<td>{{ library.getEventLogRetention }} {%trans%}day(s){%endtrans%}</td>
					</tr>
					<tr>
						<td>{%trans%}Applicable document types{%endtrans%}:</td>
						<td>{{ library.getApplicableDocType.count == 0 ? 'All'|trans : 'Selected'|trans }}</td>
					<tr>
					{% if library.getApplicableDocType.count > 0 %}
					<tr class="libDocTypes">
						<td class="firstRw exc"></td>
						<td class="firstRw exc">
						{% set applicableLibs = '' %}
						{% for item in library.getApplicableDocType %}
							{% set applicableLibs = applicableLibs ~ item.getDocName ~ ', ' %}
						{% endfor %}
						{% set applicableLibs = applicableLibs[:applicableLibs|length - 2] %}
						{{ applicableLibs }}
						</td>
					</tr>
					{% endif %}
					<tr>
						<td>{%trans%}Who can create folders at the library root level?{%endtrans%} 
							<span class="elNote">{%trans%}Leave blank for all{%endtrans%}</span>
						</td>
						<td>
						{% set folder_creator_users = '' %}
						{% if folder_creators is defined and folder_creators.count > 0 %}
							{% for item in folder_creators %}
							{% set folder_creator_users = ',' ~ item.getUserNameDnAbbreviated ~ folder_creator_users %}
							{% endfor %}
						{% endif %}
						{% if group_creators is defined and group_creators.count > 0 %}
							{% for item in group_creators %}
							{% set folder_creator_users = ',' ~ item.getDisplayName ~ folder_creator_users %}
							{% endfor %}
						{% endif %}
						{% set folder_creator_users = folder_creator_users|length > 0 ? folder_creator_users[1:] : '' %}
						{{ folder_creator_users }}
						</td>
					</tr>
					<tr>
						<td>
							{% trans %}Library Administrators{% endtrans %}:
							<span class="elNote">{%trans%}System Administrators will still have access.{%endtrans%}</span>
						</td>
						<td>
						{% set admin_users = '' %}
						{% if libadmin_users is defined and libadmin_users|length > 0 %}
							{% for item in libadmin_users %}
							{% set admin_users = ',' ~ item.getUserNameDnAbbreviated ~ admin_users %}
							{% endfor %}
						{% endif %}
						{% if libadmin_groups is defined and libadmin_groups.count > 0 %}
							{% for item in libadmin_groups %}
							{% set admin_users = ',' ~ item.getDisplayName ~ admin_users %}
							{% endfor %}
						{% endif %}
						{% set admin_users = admin_users|length > 0 ? admin_users[1:] : '' %}
						{{ admin_users }}
						</td>
					</tr>
					<tr>
						<td>{%trans%}Community{%endtrans%}</td>
						<td>{{ library.getCommunity }}</td>
					</tr>
					<tr>
						<td>{%trans%}Realm{%endtrans%}</td>
						<td>{{ library.getRealm }}</td>
					</tr>
					<tr>
						<td>{%trans%}Public Access{%endtrans%}
						   <span class="elNote">{%trans%}Allows users to share files with external users.{%endtrans%}</span>
						</td>
						{%  if library.getPublicAccessEnabled is defined and library.getPublicAccessEnabled %}
							<td>
							   Public Access Enabled<br/>
							   <span class="elNote">Default Expiration:</span>
							   {%  if library.getPublicAccessExpiration is defined %}							   		
							   		{{ library.getPublicAccessExpiration }}
							   {%  else %}
							        1
							   {%  endif %}
							   <span class="elNote">(days)</span>
							</td>
						{%  else %}
						    <td>Public Access Disabled</td>
						{%  endif %}
					</tr>				
					<tr>
						<td>{% trans %}Display Documents in Folder List{% endtrans %}</td>
						<td>{{ library.getLoadDocsAsFolders ? 'Yes'|trans : '' }}</td>
					</tr>
					<tr>
						<td>{% trans %}Enable Use as a Template{% endtrans %}:</td>
						<td>{{ library.getIsTemplate ? 'Yes'|trans ~ ' / '~ 'Allow use as a template for new libraries'|trans : '' }}</td>
					</tr>
					<tr>
						<td>{%trans%}Doc compare file source{%endtrans%}</td>
						<td>
							<span>{{ library.getCompareFileSource }}</span> 
						</td>
					</tr>
					<tr>
						<td>{%trans%}Compare Documents{%endtrans%}:</td>
						<td> 
							{% if not library.getPDFCreatorRequired %}
							<span>{%trans%}PDF Creator not required for document comparison{%endtrans%}</span>
							<span class="notRequirePDF elNote">{%trans%}Comparison results will be displayed in Word and printing will not be controlled.{%endtrans%}</span>
							{% else %}
							<span>{%trans%}Require PDF Creator to be installed for document comparison{%endtrans%}</span>
							<span class="requirePDF elNote">{%trans%}Comparison results will be converted to PDF for display. If run from a folder, the ability to print the PDF comparison results will be disabled. If run from within a document, the ability to print the PDF comparison results is controlled by the Restrict Printing option for the document type.{%endtrans%}</span>
							{% endif %}
						</td>
					</tr>
				</table>
			</div>

			<h3>{% trans %}Access Control{% endtrans %}</h3>
			<div>
				<table class="elmContainer">
					<tr>
						<td class="firstRw">{% trans %}Access Control{% endtrans %}:</td>
						<td class="firstRw">{{ library.getMemberAssignment ? 'Assign Membership'|trans : 'Default'|trans }}</td>
					</tr>
					<tr>
						<td>{% trans %}Library specific org unit{% endtrans %}</td>
						<td>{{ library.getLibraryDomainOrgUnit }}</td>
					</tr>
					{% if can_edit %}
					<tr style="display:{{ library.getMemberAssignment ? '' : 'none' }}">
						<td colspan="2">
							<button id="btn-AddMember" class="btnStandard"></button>&nbsp;
							<button id="btn-CreateMember" class="btnStandard" style="{{ settings.getUserProfileCreation ? '' : 'none;' }}"></button>&nbsp;
							<button id="btn-DeleteMember" class="btnStandard"></button>&nbsp;
							<button id="btn-ChangeMemberAccess" class="btnStandard"></button>
						</td>
					</tr>
					{% endif %}
					<tr style="display:{{ library.getMemberAssignment ? '' : 'none' }}">
						<td colspan="2">
							<span class="elNote" style="padding-top: 2px; padding-bottom: 2px;">{% trans %}Save this page and re-open in read mode in order to update members.{% endtrans %}</span>
							<!--- Embedded view perspective----->
	   						<script id="xmlMembers" type="text/xml"><viewperspective><type>system</type><id>system_default_folder</id><Unid/><name>Built-in perspective</name><description/><createdby/><createddate/><modifiedby/><modifieddate/><autocollapse>0</autocollapse><viewsettings><viewproperties><showSelectionMargin>1</showSelectionMargin><allowCustomization>1</allowCustomization><extendLastColumn>1</extendLastColumn><isSummary/><isThumbnails/><categoryBorderStyle>border-bottom : solid 2px #aaccff;</categoryBorderStyle></viewproperties><columns><column><title>{% trans %}Member Name{% endtrans %}</title><xmlNodeName>MemberName</xmlNodeName><sortOrder>ascending</sortOrder><width>120</width></column><column><title>{% trans %}Type{% endtrans %}</title><xmlNodeName>MemberType</xmlNodeName><width>50</width></column><column><title>{% trans %}Access{% endtrans %}</title><xmlNodeName>MemberAccess</xmlNodeName><width>100</width></column><column><title>{% trans %}Maintained By{% endtrans %}</title><xmlNodeName>MaintainedBy</xmlNodeName><width>80</width></column></columns></viewsettings></viewperspective></script>
							<div id="divMembersCapture">
								<!--- BEGIN Embedded view contents---->
	      						<div id="divMembers" style="display:none; background-color:white;width:100%; padding: 0px; margin: 0px;overflow: auto; overflow-x: hidden;" ></div>
								<!--- END Embedded view contents----->
							</div>
							<!--- Empty Embedded view message----->
							<div id="nodivMembers" style="display: none; padding:5px;">{% trans %}No members assigned.{% endtrans %}</div>
						</td>
					</tr>
				</table>
			</div>

			<h3>{%trans%}Subscriptions{%endtrans%}</h3>
			<div>
				<table class="elmContainer">
					<tr>
						<td class="firstRw">{%trans%}Current Subscribers{%endtrans%}:</td>
						<td class="firstRw">
							<input type="hidden" id="hiddenUserSubscription" value="" />
							<button id="btnAddSubscriber">{%trans%}Add Subscribers{%endtrans%}</button>
							<span class="elNote">({%trans%}When Adding Subscribers, only pick individual's names, not groups{%endtrans%})</span>
						</td>
					</tr>
					<tr>
						<td class="hdr" colspan="2">{%trans%}Subscriber Name{%endtrans%}</td>
					</tr>
					<tr id="trUserSubscription">
						<td class="firstRw exc" colspan="2">
							<script type="text/xml" id="xmlUserSubscription"></script>
							<table datasrc="#xmlUserSubscription" cellpadding="0">
							<tbody id="otblSubscribedUsers">
								<tr>
									<td class="firstRw exc" datafld="SubscriberName">&nbsp;</td>
								</tr>
							</tbody>
							</table>
						</td>
					</tr>
					<tr>
						<td>{%trans%}Subscription Restrictions{%endtrans%}:</td>
						<td>
							<span class="elNote">{%trans%}Only the following users can subscribe to this library (blank allows all){%endtrans%}:</span> 
							{% set restricted_users = '' %}
							{% if restrictions is defined and restrictions.count > 0 %}
								{% for item in restrictions %}
								{% set restricted_users = (',' ~ item.getUserNameDnAbbreviated ~ restricted_users) %}
								{% endfor %}
							{% endif %}
							{% if group_restrictions is defined and group_restrictions.count > 0 %}
								{% for item in group_restrictions %}
								{% set restricted_users = ',' ~ item.getDisplayName ~ restricted_users %}
								{% endfor %}
							{% endif %}
							{% set restricted_users = restricted_users|length > 0 ? (restricted_users[1:]) : '' %}
							{{ restricted_users|raw }}
						</td>
					</tr>
				</table>
			</div>
			
			<h3>{%trans%}Comments{%endtrans%}</h3>
			<div>
				<table class="elmContainer">
					<tr>
						<td class="firstRw">{%trans%}Library comments{%endtrans%}:</td>
						<td class="firstRw">
							{{ library.getComments|nl2br }}
						</td>
					</tr>
				</table>
			</div>
		</div>
	</div>
</body>
</html>