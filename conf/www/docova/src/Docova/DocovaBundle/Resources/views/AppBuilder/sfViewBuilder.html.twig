<!doctype html>
<html>
<head>
<META content="0" http-equiv="expires">
<META content="0" http-equiv="cache-control">
<META content="no-cache" http-equiv="Pragma">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/smoothness-flat/jquery-ui.css') }}">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/admin/styleAppBuilder.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/font-awesome/css/all.min.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/css/styleFolderBase.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/css/multiselect.css') }}">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/styleViewIcons.css') }}" type="text/css" />
{% include 'DocovaBundle:Default:scriptMessagesTranslation.html.twig' %}
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/commonFunctions.js') }}" charset="UTF-8"></script>
<script type="text/javascript" language="JavaScript" src="{{ asset('bundles/docova/js/Docova.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/docova/jquery/jquery.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/docova/jquery/jquery-ui.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/sarissa.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/sarissa_ieemu_xpath.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/DesignImportFunctions.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/viewObjects.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/jquery/jqueryLayouts.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/jquery/jquery.sorttable.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/ace/src-noconflict/ace.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/multiselect.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/admin/appBuilderJS.js') }}"></script>
<script type="text/javascript" language="JavaScript" src="{{ asset('bundles/docova/js/admin/sfWorkspaceCommonJsHeader.js') }}"></script>
<script type="text/javascript" language="JavaScript" src="{{ asset('bundles/docova/js/FormulaLanguage.js') }}"></script>
{% if appView %}
	{% set cssFile = appView.getViewName|replace({' ':'', ':':''}) %}
	<link rel="stylesheet" type='text/css' href="{{ asset('bundles/docova/css/custom/'~ app.request.query.get('AppID') ~'/views/' ~ cssFile ~ '.css' ) }}" />
{% endif %}
<script language="JavaScript" type="text/javascript">
var MembersView = null; //embedded view object
var dlgParams = new Array();  //params array that gets used by dialogs
var retValues = new Array(); //ret params array that can be used by dialogs
var curSelFrame;
var curColumnObj;
var curSelAction;
var editor;
var custcssdelm = '/*--CustomCSS--*/';
var editorcss;
var currManualEntry;
var csstylestring = "";
var responseColumnSet = false;
//blurTrack var is used on .inputEntry on keyup and on blur in document ready because when hitting the enter key 
//on a field that has an .inputEntry class, the objView.Refresh(false, true, false) in setProperties causes a blur on the field
//which would cause the setProperties to run again.
var blurTrack = 0;  
var defaultVal = null; //hold last val for.inputEntry class fields
var info = {
  "DocID" : "{{ appView ? appView.getId : ''}}",
  "DocKey" : "{{ appView ? appView.getId : ''}}",
  "DocumentNumber" : "",
  "SystemKey" : "{{ settings.getSystemKey}}",
  "ThreadKey" : "{{ appView ? appView.getId : ''}}",
  "ServerName" : "{{ app.request.server.get('HTTP_HOST') }}",
  "NsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
  "ServerUrl" : "{{ app.request.getscheme }}://{{ app.request.server.get('HTTP_HOST') }}",
  "PortalWebPath" : "{{ url('docova_homepage') }}",
  "PortalNsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
  "IsNewDoc" : "{{ appView ? '': '1' }}",
  "isDocBeingEdited" : "true",
  "ArchiveNsfName" : "",
  "SessionDateFormat" : "{{ settings.getDefaultDateFormat|lower|replace({'yyyy':'yy'}) }}",
  "AppID":"{{ application.getId }}"	
};
function getinfovar(){
   return info;
}
InitVars(info);

var dp = "<viewperspective><type>system</type><id>system_default_folder</id><Unid/><name>Built-in perspective</name><description/><createdby/><createddate/><modifiedby/><modifieddate/><autocollapse>0</autocollapse><isSummary/><showSelectionMargin>1</showSelectionMargin><allowCustomization>1</allowCustomization><extendLastColumn/><categoryBorderStyle>border-bottom : solid 2px #aaccff;</categoryBorderStyle><viewsettings><columnsscript></columnsscript><columns></columns></viewsettings></viewperspective>";

var viewcss = '/* Alternating rows color */\r\n#VDataTable tbody tr:nth-child(even) {background: #eff0f0}\r\n/*-- column selection header cell --*/\r\nTD.listselheader {\r\n';
viewcss += '\tbackground-color: #a9a9a9;\r\n\tcolor: #ffffff;\r\n\tpadding: 8px;\r\n\tborder-right: 1px solid #ffffff;\r\n}';
viewcss += '\r\n\r\n/*-- column header cell --*/\r\nTD.listheader {\r\n\tbackground-color: #a9a9a9;\r\n\tcolor: #ffffff;\r\n\tpadding: 8px;\r\n\tborder-right: 1px solid #ffffff;\r\n}';
viewcss += '\r\n\r\n/*-- cell --*/\r\nTD.listitem {\r\n\tpadding: 8px;\r\n\tborder-bottom: 1px solid #f0f0f0;\r\n}';
viewcss += '\r\n\r\n/*-- selection cell --*/\r\nTD.listsel {\r\n\tpadding: 8px;\r\n\tborder-bottom: 1px solid #f0f0f0;\r\n}';
viewcss += '\r\n\r\n.viewexpandcollapse {\r\n\tcolor:#6d6666;\r\n\tfont-size:14px\r\n}';

$(document).ready(function(){

	$("#inner-center").click(function(event){
		event.preventDefault();
		$("#updateButtons").css("display", "none");
	})
	
	//handle when the action type of a action button is changed
	$("#ActionType").change( function() {
		if ( $(this).val() == "CreateNewDocument" ) {
			$("#FormLabel").css("display", "")
			$("#ActionDocType").show();
		} else if ($(this).val() == 'SaveGantt') {
			$("#FormLabel").css("display", 'none');
			$("#ActionDocType").hide();
			if($("#ActionLabel").val() == "Action"){ //only change Action button label on change of ActionDocType if it is using the default label of Action
				$("#ActionLabel").val('Save Gantt');
			}
			$("#ActionLeftIcon").val('fal fa-project-diagram');
			var strOnClick = 'saveGanttOnServer(); return false;';
			$("#ActionOnClick").val(strOnClick);
			setProperties();
		} else {
			$("#FormLabel").css("display", "none");
			$("#ActionDocType").hide();
		}
	});
	
	if ( $("#ActionType").val() == "CreateNewDocument"){ 
		$("#ActionDocType").show();
	}else{
		$("#ActionDocType").hide();
	}		
	$("#ActionDocType").change(function() {
		if($("#ActionLabel").val() == "Action"){ //only change Action button label on change of ActionDocType if it is using the default label of Action
			$("#ActionLabel").val("Create " + $(this).val());
		}
		$("#ActionLeftIcon").val("ui-icon-document")
		var strOnClick = "Docova.compose({ formname: '" + $(this).val() + "' })"
		$("#ActionOnClick").val(strOnClick)
		setProperties();
	});
		
	$("#ActionType").change(function(){
		setProperties();
	});

	$("#tabs").tabs({
		beforeActivate: function(event, ui){ //hide update buttons when tabs are changed
			$("#updateButtons").css("display", "none");
		}
	});		

	 var is_firefox = navigator.userAgent.indexOf('Firefox') > -1;

	 if  ( is_firefox){
		$("#catIcon").attr("multiple", "1");
	}


	//calendar and gantt support
	//$('[href="#tabs-v2"]').closest('li').hide();
	$('[href="#tabs-v2"],[href="#tabs-v3"]').closest('li').hide();
	if($("#Calendar").prop("checked")) {
		$('[href="#tabs-v2"]').closest('li').show();
	}else if($("#Gantt").prop("checked")) {
		$('[href="#tabs-v3"]').closest('li').show();
	}
		
	$("input[name=ViewType]").click(function(){
		if($("#Calendar").prop("checked")) {
			if(confirm("{% trans %}This will convert your view columns to calendar style. Some column formatting may be lost.  Do you wish to continue?{% endtrans %}")){
				$("#ViewType").val("Calendar");
				switchColumnsToCalendar();		
			}else{
				$("#Calendar").prop("checked", false);
				$("#Standard").prop("checked", true);
				$("#ViewType").val("Standard");													
			}
		} else if($("#Gantt").prop("checked")) {
			if(confirm("{% trans %}This will convert your view columns to gantt style. Existing column definitions will be lost.  Do you wish to continue?{% endtrans %}")){
				$("#ViewType").val("Gantt")			
				switchColumnsToGantt();		
			}else{
				$("#Gantt").prop("checked", false);
				$("#Standard").prop("checked", true);
				$("#ViewType").val("Standard");													
			}			
		}else{
			$("#ViewType").val("Standard")							
		}								
		updateControlVisibility();	
	}); 
	
	//handle when the resource type of a action button is changed
	$("[name=GanttResourceType]").change( function() {
		var rtval = $("[name=GanttResourceType]:checked").val();
		if ( rtval == "M" ) {
			$("#dispGanttResourceOptions").css("display", "")
			$("#dispGanttResourceFormula").css("display", "none");
		}else if ( rtval == "F" ) {
			$("#dispGanttResourceOptions").css("display", "none")
			$("#dispGanttResourceFormula").css("display", "");	   			
		}else{
			$("#dispGanttResourceOptions").css("display", "none")
			$("#dispGanttResourceFormula").css("display", "none");	   		
		}
	});		
	//end calendar and gantt support	

	$("#tabsView").tabs({
		beforeActivate: function(event, ui){ //hide update buttons when tabs are changed
			$("#updateButtons").css("display", "none");
		}
	});
	$("#tabsViewAction").tabs({
		beforeActivate: function(event, ui){ //hide update buttons when tabs are changed
			$("#updateButtons").css("display", "none");
		}
	});
	
	if  (!$("#UseContentPaging").is(":checked") ){
			$("#MaxDocCount").attr("disabled", "disabled" );
	}
		
	$("#UseContentPaging").change( function() { 
		if  ( $(this).is(":checked") )
			$("#MaxDocCount").removeAttr("disabled")
		else
			$("#MaxDocCount").attr("disabled", "disabled" );
	});

	var all$$funcs =  getAll$$Functions();
	$('span.longtext_values').on('click', function() {
		var $this = $(this);
		var target = $this.attr('target');
		var value = $('#'+target).val();
		if ($.trim(value) != '') {
			$('#divMultiLinePopup #multilineinput').text(value);
		}
		else {
			value = '';
			$('#divMultiLinePopup #multilineinput').text('');
		}
		var html = $('#divMultiLinePopup').html();
		var dlgTextInput = window.top.Docova.Utils.createDialog({
			id: "divDlgMultiLineInput",
			title: "{% trans %}Enter Script/Value{% endtrans %}",
			height: 313,
			width: 800,
			dlghtml: html,
			resizable: true,
			sourcewindow: window,
			sourcedocument: document,
			onOpen : function()
			{
				var obj = $("#divDlgMultiLineInput #docova_formula_helper" , window.top.document);
				var dlg = $("#divDlgMultiLineInput", window.top.document);
				var tbox = $("#divDlgMultiLineInput #multilineinput", window.top.document);
				var btn = $("#divDlgMultiLineInput #btnInsertFormula", window.top.document);
				obj.autocomplete({
  					source: all$$funcs,
  					appendTo: dlg,
  					open: function() {
  						$("#divDlgMultiLineInput ul.ui-menu", window.top.document).width( $(this).innerWidth() ); 
  						$("#divDlgMultiLineInput ul.ui-menu", window.top.document).height( dlg.height() -30 ); 
  						$("#divDlgMultiLineInput ul.ui-menu", window.top.document).css("overflow-x", "hidden")
  					},
  					select : function(e, ui) {
  	  					if ($.trim(ui.item.value) != '')
  	  	  				{
      						if (tbox.val() != "" ){
      				  			tbox.val(tbox.val() + "\n" + $.trim(ui.item.value));
      				  		}else{
      				  			tbox.val($.trim(ui.item.value));
      				  		}
  	  	  				}
  	  				}
				});

				btn.on('click', function()
				{
					if ( trim(obj.val()) == "" ) return;

					if ( tbox.val() != "" ){
			  			tbox.val(tbox.val() + "\n" + $.trim(obj.val()));
			  		}else{
			  			tbox.val($.trim(obj.val()));
			  		}
				});
			},
			buttons: {
				"{% trans %}OK{% endtrans %}": function (){
					var tbox = $("#divDlgMultiLineInput #multilineinput", window.top.document);
					var input_value = tbox.val();
					$('#'+target).val(input_value);
					$this.text(input_value);
					setProperties();
					dlgTextInput.closeDialog();
				},
				"{% trans %}Cancel{% endtrans %}": function(){
					dlgTextInput.closeDialog();
				}
			}
		});
	});
	
	$( "#btn-PrimaryIcon" ).button({
		text: false,
		label: "{% trans %}Select primary icon{% endtrans %}",
		icons: {primary: "ui-icon-squaresmall-plus"}
	})
	.click(function( event ) {
		event.preventDefault();
		selectIcon("ActionLeftIcon");
	});

	$( "#btn-applycss" ).button({
		text: false,
		label: "{% trans %}Apply CSS{% endtrans %}",
		icons: {primary: "ui-icon-squaresmall-plus"}
	})
	.click(function( event ) {
		event.preventDefault();
		var csstxt = editorcss.getValue ();
		addcss(csstxt);
	});
	
	$( "#btn-SecondaryIcon" ).button({
		text: false,
		label: "{% trans %}Select secondary icon{% endtrans %}",
		icons: {primary: "ui-icon-squaresmall-plus"}
	})
	.click(function( event ) {
		event.preventDefault();
		selectIcon("ActionRightIcon");
	});
		
	$("#EmulateFolder").click(function(){
		if ( $(this).prop("checked") ){ 
			$("#ViewSelectionFormula").closest("tr").hide();
			$("#spanPrivateOnFirstUse").show();				
			$("#lblPrivateOnFirstUse").show();
		}else{
			$("#ViewSelectionFormula").closest("tr").show();
			$("#spanPrivateOnFirstUse").hide();								
			$("#lblPrivateOnFirstUse").hide();					
		}
	});

	if ($('#SelectionForm').is(':visible')) {
		if ($('#SelectionForm').val())
		{
			var query = "SELECT Form = '" + $('#SelectionForm').val() + "'";
			$('#ViewSelectionFormula').val(query);
			$('span[target=ViewSelectionFormula]').html(query);
			$('#cmbColumnFormsList').val($('#SelectionForm').val());
			$('#clFormsList').hide();
			resetFormFields($('#SelectionForm').val(), $('#clFormColumns'));
		}
	}

	$('input[name=ViewSelectionType]').on('click', function(){
		if ($('#ViewSelection' + $(this).val()).is(':hidden')) {
			$('TR[id^=ViewSelection]').hide();
			$('#ViewSelection' + $(this).val()).show();
			if ($(this).val() == 'F' && $('#SelectionForm').val()) {
				$('#cmbColumnFormsList').val($('#SelectionForm').val());
				$('#clFormsList').hide();
				resetFormFields($('#SelectionForm').val(), $('#clFormColumns'));
			}
		}
	});

	$('input[name=clEntryType]').on('click', function(){
		$('#clFormColumns').val('- Select -');
		if ($('#clEntryType' + $(this).val()).is(':hidden')) {
			$('TR[id^=clEntryType]').hide();
			$('#clEntryType' + $(this).val()).show();
		}
	});

	$('#cmbColumnFormsList').on('change', function(){
		resetFormFields($(this).val(), $('#clFormColumns'));
	});

	$('#clFormColumns').on('change', function(){
		$('#ColumnFormula').val($(this).val());
		$('span[target=ColumnFormula]').text($(this).val());
	});

	$('#SelectionForm').on('change', function(){
		if ($(this).val())
		{
			var query = "SELECT Form = '" + $(this).val() + "'";
			$('#ViewSelectionFormula').val(query);
			$('span[target=ViewSelectionFormula]').html(query);
			$('#cmbColumnFormsList').val($(this).val());
			$('#clFormsList').hide();
			resetFormFields($(this).val(), $('#clFormColumns'));
		}
	});
	
	if($("#EmulateFolder").prop("checked") ){ 
		$("#ViewSelectionFormula").closest("tr").hide();			
	}else{
		$("#spanPrivateOnFirstUse").hide();						
		$("#lblPrivateOnFirstUse").hide();					
	}
				
	$("#ShowResponses").click(function(){
		if ($(this).prop("checked")) {
			responseColumnSet = true; 
			$("#ResponseFormula").removeAttr("disabled");
		}
		else {
			responseColumnSet = false;
			$("#ResponseFormula").attr("disabled", "disabled");
		}
	});

	$('#divViewContent TABLE.listtable').sorttable({
		placeholder: 'placeholder',
		helperCells: null,
		cursor: 'move',
		update: function(event, ui) {
			updateColumnIndexes();
		}
	})
	.disableSelection();

	//Initialize ACE editor
	editor = ace.edit("JSHeaderCode");
	editor.setTheme("ace/theme/chrome");
	editor.getSession().setMode("ace/mode/javascript");
	editor.setOptions({
     	"maxLines" : Infinity,
     	"showPrintMargin" : false
	});

	//Initialize ACE editor
	editorcss = ace.edit("CSSCode");
	editorcss.setTheme("ace/theme/chrome");
	editorcss.getSession().setMode("ace/mode/css");
	editorcss.setOptions({
     	"maxLines" : Infinity,
     	"showPrintMargin" : false
	});

	var csstxt = $("#viewCSSTxt").html();

	if ( csstxt != "" ){
		readCSSStyleString(csstxt);
	}else{
		//editorcss.setValue ( viewcss);
	}
	
	
	var tmp = $("#viewJavascriptTxt");
	var jscode = decodeURIComponent(atob(tmp.html()));
	if(jscode==""){
		var defaultCode = [];
		defaultCode.push("function Postopen() {");   					
		defaultCode.push("    //perform any post open operations here");
		defaultCode.push("}");
		defaultCode.push("");		
		defaultCode.push("function Queryopendocument() {");
		defaultCode.push("    var return_queryopendocument = true;");
		defaultCode.push("    //change return_queryopendocument to false to stop opening of document");
		defaultCode.push("    return return_queryopendocument;");
		defaultCode.push("}");
		defaultCode.push("");
		defaultCode.push("function Querydocumentdelete() {");
		defaultCode.push("    var return_querydocumentdelete = true;");
		defaultCode.push("    //change return_querydocumentdelete to false to stop deletion of document(s)");
		defaultCode.push("    return return_querydocumentdelete;");
		defaultCode.push("}");
		defaultCode.push("");		
		defaultCode.push("function Querypaste() {");
		defaultCode.push("    var return_querypaste = true;");
		defaultCode.push("    //change return_querypaste to false to stop pasting of documents");
		defaultCode.push("    return return_querypaste;");
		defaultCode.push("}");
		defaultCode.push("");		
		defaultCode.push("function Postpaste() {");   					
		defaultCode.push("    //perform any post document paste operations here");
		defaultCode.push("}");
		defaultCode.push("");
		jscode = defaultCode.join("\r\n");	
	}
	editor.setValue (jscode);
	editor.clearSelection();
	 
	$(".ui-layout-center").resizable({
		handles: 's',
 		ghost: true,
 		resize:function ( e,ui ){
 			$(".ui-resizable-helper ").css("border-bottom", " 8px solid  rgb(221,221,221)");
 		},
 		stop: function(e, ui){
			resizePanelVertical(ui);
			resetUpdateButtons();
		}
	});
	
	$(window ).resize(function(e) {
		e = e || event;
		if (e.target == window) {
		
  			$("#inner-center").height ( ($("#divContentSection").height() - $(".ui-layout-south").outerHeight())-10  );
  			$('#divViewContent').height($("#inner-center").height() - 40);
			resetUpdateButtons();
		}
	});
	
	$(".ui-layout-south").height("450px");
	$("#inner-center").height ( ($("#divContentSection").height() - $(".ui-layout-south").outerHeight())-10  );
	$('#divViewContent').height($("#inner-center").height() - 40);
	
 	//---Hide/When---
	$("[name=HideWhen]").on("change", function(){
		if(Docova.Utils.getField("HideWhen").indexOf("C") != -1){
			$("#spanCustomHideWhen").css("display", "")
		}else{
			$("#spanCustomHideWhen").css("display", "none")
			$("#CustomHideWhen").val("");
		}
		writeActionProperties();
	//	$(currElem).attr("hidewhen", Docova.Utils.getField("HideWhen"))
	//	$(currElem).attr("customhidewhen", $("#CustomHideWhen").val());
	});
	
	ViewLoadDefaultPerspective();
 	$("#btnAddColumn").button({
 		icons: { primary: "ui-icon-arrowthick-1-sw" },
 		label: "{% trans %}Insert Column{% endtrans %}",
 		text: false
	}).click(function(event){
		event.preventDefault();
		InsertAppendEditColumn("insert");
	});
			
	$("#btnAppendColumn").button({
		icons: { primary: "ui-icon-arrowthickstop-1-w" },
		label: "{% trans %}Append Column{% endtrans %}",
		text: false
	}).click(function(event){
		event.preventDefault();
		InsertAppendEditColumn("append");
	});
			
	$("#btnDeleteColumn").button({
		icons: { primary: "ui-icon-close" },
		label: "{% trans %}Delete Column{% endtrans %}",
		text: false
	}).click(function(event){
		event.preventDefault();
		InsertAppendEditColumn("delete");
	});
			
	$("#btnAddAction").button({
		icons: { primary: "ui-icon-plus" },
		label: "{% trans %}Add Action{% endtrans %}",
		text: false
	}).click(function(event){
		event.preventDefault();
		InsertAction("Add");
	});

	$("#btnDeleteAction").button({
		icons: { primary: "ui-icon-close" },
		label: "{% trans %}Delete Action{% endtrans %}",
		text: false
	}).click(function(event){
		event.preventDefault();
		DeleteAction()
	});
			
	$("#btnPreview").button({
		icons: { primary: "ui-icon-image" },
		label: "{% trans %}Preview{% endtrans %}",
		text: false
	}).click(function(event){
		event.preventDefault();
		doPreview();
	});
	
	hookColumnResize()
	$("#inner-center, #northpanel").click(function(event) {
    	if ( $(event.target).attr("hasProperties") == "true"  && !  $(event.target).hasClass("listselheader") ) 
    	{
    		$(tabsView).hide();
    		$(tabs).show();
    		$(tabsViewAction).hide();
    		$("td[isSelected='1']").css("border", "").attr("isSelected", "");
    		$(event.target).css("border", "2px dashed black");
    		$(event.target).attr("isSelected", "1" );
    
    		var colNo = $(event.target).attr("colidx");
    		curColumnObj = objView.columns[colNo];

    		$('#divViewContent TABLE.listtable').sorttable({
    			placeholder: 'placeholder',
    			helperCells: null,
    			cursor: 'move',
    			update: function(event, ui) {
        			updateColumnIndexes();
    			}
    		})
    		.disableSelection();
    		ReadColumnProperties();
    	
    	}else{
    		$("td[isSelected='1']").css("border", "").attr("isSelected", "");
    		$(tabsView).show();
    		$(tabs).hide();
    		$(tabsViewAction).hide();
    	}
	});
	
	handleToolbarButtons()
	//---update buttons for manual attribute/prop updates initially hidden---
	$("#updateButtons").css("display", "none");
	$(".manualEntry").focus( function(event){
		$("#updateButtons").css("display", "");
		$(this).prop("defaultValue", $(this).val());
		currManualEntry = $(this);
		var posleft = parseInt($(this).offset().left, 10) + parseInt($(this).outerWidth(),10);
		var postop = parseInt($(this).offset().top, 10) + 3;
		$("#updateButtons").offset({
			left: posleft,
			top: postop
		})
	}).blur(function(event){
		$("updateButtons").hide();
	});


	$("[name='RespHierarchy']").on('change', function (){
		if ( $(this).val() == "0"){
			for ( var p =0; p < objView.columns.length; p ++){
				 var col = objView.columns[p];
				 col.showResponses = 0;
				 col.responseFormula = "";
			}
		}
	})
	
	$(".inputEntry").on('keypress', function(e) {
		if (e.keyCode == 13) {
			var inputs = $('form[name=_NotesView]').find(":input:visible");
			var idx = inputs.index(this);

			if (idx == inputs.length - 1) {
				inputs[0].select()
			} else {
				inputs[idx + 1].focus();
				inputs[idx + 1].select()
			}
			return false;
		}
	})
	.on('focus', function(e) {
		if (typeof $(this).val() == typeof undefined) {
			defaultVal = '';
		}
		else {
			defaultVal = $(this).val();
		}
	})
	.on ('blur', function(e){
		if ($(this).val() != defaultVal) {
       		$(this).effect("highlight", {color: "#008000"}, 1000);
    		setProperties();
		}
		defaultVal = null;
	});

	var prevcssstyle = "";
	$("#viewstyletype").on('focus', function () {
        // Store the current value on focus and on change
        prevcssstyle = this.value;
    }).change(function() {
    	
       updateCSS(prevcssstyle);
    });
	
	$("#btn-Apply").click(function(event){
		setProperties();
		$("#updateButtons").hide();
	});
	
	$("#btn-Cancel").click(function(event){
		$(currManualEntry).val( $(currManualEntry).prop("defaultValue"));
		$("#updateButtons").hide();
	});

	setPropertiesTriggers();		
	updateControlVisibility();
});


function readCSSStyleString(cssstring)
{
	var pickedstyle = cssstring.substring(0, cssstring.indexOf(custcssdelm));
	var styleoverride =cssstring.substring(cssstring.indexOf(custcssdelm) + custcssdelm.length );
	csstylestring = pickedstyle;

	if ( pickedstyle != "" )
	{
		//now parse throught picked style to read its values
		//the first comment line contains a ";" delimited values picked
		var styleprop = pickedstyle.substring(2, pickedstyle.indexOf("*/"));
		var styleproparr = styleprop.split(";");
		$("#viewstyletype").val(styleproparr[0]) ;
		$("#AltRowColor").val(styleproparr[1]);
		$("#HeaderBackgroundColor").val(styleproparr[2]) ;
		$("#HeaderFontColor").val(styleproparr[3]) ;
		$("#ColumnSepColor").val(styleproparr[4]);
		$("#RowSepColor").val(styleproparr[5]) ;
		$("#HeaderPadding").val(styleproparr[6]) ;
		$("#ViewPadding").val(styleproparr[7]) ; 
		$("#catIcon").val(styleproparr[8]);
		$("#catIconSize").val(styleproparr[9]) ;
		$("#CatIconColor").val(styleproparr[10]);
		$("#CatIconColor").val(styleproparr[11]) ;
	}

	editorcss.setValue ( styleoverride);
}

function resizePanelVertical ( ui ){
	var minWidth = 20;
	var parentHeight = ui.element.parent().height();
	var divTwo = ui.element.next();
	var remainingSpace = parentHeight - ( ui.element.outerHeight()  + 30);
	ui.element.css('width','auto');
	divTwo.height(remainingSpace);
	divTwo.css('width','auto');
	$('#divViewContent').height($("#inner-center").height() - 40);
}

function setProperties(){
	writeActionProperties();
	writeColumnProperties( curColumnObj );
	objView.Refresh(false, true, false);
	hookColumnResize()
	return;
}

function setPropertiesTriggers(){
	$(".inputEntry").on("change", function(){
		setProperties();
	});

	$(".inputEntryCSS").on("change", function(){
		 $("#viewstyletype").val("");
		UpdateCSSTxt();
	});
}

function doPreview()
{
	if(docInfo.DocKey == ""){
		alert("{% trans %}Please save this view before trying to preview it.{% endtrans %}")
		return;
	}
	
	doSave();
	var vtype = $("input[name='ViewType']:checked"). val();
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/AppViewsAll/" + $("#ViewName").val() + "?OpenDocument&viewType=" + vtype + "&AppID=" + docInfo.AppID + "&"  + Math.random();
	var dlgUrl = url;
	var dlgLoginPublic = window.top.Docova.Utils.createDialog({
		id: "divPreview", 
		url: dlgUrl,
		title: "Preview",
		height: 600,
		width: 1000, 
		useiframe: true,
		resizable:true,
		sourcewindow: window,
		sourcedocument: document,
		onOpen : function (){

			var ifrm = window.top.$("#divPreviewIFrame");
			if ( ifrm.length > 0 ) ifrm.css("pointer-events", "none");
		},
		onResize: function ( event, ui ){
			var ifrm = window.top.$("#divPreviewIFrame")[0];
		
			if ( ifrm) {
				ifrm.width = ui.size.width - 50;
				ifrm.height = ui.size.height-50;
			}
		},
		buttons: {
			"Close": function() {
				dlgLoginPublic.closeDialog();
			}
		}
	});
}

function updateCSS(prevstyle)
{
	
	
	var curstyle = $("#viewstyletype").val();
	
	var altrowcolor = '#EFF0F0';
	var headerbcolor = "#A9A9A9";
	var headerfcolor = "#FFFFFF";
	var borderright = "#ffffff";
	var borderbottom = '#EFF0F0';

	if ( curstyle == "System" || curstyle == "Smokey"){
		altrowcolor = '#EFF0F0';
		headerbcolor = "#A9A9A9";
		headerfcolor = "#FFFFFF";
		
	}else if ( curstyle == "Whitewash"){
		altrowcolor = '#EFF0F0';
		headerbcolor = "#FFFFFF";
		headerfcolor = "#1a3ea7";
		borderright = "#1a3ea7"
		
	}else if ( curstyle == "Smoky"){
		altrowcolor = '#e4e1f9';
		headerbcolor = "#818181";
		headerfcolor = "#FFFFFF";
		
	}else if ( curstyle == "Airline"){
		altrowcolor = '#dad8d8';
		headerbcolor = "#547092";
		headerfcolor = "#FFFFFF";
		
	}else if( curstyle == "Dusk"){
		
		altrowcolor = '#e4e1f9';
		headerbcolor = "#171d31";
		headerfcolor = "#FFFFFF";
	}else if( curstyle == "Onyx"){
		
		altrowcolor = '#e4e1f9';
		headerbcolor = "#28313e";
		headerfcolor = "#FFFFFF";
	}

	$("#AltRowColor").val(altrowcolor);
	$("#HeaderBackgroundColor").val(headerbcolor);
	$("#HeaderFontColor").val(headerfcolor);
	$("#ColumnSepColor").val(borderright);

	UpdateCSSTxt(prevstyle);
	
}

function UpdateCSSTxt(prevstyle){

	

	var pretxt = "";

	pretxt =  '/*' +  $("#viewstyletype").val() + ';';
	pretxt += $("#AltRowColor").val() + ";";
	pretxt +=  $("#HeaderBackgroundColor").val() + ";";
	pretxt +=  $("#HeaderFontColor").val() + ";";
	pretxt +=  $("#ColumnSepColor").val() + ";";
	pretxt +=  $("#RowSepColor").val() + ";";
	pretxt +=  $("#HeaderPadding").val() + ";";
	pretxt +=  $("#ViewPadding").val() + ";"; 
	pretxt +=  $("#catIcon").val() + ";";
	pretxt +=  $("#catIconSize").val() + ";";
	pretxt +=  $("#CatIconColor").val() + ";";
	pretxt +=  $("#CatIconColor").val() + ";";
	pretxt += '*/\r\n';

	var csstxt = pretxt + '/* Alternating rows color */\r\n';
	csstxt += '#VDataTable tbody tr:nth-child(even) {background: ' + $("#AltRowColor").val() + '}\r\n\r\n';
	csstxt += '/*-- column selection header cell --*/\r\n';
	csstxt += 'TD.listselheader {\r\n';
	csstxt += '\t background-color: ' + $("#HeaderBackgroundColor").val() + ';\r\n';
	csstxt += '\t color: ' + $("#HeaderFontColor").val() + ';\r\n';
	csstxt += '\t padding: ' +  $("#HeaderPadding").val() + ';\r\n';
	csstxt += '\t border-right: 1px solid ' +  $("#ColumnSepColor").val() + ';\r\n';
	csstxt += '}\r\n\r\n';

	csstxt += '/*-- column header cell --*/\r\n';
	csstxt += 'TD.listheader {\r\n';
	csstxt += '\t background-color: ' + $("#HeaderBackgroundColor").val() + ';\r\n';
	csstxt += '\t color: ' + $("#HeaderFontColor").val() + ';\r\n';
	csstxt += '\t padding: ' +  $("#HeaderPadding").val() + ';\r\n';
	csstxt += '\t border-right: 1px solid ' +  $("#ColumnSepColor").val() + ';\r\n';
	csstxt += '}\r\n\r\n';

	csstxt += '/*-- cell --*/\r\n';
	csstxt += 'TD.listitem {\r\n';
	
	csstxt += '\t padding: ' +  $("#ViewPadding").val() + ';\r\n';
	csstxt += '\t border-bottom: 1px solid ' +  $("#RowSepColor").val() + ';\r\n';

	csstxt += '}\r\n\r\n';

	csstxt += '/*-- selection cell --*/\r\n';
	csstxt += 'TD.listsel {\r\n';
	
	csstxt += '\t padding: ' +  $("#ViewPadding").val() + ';\r\n';
	csstxt += '\t border-bottom: 1px solid ' +  $("#RowSepColor").val() + ';\r\n';

	csstxt += '}\r\n\r\n';


	csstxt += '.viewexpandcollapse {\r\n';
	csstxt += '\tcolor:' + $("#CatIconColor").val() + ';\r\n';
	csstxt += '}\r\n\r\n';

	if (  $("#catIcon").val() &&  $("#catIcon").val() != ""){
		var caticonarr =  $("#catIcon").val().toString().split(":");
		objView.categoryExpandClass =caticonarr[1];
		objView.categoryCollapseClass = caticonarr[0];
	}
	
	objView.categoryIconSize = $("#catIconSize").val();
	objView.Refresh(false,true,true );
	//editorcss.setValue ( csstxt);
	csstylestring = csstxt;
	addcss(csstxt);
}

function addcss(css){
    var s = $("#curcss");
    if ( s.length > 0)
    	s.get(0).parentNode.removeChild(s.get(0));
  
    var head = document.getElementsByTagName('head')[0];
	s = document.createElement('style');
  	s.setAttribute('type', 'text/css');
	s.setAttribute('id', "curcss")
	head.appendChild(s);
  	if (s.styleSheet) {   // IE
		 s.styleSheet.cssText = css;
	} else {                // the world
		s.appendChild(document.createTextNode(css));
	}
 }

function doSave(doClose){
	//---- Check to see this design element is okay to save to prevent overwriting system design elements---
	/** NOT REQUIRED/APPLICABLE IN SE *****************************************
	var elementOK = checkDesignElement("view", "DesignServices");
	if(elementOK == "NOTOK"){
		alert("This view design element name is already in use, please use a different name.");
		return;
	}
	*/
	doUpdate();
	var formData = $("form:first").serializeArray();

	var actionurl = $("form:first").attr("action");
	//want to change the action
	formData.push({ name: "isSave", value: "1"});
	$.ajax({
        url: actionurl,
        type: "POST",
        data: jQuery.param(formData),
        dataType: "xml"
    }).done(function(data) {
    	var xmlobj = $(data);
    	var statustext = xmlobj.find("Result").first().text();
    	if(statustext == "SUCCESS"){
        	if (doClose === true) {
    			window.parent.fraTabbedTable.objTabBar.RefreshHelper.AddFolderToRefreshList( 'appBuilderMainView', docInfo.FormUNID);
    			window.parent.fraTabbedTable.objTabBar.CloseTab(docInfo.FormUNID, true, 'appBuilderMainView');
            }
        	else {
				alert("{% trans %}The view was saved.{% endtrans %}");
				if (docInfo.IsNewDoc == '1') {
	            	window.location = docInfo.PortalWebPath + 'NotesView/' + xmlobj.find('Result').last().text() + '?EditDocument&AppID='+ docInfo.AppID +'&mode=build';
				}
        	}
		}else{
			var errormsg = xmlobj.find('Error').first().text();
			alert("{% trans %}An error has occurred saving the form. Error Details{% endtrans %}: ( " + errormsg + " )");
		}
	})
	.fail(function() {
		alert ( "{% trans %}Save Failed!{% endtrans %}");
	});
}

function handleToolbarButtons()
{
	//handle toolbar buttons
	$("#divToolBar").find("button").each(function() 
	{ 
		var lefticon = $(this).attr("iconleft");
		var righticon = $(this).attr("iconright");
		var title = $(this).attr("title");
		var showlabel = ($(this).attr("showlabel") === "0" ? false : true);
		var click = $(this).attr("onclick");
		$(this).attr("onclickorig", click );
		$(this).attr("onclick", "" );
		$(this).button({
			label: title,
			text: showlabel,
			icons: { primary: lefticon, secondary: righticon}
		}).click(function( event ) {
			event.preventDefault();
			curSelAction = $(this);
			readActionProperties();
			$("#tabsView").hide();
			$("#tabs").hide();
			$("#updateButtons").css("display", "none");
			$("#tabsViewAction").show();
			event.stopPropagation();
		});	
	});
	return;
} 


function getHideWhenProperties(currElem){
	var showCustomHideWhen = false;
	var hidewhenvals = $(currElem).attr("hidewhen");
	if(hidewhenvals == null || hidewhenvals == "undefined"){
		hidewhenvals = "";
		$("#spanCustomHideWhen").css("display", "none");
	}
	var showCustomHideWhen = (hidewhenvals.indexOf("C") != -1) ? true : false;
	Docova.Utils.setField({
		field: "HideWhen",
		value: $(currElem).attr("hidewhen"),
		separator: ";"
	})
	$("#CustomHideWhen").val($(currElem).attr("customhidewhen"))
	if(showCustomHideWhen){
		$("#spanCustomHideWhen").css("display", "");
	}else{
		$("#spanCustomHideWhen").css("display", "none");
	}
}

function writeActionProperties() //set action properties
{
	if ( ! curSelAction ) return;
	$(curSelAction).off('click');
	var title = Docova.Utils.getField("ActionLabel");
	var lefticon = Docova.Utils.getField("ActionLeftIcon");
	var righticon = Docova.Utils.getField("ActionRightIcon");
	var onclickstr = Docova.Utils.getField("ActionOnClick");
	var showlabel = Docova.Utils.getField("btn_ShowLabel")
	var actiondoctype = Docova.Utils.getField("ActionDocType")
	$(curSelAction).attr("title", title);
	$(curSelAction).attr("iconleft", lefticon);
	$(curSelAction).attr("iconright", righticon);	
	$(curSelAction).attr("onclickorig", safe_quotes_js(safe_tags(onclickstr), false));
	$(curSelAction).attr("showlabel", showlabel);
	$(curSelAction).attr("actiontype", Docova.Utils.getField("ActionType"));
	$(curSelAction).attr("actiondoctype", actiondoctype);
	$(curSelAction).button({
		label: title,
		text: (showlabel == "0") ? false : true,
		icons: { primary: lefticon, secondary: righticon }
	}).click(function(event){
		event.preventDefault();
		curSelAction = this;
		$("#tabsView").hide();
		$("#tabs").hide();
		$("#updateButtons").css("display", "none");
		$("#tabsViewAction").show();
		readActionProperties();
		event.stopPropagation();
	});
	$(curSelAction).attr("hidewhen", Docova.Utils.getField("HideWhen"))
		$(curSelAction).attr("customhidewhen", $("#CustomHideWhen").val());
	//handleToolbarButtons()*/
	return;
}

function readActionProperties(obj) //get action properties
{
	Docova.Utils.setField({field:"ActionLabel", value: $(curSelAction).attr("title") });
	Docova.Utils.setField({field:"ActionLeftIcon", value: $(curSelAction).attr("iconleft") });
	Docova.Utils.setField({field:"ActionRightIcon", value: $(curSelAction).attr("iconright") });
	Docova.Utils.setField({field:"ActionOnClick", value: safe_tags(safe_quotes_js($(curSelAction).attr("onclickorig"), false, true), true)});
	Docova.Utils.setField({ field: "btn_ShowLabel", value: $(curSelAction).attr("showlabel") });
	var actiontype =  $(curSelAction).attr("actiontype")
	var actiondoctype = $(curSelAction).attr("actiondoctype")
	Docova.Utils.setField({ field: "ActionType", value: actiontype });
	Docova.Utils.setField({ field: "ActionDocType", value: actiondoctype });
	if(actiontype == "Custom" || actiontype == 'SaveGantt'){
		$("#FormLabel").css("display", "none");
		$("#ActionDocType").css("display", "none");
	}else{
		$("#FormLabel").css("display", "");
		$("#ActionDocType").css("display", "");		
	}
	
	getHideWhenProperties(curSelAction);
}

function InsertAction(action)
{
	var btn = $("<button type='button' title='Action' iconleft='ui-icon-refresh' iconright='' showlabel='1' onclickorig='' actiontype='Custom' actiondoctype=''>/button>").button({
		label: "{% trans %}Action{% endtrans %}",
		icons: {primary: "ui-icon-refresh", secondary: ""}
	}).click(function( event ) {
		event.preventDefault();
		curSelAction = $(this)
	 	readActionProperties();
		$("#tabsView").hide();
		$("#tabs").hide();
		$("#updateButtons").css("display", "none");
		$("#tabsViewAction").show();
		event.stopPropagation();
	});	
	$("#divToolBar").append ( btn );
}

function DeleteAction(){
	$(curSelAction).remove();
}

function hookColumnResize(){
	$(".listheader").resizable(
	{
		handles: 'e',
		maxHeight: $(".listheader").height(),
		stop: function( event, ui ) 
		{
			var p = $(ui.element);
			var colIdx = p.attr("colidx");
			var width = ui.size.width;
			var columnObj = objView.columns[colIdx];
			if ( columnObj ) { 
				columnObj.width = width;
				objView.Refresh(false,true,true );
				hookColumnResize()
			}
		}
	});
}

function ReadColumnProperties(){
	preloadColumnProperties(curColumnObj);
}

function doUpdate() {
	var dsnName = jQuery("#ViewName").val();	
	var dsnAlias = jQuery("#ViewAlias").val();

	if(dsnName == ""){
		var msg = "{% trans %}Please provide a view name{% endtrans %}";
		alert(msg);
		return false;
	}
	
	var hiddenIndex = 0;
	var cfIndex = 0;
	$('#ViewName').val($('#ViewName').val().replace(/\/|\\/g, '-').replace(/\s\s+/g, ' '));
	//Cycle through the columns to set the appropriate XML Node names
	for ( var p = 0; p < objView.columns.length; p ++ ){
		var col = objView.columns[p];
//		if ( col.isHidden == "1" ) 
//		{
//			col.xmlNodeName = "HDN" + hiddenIndex;
//			hiddenIndex++;
//		}else{
			col.xmlNodeName = objView.columns[p].xmlNodeName;
			cfIndex++;
//		}
	}
	objView.responseColspan = parseInt($("#RespColspan").val());
	objView.showSelectionMargin = ($("#ShowSelection").prop("checked") ? true : false );
	objView.autoCollapse = $("#AutoCollapse").prop("checked");
	$("#ViewPerspectiveTxt").val(encodeURIComponent("<viewperspective>" + objView.GetViewParams() + "</viewperspective>")); 
	var curjs = btoa(editor.getValue());
	$("#viewJavascriptTxt").val(curjs );

	var curcss = csstylestring +  custcssdelm + editorcss.getValue();

	$("#viewCSSTxt").val(encodeURIComponent(curcss) );
	//time to re-apply the onClick of the actions to reflect what the user picked 
	//instead of our onclick which is used to bring up the action properties in design mode

	$("#divToolBar").find("button").each(function(){
		$(this).attr("onclick", $(this).attr("onclickorig") );
	});
	
	//Save the toolbar html to the richtext field that will store the value on the document in the querySave agent.
	$("#ViewToolbarTxt").val( $("#divToolBar").html());
	$("#ViewToolbarTWIG").val( GetViewToolbarTwig($("#divToolBar")));
	$("#ViewToolbarTWIG_m").val( GetViewToolbarMobileTwig($("#divToolBar")));
	
	var LexerObj = new Lexer(); 
	var selectionFormula = $.trim($('#ViewSelectionFormula').val());
	selectionFormula = selectionFormula != '' ? selectionFormula : '{{ '{{ true }}' }}';
	selectionFormula = LexerObj.convertCode(selectionFormula, "TWIG");
	$('#TranslatedSelectionFormula').val(selectionFormula);

	if (Docova.Utils.getField('GanttResourceType') == 'F')
	{
    	var resourceFormula = $.trim($('#GanttResourceFormula').val());
    	if (resourceFormula != '') {
	    	resourceFormula = LexerObj.convertCode(resourceFormula, "TWIG");
    		$('#TranslatedGanttResourceFormula').val(resourceFormula);
    	}
    	else {
    		$('#TranslatedGanttResourceFormula').val('');
        }
	}
	
	//for gantt style views store some configuration settings that are needed for identifying configured field names
	if($("#Gantt").prop("checked")) {
		storeGanttSettings();
	}
	return true;
}

//-----View Insert a new column-----
function InsertAppendEditColumn(actiontype){
	//actiontype is insert or append, the difference is just to +1 to the colIdx if appending
	if ( ! curColumnObj ) actiontype = "append";
	var lastNumber = objView.columns.length;
	
	if(actiontype == "append"){
		var srcColumnIdx = objView.columns.length;
	}else{
		var srcColumnIdx = curColumnObj.colIdx;
	}

	if (actiontype == 'delete') 
	{
		objView.DeleteColumn(srcColumnIdx );		
	}
	else {
		var newColumnObj = new ObjViewColumn();
		curColumnObj = newColumnObj;
		objView.InsertColumn(srcColumnIdx, curColumnObj);
		curColumnObj.width = "100";
		curColumnObj.title = "{% trans %}Enter Title{% endtrans %}";
		curColumnObj.xmlNodeName = "CFX";
		//ResetXmlNodeNames();
	}
	for (var x = 0; x < objView.columns.length; x++) {
		objView.columns[x].xmlNodeName = 'CF' + x;
	}

	var xmlstr = getSampleXML();
	var parser = new DOMParser();
	objView.oXml = parser.parseFromString(xmlstr,"text/xml");
	objView.Refresh(false, true, false);
	if (actiontype != 'delete') {
		curColumnObj = objView.columns[srcColumnIdx];
		preloadColumnProperties(curColumnObj);
	}
	hookColumnResize();
	if (actiontype != 'delete')
		$( "#divViewContent td:nth-child(" + (srcColumnIdx+2) + ")" ).click();
	return;

	
/*
	if(actiontype != "delete"){ //if append or inserting a column, create a new column obj
		var max = 0;
		for (var x = 0; x < objView.columns.length; x++) {
			var tmp = objView.columns[x].xmlNodeName.replace( /^\D+/g, '');
			if (parseInt(tmp) > max) {
				max = parseInt(tmp);
			}
		}
		lastNumber = max > 0 ? max+1 : lastNumber;
		var newColumnObj = new ObjViewColumn();
		curColumnObj = newColumnObj;
	}else{
		objView.DeleteColumn(srcColumnIdx );
		objView.Refresh(false, true, false);
		hookColumnResize();
		return;
	}
	
	objView.InsertColumn(srcColumnIdx, curColumnObj);
	curColumnObj.width = "100";
	curColumnObj.xmlNodeName = "CF" + lastNumber;
	ResetXmlNodeNames();
	objView.Refresh(false, true, false);
	curColumnObj = objView.columns[srcColumnIdx];
	preloadColumnProperties(curColumnObj);
	hookColumnResize();
	$( "#divViewContent td:nth-child(" + (srcColumnIdx+2) + ")" ).click();
*/
}

function ResetXmlNodeNames() {
	for ( var p =0; p < objView.columns.length; p ++ )
	{
		//objView.columns[p].xmlNodeName = "CF" + p;
		if ( objView.columns[p].title  == "" )
			objView.columns[p].title = "{% trans %}Enter Title{% endtrans %}";
	}
}
// ------------- sets the view object and loads default view perspective---------------
function ViewLoadDefaultPerspective()
{
	objView = new ObjView("divViewContent", true);
	objView.buildMode = true;
	objView.iconBaseUrl = "{{ asset('bundles/docova/images/') }}";
	objView.imgPath = "{{ asset('bundles/docova/images/') }}";
	objView.baseUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/";
	objView.baseXmlUrl=docInfo.ServerUrl + "/" + docInfo.NsfName + "/readfolderdataview.xml?OpenAgent" ;
	objView.folderID = docInfo.FolderID; 
	objView.columnPropertiesDialogUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/dlgViewColumnProperties?OpenForm&FolderID=" + docInfo.FolderID+ "&LibraryID=" + docInfo.LibraryKey; 
	objView.serverName=ServerName;
	objView.nsfName=NsfName;
	objView.serviceAgent=docInfo.ServerUrl + "/" + docInfo.NsfName + "/ViewServices?OpenAgent";
	objView.dateFormat = docInfo.SessionDateFormat;
	
	if(docInfo.UseContentPaging == "1") {	
		objView.contentPaging = true;
		objView.docCount = docInfo.MaxDocCount;
	}
	ViewLoadPerspective();
}

function getSampleXML(){
	var xmlstr = "<documents>";
	for (var dl = 0; dl <=2 ; dl ++ ){
		xmlstr += "<document>";
		var k = 0;
		for (var p = 0 ; p < objView.columns.length; p ++ ){
	//		if ( ! objView.columns[p].isHidden ) {
			 	if  (objView.columns[p].dataType == "number" )
					xmlstr += "<CF"  + k+ " val='1'>" + "1" + "</CF" + k + ">";
				else if ( objView.columns[p].dataType == "date" )
					xmlstr += "<CF"  + k+ " Y='2016' M='01' D='01'>" + "1" + "</CF" + k + ">";
				else
					xmlstr += "<CF"  + k + ">" + "Sample Text" + "</CF" + k + ">";
				k++;
	//		}
		}
		xmlstr += "</document>";
	}

	xmlstr += "</documents>";
	return xmlstr;
}

//------------ perspective handlers -----------------------------
function ViewLoadPerspective()
{
	var el = document.getElementById("xmlViewPerspective");
	if(! el){ return; }
	var perspectiveDocXml = el.textContent || el.innerText || el.nodeValue || el.innerHTML;	
	if  ( perspectiveDocXml && perspectiveDocXml != "" )
		objView.SetViewParams(perspectiveDocXml);
	else{
		perspectiveDocXml = dp;
		objView.SetViewParams(dp);
	}

	var perspectiveDoc = (new DOMParser()).parseFromString(perspectiveDocXml, "text/xml");
	if(Sarissa.getParseErrorText(perspectiveDoc) != Sarissa.PARSED_OK){  
  		var errorText = Sarissa.getParseErrorText(perspectiveDoc);
		alert("Error parsing xsl: " + errorText);
		perspectiveDoc = null;
		return;
	}					
	var isAutoCollapseNode = perspectiveDoc.selectSingleNode("viewperspective/autocollapse");
	if (isAutoCollapseNode == null){
		var isAutoCollapse = "0";
	}else{
		var isAutoCollapse = isAutoCollapseNode.textContent || isAutoCollapseNode.text;
	}
	
	var parser = new DOMParser();
	var xmlstr = getSampleXML();
	objView.oXml = parser.parseFromString(xmlstr,"text/xml");
	objView.Refresh(false,true,true);
}


//======== onchange event handler for the Field name selection box ======
function ChangeField(objXmlNode)
{
	var optVal = $(objXmlNode).find('option:selected').val();
	var optTitle = $(objXmlNode).find('option:selected').attr("coltitle");
	var optWidth = $(objXmlNode).find('option:selected').attr("colwidth");
	var optDataType = $(objXmlNode).find('option:selected').attr("coldatatype");
	var optAdditionalClass = $(objXmlNode).find('option:selected').attr('additionalclass');
	
	if(optVal=="")
	{
		Docova.Utils.setField({ field: "ColumnTitle", value: "" });
		Docova.Utils.setField({ field: "Width", value: "" });
		Docova.Utils.setField({ field: "DataType", value: ""});
		Docova.Utils.setField({ field: 'AdditionalClass', value: '' });
	}
	else
	{
		Docova.Utils.setField({ field: "ColumnTitle", value: optTitle });
		Docova.Utils.setField({ field: "Width", value: optWidth });
		Docova.Utils.setField({ field: "DataType", value: optDataType });
		Docova.Utils.setField({ field: 'AdditionalClass', value: optAdditionalClass });
	}
}

//===  helper function to set the sample color box background
function setColorBox(fieldname, colorval)
{
	//the colorbox div id is named display + fieldname for the field it is associated with
	$("#display" + fieldname).css("backgroundColor", colorval);
}

//======= Preloads the properties of the selected column ============
function preloadColumnProperties(columnObj)
{
	var srcColumn = columnObj;
	//---- general properties ----
	Docova.Utils.setField({ field: "ColumnTitle", value: srcColumn.title });
	Docova.Utils.setField({ field: 'AdditionalClass', value: srcColumn.additionalclass });
	Docova.Utils.setField({ field: "showMultiAsSeparate", value: (srcColumn.showMultiAsSeparate ? srcColumn.showMultiAsSeparate : "") });
	Docova.Utils.setField({ field: "ShowResponses", value: (srcColumn.showResponses ? srcColumn.showResponses : "") });
	if (responseColumnSet == true && !srcColumn.showResponses) {
		$('#ShowResponses').prop('disabled', 'disabled');
	}
	else {
		$('#ShowResponses').prop('disabled', false);
	}
	Docova.Utils.setField({ field: "ResponseFormula", value: srcColumn.responseFormula });
	if ( ! $("#ShowResponses").prop("checked") ){
		$("#ResponseFormula").attr("disabled", "disabled");
		Docova.Utils.setField({ field: "ResponseFormula", value: "" });		
	}else{
		$("#ResponseFormula").removeAttr("disabled");
	}

	if (srcColumn.entryType == 'F')
	{
		Docova.Utils.setField({ field: 'clEntryType', value: 'F' });
		if (Docova.Utils.getField('ViewSelectionType') != 'F')
		{
			Docova.Utils.setField({ field: 'cmbColumnFormsList', value: srcColumn.formName });
			resetFormFields(srcColumn.formName, $('#clFormColumns'));
		}
		Docova.Utils.setField({ field: 'clFormColumns', value: srcColumn.formField });
		$('#clEntryTypeS').hide();
		$('#clEntryTypeF').show();
	}
	else {
		Docova.Utils.setField({ field: 'clEntryType', value: 'S' });
		Docova.Utils.setField({ field: 'cmbColumnFormsList', value: '' });
		Docova.Utils.setField({ field: 'clFormColumns', value: '' });
		$('#clEntryTypeF').hide();
		$('#clEntryTypeS').show();
	}
	
	Docova.Utils.setField({ field: "MobileTitle", value: (srcColumn.isMobileTitle ? srcColumn.isMobileTitle : "") });
	Docova.Utils.setField({ field: "MobileDetail", value: (srcColumn.isMobileDetail ? srcColumn.isMobileDetail : "") });
	
	Docova.Utils.setField({ field: "DataType", value: srcColumn.dataType });
	Docova.Utils.setField({ field: "XmlNode", value: srcColumn.xmlNodeName });
	Docova.Utils.setField({ field: "ColumnFormula", value: srcColumn.columnFormula });
	$('span[target=ColumnFormula]').text(srcColumn.columnFormula);
	var isHidden = (parseInt(srcColumn.isHidden) ? srcColumn.isHidden : "");		
	Docova.Utils.setField({ field: "ColumnIsHidden", value: isHidden });	
	var colwidth = srcColumn.width;
	if(colwidth == 0 || colwidth == "0"){
	   colwidth = "4";
	}
	if(isHidden == "1"){
		jQuery("[name=hidewidth]").closest("TR").hide();
		jQuery("#MobileTitle").closest("TR").hide();
	}else{
		jQuery("[name=hidewidth]").closest("TR").show();	
		jQuery("#MobileTitle").closest("TR").show();		
	}	
	jQuery("#Width").val(colwidth);	

	//----- sort properties -------
		if(srcColumn.isCategorized)
		{
			Docova.Utils.setField({ field: "SortType", value: "C" });
			Docova.Utils.setField({ field: "SortOrder", value: srcColumn.sortOrder });
		}
		else if (srcColumn.sortOrder != "none")
		{
			Docova.Utils.setField({field: "SortType", value: "S" });
			Docova.Utils.setField({field: "SortOrder", value: srcColumn.sortOrder });
		}
		else
		{
			Docova.Utils.setField({field: "SortType", value: "N" });
		}
		
		if(srcColumn.hasCustomSort)
		{
			Docova.Utils.setField({ field: "HasCustomSort", value: "1" });
		}

	// ----- text/cell appearance --------
	(srcColumn.align=="") ? Docova.Utils.setField({ field: "TextAlign", value: "left" }) : Docova.Utils.setField({ field: "TextAlign", value: srcColumn.align });
	(srcColumn.fontSize=="") ? Docova.Utils.setField({ field: "FontSize", value: "11px" }) : Docova.Utils.setField({ field: "FontSize", value: srcColumn.fontSize });
	(srcColumn.fontFamily=="") ? Docova.Utils.setField({ field: "Font", value: "Verdana" }) : Docova.Utils.setField({ field: "Font", value: srcColumn.fontFamily });
	(srcColumn.color=="") ? Docova.Utils.setField({ field: "FontColor", value: "#000000" }) : Docova.Utils.setField({ field: "FontColor", value: srcColumn.color });
	(srcColumn.backgroundColor=="") ? Docova.Utils.setField({ field: "BackgroundColor", value: "#ffffff" }) : Docova.Utils.setField({ field: "BackgroundColor", value: srcColumn.backgroundColor });
	setColorBox("FontColor", Docova.Utils.getField("FontColor"));
	setColorBox("BackgroundColor", Docova.Utils.getField("BackgroundColor"));
	Docova.Utils.setField({ field: "FontWeight", value: srcColumn.fontWeight });
	Docova.Utils.setField({ field: "FontStyle", value: srcColumn.fontStyle });
	Docova.Utils.setField({ field: "TextDecoration", value: srcColumn.textDecoration });

	//----- total settings ---------------
	Docova.Utils.setField({ field: "TotalType", value: srcColumn.totalType });

	//---parse current number format ----
	var posNeg =  srcColumn.numberFormat.split(";"); //split positive and negative format
	var negativeFormat = (posNeg[1].indexOf("(") != -1)?  "1": ""; //check if parentheses around negative numbers
	var percentage = (posNeg[0].indexOf("%") != -1)?  "1": ""; //is the number treated as percentage (value multiplied by 100 and % suffix added)
	var thousandFormat = (posNeg[0].indexOf(",") != -1)?  "1": ""; //separate
	var tmpPos = posNeg[0].indexOf("#");

	var tmpEndStr = posNeg[0].split(".")[1]; //extract the end portion of the format string following the period
	tmpEndStr = (percentage == "1") ? stripCharsInBag(tmpEndStr,"%") : tmpEndStr;

	var decimalPlaces = !tmpEndStr ? 0 : ((tmpEndStr.substring(0,1) =="#")? "A" : tmpEndStr.replace(srcColumn.numberSuffix, "").length);
	Docova.Utils.setField({ field: "DecimalPlaces", value: decimalPlaces + "" });
	Docova.Utils.setField({ field: "NumberPrefix", value: srcColumn.numberPrefix });
	Docova.Utils.setField({ field: "NumberSuffix", value: srcColumn.numberSuffix });
	Docova.Utils.setField({ field: "Percentage", value: percentage });
	Docova.Utils.setField({ field: "NegativeFormat", value: negativeFormat });
	Docova.Utils.setField({ field: "ThousandFormat", value: thousandFormat });	
	Docova.Utils.setField({ field: "BlankFormat", value: srcColumn.numberBlankFormat });	
		
	//------- total cell appearance ---------
	(srcColumn.alignT=="") ? Docova.Utils.setField({ field: "TTextAlign", value: "left" }) : Docova.Utils.setField({ field: "TTextAlign", value: srcColumn.alignT });
	(srcColumn.fontSizeT=="") ? Docova.Utils.setField({ field: "TFontSize", value: "11px" }) : Docova.Utils.setField({ field: "TFontSize", value: srcColumn.fontSizeT });
	(srcColumn.fontFamilyT=="") ? Docova.Utils.setField({ field: "TFont", value: "Verdana" }) : Docova.Utils.setField({ field: "TFont", value: srcColumn.fontFamilyT });
	(srcColumn.colorT=="") ? Docova.Utils.setField({ field: "TFontColor", value: "#0000ff" }) : Docova.Utils.setField({ field: "TFontColor", value: srcColumn.colorT });
	(srcColumn.backgroundColorT=="") ? Docova.Utils.setField({ field: "TBackgroundColor", value: "#ffffff" }) : Docova.Utils.setField({ field: "TBackgroundColor", value: srcColumn.backgroundColorT });
	setColorBox("TFontColor", Docova.Utils.getField("TFontColor"));
	setColorBox("TBackgroundColor", Docova.Utils.getField("TBackgroundColor"));
	Docova.Utils.setField({ field: "TFontWeight", value: srcColumn.fontWeightT });
	Docova.Utils.setField({ field: "TFontStyle", value: srcColumn.fontStyleT });
	Docova.Utils.setField({ field: "TTextDecoration", value: srcColumn.textDecorationT });

	//---------- header cell apparance ----------
	(srcColumn.alignH=="") ? Docova.Utils.setField({ field: "HTextAlign", value: "left" }) : Docova.Utils.setField({ field: "HTextAlign", value: srcColumn.alignH });
	(srcColumn.fontSizeH=="") ? Docova.Utils.setField({ field: "HFontSize", value: "11px" }) : Docova.Utils.setField({ field: "HFontSize", value: srcColumn.fontSizeH });
	(srcColumn.fontFamilyH=="") ? Docova.Utils.setField({ field: "HFont", value: "Verdana" }) : Docova.Utils.setField({ field: "HFont", value: srcColumn.fontFamilyH });
	(srcColumn.colorH=="") ? Docova.Utils.setField({ field: "HFontColor", value: "#000000" }) : Docova.Utils.setField({ field: "HFontColor", value: srcColumn.colorH });
	(srcColumn.backgroundColorH=="") ? Docova.Utils.setField({ field: "HBackgroundColor", value: "#ece9d8" }) : Docova.Utils.setField({ field: "HBackgroundColor", value: srcColumn.backgroundColorH });
	setColorBox("HFontColor", Docova.Utils.getField("HFontColor"));
	setColorBox("HBackgroundColor", Docova.Utils.getField("HBackgroundColor"));
	Docova.Utils.setField({ field: "HFontWeight", value: srcColumn.fontWeightH });
	Docova.Utils.setField({ field: "HFontStyle", value: srcColumn.fontStyleH });
	Docova.Utils.setField({ field: "HTextDecoration", value: srcColumn.textDecorationH });
}

function writeColumnProperties(obj)
{
	var showSelection = Docova.Utils.getField("ShowSelection");
	if ( showSelection && showSelection != "1")
   		objView.showSelectionMargin = false;

	if(obj == "undefined" || obj == null){
		return;
	}
	
	srcColumn = obj;
	//---- general properties ----
	srcColumn.title = Docova.Utils.getField("ColumnTitle");
	srcColumn.additionalclass = Docova.Utils.getField('AdditionalClass');
	srcColumn.showResponses = Docova.Utils.getField("ShowResponses");
	srcColumn.showMultiAsSeparate =  Docova.Utils.getField("showMultiAsSeparate");
	srcColumn.responseFormula = Docova.Utils.getField("ResponseFormula");
	srcColumn.dataType = Docova.Utils.getField("DataType");
	srcColumn.columnFormula = Docova.Utils.getField("ColumnFormula" );
	var entryType = Docova.Utils.getField('clEntryType');
	srcColumn.entryType = entryType ? entryType : null;
	if (Docova.Utils.getField('ViewSelectionType') == 'F') {
		var formName = Docova.Utils.getField('SelectionForm');
	}
	else {
		var formName = entryType == 'F' ? Docova.Utils.getField('cmbColumnFormsList') : null;
	}
	var formField = entryType == 'F' ? Docova.Utils.getField('clFormColumns') : null;
	if (formName && formField) {
		srcColumn.formName = formName;
		srcColumn.formField = formField;
	}
	else {
		srcColumn.formName = null;
		srcColumn.formField = null;
	}
	var isHidden = Docova.Utils.getField("ColumnIsHidden");	
	srcColumn.isHidden = (isHidden ? isHidden : "");
	var isMobileTitle = Docova.Utils.getField("MobileTitle");	
	srcColumn.isMobileTitle = (!isHidden && isMobileTitle ? isMobileTitle : "");
	var isMobileDetail = Docova.Utils.getField("MobileDetail");	
	srcColumn.isMobileDetail = (!isHidden && isMobileDetail ? isMobileDetail : "");	
	var colwidth = Docova.Utils.getField("Width");
	if(colwidth == 0 || colwidth == "0"){
	   colwidth = "4";
	}
	if(isHidden == "1"){
		jQuery("[name=hidewidth]").hide();
	}else{
		jQuery("[name=hidewidth]").show();	
	}
	jQuery("#Width").val(colwidth);		   			
	srcColumn.width = colwidth;

	//----- sort properties -------
	tmpValue = Docova.Utils.getField("SortType");
	//reset the original properties first
	srcColumn.isCategorized=false;
	srcColumn.sortOrder = "none";
	srcColumn.hasCustomSort = false;
	//set user selections
	if(tmpValue == "C") 
	{
		srcColumn.isCategorized=true;
		srcColumn.sortOrder = Docova.Utils.getField("SortOrder");
	}
	else if (tmpValue == "S")
	{
		srcColumn.sortOrder = Docova.Utils.getField("SortOrder");
	}
	if(Docova.Utils.getField("HasCustomSort") == "1")
	{
		srcColumn.hasCustomSort = true;
	}

	// ----- text cell appearance (default values are set to blank in column object)--------
	(Docova.Utils.getField("TextAlign")=="left") ? srcColumn.align="" : srcColumn.align = Docova.Utils.getField("TextAlign");
	(Docova.Utils.getField("FontSize") == "11px") ? srcColumn.fontSize="" : srcColumn.fontSize = Docova.Utils.getField("FontSize");
	(Docova.Utils.getField("Font") == "Verdana") ? srcColumn.fontFamily="" : srcColumn.fontFamily = Docova.Utils.getField("Font");
	(Docova.Utils.getField("FontColor") == "#000000") ? srcColumn.color = "" : srcColumn.color = Docova.Utils.getField("FontColor");
	(Docova.Utils.getField("BackgroundColor") == "#ffffff") ? srcColumn.backgroundColor="" : srcColumn.backgroundColor = Docova.Utils.getField("BackgroundColor");
	srcColumn.fontWeight = Docova.Utils.getField("FontWeight" );
	srcColumn.fontStyle = Docova.Utils.getField("FontStyle");
	srcColumn.textDecoration = Docova.Utils.getField("TextDecoration");

	//----- total settings ---------------

	//value sum and average totals apply only to numeric values, record count can be applied to any other
	var totalType = Docova.Utils.getField("TotalType");
	srcColumn.totalType = ((totalType != "0" && srcColumn.dataType == "number") || (totalType == "2")) ? totalType : "0"; 

	//---- assemble a number format string ----
	formatString = (Docova.Utils.getField("ThousandFormat") == "1") ? "#,###" : "###";
	tmpValue = Docova.Utils.getField("DecimalPlaces");
	if(tmpValue == "A")
	{
	 	formatString += ".##";
	}
	else if (parseInt(tmpValue) > 0)
	{
		formatString += '.';
		for(var i=0; i < parseInt(tmpValue); i++)
		{
			formatString += "0";
		}
	}
	formatString += (Docova.Utils.getField("Percentage") == "1") ? "%" : "";
	formatString += (Docova.Utils.getField("NegativeFormat") == "1") ? ";(" + formatString + ")" : ";-" + formatString;
	srcColumn.numberFormat = formatString;
	srcColumn.numberPrefix = Docova.Utils.getField("NumberPrefix" );
	srcColumn.numberSuffix = Docova.Utils.getField("NumberSuffix" );
	srcColumn.numberBlankFormat = Docova.Utils.getField("BlankFormat" );
	
	
	// ----- total cell appearance (default values are set to blank in column object)--------
	(Docova.Utils.getField("TTextAlign")=="left") ? srcColumn.alignT="" : srcColumn.alignT = Docova.Utils.getField("TTextAlign");
	(Docova.Utils.getField("TFontSize") == "11px") ? srcColumn.fontSizeT="" : srcColumn.fontSizeT = Docova.Utils.getField("TFontSize");
	(Docova.Utils.getField("TFont") == "Verdana") ? srcColumn.fontFamilyT="" : srcColumn.fontFamilyT = Docova.Utils.getField("TFont");
	srcColumn.colorT = Docova.Utils.getField("TFontColor");
	(Docova.Utils.getField("TBackgroundColor") == "#ffffff") ? srcColumn.backgroundColorT="" : srcColumn.backgroundColorT = Docova.Utils.getField("TBackgroundColor");
	srcColumn.fontWeightT = Docova.Utils.getField("TFontWeight" );
	srcColumn.fontStyleT = Docova.Utils.getField("TFontStyle");
	srcColumn.textDecorationT = Docova.Utils.getField("TTextDecoration");

	// -----  header cell appearance (default values are set to blank in column object)--------
	(Docova.Utils.getField("HTextAlign")=="left") ? srcColumn.alignH="" : srcColumn.alignH = Docova.Utils.getField("HTextAlign");
	(Docova.Utils.getField("HFontSize") == "11px") ? srcColumn.fontSizeH="" : srcColumn.fontSizeH = Docova.Utils.getField("HFontSize");
	(Docova.Utils.getField("HFont") == "Verdana") ? srcColumn.fontFamilyH="" : srcColumn.fontFamilyH = Docova.Utils.getField("HFont");
	(Docova.Utils.getField("HFontColor") == "#000000") ? srcColumn.colorH = "" : srcColumn.colorH = Docova.Utils.getField("HFontColor");
	(Docova.Utils.getField("HBackgroundColor") == "#ece9d8") ? srcColumn.backgroundColorH ="" : srcColumn.backgroundColorH = Docova.Utils.getField("HBackgroundColor");
	srcColumn.fontWeightH = Docova.Utils.getField("HFontWeight" );
	srcColumn.fontStyleH = Docova.Utils.getField("HFontStyle");
	srcColumn.textDecorationH = Docova.Utils.getField("HTextDecoration");
	return true;
}

// submits XML request to the agent
function Submit_XMLRequest(request, agentName){
	//send the request to server
	request = encodeURIComponent(request);
	Docova.Utils.showProgressMessage("{% trans %}Processing subscription request. One moment{% endtrans %}...");
	var processUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/" + agentName  + "?OpenAgent";
	$.ajax({
		type: "POST", 
		url: processUrl,
		data: request,
		cache: false,
		async: false,
		dataType: "xml",
		success: function(xml){
			var xmlobj = jQuery(xml);
			var statustext = xmlobj.find("Result").first().text();
			if(statustext == "OK"){
				Docova.Utils.hideProgressMessage()
				Docova.Utils.messageBox({
					title: "{% trans %}Subscription(s) created.{% endtrans %}",
					prompt: "{% trans %}The Subscription(s) have been created successfully.{% endtrans %}",
					icontype: 4,
					msgboxtype: 0,
					width: 300
				});
				UserSubscriptionData.reload();
			}
		},
		error: function(){
			Docova.Utils.hideProgressMessage();
			Docova.Utils.messageBox({
				title: "{% trans %}Subscription(s) not created.{% endtrans %}",
				prompt: "{% trans %}The subscription(s) were not created successfully.<br>Try again or contact the Adminstrator.{% endtrans %}",
				icontype: 1,
				msgboxtype: 0,
				width:300
			});
		}	
	});
}

function SubmitRequest(request, agentName){
	//send the request to server
	var processUrl = docInfo.PortalWebPath + "/" + agentName  + "?OpenAgent";
	var httpObj = new objHTTP();
	if(!httpObj.PostData(request, processUrl) || httpObj.status=="FAILED"){
		HideProgressMessage();
		return false;
	}
	return (httpObj.results.length)? httpObj.results[0] : true;
}

//check to unsure this is a design element we can update
function checkDesignElement(type, agentName){
	var elementname = "";
	var appPath = docInfo.NsfName;
	
	if(type == "view"){ //view's name is in ViewName field
		elementname = $("#ViewName").val().replace(/\/|\\/g, '-');
	}else{ //all other elements, form, subform, dialog, page...use the dsnFormName field for their element name
		elementname = $("#dsnFormName").val();
	}
	
	var request = "<Request><Action>CHECKDESIGNELEMENT</Action>";
	request += "<Document>";
	request += "<ElementType><![CDATA[" + type + "]]></ElementType>";	
	request += "<ElementName><![CDATA[" + elementname + "]]></ElementName>";
	request += "<AppPath>" + appPath + "</AppPath>";
	request += "</Document>";
	request += "</Request>";
	
	var result = SubmitRequest(request, agentName);
	return result
}


function resetUpdateButtons(){
	//resets the position of the updateButtons for .manualEntry fields when panes are adjusted
	var focusedField = document.activeElement;
	if( $(focusedField).hasClass("manualEntry") ){
	 	var posleft = parseInt($(focusedField).offset().left, 10) + parseInt($(focusedField).outerWidth(),10);
		var postop = parseInt($(focusedField).offset().top, 10) + 3;
		$("#updateButtons").offset({
			left: posleft,
			top: postop
		});
	}
	return;
}


function updateControlVisibility(){
	var viewtype = Docova.Utils.getField("ViewType");
	switch(viewtype){
	case "Calendar":
		//-- hide tabs that are not relevant for calendar
		jQuery("#tabs-2, #tabs-3, #tabs-4, #tabs-5, #tabs-6").hide();
		jQuery('[href="#tabs-2"], [href="#tabs-3"], [href="#tabs-4"], [href="#tabs-5"], [href="#tabs-6"]').closest('li').hide();		
		jQuery('[href="#tabs-v2"]').closest('li').show();	
		//jQuery('[href="#tabs-v3"]').closest('li').hide();							
		jQuery("#fieldonlymsg").hide();	
		jQuery("#formulamsg").show();

		jQuery('#ActionType option[value=SaveGantt]').prop('disabled', true);
		jQuery("#ColumnTitle, #DataType, #showMultiAsSeparate, #btnAddColumn, #btnAppendColumn, #btnDeleteColumn").prop("disabled", true).addClass("ui-state-disabled");
		jQuery("#ShowResponses, #Width, #AdditionalClass, #RespHierarchy, #RespColspan,  #AutoCollapse, #ShowSelection, #UseContentPaging, #MaxDocCount").closest("tr").hide();
									
		break;
	case "Gantt":
		//-- hide tabs that are not relevant for Gantt
		jQuery("#tabs-2, #tabs-3, #tabs-4, #tabs-5, #tabs-6").hide();
		jQuery('[href="#tabs-2"], [href="#tabs-3"], [href="#tabs-4"], [href="#tabs-5"], [href="#tabs-6"]').closest('li').hide();		
		jQuery('[href="#tabs-v2"]').closest('li').hide();							
		jQuery('[href="#tabs-v3"]').closest('li').show();
		jQuery("#formulamsg").hide();
		jQuery("#fieldonlymsg").show();	

		jQuery('#ActionType option[value=SaveGantt]').prop('disabled', false);
		jQuery("#ColumnTitle, #DataType, #btnAddColumn, #btnAppendColumn, #btnDeleteColumn").prop("disabled", true).addClass("ui-state-disabled");
		jQuery("#ShowResponses, #showMultiAsSeparate, #Width, #AdditionalClass, #RespHierarchy, #RespColspan, #AutoCollapse, #ShowSelection, #UseContentPaging, #MaxDocCount").closest("tr").hide();
									
		break;		
	default:
		//-- show tabs that are needed for generic view
		jQuery("#tabs-2, #tabs-3, #tabs-4, #tabs-5, #tabs-6").hide();	
		jQuery('[href="#tabs-1"], [href="#tabs-2"], [href="#tabs-3"], [href="#tabs-4"], [href="#tabs-5"], [href="#tabs-6"]').closest('li').show();			
		jQuery('[href="#tabs-v2"]').closest('li').hide();		
		jQuery('[href="#tabs-v3"]').closest('li').hide();			
		jQuery("#fieldonlytmsg").hide();	
		jQuery("#formulamsg").show();

		jQuery('#ActionType option[value=SaveGantt]').prop('disabled', true);
		jQuery("#ColumnTitle, #DataType, #showMultiAsSeparate, #btnAddColumn, #btnAppendColumn, #btnDeleteColumn").prop("disabled", false).removeClass("ui-state-disabled");		
		jQuery("#ShowResponses, #Width, #AdditionalClass, #RespHierarchy, #RespColspan, #AutoCollapse, #ShowSelection, #UseContentPaging, #MaxDocCount").closest("tr").show();
		
		break;
	}
}

function switchColumnsToCalendar(){
	var colcount = 5;
	
	//remove extra columns
	while(objView.columns.length > colcount )
	{
		objView.DeleteColumn(objView.columns.length - 1);
	}

	//append extra columns
	while(objView.columns.length < colcount){
		var newColumnObj = new ObjViewColumn();
		objView.InsertColumn(objView.columns.length, newColumnObj);		
	}

	//update properties for standard columns
	for(var p=0; p<colcount; p++){
		curColumnObj = objView.columns[p];
		curColumnObj.width = "100";
		curColumnObj.showMultiAsSeparate = "";
		curColumnObj.showResponses = "";
		curColumnObj.isHidden = "";
		curColumnObj.sortOrder = "none";
		curColumnObj.isCategorized = "";
		curColumnObj.hasCustomSort = "";
		curColumnObj.dataType = "text";
		curColumnObj.xmlNodeName = "CF" + p;

		if(p==0){
			curColumnObj.title = "{% trans %}Category{% endtrans %}";
			curColumnObj.showMultiAsSeparate = "1";
			curColumnObj.isCategorized = "1";
		}else if(p==1){
			curColumnObj.title = "{% trans %}Start Date{% endtrans %}";
			curColumnObj.dataType = "datetime";
		}else if(p==2){
			curColumnObj.title = "{% trans %}End Date{% endtrans %}";
			curColumnObj.dataType = "datetime";
		}else if(p==3){
			curColumnObj.title = "{% trans %}Icon{% endtrans %}";
			curColumnObj.width = "50";
			curColumnObj.dataType = "icon";
		}else if(p==4){
			curColumnObj.title = "{% trans %}Description{% endtrans %}";
			curColumnObj.width = "300";
		}
	}
	curColumnObj = null;
	objView.Refresh(false, true, false);
}

function switchColumnsToGantt(){
	var colcount = 12;
	
	//remove extra columns
	while(objView.columns.length > colcount )
	{
		objView.DeleteColumn(objView.columns.length - 1);
	}

	//append extra columns
	while(objView.columns.length < colcount){
		var newColumnObj = new ObjViewColumn();
		objView.InsertColumn(objView.columns.length, newColumnObj);		
	}

	//update properties for standard columns
	for(var p=0; p<colcount; p++){
		curColumnObj = objView.columns[p];
		curColumnObj.width = "100";
		curColumnObj.showMultiAsSeparate = "";
		curColumnObj.showResponses = "";
		curColumnObj.isHidden = "";
		curColumnObj.sortOrder = "none";
		curColumnObj.isCategorized = "";
		curColumnObj.hasCustomSort = "";
		curColumnObj.dataType = "text";
		curColumnObj.xmlNodeName = "CF" + p;

		if(p==0){
			curColumnObj.title = "{% trans %}Category{% endtrans %}";
			curColumnObj.showMultiAsSeparate = "1";
			curColumnObj.isCategorized = "1";
		}else if(p==1){
			curColumnObj.title = "{% trans %}Row #{% endtrans %}";
			curColumnObj.dataType = "number";
			curColumnObj.width = "50";
			curColumnObj.sortOrder = "ascending";
			if(curColumnObj.columnFormula == ""){
				curColumnObj.columnFormula = "gantt_row";
			}
		}else if(p==2){
			curColumnObj.title = "{% trans %}Code/Short Name{% endtrans %}";
			if(curColumnObj.columnFormula == ""){
				curColumnObj.columnFormula = "gantt_code";
			}		
		}else if(p==3){
			curColumnObj.title = "{% trans %}Name{% endtrans %}";
			curColumnObj.width = "200";
			if(curColumnObj.columnFormula == ""){
				curColumnObj.columnFormula = "gantt_name";
			}			
		}else if(p==4){
			curColumnObj.title = "{% trans %}Milestone (Start){% endtrans %}";
			curColumnObj.width = "50";
			curColumnObj.dataType = "number";
			if(curColumnObj.columnFormula == ""){
				curColumnObj.columnFormula = "gantt_startismilestone";
			}									
		}else if(p==5){
			curColumnObj.title = "{% trans %}Start Date{% endtrans %}";
			curColumnObj.dataType = "date";
			if(curColumnObj.columnFormula == ""){
				curColumnObj.columnFormula = "gantt_start";
			}			
		}else if(p==6){
			curColumnObj.title = "{% trans %}Duration{% endtrans %}";
			curColumnObj.dataType = "number";		
			curColumnObj.width = "50";
			if(curColumnObj.columnFormula == ""){
				curColumnObj.columnFormula = "gantt_duration";
			}			
		}else if(p==7){
			curColumnObj.title = "{% trans %}Milestone (End){% endtrans %}";
			curColumnObj.width = "50";			
			curColumnObj.dataType = "number";
			if(curColumnObj.columnFormula == ""){
				curColumnObj.columnFormula = "gantt_endismilestone";
			}					
		}else if(p==8){
			curColumnObj.title = "{% trans %}End Date{% endtrans %}";
			curColumnObj.dataType = "date";
			if(curColumnObj.columnFormula == ""){
				curColumnObj.columnFormula = "gantt_end";
			}			
		}else if(p==9){
			curColumnObj.title = "{% trans %}Progress{% endtrans %}";
			curColumnObj.dataType = "number";		
			curColumnObj.width = "50";	
			if(curColumnObj.columnFormula == ""){
				curColumnObj.columnFormula = "gantt_progress";
			}			
		}else if(p==10){
			curColumnObj.title = "{% trans %}Status{% endtrans %}";
			if(curColumnObj.columnFormula == ""){
				curColumnObj.columnFormula = "gantt_status";
			}			
		}else if(p==11){
			curColumnObj.title = "{% trans %}Description{% endtrans %}";
			curColumnObj.width = "300";
			if(curColumnObj.columnFormula == ""){
				curColumnObj.columnFormula = "gantt_description";
			}			
		}
	}
	curColumnObj = null;
	objView.Refresh(false, true, false);
}

function storeGanttSettings(){
	var coldata = "";	

	var colcount = 12;	
	//get properties for standard columns
	for(var p=0; p<colcount; p++){
		curColumnObj = objView.columns[p];
			coldata += ((p == 0 ? "" : ":") + curColumnObj.columnFormula);
	}

	Docova.Utils.setField({
		field: "GanttFields",
		value: coldata
	});
}

function updateColumnIndexes()
{
	var temp_columns = [];
	$('#divViewContent TABLE.listtable THEAD TD').each(function(){
    	for (var x = 0; x < objView.columns.length; x++) {
			if ($.trim(objView.columns[x].title) == $.trim($(this).text())) {
				temp_columns.push(objView.columns[x]);
				break;
			}
    	}
	});

	var len = objView.columns.length
	//remove extra columns
	while(objView.columns.length > 0 )
	{
		objView.DeleteColumn(objView.columns.length - 1);
	}

	//append extra columns
	for(var x = 0; x < temp_columns.length; x++) {
		var newColumnObj = temp_columns[x];
		newColumnObj.xmlNodeName = 'CF'+ x;
		objView.InsertColumn(objView.columns.length, newColumnObj);		
	}
	objView.Refresh(false, true, false);
}

function resetFormFields(formName, targetField)
{
	var app = new DocovaApplication({
		"appid": docInfo.AppID
	});
	var result = app.getFormFields(formName);
	var elementList = targetField instanceof jQuery ? targetField : $('#' + targetField);
	elementList.empty();
	elementList.append($('<option></option>').attr('value', '- Select -').text('- Select -'));

	if (result) {
		var field_elms = result.split(',');
		for(x = 0; x < field_elms.length; x++){
			elementList.append($('<option></option>').attr('value', field_elms[x]).text(field_elms[x]));
		}
	}
}
</script>
<style type="text/css">
.ui-icon-colorpicker {
	background-image: url('{{ asset('bundles/docova/images/colorpicker.gif') }}') !important;
	background-position: center;
}

.fabold {font-weight:800;}
</style>
</head>
<body text="#000000" bgcolor="#FFFFFF" SCROLL="no" oncontextmenu="return false;">
	<div id="divMultiLinePopup" style="display:none;">
		<input type="text" id="docova_formula_helper" placeholder = "Search $$DocovaScript functions" style="width:92%; margin-bottom:8px"></input> <i id="btnInsertFormula" title="Add Formula" class="fas fa-check"></i>
		<textarea id="multilineinput" style="width:98%; height:80%; outline:none; border:1px #CCC solid; border-radius:3px;"></textarea>
	</div>
	<form onsubmit="doUpdate(); return true;" method="post" action="" name="_NotesView">
		<div id="FormHeader" style="background-color: white; padding-top: 2px; padding-bottom: 2px; border-bottom: 1px solid #BBBBBB; display:none;">
			<table border=0 cellspacing=1 cellpadding=2>
				<tr>
					<td id="tdActionBar">
						<a href="" onclick="doSave(true); return false;" target="_self" primary="ui-icon-check" secondary="">{% trans %}Save and Close{% endtrans %}</a>			
						<a onclick="doSave(); return false;" href="" primary="ui-icon-check" secondary="">{% trans %}Save{% endtrans %}</a>
						<a onclick="Docova.Utils.messageBox({
							width: 400,
							title: '{% trans %}Closing view{% endtrans %}',
							prompt: '{% trans %}Would you like to save the changes to this view?{% endtrans %}',
							msgIcon : 'ui-icon-close',
							msgboxtype : 4,
							onYes: function() { SaveForm(); },
							onNo: function() { 	
								window.parent.fraTabbedTable.objTabBar.RefreshHelper.AddFolderToRefreshList( 'appBuilderMainView', docInfo.FormUNID);
								window.parent.fraTabbedTable.objTabBar.CloseTab(docInfo.FormUNID, true, 'appBuilderMainView');
 							}
						});
						return false;" href="" primary="ui-icon-close" secondary="">{% trans %}Close{% endtrans %}</a>
					</td>
					<td>
						{% trans %}Columns{% endtrans %}:&nbsp;&nbsp;
						<button type="button" id="btnAddColumn"></button>
						<button type="button" id="btnAppendColumn"></button>
						<button type="button" id="btnDeleteColumn"></button>
					</td>
					<td>
						{% trans %}Actions{% endtrans %}:&nbsp;&nbsp;
						<button type="button" id="btnAddAction"></button>
						<button type="button" id="btnDeleteAction"></button>
						<button type="button" id="btnPreview"></button>
					</td>
					<td>&nbsp;</td>
				</tr>
			</table>
		</div>
		<script id="xmlViewPerspective" type="text/xml">{% if appView %}{{ appView.getViewPerspective|raw }}{% else %}<viewperspective><type>system</type><id>system_default_folder</id><Unid/><name>Built-in perspective</name><description/><createdby/><createddate/><modifiedby/><modifieddate/><autocollapse>0</autocollapse><isSummary/><showSelectionMargin>1</showSelectionMargin><allowCustomization>1</allowCustomization><extendLastColumn/><categoryBorderStyle>border-bottom : solid 2px #aaccff;</categoryBorderStyle><viewsettings><columnsscript></columnsscript><columns></columns></viewsettings></viewperspective>{% endif %}</script>
		<div id="divContentSection">
			<div class="ui-layout-center" id="inner-center">
				<div id="divToolBar" style="padding-bottom: 4px">{{ toolbar|raw }}</div>
				<div id="divViewEventCapture" tabindex="1">
					<div id="divViewContent" style="width: 100%; padding: 0px; margin: 0px; overflow: hidden; overflow-x: auto;"></div>
				</div>
			</div>
			<!--- end layout center-->
			<div class="ui-layout-south" id="southpane">
				<div id="updateButtons">
					<span id="btn-Apply" class="btnApplyCancel">&#10004</span>
					<span id="btn-Cancel" class="btnApplyCancel">X</span>
				</div>
				<div id="tabs" style="display: none">
					<ul>
						<li><a href="#tabs-1">{% trans %}General{% endtrans %}</a></li>
						<li><a href="#tabs-2">{% trans %}Sort{% endtrans %}</a></li>
						<li><a href="#tabs-3">{% trans %}Text{% endtrans %}</a></li>
						<li><a href="#tabs-4">{% trans %}Number{% endtrans %}</a></li>
						<li><a href="#tabs-5">{% trans %}Total{% endtrans %}</a></li>
						<li><a href="#tabs-6">{% trans %}Header{% endtrans %}</a></li>
					</ul>
					<div id="tabs-1">
						<table class="tblRows" width="100%" border="0" cellspacing="0" cellpadding="0">
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Title{% endtrans %}:</td>
								<td width="73%"><input name="ColumnTitle" value="" id="ColumnTitle" class="inputEntry" style="width: 300px;"></td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Data Type{% endtrans %}:</td>
								<td width="73%">
									<select name="DataType" id="DataType" class="txFld inputEntry">
										<option value="text" selected>{% trans %}Text{% endtrans %}
										<option value="date">{% trans %}Date{% endtrans %}
										<option value="datetime">{% trans %}Date/Time{% endtrans %}
										<option value="number">{% trans %}Number{% endtrans %}
										<option value="html">{% trans %}Html{% endtrans %}
										<option value="icon">{% trans %}Icon{% endtrans %}
									</select>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">Entry Type:</td>
								<td width="73%">
									<label><input type="radio" name="clEntryType" value="S" class="inputEntry" checked="checked"> $$DOCOVA Script</label>
									<label><input type="radio" name="clEntryType" value="F" class="inputEntry"> Form Fields</label>
								</td>
							</tr>
							<tr valign="top" id="clEntryTypeS">
								<td width="27%" class="frmLabel">{% trans %}Column $$DOCOVAScript{% endtrans %}:</td>
								<td width="73%">
									<span class="longtext_values" target="ColumnFormula"></span>
									<span style="display:none;"><textarea id="ColumnFormula" class="manualEntry"></textarea></span>
									<font>({% trans %}Use $$script and field names that compute a value.{% endtrans %})</font>
								</td>
							</tr>
							<tr valign="top" id="clEntryTypeF" style="display:none;">
								<td width="27%" class="frmLabel">Select a Form Field</td>
								<td width="73%">
									<div style="overflow:hidden;" id="clFormsList">
										Form<br><select id="cmbColumnFormsList" name="cmbColumnFormsList" class="inputEntry" style="width:300px;">
											<option value="">- Select -</option>
    									{% if forms %}
    										{% for item in forms %}
    										<option value="{{ item }}">{{ item }}</option>
    										{% endfor %}
    									{% endif %}
										</select>
									</div>
									<div style="overflow:hidden; display:inline-block;">
										Field<br><select id="clFormColumns" name="clFormColumns" class="inputEntry" style="width:300px;">
											<option vlaue="">- Select -</option>
										</select>
									</div>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">Include Responses in this Column: </td>
								<td width="73%">
									<label> <input type="checkbox" name="ShowResponses" value="1" class="inputEntry" id="ShowResponses">{% trans %}Yes{% endtrans %}</label>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">Response $$DOCOVAScript:</td>
								<td width="73%">
									<span class="longtext_values" target="ResponseFormula"></span>
									<span style="display:none;"><textarea id="ResponseFormula" class="manualEntry"></textarea></span>
									<font>({% trans %}Use $$script and field names that compute a value.{% endtrans %})</font>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">Column Class:</td>
								<td width="73%"><input name="AdditionalClass" value="" id="AdditionalClass" class="inputEntry" style="width: 300px;"></td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel"><span name="hidewidth">{% trans %}Width{% endtrans %}:</span></td>
								<td width="73%"><span name="hidewidth"><input name="Width" value="" id="Width" class="inputEntry" style="width: 30px;"> px </span></td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Hidden{% endtrans %}:</td>
								<td width="73%">
									<label><input type="checkbox" name="ColumnIsHidden" value="1" id="ColumnIsHidden" class="txFld inputEntry">{% trans %}Yes{% endtrans %}</label>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Show Multiple Values As Separate Entries{% endtrans %}:</td>
								<td width="73%">
									<label> <input type="checkbox" name="showMultiAsSeparate" value="1" id="showMultiAsSeparate" class="inputEntry">{% trans %}Yes{% endtrans %}</label>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">Mobile Settings: </td>
								<td width="73%">
									<label> <input type="checkbox" name="MobileTitle" value="1" class="inputEntry" id="MobileTitle">{% trans %}Use for row title{% endtrans %}</label>&nbsp;&nbsp;
									<label> <input type="checkbox" name="MobileDetail" value="1" class="inputEntry" id="MobileColumn">{% trans %}Use for row detail{% endtrans %}</label>									
								</td>
							</tr>							
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}XML Node Name{% endtrans %}:</td>
								<td width="73%"><span id="XmlNode" class="txFld"></span></td>
							</tr>
						</table>
					</div>
					<div id="tabs-2">
						<table class="tblRows" width="100%" border="0" cellspacing="0" cellpadding="0">
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Default sort{% endtrans %}:</td>
								<td width="73%">
									<label><input type="radio" name="SortType" value="N" class="inputEntry">{% trans %}None{% endtrans %}</label>
									<label><input type="radio" name="SortType" value="S" class="inputEntry">{% trans %}Sorted{% endtrans %}</label>
									<label><input type="radio" name="SortType" value="C" class="inputEntry">{% trans %}Categorized{% endtrans %}</label>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Order{% endtrans %}:</td>
								<td width="73%">
									<label><input type="radio" name="SortOrder" value="ascending" class="inputEntry">{% trans %}Ascending{% endtrans %}</label>
									<label><input type="radio" name="SortOrder" value="descending" class="inputEntry">{% trans %}Descending{% endtrans %}</label>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%"></td>
								<td width="73%">
									<label><input type="checkbox" name="HasCustomSort" value="1" id="HasCustomSort" class="inputEntry">{% trans %}Allow custom sort by clicking column heading{% endtrans %}</label>
								</td>
							</tr>
						</table>
					</div>
					<div id="tabs-3">
						<table class="tblRows" width="100%" border="0" cellspacing="0" cellpadding="0">
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Alignment{% endtrans %}:</td>
								<td width="73%">
									<label> <input type="radio" name="TextAlign" value="left" class="inputEntry">{% trans %}Left{% endtrans %}</label>
									<label> <input type="radio" name="TextAlign" value="center" class="inputEntry">{% trans %}Center{% endtrans %}</label>
									<label> <input type="radio" name="TextAlign" value="right" class="inputEntry">{% trans %}Right{% endtrans %}</label>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Font{% endtrans %}:</td>
								<td width="73%">
									<select name="Font" id="Font" class="inputEntry">
										<option value="Verdana">Verdana
										<option value="Arial">Arial
										<option value="Times New Roman">Times New Roman
										<option value="Courier">Courier
										<option value="icon">System
										<option value="cursive">Cursive
										<option value="Webdings">Webdings
										<option value="Wingdings">Wingdings
									</select>
					 				&nbsp;&nbsp;{% trans %}Size{% endtrans %}: 
									<select name="FontSize" id="FontSize" class="inputEntry">
										<option>6pt
										<option>7pt
										<option>11px
										<option>12px
										<option>13px
										<option>11pt
										<option>12pt
										<option>13pt
										<option>14pt
										<option>15pt
										<option>16pt
										<option>17pt
										<option>111px
										<option>112px
										<option>20pt
									</select>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Color{% endtrans %}:</td>
								<td width="73%">
									{% trans %}Text{% endtrans %}: 
									<input name="FontColor" value="" id="FontColor" class="inputEntry" style="width:55px;" type=color>
									<img id="btn-BorderColorPicker" style="display:none;" src="{{ asset('bundles/docova/images/colorpicker.gif') }}" onmouseover="this.style.cursor='pointer'" onmouseout = "this.style.cursor='normal'" onclick="Docova.Utils.colorPicker(event, 'FontColor')" alt="Color"></img>
									&nbsp;&nbsp;{% trans %}Background{% endtrans %}:
									<input name="BackgroundColor" value="" id="BackgroundColor" class="inputEntry" style="width:55px;" type=color>
									<img id="btn-BorderColorPicker" style="display:none;" src="{{ asset('bundles/docova/images/colorpicker.gif') }}" onmouseover="this.style.cursor='pointer'" onmouseout = "this.style.cursor='normal'" onclick="Docova.Utils.colorPicker(event, 'BackgroundColor')" alt="Color"></img>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Attributes{% endtrans %}:</td>
								<td width="73%">
									<label> <input type="checkbox" name="FontWeight" value="bold" id="FontWeight" class="inputEntry">{% trans %}Bold{% endtrans %}</label>
									<label> <input type="checkbox" name="FontStyle" value="italic" id="FontStyle" class="inputEntry">{% trans %}Italic{% endtrans %}</label>
									<label> <input type="checkbox" name="TextDecoration" value="underline" id="TextDecoration" class="inputEntry">{% trans %}Underline{% endtrans %}</label>
								</td>
							</tr>
						</table>
					</div>
					<div id="tabs-4">
						<table class="tblRows" width="100%" border="0" cellspacing="0" cellpadding="0">
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Decimal places{% endtrans %}:</td>
								<td width="73%">
									<select name="DecimalPlaces" id="DecimalPlaces" class="inputEntry">
										<option value="A">{% trans %}Auto{% endtrans %}
										<option value="0">0										
										<option value="1">1
										<option value="2">2
										<option value="3">3
										<option value="4">4
										<option value="5">5
										<option value="6">6
									</select>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Prefix{% endtrans %}:</td>
								<td width="73%">
									<input name="NumberPrefix" value="" id="NumberPrefix" class="inputEntry" style="width:60px;">
									<span class="txFldInfo">({% trans %}Optional currency symbol etc.{% endtrans %})</span>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Suffix{% endtrans %}:</td>
								<td width="73%">
									<input name="NumberSuffix" value="" id="NumberSuffix" class="inputEntry" style="width:60px;">
									<span class="txFldInfo">({% trans %}Optional units etc.{% endtrans %})</span>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Options{% endtrans %}:</td>
								<td width="73%">
									<label><input type="checkbox" name="Percentage" value="1" id="Percentage" class="inputEntry">{% trans %}Percentage{% endtrans %} (value*100)%</label><br>
									<label><input type="checkbox" name="NegativeFormat" value="1" id="NegativeFormat" class="inputEntry">{% trans %}Parentheses on negative numbers{% endtrans %}</label><br>
									<label><input type="checkbox" name="ThousandFormat" value="1" id="ThousandFormat" class="inputEntry">{% trans %}Punctuated at thousands{% endtrans %}</label><br>
									<label><input type="checkbox" name="BlankFormat" value="1" id="BlankFormat" class="inputEntry">{% trans %}Show blank entries as zeroes{% endtrans %}</label><br><br>
								</td>
							</tr>
						</table>
					</div>
					<div id="tabs-5">
						<table class="tblRows" width="100%" border="0" cellspacing="0" cellpadding="0">
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Type{% endtrans %}:</td>
								<td width="73%">
									<label> <input type="radio" name="TotalType" value="0" class="inputEntry">{% trans %}None{% endtrans %}</label>
									<label> <input type="radio" name="TotalType" value="1" class="inputEntry">{% trans %}Value sum{% endtrans %}</label>
									<label> <input type="radio" name="TotalType" value="2" class="inputEntry">{% trans %}Record count{% endtrans %}</label>
									<label> <input type="radio" name="TotalType" value="3" class="inputEntry">{% trans %}Average{% endtrans %}</label>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Alignment{% endtrans %}:</td>
								<td width="73%">
									<label> <input type="radio" name="TTextAlign" value="left" class="inputEntry">{% trans %}Left{% endtrans %}</label>
									<label> <input type="radio" name="TTextAlign" value="center" class="inputEntry">{% trans %}Center{% endtrans %}</label>
									<label> <input type="radio" name="TTextAlign" value="right" class="inputEntry">{% trans %}Right{% endtrans %}</label>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Font{% endtrans %}:</td>
								<td width="73%">
									<select name="TFont" id="TFont" class="inputEntry">
										<option value="Verdana">Verdana
										<option value="Arial">Arial
										<option value="Times New Roman">Times New Roman
										<option value="Courier">Courier
										<option value="icon">System
										<option value="cursive">Cursive
									</select>
					 				&nbsp;&nbsp;{% trans %}Size{% endtrans %}: 
									<select name="TFontSize" id="TFontSize" class="inputEntry">
										<option>6pt
										<option>7pt
										<option>11px
										<option>12px
										<option>13px
										<option>11pt
										<option>12pt
										<option>13pt
										<option>14pt
										<option>15pt
										<option>16pt
										<option>17pt
										<option>111px
										<option>112px
										<option>20pt
									</select>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Color{% endtrans %}:</td>
								<td width="73%">
									{% trans %}Text{% endtrans %}: 
									<input name="TFontColor" value="" id="TFontColor" class="inputEntry" style="width:55px;" type=color>
									<img id="btn-BorderColorPicker" style="display:none;" src="{{ asset('bundles/docova/images/colorpicker.gif') }}" onmouseover="this.style.cursor='pointer'" onmouseout = "this.style.cursor='normal'" onclick="Docova.Utils.colorPicker(event, 'TFontColor')" alt="Color"></img>
									&nbsp;&nbsp;{% trans %}Background{% endtrans %}:
									<input name="TBackgroundColor" value="" id="TBackgroundColor" class="inputEntry" style="width:55px;" type=color>
									<img id="btn-BorderColorPicker" style="display:none;" src="{{ asset('bundles/docova/images/colorpicker.gif') }}" onmouseover="this.style.cursor='pointer'" onmouseout = "this.style.cursor='normal'" onclick="Docova.Utils.colorPicker(event, 'TBackgroundColor')" alt="Color"></img>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Attributes{% endtrans %}:</td>
								<td width="73%">
									<label> <input type="checkbox" name="TFontWeight" value="bold" id="TFontWeight" class="inputEntry">{% trans %}Bold{% endtrans %}</label>
									<label> <input type="checkbox" name="TFontStyle" value="italic" id="TFontStyle" class="inputEntry">{% trans %}Italic{% endtrans %}</label>
									<label> <input type="checkbox" name="TTextDecoration" value="underline" id="TTextDecoration" class="inputEntry">{% trans %}Underline{% endtrans %}</label>
								</td>
							</tr>
						</table>
					</div>
					<div id="tabs-6">
						<table class="tblRows" width="100%" border="0" cellspacing="0" cellpadding="0">
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Alignment{% endtrans %}:</td>
								<td width="73%">
									<label> <input type="radio" name="HTextAlign" value="left" id="HTextAlign" class="inputEntry">{% trans %}Left{% endtrans %}</label>
									<label> <input type="radio" name="HTextAlign" value="center" id="HTextAlign" class="inputEntry">{% trans %}Center{% endtrans %}</label>
									<label> <input type="radio" name="HTextAlign" value="right" id="HTextAlign" class="inputEntry">{% trans %}Right{% endtrans %}</label>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Font{% endtrans %}:</td>
								<td width="73%">
									<select name="HFont" id="HFont" class="inputEntry">
										<option value="Verdana">Verdana
										<option value="Arial">Arial
										<option value="Times New Roman">Times New Roman
										<option value="Courier">Courier
										<option value="icon">System
										<option value="cursive">Cursive
									</select>
					 				&nbsp;&nbsp;{% trans %}Size{% endtrans %}:
									<select name="HFontSize" id="HFontSize" class="inputEntry">
										<option>6pt
										<option>7pt
										<option>11px
										<option>12px
										<option>13px
										<option>11pt
										<option>12pt
										<option>13pt
										<option>14pt
										<option>15pt
										<option>16pt
										<option>17pt
										<option>111px
										<option>112px
										<option>20pt
									</select>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Color{% endtrans %}:</td>
								<td width="73%">
									{% trans %}Text{% endtrans %}: 
									<input name="HFontColor" value="" id="HFontColor" class="inputEntry" style="width:55px;" type=color>
									<img id="btn-BorderColorPicker" style="display:none;" src="{{ asset('bundles/docova/images/colorpicker.gif') }}" onmouseover="this.style.cursor='pointer'" onmouseout = "this.style.cursor='normal'" onclick="Docova.Utils.colorPicker(event, 'HFontColor')" alt="Color"></img>
									&nbsp;&nbsp;{% trans %}Background{% endtrans %}:
									<input name="HBackgroundColor" value="" id="HBackgroundColor" class="inputEntry" style="width:55px;" type=color>
									<img id="btn-BorderColorPicker" style="display:none;" src="{{ asset('bundles/docova/images/colorpicker.gif') }}" onmouseover="this.style.cursor='pointer'" onmouseout = "this.style.cursor='normal'" onclick="Docova.Utils.colorPicker(event, 'HBackgroundColor')" alt="Color"></img>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Attributes{% endtrans %}:</td>
								<td width="73%">
									<label> <input type="checkbox" name="HFontWeight" value="bold" id="HFontWeight" class="inputEntry">{% trans %}Bold{% endtrans %}</label>
									<label> <input type="checkbox" name="HFontStyle" value="italic" id="HFontStyle" class="inputEntry">{% trans %}Italic{% endtrans %}</label>
									<label> <input type="checkbox" name="HTextDecoration" value="underline" id="HTextDecoration" class="inputEntry">{% trans %}Underline{% endtrans %}</label>
								</td>
							</tr>
						</table>
					</div>
				</div>
				<!-- end tabs div -->
				<div id="tabsView">
					<ul>
						<li><a href="#tabs-v1">{% trans %}View Properties{% endtrans %}</a></li>
						<li><a href="#tabs-v2">{% trans %}Calendar Settings{% endtrans %}</a></li>
						<li><a href="#tabs-v3">{% trans %}Gantt Settings{% endtrans %}</a></li>
						<li><a href="#tabs-v4">{% trans %}View Javascript{% endtrans %}</a></li>
						<li><a href="#tabs-v5">{% trans %}View Style{% endtrans %}</a></li>
				 	</ul>
					<div id="tabs-v1">
						<table width="100%" class="tblRows">
							<tr>
								<td width="27%" class="frmLabel">{% trans %}View Name{% endtrans %}:</td>
								<td width="73%"><input name="ViewName" value="{{ appView ? appView.getViewName : '' }}" id="ViewName" class="inputEntry" style="width: 300px"></td>
							</tr>
							<tr>
								<td width="27%" class="frmLabel">{% trans %}View Alias{% endtrans %}:</td>
								<td width="73%"><input name="ViewAlias" value="{{ appView ? appView.getViewAlias : '' }}" id="ViewAlias" class="inputEntry" style="width: 300px"></td>
							</tr>
							<tr>
								<td width="27%" class="frmLabel">{% trans %}Select Documents{% endtrans %}:</td>
								<td width="73%"><label><input type="checkbox" name="EmulateFolder" value="1" {{ appView ? appView.getEmulateFolder ? 'checked="checked"' : '' }} id="EmulateFolder" class="inputEntry"/> {% trans %}Select Manually{% endtrans %}</label></td>
							</tr>
							<tr>
								<td width="27%" class="frmLabel">{% trans %}Personalized Content{% endtrans %}:</td>
								<td width="73%"><label><input type="checkbox" name="PrivateOnFirstUse" value="1" id="PrivateOnFirstUse" class="inputEntry">{% trans %}Content personal to each user{% endtrans %}</label></td>
							</tr>
							<tr>
								<td width="27%" class="frmLabel">View Selection Type:</td>
								<td width="73%">
									<label><input type="radio" name="ViewSelectionType" value="F" {{ not appView or appView.getSelectionType == 'F' ? 'checked="checked"' }}/> Form</label>
									<label><input type="radio" name="ViewSelectionType" value="S" {{ appView and appView.getSelectionType == 'S' ? 'checked="checked"' }}/> $$DOCOVA Selection Script</label>
								</td>
							</tr>
							<tr id="ViewSelectionF" {{ appView and appView.getSelectionType != 'F' ? 'style="display:none;"' : '' }}>
								<td width="27%" class="frmLabel">Select a form</td>
								<td width="73%">
									<select id="SelectionForm" name="SelectionForm" class="inputEntry" style="width:300px;">
										<option value="">- Select -</option>
									{% if forms %}
										{% for item in forms %}
										<option {{ appView and item in appView.getViewQuery ? 'selected="selected"' : '' }} value="{{ item }}">{{ item }}</option>
										{% endfor %}
									{% endif %}
									</select>
								</td>
							</tr>
							<tr id="ViewSelectionS" style="{{ not appView or appView.getSelectionType != 'S' ? 'display:none;' : '' }}">
								<td width="27%" class="frmLabel">{% trans %}Selection $$DOCOVAScript{% endtrans %}:</td>
								<td width="73%">
									<span class="longtext_values" target="ViewSelectionFormula">{{ appView ? appView.getViewQuery|escape : "SELECT Form='Enter Form Name'" }}</span>
									<span style="display:none;"><textarea id="ViewSelectionFormula" name="ViewSelectionFormula" class="manualEntry">{{ appView ? appView.getViewQuery|escape : "SELECT Form='Enter Form Name'" }}</textarea></span>
									<input type="hidden" name="TranslatedSelectionFormula" value="" id="TranslatedSelectionFormula" />
								</td>
							</tr>
							<tr>
								<td width="27%" class="frmLabel">{% trans %}Show Responses In Hierarchy{% endtrans %}:</td>
								<td width="73%">
									<label> <input type="radio" name="RespHierarchy" value="1" {{ appView and  appView.getRespHierarchy ? 'checked="checked"' : '' }} id="RespHierarchy" class="inputEntry">{% trans %}Yes{% endtrans %}</label>
									<label> <input type="radio" name="RespHierarchy" value="0" {{ not appView or (appView and not appView.getRespHierarchy) ? 'checked="checked' : '' }} id="RespHierarchy" class="inputEntry">{% trans %}No{% endtrans %}</label>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Response Colspan{% endtrans %}:</td>
								<td width="73%"><input name="RespColspan" value="{{ appView ? appView.getRespColspan : 0 }}" id="RespColspan" class="inputEntry"></td>
							</tr>
							<tr>
								<td width="27%" class="frmLabel">{% trans %}Auto Collapse View{% endtrans %}:</td>
								<td width="73%"><label> <input type="checkbox" name="AutoCollapse" value="1" {{ appView and appView.getAutoCollapse ? 'checked="checked"' : '' }} id="AutoCollapse">{% trans %}Yes{% endtrans %}</label></td>
							</tr>
							<tr>
								<td width="27%" class="frmLabel">{% trans %}Search{% endtrans %}:</td>
								<td width="73%"><label> <input type="checkbox" name="ViewSearch" value="1" {{ appView and appView.getViewFtSearch ? 'checked="checked"' : '' }} id="ViewSearch">{% trans %}Allow Full Text Searching{% endtrans %}</label></td>
							</tr>
							<tr>
								<td width="27%" class="frmLabel">{% trans %}Documents from view open  in edit mode{% endtrans %}:</td>
								<td width="73%"><label> <input type="checkbox" name="OpenDocInEditMode" value="1" {{ appView and appView.getOpenInEdit ? 'checked="checked"' : '' }} id="OpenDocInEditMode">{% trans %}Yes{% endtrans %}</label></td>
							</tr>
							<tr>
								<td width="27%" class="frmLabel">Open in Dialog:</td>
								<td width="73%"><label> <input type="checkbox" name="OpenInDialog" value="1" {{ appView and appView.getOpenInDialog ? 'checked="checked"' : '' }} id="OpenInDialog">{% trans %}Yes{% endtrans %}</label></td>
							</tr>
							<tr valign="top">
				      			<td width="27%" class="frmLabel">{% trans %}Show selection margin{% endtrans %}:</td>
								<td width="73%"><label> <input type="checkbox" name="ShowSelection" value="1" {{ appView and appView.getShowSelection ? 'checked="checked"' : (not appView) ? 'checked="checked"' : '' }}  id="ShowSelection">{% trans %}Yes{% endtrans %}</label></td>
							</tr>
							<tr>
								<td width="27%" class="frmLabel">{% trans %}Paging{% endtrans %}:</td>
								<td width="73%"><input type="checkbox" name="UseContentPaging" value="1" {{ appView and appView.getEnablePaging ? 'checked="checked"' : '' }} id="UseContentPaging">{% trans %}Enable Paging Support{% endtrans %}</label></td>
							</tr>
							<tr valign="top">
				      			<td width="27%" class="frmLabel">{% trans %}Number of documents per page{% endtrans %}:</span></td>
								<td width="73%"><input name="MaxDocCount" value="{{ appView ? appView.getMaxDocCount : 100 }}" id="MaxDocCount" class="inputEntry"></td>
							</tr>
							<tr>
								<td width="27%" class="frmLabel">{% trans %}View Type{% endtrans %}:</td>
								<td width="73%">
									<label><input type="radio" name="ViewType" value="Standard" {{ not appView or appView.getViewType == 'Standard' ? 'checked' : '' }} id="Standard">{% trans %}Standard{% endtrans %}</label>
									<label><input type="radio" name="ViewType" value="Calendar" {{ appView and appView.getViewType == 'Calendar' ? 'checked' : '' }} id="Calendar">{% trans %}Calendar{% endtrans %}</label>
									<label><input type="radio" name="ViewType" value="Gantt" {{ appView and appView.getViewType == 'Gantt' ? 'checked' : '' }} id="Gantt">{% trans %}Gantt{% endtrans %}</label>
								</td>
							</tr>
							<tr>
								<td width="27%" class="frmLabel">{% trans %}Update Design{% endtrans %}:</td>
								<td width="73%"><label> <input type="checkbox" name="ProhibitDesignUpdate" value="PDU" {{ appView and appView.getPDU ? 'checked="checked"' : '' }} id="ProhibitDesignUpdate">{% trans %}Prohibit Design Update{% endtrans %}</label></td>
							</tr>
						</table>
					</div>
					<div id="tabs-v2">
						<table width="100%" class="tblRows">
							<tr>
								<td width="27%" class="frmLabel">{% trans %}Show Weekends{% endtrans %}:</td>
								<td width="73%">
									<label><input type="radio" name="Weekends" value="true" {{ not appView or appView.getWeekends ? 'checked' : '' }} id="Weekends" class="inputEntry">{% trans %}Yes{% endtrans %}</label>
									<label><input type="radio" name="Weekends" value="false" {{ appView and not appView.getWeekends ? 'checked' : '' }} id="Weekends" class="inputEntry">{% trans %}No{% endtrans %}</label>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}First Day of Week{% endtrans %}:</td>
								<td width="73%">
									<select name="FirstDay" id="ProhibitDesignUpdate_1_2" class="inputEntry">
										<option value="0" {{ not appView or not appView.getFirstDay ? 'selected' : '' }}>{% trans %}Sunday{% endtrans %}
										<option value="1" {{ appView and appView.getFirstDay ? 'selected' : '' }}>{% trans %}Monday{% endtrans %}
									</select>
								</td>
							</tr>
							<tr>
								<td width="27%" class="frmLabel">{% trans %}Style{% endtrans %}:</td>
								<td width="73%">
									<label><input type="radio" name="Style" value="true"  {{ not appView or appView.getStyle ? 'checked' : '' }} id="Style" class="inputEntry">{% trans %}Use Theme{% endtrans %}</label>
									<label><input type="radio" name="Style" value="false" {{ appView and not appView.getStyle ? 'checked' : '' }} id="Style" class="inputEntry">{% trans %}Basic{% endtrans %}</label>
								</td>
							</tr>
							<tr>
								<td width="27%" class="frmLabel">{% trans %}Day onClick Function Name{% endtrans %}:</td>
								<td width="73%"><input name="DayClick" value="{{ appView ? appView.getDayClick  : '' }}" id="DayClick" class="manualEntry" style="width: 300px;"></td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Day onDblClick Function Name{% endtrans %}:</td>
								<td width="73%"><input name="DayDblClick" value="{{ appView ? appView.getDayDblClick  : '' }}" id="DayDblClick" class="manualEntry" style="width: 300px;"></td>
							</tr>
							<tr>
								<td width="27%" class="frmLabel">{% trans %}Event onClick Function Name{% endtrans %}:</td>
								<td width="73%"><input name="EventClick" value="{{ appView ? appView.getEventClick  : '' }}" id="EventClick" class="manualEntry" style="width: 300px;"></td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Event onDblClick Function Name{% endtrans %}:</td>
								<td width="150px"><input name="EventDblClick" value="{{ appView ? appView.getEventDblClick  : '' }}" id="EventDblClick" class="manualEntry" style="width: 300px;"></td>
							</tr>
							<tr>
								<td width="27%" class="frmLabel">{% trans %}Event Background Colour{% endtrans %}:</td>
								<td width="73%">
									<input name="EventColor" value="{{ appView ? appView.getEventColor  : '#9ec8e9' }}" id="EventColor" class="inputEntry" style="width:55px;" type=color>
									<img id="btn-BorderColorPicker" style="display:none;" src="colorpicker.gif" onmouseover="this.style.cursor='pointer'" onmouseout = "this.style.cursor='normal'" onclick="Docova.Utils.colorPicker(event, 'EventColor')" alt="Color"></img>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Event Text Colour{% endtrans %}:</td>
								<td width="73%">
									<input name="EventTextColor" value="{{ appView ? appView.getEventTextColor  : '' }}" id="EventTextColor" class="inputEntry" style="width:55px;" type=color>
									<img id="btn-BorderColorPicker" style="display:none;" src="colorpicker.gif" onmouseover="this.style.cursor='pointer'" onmouseout = "this.style.cursor='normal'" onclick="Docova.Utils.colorPicker(event, 'EventTextColor')" alt="Color"></img>
								</td>
							</tr>
						</table>
					</div>
					<div id="tabs-v3">
                        <table width="100%" class="tblRows">
                            <tr>
                            	<td width="27%" class="frmLabel">{% trans %}Form for New Tasks{% endtrans %}:</td>
                            	<td width="73%">
                            		<select name="GanttDefaultForm" id="GanttDefaultForm" class="inputEntry" style="width: 305px">
                            			<option></option>
                            		{% if forms|length > 0 %}
                            			{% for item in forms %}
                            			<option value="{{ item }}" {{ appView and appView.getGanttDefaultForm == item ? 'selected' : '' }}>{{ item }}</option>
                            			{% endfor %}
                            		{% endif %}
                            		</select>
                            	</td>
                            </tr>
                            <tr>
                            	<td width="27%" class="frmLabel">{% trans %}Resource Assignment{% endtrans %}:</td>
                            	<td width="73%">
                            		<label><input type="radio" name="GanttResourceType" id="GanttResourceType" value="N" {{ appView and appView.getGanttResourceType == 'N' ? 'checked' : '' }} class="inputEntry"> {% trans %}None{% endtrans %}</label>
                            		<label><input type="radio" name="GanttResourceType" id="GanttResourceType" value="M" {{ appView and appView.getGanttResourceType == 'M' ? 'checked' : '' }} class="inputEntry"> {% trans %}Manual{% endtrans %}</label>
                            		<label><input type="radio" name="GanttResourceType" id="GanttResourceType" value="F" {{ appView and appView.getGanttResourceType == 'F' ? 'checked' : '' }} class="inputEntry"> {% trans %}Formula{% endtrans %}</label>
                            		<label><input type="radio" name="GanttResourceType" id="GanttResourceType" value="A" {{ not appView or appView.getGanttResourceType == 'A' ? 'checked' : '' }} class="inputEntry"> {% trans %}Address Book{% endtrans %}</label>
                            	</td>
                            </tr>
                            <tr id="dispGanttResourceOptions" style="display:{{ appView and appView.getGanttResourceType == 'M' ? '' : 'none' }};">
                            	<td width="27%" class="frmLabel">{% trans %}Resources{% endtrans %}:</td>
                            	<td width="73%">
                            		<textarea id="GanttResourceOptions" name="GanttResourceOptions" cols="75" rows="4" style="white-space: pre; border: 1 solid #cccccc;resize;none;">{{ appView ? appView.getGanttResourceOptions }}</textarea>
                            	</td>
                            </tr>
                            <tr id="dispGanttResourceFormula" style="display:{{ appView and appView.getGanttResourceType == 'F' ? '' : 'none' }};">
                            	<td width="27%" class="frmLabel">{% trans %}Resource $$DOCOVAScript{% endtrans %}:</td>
                            	<td width="73%">
									<span class="longtext_values" target="GanttResourceFormula">{{ appView ? appView.getGanttResourceFormula : '' }}</span>
									<span style="display:none;"><textarea id="GanttResourceFormula" name="GanttResourceFormula" class="manualEntry">{{ appView ? appView.getGanttResourceFormula : '' }}</textarea></span>
									<input type="hidden" name="TranslatedGanttResourceFormula" value="" id="TranslatedGanttResourceFormula" />
                            	</td>
                            	<td></td>
                            </tr>
                        </table>
					</div>
					<div id="tabs-v4">
						<div id="dsnJavascriptTab" >
							<div id="dsnJSHeaderCode" style="height:98%; background-color:#ffffff;" >
								<div id="divJSHeaderCode" style="position:relative; height:100%;"> 
									<pre name="JSHeaderCode" id="JSHeaderCode" style="height:100%;"></pre>
								</div>
							</div>
						</div>
					</div>
					<div id="tabs-v5">
						<table class="tblRows" style="width:100%">
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Type{% endtrans %}:</td>
								<td width="73%">
									<select name="viewstyletype" id="viewstyletype" >
										<option value=''>--Select--
										<option >System
										<option >Smokey
										<option >Whitewash
										<option >Airline
										<option >Onyx
									</select>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Alternating Rows Color{% endtrans %}:</td>
								<td width="73%">
									<input name="AltRowColor" value="#EFF0F0" id="AltRowColor" class="inputEntryCSS" style="width:55px;" type=color>
									<img id="btn-BorderColorPicker" style="display:none;" src="{{ asset('bundles/docova/images/colorpicker.gif') }}" onmouseover="this.style.cursor='pointer'" onmouseout = "this.style.cursor='normal'" onclick="Docova.Utils.colorPicker(event, 'AltRowColor')" alt="Color"></img>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Header Background Color{% endtrans %}:</td>
								<td width="73%">
									<input name="HeaderBackgroundColor" value="#A9A9A9" id="HeaderBackgroundColor" class="inputEntryCSS" style="width:55px;" type=color>
									<img id="btn-BorderColorPicker" style="display:none;" src="{{ asset('bundles/docova/images/colorpicker.gif') }}" onmouseover="this.style.cursor='pointer'" onmouseout = "this.style.cursor='normal'" onclick="Docova.Utils.colorPicker(event, 'HeaderBackgroundColor')" alt="Color"></img>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Header Font Color{% endtrans %}:</td>
								<td width="73%">
									<input name="HeaderFontColor" value="#FFFFFF" id="HeaderFontColor" class="inputEntryCSS" style="width:55px;" type=color>
									<img id="btn-BorderColorPicker" style="display:none;" src="{{ asset('bundles/docova/images/colorpicker.gif') }}" onmouseover="this.style.cursor='pointer'" onmouseout = "this.style.cursor='normal'" onclick="Docova.Utils.colorPicker(event, 'HeaderFontColor')" alt="Color"></img>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Header Column Separator Color{% endtrans %}:</td>
								<td width="73%">
									<input name="ColumnSepColor" value="#FFFFFF" id="ColumnSepColor" class="inputEntryCSS" style="width:55px;" type=color>
									<img id="btn-BorderColorPicker" style="display:none;" src="{{ asset('bundles/docova/images/colorpicker.gif') }}" onmouseover="this.style.cursor='pointer'" onmouseout = "this.style.cursor='normal'" onclick="Docova.Utils.colorPicker(event, 'ColumnSepColor')" alt="Color"></img>
									
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}View Row Separator Color{% endtrans %}:</td>
								<td width="73%">
									<input name="RowSepColor" value="#f0f0f0" id="RowSepColor" class="inputEntryCSS" style="width:55px;" type=color>
									<img id="btn-BorderColorPicker" style="display:none;" src="{{ asset('bundles/docova/images/colorpicker.gif') }}" onmouseover="this.style.cursor='pointer'" onmouseout = "this.style.cursor='normal'" onclick="Docova.Utils.colorPicker(event, 'RowSepColor')" alt="Color"></img>
									
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Header Padding{% endtrans %}:</td>
								<td width="73%">
									<input name="HeaderPadding"  id="HeaderPadding" class="inputEntryCSS" style="width:55px;" value="8px">
									
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}View Padding{% endtrans %}:</td>
								<td width="73%">
									<input name="ViewPadding"  id="ViewPadding" class="inputEntryCSS" style="width:55px;" value="8px">
									
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Category Expand/Collapse Icon{% endtrans %}:</td>
								<td width="73%">
									<select id="catIcon" class="inputEntryCSS" style="padding:4px; font-size:18px; font-family: 'Font Awesome 5 Pro', 'Helvetica';">
									    <option value="far fa-arrow-circle-right:far fa-arrow-circle-down">&#xf0a9;/&#xf0ab; </option>
									    <option class="fabold" value="fas fa-arrow-alt-circle-right:fas fa-arrow-alt-circle-down">&#xf35a;/&#xf358; </option>
									    <option class="fabold" value="fas fa-angle-up:fas fa-angle-down">&#xf106;/&#xf107; </option>
									    <option value="far fa-angle-double-up:far fa-angle-double-down">&#xf102;/&#xf103; </option>
									    <option value="far fa-arrow-alt-right:far fa-arrow-alt-down">&#xf356;/&#xf354; </option>
									    <option class="fabold" value="fas fa-arrow-alt-right:fas fa-arrow-alt-down">&#xf356;/&#xf354; </option>
									</select>
								</td>

							</tr>
							
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Category Icon Size{% endtrans %}:</td>
								<td width="73%">
									<input name="catIconSize"  id="catIconSize" class="inputEntryCSS" style="width:55px;" value="14px">
									
								</td>
							</tr>

							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Category Icon Color{% endtrans %}:</td>
								<td width="73%">
									<input name="CatIconColor" value="#6d6666" id="CatIconColor" class="inputEntryCSS" style="width:55px;" type=color>
									<img id="btn-BorderColorPicker" style="display:none;" src="{{ asset('bundles/docova/images/colorpicker.gif') }}" onmouseover="this.style.cursor='pointer'" onmouseout = "this.style.cursor='normal'" onclick="Docova.Utils.colorPicker(event, 'CatIconColor')" alt="Color"></img>
									
								</td>
							</tr>
							
							<tr>
								<td colspan='2' >{% trans %}View CSS{% endtrans %} (<span style='font-size:10px; font-color:lightgray'>{% trans %}Click the apply css button to apply any manual changes to the css below.{% endtrans %})<br> <input type="button" id= "btn-applycss" value="Apply CSS"/></td>
								
							</tr>
							
						
						</table>
						<div id="dsnCSSCode" style="height:98%; background-color:#ffffff;" >
							<div id="divCSSCode" style="position:relative; height:100%;"> 
								<pre name="CSSCode" id="CSSCode" style="height:100%;"></pre>
							</div>
						</div>
					</div>
				</div>
				<!-- end tabsView -->

				<div id="tabsViewAction" style="display: none">
					<ul>
						<li><a href="#tabsAction">{% trans %}Action Properties{% endtrans %}</a></li>
						<li><a href="#prHideShow">{% trans %}Hide/Show{% endtrans %}</a></li>
					</ul>
					<div id="tabsAction">
						<table class="tblRows" width="100%" border="0" cellspacing="0" cellpadding="0">
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Label{% endtrans %}:</td>
								<td width="73%"><input name="ActionLabel" value="" id="ActionLabel" class="inputEntry" style="width: 300px"></td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Show Label{% endtrans %}:</td>
								<td width="73%">
									<label><input type="radio" name="btn_ShowLabel" value="1" checked class="inputEntry">{% trans %}Yes{% endtrans %}</label>
									<label><input type="radio" name="btn_ShowLabel" value="0" class="inputEntry">{% trans %}No{% endtrans %}</label>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">
									{% trans %}Left Icon{% endtrans %}:
									<button type="button" id="btn-PrimaryIcon" class="btn-Standard" style="float: right; width:2.0em; height: 2.0em;"></button>
								</td>
								<td width="73%"><input name="ActionLeftIcon" value="" id="ActionLeftIcon" class="inputEntry"></td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">
									{% trans %}Right Icon{% endtrans %}:
									<button type="button" id="btn-SecondaryIcon" class="btn-Standard" style="float: right; width:2.0em; height: 2.0em;"></button>
								</td>
								<td width="73%"><input name="ActionRightIcon" value="" id="ActionRightIcon" class="inputEntry"></td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Type{% endtrans %}:</td>
								<td width="73%">
									<select name="ActionType" id="ActionType" class="inputEntry">
										<option value="Custom">{% trans %}Custom{% endtrans %}
										<option value="CreateNewDocument">{% trans %}Create New Document{% endtrans %}
										<option value="SaveGantt" disabled="disabled">Save Gantt</option>
									</select>
								</td>
							</tr>
							<tr valign="top" id="FormLabel" style="display: none;">
								<td width="27%" class="frmLabel">{% trans %}Form{% endtrans %}:</td>
								<td width="73%">
									<select name="ActionDocType" id="ActionDocType" class="inputEntry" style="width: 305px">
										<option>-Select-</option>
										{% if forms|length %}
										{% for item in forms %}
											<option value="{{ item }}">{{ item }}</option>
										{% endfor %}
										{% endif %}
									</select>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}On Click{% endtrans %}:</td>
								<td width="73%"><textarea name="ActionOnClick" rows="4"id="ActionOnClick" class="manualEntry" style="border:4px solid #D2D2D2; width:90%; min-height:30px; white-space:pre-wrap;"></textarea></td>
							</tr>
						</table>
					</div>
					<div id="prHideShow" class="ui_widget">
						<table class="tblRows" width="100%" border="0" cellspacing="0" cellpadding="0">
							<tr valign="top">
								<td width="27%" class="frmLabel">{% trans %}Visibility{% endtrans %}:</td>
								<td width="73%">
									<font face="Verdana">{% trans %}Hide when{% endtrans %}:	</font>
									<label><input type="checkbox" name="HideWhen" value="C" class="inputEntry"> {% trans %}Custom{% endtrans %}</label>
									<span id="spanCustomHideWhen" style="display: none;">
										<br><font face="Verdana">{% trans %}Custom hide when $$DOCOVAScript{% endtrans %}:</font><br>
    									<span class="longtext_values" target="CustomHideWhen"></span>
    									<span style="display:none;"><textarea id="CustomHideWhen" class="manualEntry"></textarea></span>
    									<font>{% trans %}$$DOCOVAScript that returns 1 or $$True (hide) or 0 or $$False (show){% endtrans %}</font>
									</span>
								</td>
							</tr>
							<tr valign="top">
								<td width="27%"></td>
								<td width="73%"></td>
							</tr>
						</table>
					</div><!---end prHideWhen--->
				</div>
				<!-- end ui-layout-south -->
			</div>
			<div style="display: none">{{ user.getUsernameDnAbbreviated }}</div>
			<div style="display: none">{% trans %}View{% endtrans %}</div>
			<div id="divJsB64" style="display: none">
				<textarea name="ViewJavascriptTxt" id="viewJavascriptTxt" rows="7" cols="50">{{ appView ? appView.getViewJavaScript(true) : '' }}</textarea>
			</div>
			<div style="display: none">
				<textarea name="viewCSSTxt" id="viewCSSTxt" rows="7" cols="50">{{  viewcss |raw }}</textarea>
			</div>
			<div style="display: none">
				<textarea name="ViewPerspectiveTxt" id="ViewPerspectiveTxt" rows="7" cols="50">{{ appView ? appView.getViewPerspective|raw : '' }}</textarea>
			</div>
			<div style="display: none">
				<textarea name="ViewToolbarTxt" id="ViewToolbarTxt" rows="7" cols="50">{{ toolbar|raw }}</textarea>
			</div>
			<div style="display: none">
				<textarea name="ViewToolbarTWIG" id="ViewToolbarTWIG" rows="7" cols="50"></textarea>
			</div>
			<div style="display: none">
				<textarea name="ViewToolbarTWIG_m" id="ViewToolbarTWIG_m" rows="7" cols="50"></textarea>
			</div>			
			<!------------------Microsoft suggestion to force no cacheing of documents------------>
			<HEAD>
                <META HTTP-EQUIV="Pragma" CONTENT="no-cache">
                <META HTTP-EQUIV="CACHE-CONTROL" CONTENT="0">
                <META HTTP-EQUIV="EXPIRES" CONTENT="0">
			</HEAD>
			<!------------------END SUBFORM sfKillCache  ------------>
	</form>
</body>
</html>