<!DOCTYPE HTML>
<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1.5 user-scalable=yes">
<meta HTTP-EQUIV="CACHE-CONTROL" CONTENT="private">
<title>DOCOVA Mobile</title>
{% set isMobileApp = true %}
{{ f_SetIsMobile(true) }}
{{ f_SetUser(user) }}
{% set date_format = settings.getDefaultDateFormat|replace({'MM' : 'm', 'DD' : 'd', 'YYYY' : 'Y'}) %}
{% set userAgentBrowser=app.request.server.get('HTTP_USER_AGENT') %}
{% set mbthemetitlebar = 'b' %}
{% set mbthemedocuments = 'c' %}
{% set mbthemefolders = 'c' %}
{% set mbthemedefault = 'a' %}
{% set deviceType = '' %}
{% if 'iphone' in userAgentBrowser|lower  %}
  {% set deviceType ="ios" %}
{% elseif 'android' in userAgentBrowser|lower %}
  {% set deviceType ="android" %}
{% else %}
  {% set deviceType ="Unknown" %}
{% endif %}
{# for testing only - DELETE #}
{#%  set deviceType ="android" %#}
<link rel="stylesheet" href="{{ asset('bundles/docova/jquery.mobile/jquery.mobile.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/jquery.mobile/jquery.mobile.structure.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/jquery.mobile/jquery.mobile.theme.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/jquery.mobile.plugins/jqmDateBox/jqm-datebox.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/css/mobile/mobile.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/font-awesome/css/all.min.css') }}" type="text/css" />

<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/jquery/jquery.js') }}"></script>

<style type="text/css">

    /* this is a fix for android app showing blank list in combination with android:hardwareAccelerated="true" */
    body div {
        -webkit-transform: translate3d(0,0,0);
    }
    /*   Some platforms currently have issues with transitions. If you are experiencing flickers and flashes during or at the end of a transition
    we suggest the following workaround. Please note that this workaround should be thoroughly tested on the target platform
    before deployment. This workaround is known to cause performance issues and browser crashes on some platforms,
    especially Android. Add the following code to your custom css.*/
    .ui-page { -webkit-backface-visibility: hidden; }

    .iframe-container {
        position: relative;
        overflow: hidden;
        padding-top: 100%;          
    }  
    .iframe-container iframe {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border: 0;
    }
    div.searchPanel {
        padding-left: 0;
        padding-top: 0;
        padding-bottom: 0;
        padding-right: 20px;
        margin: 0px;        
    }
    #search-basic3, #search-basicapp{
        padding-top:0;
        padding-bottom:0px;
    }
    .doSearchButton {
        position: absolute;
        right: 0;
        top: 50%;
        margin: 10px .3125cm 0;
        border: 0;
        background-color: transparent;    
    }
    .ui-focus, .ui-btn:focus {
        -moz-box-shadow: none !important;
        -webkit-box-shadow: none !important;
        box-shadow: none !important;
    }
</style>

<script type="text/javascript">
   //GLOBAL VARS
   var c_name = "DOCOVAMOBILE_HIST";   //cookie name for storing history
   var showStatusMsgFlag = true;    //whether to show or hide status messages
   var librarylist = new Array();    //array of library connection info
   var curpage = "";             //url of currently loaded page
   var removepage = "";     //id of page element in the dom to remove
   var reloaded = false;     //flag if this site has been through a reload from history already
   var isIE={{ 'Trident/' in userAgentBrowser ? "true" : "false" }};
   var browser="{{ app.request.server.get('HTTP_USER_AGENT') }}"
   var showProgressSpinner = true;
   var showProgressSpinnerForPopupSelect = true;
   var debugToConsole = true;
   var pageTransition = "none";

   var info = {
	  "UserName" : "{{ user.getUserNameDn|replace({'\\': '\\\\'}) }}",
	  "UserNameAB" : "{{ user.getUserNameDnAbbreviated|replace({'\\': '\\\\'}) }}",
	  "UserNameCN" : "{{ user.username }}",
	  "isMobile" : "true"
   };

   function getinfovar(){
     return info;
   }		
   
   
   //configuration for various document/page types
    var viewtypes = {
        "libraries": {
            "name": "libraries",
            "url": "{{ path('docova_getapps') }}",
            "iconimg": "",
            "pagetemplate": "libraries_template",
            "storehistory": true
        },
        "application": {
            "name": "application",
            "url": "",
            "iconimg": "",
            "pagetemplate": "",
            "storehistory": true
        },
        "librarygroup": {
            "name": "librarygroup",
            "url": "",
            "iconimg": "",
            "pagetemplate": "libraries_template",
            "storehistory": true
        },
        "library": {
            "name": "library",
            "url": "{{path('docova_getfolders')}}?LibraryId=[LibraryID]&LazyLoad=true",
            "iconimg": "<i class='fas fa-university ui-li-icon' />",
            "pagetemplate": "rootfolders_template",
            "storehistory": true
        },
        "folder": {
            "name": "folder",
            "url": "{{path('docova_getfolders')}}?LibraryId=[LibraryID]&LazyLoad=true&FolderId=[FolderID]",
            "urldocs": "{{path('docova_documentbyfolder')}}?restricttocategory=[FolderID]&mobile=true",
            "iconimg": "<i class='far fa-folder ui-li-icon' />",
            "pagetemplate": "subfolders_template",
            "storehistory": true
        },
        "menu": {
            "name": "menu",
            "url": "{{path('docova_getmenudata')}}?LibraryId=[LibraryID]&MenuId=[MenuID]",
            "iconimg": "",
            "pagetemplate": "menu_template",
            "storehistory": true
        },
        "view": {
            "name": "view",
            "url": "{{path('docova_loadappviewmobile')}}/[ViewID]/[LibraryID]",
            'urlactions': "{{path('docova_loadapptoolbar')}}/[LibraryID]/[ViewID]?mobile=true",
            "iconimg": "",
            "pagetemplate": "view_template",
            "storehistory": true
        },
        "page": {
            "name": "page",
            "url": "{{ path('docova_viewpage') }}/[PageID]?openPage&AppID=[LibraryID]&Mobile=true{{ isMobileApp ? '&type=mobileApp' : '' }}&device={{ deviceType }}",
            "iconimg": "",
            "pagetemplate": "page_template",
            "storehistory": true
        },
        "form": {
            "name": "form",
            "url": "{{ path('docova_openform') }}/[FormID]?openForm&AppID=[LibraryID]&Mobile=true{{ isMobileApp ? '&type=mobileApp' : '' }}&device={{ deviceType }}",
            "iconimg": "",
            "pagetemplate": "form_template",
            "storehistory": true
        },
        "js": {
            "name": "js",
            "url": "",
            "iconimg": "",
            "pagetemplate": "",
            "storehistory": false
        },
        "heading": {
            "name": "heading",
             "url": "",
             "iconimg": "",
             "pagetemplate": "",
             "storehistory": false
        },
        "appdocument": {
            "name": "appdocument",
            "url": "{{ path('docova_readappdocument') }}/[DocID]?OpenDocument&ParentUNID=[LibraryID]&Mobile=true{{ isMobileApp ? '&type=mobileApp' : '' }}&device={{ deviceType }}",
            "iconimg": "<i class='far fa-file ui-li-icon' />",
            "pagetemplate": "document_template",
            "storehistory": true
        },
        "editappdocument": {
            "name": "editappdocument",
            "url": "{{ path('docova_openform') }}/0/[DocID]?EditDocument&ParentUNID=[LibraryID]&AppID=[LibraryID]&Mobile=true{{ isMobileApp ? '&type=mobileApp' : '' }}&device={{ deviceType }}",
            "iconimg": "",
            "pagetemplate": "editdocument_template",
            "storehistory": false
        },
        "document": {
            "name": "document",
            "url": "{{ path('docova_readdocument') }}/[DocID]?OpenDocument&ParentUNID=[FolderID]&Mobile=true{{ isMobileApp ? '&type=mobileApp' : '' }}&device={{ deviceType }}",

            "iconimg": "<i class='far fa-file ui-li-icon' />",
            "pagetemplate": "document_template",
            "storehistory": true
        },
        "editdocument": {
            "name": "editdocument",

            "url": "{{ path('docova_editdocument') }}/[DocID]?EditDocument&Mobile=true{{ isMobileApp ? '&type=mobileApp' : '' }}&device={{ deviceType }}",
            "iconimg": "",
            "pagetemplate": "editdocument_template",
            "storehistory": false
        },
        "adddocument": {
            "name": "adddocument",

            "url": "{{ path('docova_documentpage', { 'mobile' : 'mDocument'}) }}?OpenForm&ParentUNID=[ParentUNID]&folderid=[FolderKey]&typekey=[DocTypeKey]&mode=[Mode]&device={{ deviceType }}",
            "iconimg": "",
            "pagetemplate": "editdocument_template",
            "storehistory": false
        },
        "search": {
            "name": "search",
            "url": "[LibraryPath]/readfolderdataview.xml?OpenAgent",
            "iconimg": "",
            "pagetemplate": "search_template",
            "storehistory": false
        },
        "searchview": {
            "name": "searchview",
            "url": "[LibraryPath]/searchview.xml?OpenAgent",
            "iconimg": "",
            "pagetemplate": "search_template",
            "storehistory": false
        },
        "doctypes": {
            "name": "doctypes",

            "url": "{{ path('docova_popupdoctypes', {'xmobile' : 'xml'}) }}?ReadForm&ParentUNID=[FolderID]",
            "iconimg": "",
            "pagetemplate": "",
            "storehistory": false
        }
    };

    //*************************************************************
    //* manipulate and store initial hash or query parameters
    //*************************************************************
    var hashatload = location.hash;   //used to store any available url hash
   // showDebugMsg("INITIALIZE -> location.hash=" + hashatload);
    if (hashatload == ""){
       var params = location.search;

       var searchfor = "?openpage=";       //look to see if openpage parameter was specified
       var pos = params.toLowerCase().indexOf(searchfor);
       if ( pos == 0){
           params = params.slice(searchfor.length);
       }

       var searchfor = "&bookmark=";   //look to see if bookmark parameter was specified
       var pos = params.toLowerCase().indexOf(searchfor);
       if ( pos > -1){
           params = params.slice(pos + searchfor.length);
           var pos = params.indexOf("&");  //look for next query param delimiter
           if (pos > 0){
                params = params.slice(0, pos) + "?" + params.slice(pos);  //convert initial query param marker form & to ?
           }
       }
       if (params.length > 0){
          hashatload = "#" + params;   //convert params to a hash
       }else{
          hashatload = "#libraries"; // If no other hash specified force Libraries listing to load
       }
    }else{
       location.hash = "";   // Remove the hash so that we can add it later and trigger the hash listener
    };
    // FOR IE 9 & 8 ( pushstate is not supported)
    if (typeof history.pushState !== "undefined") {
      history.pushState("", document.title, window.location.pathname);
    }
    //showDebugMsg("INITIALIZE -> hashatload=" + hashatload);

     //*************************************************************
     //* mobileinit
     //* Listen for initialization of jquery mobile.
     //*************************************************************
     $(document).on('mobileinit', function () {
        //override defaults here
        $.mobile.defaultPageTransition = pageTransition ; // to turn off default page transition
        $.mobile.allowCrossDomainPages = true; // to allow cross domain for AJAX calls
        $.mobile.buttonMarkup.hoverDelay = 0; // to fix delay
        $.mobile.transitionFallbacks.slideout = "none"; //for pages which does not support 3d layout
        $.mobile.hashListeningEnabled = true;
        $.mobile.activeBtnClass = 'unused'; // to disable blue highlighting of selected elements

        // defaults for spinner
        $.mobile.loader.prototype.options.text = "{% trans %}loading{% endtrans %} ...";
        $.mobile.loader.prototype.options.textVisible = true;
        $.mobile.loader.prototype.options.theme = "{{ mbthemedefault }}";
        $.mobile.loader.prototype.options.html = "";
     });
</script>

<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/jquery.mobile/jquery.mobile.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/jquery.mobile.plugins/jqmDateBox/jqm-datebox.core.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/jquery.mobile.plugins/jqmDateBox/jqm-datebox.mode.calbox.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/jquery.mobile.plugins/jqmDateBox/jquery.mobile.datebox.i18n.en.utf8.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/jquery.mobile.plugins/autoComplete/jqm.autoComplete.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/commonFunctions.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/Docova.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/FormulaLanguage.js') }}"></script>

<script type="text/javascript">

//view/download attachment on android
function openAndroidAttachment(url, action) {
    try {
        DOCOVA_MOBILE_HOOK.downloadAndView(encodeURI(url), action);
    } catch (err) {
        var errMsg = "ERROR in openAndroidAttachment: " + err.message;
        //showDebugMsg(errMsg)
        DOCOVA_MOBILE_HOOK.showDocovaErrorMsg(errMsg);
    }

}

//*************************************************************
//* pageinit
//* Listen for initialization of the home page.
//*************************************************************
$(document).on( 'pageinit', '#home', function(e){  //CALLED ON INITIAL LOAD
    //  showDebugMsg("PAGEINIT -> start");

      var hashStr = location.hash;
        // Trigger the hash listener event by changing hash
        // to either a hash present in the original url call
        // or a default set on load
    if (location.hash != hashatload) {
      // to fix IE BUG
        if (isIE) {
            $.mobile.changePage(hashatload)
        } else {
            location.hash = hashatload;
        }
    }
});

// to show spinner on ajax background calls
$(document).ajaxStart(function () {
    $.mobile.loading('show');
}).ajaxStop(function () {
    $.mobile.loading('hide');
});

//*************************************************************
//* pagebeforechange
// Listen for any attempts to call changePage().
//*************************************************************
$(document).on( "pagebeforechange", function( e, data ) {

    // We only want to handle changePage() calls where the caller is
     // asking us to load a page by URL.
    if ( typeof data.toPage === "string" ) {
        //showDebugMsg("   pagebeforechange -> data.toPage=" + data.toPage + " ,curpage=" + curpage);
        if (data.toPage == curpage){
              //showDebugMsg("   pagebeforechange -> PAGECHANGE CANCELLED same page as current");
              e.preventDefault();
              return false;
        }
        var u = $.mobile.path.parseUrl( data.toPage );
        var uhashStr=u.hash;
        //showDebugMsg("     pagebeforechange -> uhashStr=" + uhashStr);

        // Handle any special case url commands here.
        switch(uhashStr.toLowerCase()){
        case "#reload":
              e.preventDefault();

              //do not reload if a reload has already occurred
              //glitch can cause the #reload hash to show up in history multiple times and we do not want multiple reloads
             if (!reloaded){
                   loadHistoryFromCookie();
            }
              reloaded = true;
              break;
        default:
            // Otherwise assume a new url page change.
           var vt = getViewType(uhashStr);
           if ( vt ) {
               // Stop changePage() from happening as normal since
               //we are going to handle the switch ourselves
               e.preventDefault();

               // Call our internal method that builds the content for the list
               showContent( u, vt, data.options, e);
           }
         }
     }else{   // object was passed in data.toPage
          //showDebugMsg("     pagebeforechange -> data.toPage is an object");
          //showDebugMsg("     pagebeforechange -> data.toPage.attr('id')=" + data.toPage.attr("id"));
     }

});

//*************************************************************
//* pagechange
//* After page loaded. Used for applying any late bindings
//* to code loaded via AJAX
//*************************************************************
$(document).on( "pagechange", function( e, data ) {
      //showDebugMsg("PAGECHANGE -> start");
      //showHistoryStack();

    //check to see if a page is scheduled for removal from the internal DOM
    if (removepage != ""){
        //Remove any existing page with the same id that might already exist
       $("#" + removepage).unbind();
       $("#" + removepage).detach();
       $("#" + removepage).remove();
       removepage = "";  //clear any existing page removal variable
    }

    if ( typeof data.toPage === "string" ) {
        //showDebugMsg("     pagechange -> data.toPage=" + data.toPage);
    }else{
        //showDebugMsg("     pagechange -> data.toPage is an object");
        //showDebugMsg("     pagechange -> data.toPage.attr('id')=" + data.toPage.attr("id"));
    }

    var $page = $("#" + $.mobile.activePage.attr('id'));

    {% if not isMobileApp %}
    resizePageContent($page);
    {% endif %}

    //Call functions on pages loaded via xml
    try{
        CustomOnLoadHandler($page);  //perform page specific onload events
    }catch(err){};
    try{
        latebinding($page);  //performs any page specific binding
    }catch(err){};

});


//*************************************************************
//* pagechangefailed
// Listen for any failed page changes.
//*************************************************************
$(document).on("pagechangefailed", function (e, data) {
    //showDebugMsg("PAGECHANGEFAILED -> start");
    if (typeof data.toPage === "string") {
        var u = $.mobile.path.parseUrl(data.toPage);
        var uhashStr = u.hash;
        showDebugMsg("     pagechangefailed -> uhashStr=" + uhashStr);
    } else {
        showDebugMsg("     pagechangefailed -> data.toPage passed as object");
        showDebugMsg("     pagechangefailed -> data.toPage.attr('id')=" + data.toPage.attr("id"));
    }
});


//*************************************************************
// getViewType: determine which view type is being requested
//*************************************************************
function getViewType(urlstring){
    //viewtypes declared as global variable
    for (var vt in viewtypes){
        var re = new RegExp("^#" + viewtypes[vt].name + "\\b");
        if (urlstring.search(re) !== -1){
            return viewtypes[vt];
        }
    }
    return false;
}

//*************************************************************
// showContent: display page content for a specified request
//*************************************************************
function showContent( urlObj, objviewtype, options, e, silent){
    //showDebugMsg("SHOWCONTENT -> start");

    var markup;
    var markupdocs;
    var markupactions;
    var newUrl;

    //librarylist is a global variable storing library connection details
    //it is used in generating urls, so if not already loaded initialize it
    if (getObjectKeyCount(librarylist) == 0){
            getLibraryListingData(librarylist);
     }

    var urlStr=urlObj.href;
    var headingTitle = decodeURIComponent(getUrlParam("listtitle", urlStr));

    var target = objviewtype.name;
    if(objviewtype.name == "application"){
        var libID = getUrlParam("libid", urlStr) || "";
        if(librarylist && librarylist[libID] && librarylist[libID].launchtype){
            //target = target + "_" + librarylist[libID].launchtype;
            target = librarylist[libID].launchtype;
            objviewtype = viewtypes[target];
        }else{
             showMessage("This application has not yet been configured for mobile use.");
             return;
        }
    }
    var newUrl = calcUrl(objviewtype, urlStr);

    switch(target){
    case "libraries":
        headingTitle = "";
        markup = parseLibraries(objviewtype, librarylist);
        if (markup.length > 0){
               displayNewPage(objviewtype, headingTitle, markup, "", "", urlObj, options, e, silent);
        }else{
               showMessage("No subscribed libraries found.");
        }
        break;
    case "library":
       $.ajax({
             url: newUrl,
             cache: false,
             async: true, 
             type: 'GET',
             dataType: "xml"
        })
        .success( function (data, textStatus, jqxhr) {
                markup = parseFolders(data, objviewtype, urlObj, options, e);
                if (markup.length > 0){
                    displayNewPage(objviewtype, headingTitle, markup, "", "", urlObj, options, e, silent);
                }else{
                    showMessage("Library does not contain any folders.");
                }
        })
        .error( function (jqxhr, ajaxOptions, thrownError) {
                showMessage("Unable to retrieve library folders.");
        });
        break;
    case "application":
        $.ajax({
              url: newUrl,
              cache: false,
              async: true, 
              type: 'GET',
              dataType: "html" 
         })
         .success( function (data, textStatus, jqxhr) {
             markup = data;
             displayNewPage(objviewtype, headingTitle, markup, "", "", urlObj, options, e, silent);
         })
         .error( function (jqxhr, ajaxOptions, thrownError) {
                 showMessage("Unable to retrieve application content.");
         });
         break;
    case "menu":
        $.ajax({
              url: newUrl,
              cache: false,
              async: true, 
              type: 'GET',
              dataType: "json"
         })
         .success( function (data, textStatus, jqxhr) {
             markup = parseMenu(data, objviewtype, urlObj, options, e);
             displayNewPage( objviewtype, headingTitle, markup, "", "", urlObj, options, e, silent);
         })
         .error( function (jqxhr, ajaxOptions, thrownError) {
             showMessage("Unable to retrieve menu.");
         });
         break;
    case "folder":
       $.ajax({
             url: newUrl,
             cache: false,
            async: true, 
             type: 'GET',
             dataType: "xml"
        })
        .success( function (data, textStatus, jqxhr) {
                markup = parseFolders(data, objviewtype, urlObj, options, e);

                var newUrl = calcUrl(objviewtype, urlStr, "urldocs");
                $.ajax({
                     url: newUrl,
                     cache: false,
                     async: true, 
                     type: 'GET',
                     dataType: "xml"
                })
                .success( function (data, textStatus, jqxhr) {
                     markupdocs = parseDocsXml(data, objviewtype, urlObj, options, e);
                     displayNewPage(objviewtype, headingTitle, markup, markupdocs, "", urlObj, options, e, silent);
               })
                .error( function (jqxhr, ajaxOptions, thrownError) {
                      showMessage("Unable to retrieve folder content.");
                });
        })
        .error( function (jqxhr, ajaxOptions, thrownError) {
                showMessage("Unable to retrieve folder content.");
        });
        break;
    case "view":
        $.ajax({
            url: newUrl,
            cache: false,
            async: true, 
            type: 'GET',
            dataType: "xml"
       })
       .success( function (data, textStatus, jqxhr) {
           markupdocs = parseAppDocsXml(data, objviewtype, urlObj, options, e);

           var newUrl = calcUrl(objviewtype, urlStr, "urlactions");
           $.ajax({
                url: newUrl,
                cache: false,
                async: true,
                type: 'GET',
                dataType: "html"
           })
           .success( function (data, textStatus, jqxhr) {
                markupactions = data;
                displayNewPage(objviewtype, headingTitle, "", markupdocs, markupactions, urlObj, options, e, silent);                
          })
           .error( function (jqxhr, ajaxOptions, thrownError) {
               displayNewPage(objviewtype, headingTitle, "", markupdocs, "", urlObj, options, e, silent);               
           });           
       })
       .error( function (jqxhr, ajaxOptions, thrownError) {
               showMessage("Unable to retrieve view content.");
       });
       break;
    case "document":
       $.ajax({
             url: newUrl,
             cache: false,
               async: true, 
             type: 'GET',
             dataType: "html"
        })
        .success( function (data, textStatus, jqxhr) {
                markup =  data.toString();
                displayNewPage(objviewtype, headingTitle, "", markup, "", urlObj, options, e, silent);
        })
        .error( function (jqxhr, ajaxOptions, thrownError) {
                showMessage("Unable to open selected document.");
        });
        break;
    case "appdocument":
        markup = "<div class='iframe-container'><iframe src='" + newUrl + "' ></iframe></div>";
        displayNewPage(objviewtype, headingTitle, "", markup, "", urlObj, options, e, silent);
        $.mobile.loading('show');
         break;
    case "editdocument":
        $.ajax({
            url: newUrl,
            cache: false,
            async: true, 
            type: 'GET',
            dataType: "html"
       })
       .success( function (data, textStatus, jqxhr) {
               markup = data.toString();
               options.changeHash = false;
               displayNewPage(objviewtype, headingTitle, "", markup, "", urlObj, options, e, silent);
       })
       .error( function (jqxhr, ajaxOptions, thrownError) {
               showMessage("Unable to edit selected document.");
       });
       break;
    case "editappdocument":
        markup = "<div class='iframe-container'><iframe src='" + newUrl + "' ></iframe></div>";
        options.changeHash = false;
        displayNewPage(objviewtype, headingTitle, "", markup, "", urlObj, options, e, silent);
        $.mobile.loading('show');
        break;
    case "adddocument":
       $.ajax({
             url: newUrl,
             cache: false,
             async: true, 
             type: 'GET',
             dataType: "html"
        })
        .success( function (data, textStatus, jqxhr) {
                markup = data.toString();
                displayNewPage(objviewtype, headingTitle, "", markup, "", urlObj, options, e, silent);
        })
        .error( function (jqxhr, ajaxOptions, thrownError) {
                showMessage("Unable to create document.");
        });
        break;
   case "form":
          markup = "<div class='iframe-container'><iframe src='" + newUrl + "' ></iframe></div>";
          displayNewPage(objviewtype, headingTitle, "", markup, "", urlObj, options, e, silent);
          $.mobile.loading('show');
        break;
    case "page":
          markup = "<div class='iframe-container'><iframe src='" + newUrl + "' ></iframe></div>";
          displayNewPage(objviewtype, headingTitle, "", markup, "", urlObj, options, e, silent);
          $.mobile.loading('show');
         break;
    case "search":
        var hashUrl = urlObj.hash;
        var agentUrl = calcUrl(objviewtype, hashUrl);
        var query = getUrlParam("query", hashUrl);
        var folderID = getUrlParam("folderkey", hashUrl);

        var postXml = "<Request><Action>FOLDERSEARCH</Action>";
        postXml +=  "<ftsearch>";
        postXml +=      "<query><![CDATA[" + query + "]]></query>";
        postXml +=      "<maxresults>0</maxresults>"
        postXml +=      "<searcharchive>undefined</searcharchive>"
        postXml +=  "</ftsearch>";
        postXml +=  "<FolderID>" + folderID + "</FolderID>";
        postXml +=  "<FolderViewName/>";
        postXml +=  "<UserName><![CDATA[]]></UserName>";
        postXml +=  "<options/>";
        postXml +=  "<nodes>F8,F9,F1,F12</nodes>"; // Title, doctype,docAuthor, Modified Date
        postXml +=   "</Request>";

        $.ajax({
            url: agentUrl,
            type:"POST",
            async: true, 
            processData:false,
            contentType: "text/xml",
            data: postXml
        })
        .success(function (data, textStatus, jqxhr) {
            markupdocs = parseDocsXml(data, objviewtype, urlObj, options, e);
            displayNewPage(objviewtype, "Clear", "", markupdocs, "", urlObj, options, e, silent);
        })
        .error(function (jqxhr, ajaxOptions, thrownError) {
            showMessage("Unable to retrieve documents");
        });
        break;
     case "searchview":
         var hashUrl = urlObj.hash;
         var agentUrl = calcUrl(objviewtype, hashUrl);
         var query = getUrlParam("query", hashUrl);
         var viewID = getUrlParam("viewid", hashUrl);
         var appID = getUrlParam('libid', hashUrl);

         var postXml = '<Request><Action>VIEWSEARCH</Action>';
         postXml += '<Query><![CDATA['+ query +']]></Query>';
         postXml += '<ViewID><![CDATA['+ viewID +']]></ViewID>';
         postXml += '<AppID><![CDATA['+ appID +']]></AppID>';
         postXml += '<IsMobile>1</IsMobile>';
         postXml += '</Request>';

         $.ajax({
             url: agentUrl,
             type:"POST",
             async: true, 
             processData:false,
             data: encodeURIComponent(postXml)
         })
         .success(function (data, textStatus, jqxhr) {
             markupdocs = parseAppDocsXml(data, objviewtype, urlObj, options, e);
             displayNewPage(objviewtype, "Clear", "", markupdocs, "", urlObj, options, e, silent);
         })
         .error(function (jqxhr, ajaxOptions, thrownError) {
             showMessage("Unable to retrieve documents");
         });
         break;
     default:
    }

}

//*************************************************************
// parseDocuments: parse xml data and return html for documents
//*************************************************************
function parseDocsXml(data, objviewtype, urlObj, options, e) {
    var markup = "";
    var success = false;

    var urlStr = urlObj.href;
    var libID = getUrlParam("libid", urlStr);
    var libPath = (librarylist && librarylist[libID]) ? librarylist[libID].libpath : "";
    var folderID = getUrlParam("folderid", urlStr);

    var liTags = [];
    $(data).find('document').each(function () {
        var docID = "";
        var docTitle = "";
        var docType = "";
        var docAuthor = "";
        var dateMod = "";
        //var docID = ($(this).attr('unid'));


        // get data from xml
        docID = $(this).children('docid').text();
        docTitle = $(this).children('F8').text();
        docType = $(this).children('F9').text();
        docAuthor = $(this).children('F1').text();
        dateMod = $(this).children('F12').text();

        liTags.push({
            'id': docID,
            'name': docTitle,
            'libid': libID,
            'folderid': folderID,
            'docid': docID,
            'doctype': docType,
            'docauthor': docAuthor,
            'datemod': dateMod,
            'itemtype': 'document'
        });
        success = true;
    });
    if (success) {
        var liTagsSorted = liValsSorted(liTags, "name");
        markup = setListData(objviewtype, liTagsSorted);
    }
    return (success) ? markup : false;
}


//*************************************************************
//parseAppDocsXml: parse xml data and return html for documents
//*************************************************************
function parseAppDocsXml(data, objviewtype, urlObj, options, e) {
 var markup = "";
 var success = false;

 var urlStr = urlObj.href;
 var libID = getUrlParam("libid", urlStr);
 var libPath = (librarylist && librarylist[libID]) ? librarylist[libID].libpath : "";
 var viewID = getUrlParam("viewid", urlStr);
 var iconImg = (viewtypes["appdocument"] ? viewtypes["appdocument"].iconimg : "");

 var liTags = [];
 $(data).find('document').each(function () {
     // get data from xml
     var docID = $(this).children('docid').text();
     var docTitle = "";
     var docData = "";

     var liTag = [];
     var keycount = 0;
     var datafound = true;
     do{
         var colname = "CF" + keycount.toString();
        var node = $(this).children(colname);
        if(node && node.length > 0){
             liTag['CF' + keycount.toString()] = node.text();
             if(colname == "CF0"){
                 docTitle = node.text();
             }else{
                 if(node.text() != ""){
                     if(docData != ""){
                         docData += "&nbsp;&nbsp;|&nbsp;&nbsp;";
                     }
                     docData += node.text() ;
                 }
             }
        }else{
            datafound = false;
        }
        keycount ++;
     } while(datafound)

     markup += "<li>";
     markup += "<a  class='viewLink' href='#appdocument";
     markup += "?libid=" + libID;
     markup += "&folderid=" + viewID;
     markup += "&docid=" + docID;
     markup += "&listtitle=" + encodeURIComponent(docTitle);
     markup += "'>" + iconImg + "&nbsp;&nbsp;" + docTitle;
     //ADD SECONDARY METADATA ON 2ND LINE
     if(docData != ""){
        markup += "<div id='docmeta2'>";
        markup += "<span class='ui-li-desc'>" + docData + "</span>";
        markup += "</div>";
     }
     markup += "</a>";

     markup += "</li>";

     success = true;
 });

 return (success) ? markup : false;
}


//*************************************************************
// calcUrl: generate a url for a given page view request
//*************************************************************
function calcUrl(objviewtype, urlStr, urlkey){
   if (urlkey == undefined || urlkey == ""){
      urlkey = "url";
   }

    var libID = getUrlParam("libid", urlStr) || getUrlParam("appid", urlStr) || "";
    var libPath = (librarylist && librarylist[libID]) ? librarylist[libID].libpath : "";
    var folderID = getUrlParam("folderid", urlStr) || "";
    var folderKey = getUrlParam("folderkey", urlStr) || "";
    var viewID = getUrlParam("viewid", urlStr) || "";
    var menuID = getUrlParam("menuid", urlStr) || "";
    var formID = getUrlParam("formid", urlStr) || "";
    var pageID = getUrlParam("pageid", urlStr) || "";
    var docID = getUrlParam("docid", urlStr) || "";
    var docTypeKey = getUrlParam("doctypekey", urlStr) || "";
    var mode = getUrlParam("mode", urlStr) || "";
    var customparams = getUrlParam("customparams", urlStr) || "";
    customparams = decodeURIComponent(customparams);

    //-- set variables based on application launchtype property
    if(librarylist && librarylist[libID] && librarylist[libID].launchtype){
        switch(librarylist[libID].launchtype){
        case "menu":
            if(menuID == ""){
                menuID = librarylist[libID].launchid;
            }
            break;
        case "view":
            if(viewID == ""){
                viewID = librarylist[libID].launchid;
            }
            break;
        case "page":
            if(pageID == ""){
                pageID = librarylist[libID].launchid;
            }
            break;
        case "form":
            if(formID == ""){
                formID = librarylist[libID].launchid;
            }
            break;
        }
    }

    var getDataURL = objviewtype[urlkey];

    getDataURL = getDataURL.replace(/\[TargetURL\]/gi, urlStr);
    getDataURL = getDataURL.replace(/\[LibraryPath\]/gi, libPath);
    getDataURL = getDataURL.replace(/\[LibraryID\]/gi, libID);
    getDataURL = getDataURL.replace(/\[AppID\]/gi, libID);
    getDataURL = getDataURL.replace(/\[MenuID\]/gi, menuID);
    getDataURL = getDataURL.replace(/\[PageID\]/gi, pageID);
    getDataURL = getDataURL.replace(/\[FormID\]/gi, formID);
    getDataURL = getDataURL.replace(/\[FolderID\]/gi, folderID);
    getDataURL = getDataURL.replace(/\[ViewID\]/gi, viewID);
    getDataURL = getDataURL.replace(/\[FolderKey\]/gi, folderKey);
    getDataURL = getDataURL.replace(/\[ParentUNID\]/gi, (docID == "") ? folderID : docID);
    getDataURL = getDataURL.replace(/\[DocID\]/gi, docID);
    getDataURL = getDataURL.replace(/\[DocTypeKey\]/gi, docTypeKey);
    getDataURL = getDataURL.replace(/\[Mode\]/gi, mode);
    getDataURL += (customparams == "") ? "" : "&" + customparams;

    return getDataURL;
}

//*************************************************************
//* getLibraryListingData: get and parse xml data for libraries
//*************************************************************
function getLibraryListingData(liblistdatavar){
    liblistdatavar.length = 0;

    var vt = getViewType("#libraries");
    var newUrl = calcUrl(vt, location.href);
    var success = false;

    $.ajax({
        url: newUrl,
        cache: false,
        async: false,
        beforeSend: function() {
            $.mobile.loading('show');
        },
        complete: function() {
            $.mobile.loading('hide');
        },
        type: 'GET',
        dataType: "xml"
    })
    .success( function (data, textStatus, jqxhr) {
        $(data).find('Library').each(function () {
              docKey = $(this).find("DocKey").text() || '';
              var libName = $(this).find("Title").text() || '';
              var libPath = $(this).find("NsfName").text() || '';
              var libID = $(this).find("DocKey").text() || '';
              var libType =  $(this).find("Type").text() || '';
              var appLaunchType = $(this).find("LaunchType").text() || '';
              var appLaunchID = $(this).find("LaunchID").text() || '';
              var appIcon = $(this).find("AppIcon").text() || '';
              var appIconColor = $(this).find("AppIconColor").text() || '';
              var skipentry = false;
              if(libType == "LG"){
                  libType = "librarygroup";
                  skipentry = true;
              }else if(libType == "A"){
                  libType = "application";
                  if(appLaunchType == "" || appLaunchID == "" ){
                      skipentry = true;
                  }
              }else{
                  libType = "library";
              }

              if(!skipentry){
                  liblistdatavar[libID] = { 'name'  : libName,
                                            'libid'     : libID,
                                            'libpath' : libPath,
                                            'itemtype' : libType,
                                            'launchtype' : appLaunchType,
                                            'launchid' : appLaunchID,
                                            'appicon' : appIcon,
                                            'appiconcolor' : appIconColor
                   };
               }
               success = true;
        });
     })
     .error( function (jqxhr, ajaxOptions, thrownError) {
          showMessage("Unable to retrieve library subscriptions.")
     });

     return success;
}

//*************************************************************
// getXMLHTTPobj: returns a jqxhr object from an xml or http request
//*************************************************************
function getXMLHTTPobj(getDataURL, xmlorhtml) {
    var jqxhr = $.ajax({
        url: getDataURL,
        cache: false,
        async: true,
        dataType: (xmlorhtml == undefined ? "html" : xmlorhtml)
    });
    return jqxhr;
}

//*************************************************************
// parseLibraries: parse library/app listing array object and return html for libraries
//*************************************************************
function parseLibraries(objviewtype, liblistdatavar){
    var markup = "";
    var success = false;

    liTags = [];
    for (libID in liblistdatavar){
        liTags.push({ 'id': libID,
                      'name': liblistdatavar[libID].name,
                      'libid'   : libID ,
                      'libpath': liblistdatavar[libID].libpath,
                      'itemtype': liblistdatavar[libID].itemtype,
                      'launchtype': liblistdatavar[libID].launchtype,
                      'launchid' : liblistdatavar[libID].launchid,
                      'appicon' : liblistdatavar[libID].appicon,
                      'appiconcolor' : liblistdatavar[libID].appiconcolor
         });
       success = true;
    };
    if (success) {
       var liTagsSorted = liValsSorted(liTags, "name");
       markup = setListData(objviewtype, liTagsSorted);
    }
    return (success)? markup : false;
}


//*************************************************************
// parseFolders: parse xml data and return html for folders
//*************************************************************
function parseFolders(data, objviewtype, urlObj, options, e) {
    var markup = "";
    var success = false;

    var urlStr=urlObj.href;
    var libID = getUrlParam("libid", urlStr);
    var libPath = (librarylist && librarylist[libID]) ? librarylist[libID].libpath : "";

    liTags = [];
    $(data).find('viewentry').each(function () {
        var folderName = $.trim($(this).find("entrydata[name='FolderName']").text());
        var folderKey = $.trim($(this).find("entrydata[name='FolderID']").text());
        var folderDocID = $.trim($(this).attr("unid"));
        liTags.push({ 'id': folderKey,
              'name': folderName,
              'libid': libID,
              'folderid': folderDocID,
              'folderkey': folderKey,
              'itemtype': 'folder'});
        success = true;
    });
    if (success) {
        var liTagsSorted = liValsSorted(liTags, "name");
        markup = setListData(objviewtype, liTagsSorted);
    }
    return (success)? markup : false;
}


//*************************************************************
//parseMenu: parse xml data and return html for a menu
//*************************************************************
function parseMenu(data, objviewtype, urlObj, options, e) {
 var markup = "";
 var success = false;

 var urlStr=urlObj.href;
 var libID = getUrlParam("libid", urlStr);
 var libPath = (librarylist && librarylist[libID]) ? librarylist[libID].libpath : "";
 if(data && data.Items){
     markup = parseMenuItems(data.Items, objviewtype, {'libid' : libID, 'libpath' : libPath});
 }

 return markup;
}

//*************************************************************
//parseMenuItems: parse json menu data and return html
//*************************************************************
function parseMenuItems(menuitemsobj, objviewtype, otherdata){
    var markup = "";

    if(menuitemsobj && menuitemsobj.length > 0){
        for(var i=0; i<menuitemsobj.length; i++){

            var liTags = [{ 'id': '',
                'name': menuitemsobj[i].context,
                'libid': otherdata.libid,
                'folderid': '',
                'itemtype': (menuitemsobj[i].etype ? menuitemsobj[i].etype : "heading"),
                'itemtarget' : menuitemsobj[i].eelement
            }];
            markup += setListData(objviewtype, liTags);
            if(menuitemsobj[i].Items && menuitemsobj[i].Items.length > 0){
                markup += parseMenuItems(menuitemsobj[i].Items, objviewtype, otherdata);
            }
        }
    }
    if(console){console.log(markup);}
    return markup;
}


//*************************************************************
// parseDocuments: parse xml data and return html for documents
//*************************************************************
function parseDocs(data, objviewtype, urlObj, options, e){
    var markup = "";
    var success = false;

    var urlStr=urlObj.href;
    var libID = getUrlParam("libid", urlStr);
    var libPath = (librarylist && librarylist[libID]) ? librarylist[libID].libpath : "";
    var folderID = getUrlParam("folderid", urlStr);

    var liTags = [];
    $(data).find('viewentry').each(function(){
        docTitle = "";
        docType = "";
        docAuthor = "";
        dateMod = "";
        var docID = ($(this).attr('unid'));

        $(this).find('entrydata').each(function(){
            switch ($(this).attr('columnnumber')){
            case '5':
                docTitle=$(this).children('text').text();
                docTitle=getCDATAtxt(docTitle);
                break;
            case '6':
                docType=$(this).children('text').text();
                docType=getCDATAtxt(docType);
                break;
            case '7':
                docAuthor=$(this).children('text').text();
                docAuthor=getCDATAtxt(docAuthor);
                break;
            case '8':
                dateMod=$(this).children('text').text();
                dateMod=getCDATAtxt(dateMod);
                break;
            };
        });
        liTags.push({ 'id': docID,
            'name': docTitle,
            'libid': libID,
            'folderid': folderID,
            'docid': docID,
            'doctype': docType,
            'docauthor': docAuthor,
            'datemod': dateMod,
            'itemtype': 'document'});
        success = true;
    });
    if(success){
        var liTagsSorted = liValsSorted(liTags, "name");
        markup = setListData(objviewtype, liTagsSorted);
    }
    return (success)? markup : false;
}


//*************************************************************
// parseDocTypes: parse xml data and return value pair array
//*************************************************************
function parseDocTypes(data){
    var success = false;

    var docTypeEntries = [];
    $(data).find('doctype').each(function(){
        docTypeName = "";
        docTypeKey = "";

        $(this).find('name').each(function(){
                docTypeName=$(this).text();
                docTypeName=getCDATAtxt(docTypeName);
        });

        $(this).find('dockey').each(function(){
                docTypeKey=$(this).text();
                docTypeKey=getCDATAtxt(docTypeKey);
        });

        docTypeEntries.push({ 'id': docTypeKey,
            'name': docTypeName});
        success = true;
    });
    if(success){
        docTypeEntries = liValsSorted(docTypeEntries, "name");
    }
    return (success)? docTypeEntries : false;
}


//*************************************************************
// getUrlParam: return specified url parameter value
//*************************************************************
function getUrlParam(name, urlString) {
    name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
    var regexS = "[\\?&]" + name + "=([^&#]*)";
    var regex = new RegExp(regexS);
    var results = regex.exec(urlString);
    if (results == null)
        return "";
    else
        return results[1];
}



//*************************************************************
// setListData: generate page list data html based on sorted list element
//*************************************************************
function setListData(viewType, liElsSorted, custoptions){

    var defopts = {};
    var opts = jQuery.extend({}, defopts, custoptions);

    // Generate a list item for each item in the folder
    // and add it to our markup.
    var markup="";

    for (var word in liElsSorted){
        var id= liElsSorted[word].id;
        var name= liElsSorted[word].name;
        var itemType = liElsSorted[word].itemtype;
        var itemtarget = liElsSorted[word].itemtarget;
        var targeturl = liElsSorted[word].url;
        var libID = liElsSorted[word].libid;
        var libPath = liElsSorted[word].libpath;
        var folderID = liElsSorted[word].folderid;
        var folderKey = liElsSorted[word].folderkey;
        var docID = liElsSorted[word].docid;
        var docType = liElsSorted[word].doctype;
        var docAuthor = liElsSorted[word].docauthor;
        var dateMod = liElsSorted[word].datemod;
        var appIcon = liElsSorted[word].appicon;
        var appIconColor = liElsSorted[word].appiconcolor;

        var pagename = (viewtypes[itemType] ? viewtypes[itemType].name : "");
        var iconImg = (viewtypes[itemType] ? viewtypes[itemType].iconimg : "");

        if (name.length > 0) {
            switch (itemType){
            case "library":
                markup += "<li>";
                markup += "<a  class='viewLink' href='#" + pagename;
                markup += "?libid=" + libID;
                markup += "&listtitle=" + encodeURIComponent(name);
                markup += "'>" + iconImg  + "&nbsp;&nbsp;" + name+"</a>";
                markup += "</li>";
                break;
            case "librarygroup":
                markup += "<li>";
                markup += "<a  class='viewLink' href='#" + pagename;
                markup += "?libid=" + libID;
                markup += "&listtitle=" + encodeURIComponent(name);
                markup += "'>" + iconImg  + "&nbsp;&nbsp;" + name+"</a>";
                markup += "</li>";
                break;
            case "application":
                iconImg = "<i class='" + appIcon +" ui-li-icon' style='color:" + appIconColor +";' />";
                markup += "<li>";
                markup += "<a  class='viewLink' href='#" + pagename;
                markup += "?libid=" + libID;
                markup += "&listtitle=" + encodeURIComponent(name);
                markup += "'>" + iconImg  + "&nbsp;&nbsp;" + name+"</a>";
                markup += "</li>";
                break;
            case "view":
                markup += "<li>";
                markup += "<a  class='viewLink' href='#" + pagename;
                markup += "?libid=" + libID;
                markup += "&viewid=" + itemtarget;
                markup += "&listtitle=" + encodeURIComponent(name);
                markup += "'>" + iconImg  + "&nbsp;&nbsp;" + name + "</a>";
                markup += "</li>";
                break;
            case "folder":
                markup += "<li>";
                markup += "<a  class='viewLink' href='#" + pagename;
                markup += "?libid=" + libID;
                markup += "&folderkey=" + folderKey;
                markup += "&folderid=" + folderID;
                markup += "&listtitle=" + encodeURIComponent(name);
                markup += "'>" + iconImg  + "&nbsp;&nbsp;" + name + "</a>";
                markup += "</li>";
                break;
            case "page":
                markup += "<li>";
                markup += "<a  class='viewLink' href='#" + pagename;
                markup += "?libid=" + libID;
                markup += "&pageid=" + itemtarget;
                markup += "&listtitle=" + encodeURIComponent(name);
                markup += "'>" + iconImg  + "&nbsp;&nbsp;" + name + "</a>";
                markup += "</li>";
                break;
            case "form":
                markup += "<li>";
                markup += "<a  class='viewLink' href='#" + pagename;
                markup += "?libid=" + libID;
                markup += "&formid=" + itemtarget;
                markup += "&listtitle=" + encodeURIComponent(name);
                markup += "'>" + iconImg  + "&nbsp;&nbsp;" + name + "</a>";
                markup += "</li>";
                break;
            case "heading":
                markup += "<li>";
                markup += "<a  class='viewLink' href='";
                markup += "'>" + iconImg  + "&nbsp;&nbsp;" + name + "</a>";
                markup += "</li>";
                break;
            case "js":
                markup += "<li>";
                markup += "<a  class='viewLink' href=\"javascript:";
                markup += itemtarget;
                markup += "\">" + iconImg  + "&nbsp;&nbsp;" + name + "</a>";
                markup += "</li>";
                break;
            case "document":
                markup += "<li>";
                markup += "<a  class='viewLink' href='#" + pagename;
                markup += "?libid=" + libID;
                markup += "&folderid=" + folderID;
                markup += "&docid=" + docID;
                markup += "&listtitle=" + encodeURIComponent(name);
                markup += "'>" + iconImg  + "&nbsp;&nbsp;" + name;
                //ADD SECONDARY METADATA ON 2ND LINE
                markup += "<div id='docmeta2'>";
                markup += "<span class='ui-li-desc'>";
                markup += "Type: " + docType;
                markup += "&nbsp;&nbsp|&nbsp;&nbsp;";
                markup += "Author: " + docAuthor;
                markup += "&nbsp;&nbsp;|&nbsp;&nbsp;";
                markup += "Date Modified: " + dateMod + "</span>";
                markup += "</div>";
                markup += "</a>";
                markup += "</li>";
                break;
            }
        }
    }
    return markup;
}

//*************************************************************
// sort list entries based on specified tag element
//*************************************************************
function liValsSorted(liTags, sortby){
   var liTagsSorted = liTags.sort(function(obj1, obj2){
       return obj1[sortby] == obj2[sortby] ? 0 : (obj1[sortby] < obj2[sortby] ? -1 : 1);
   });
   return liTagsSorted;
}



//*************************************************************
// displayNewPage: display a new screen of data
//*************************************************************
function displayNewPage(objviewtype,headingTitle,markupFolders, markupDocs, markupActionButtons, urlObj, options,e, silent){
       //showDebugMsg("DISPLAYNEWPAGE -> start");
       //showDebugMsg("     displaynewpage -> urlObj.href=" + urlObj.href);

       curpage = urlObj.href;

       // Create the page that we are going to dump our content into based on a template.
       var pagehash = urlObj.hash;
       var pageid = pagehash.replace(/[^a-zA-Z 0-9]+/g,'_');
       $("#" + pageid).remove(); //Remove any existing page with the same id that might already exist
       var $page = $( "#" + objviewtype.pagetemplate).clone();
       $page.attr('id', pageid);
       $page.attr('data-url', pagehash);
       $.mobile.pageContainer.append($page);

        //$.mobile.page.prototype.options.backBtnText=decodeURIComponent(headingTitle); // to use with default back button
        // Get the header for the page.
        $header = $page.children( ":jqmData(role=header)" );
        //to update back button title (bread crumb)
        var backBtn=$header.find('a:first');
        var backBtnChild=backBtn.children().children();
        if(backBtnChild.length>0){ //ONLY UPDATE CHILD TEXT TO PRESERVE < ARROW
            backBtnChild=backBtnChild.first('span');
            backBtnChild.text(headingTitle);
        }
        else{
            backBtn.text(headingTitle);
        }


        if(headingTitle == ""){
           $(backBtn).hide();
        }else{
           $(backBtn).show();
        }
        $(backBtn).one("click", function() { return trapBackButton();});

        //Get Content area of page
        $content = $page.children(":jqmData(role=content)");
        
        //Action Buttons
        $actionbuttoncontent = $content.children( "[itemtype='actionbuttons']" );
        if ($actionbuttoncontent.length > 0){
            // Inject the action button markup into the content element.
            $actionbuttoncontent.replaceWith(jQuery(markupActionButtons));
        }        
        //Folder List
        $foldercontent = $content.children( "[itemtype='folder']" );
        if ($foldercontent.length > 0){
            // Inject the folder items markup into the content element.
            $foldercontent.html(markupFolders);
        }
        //Document List
        $documentcontent = $content.children( "[itemtype='document']" );
        if ($documentcontent.length > 0){
            // Inject the document items markup into the content element.
            $documentcontent.html(markupDocs);
        }
        //Document Body
        $documentbodycontent = $content.children( "[itemtype='documentbody']" );
        if ($documentbodycontent.length > 0){
            // Replace the document body within the content element.
            $documentbodycontent.replaceWith(markupDocs);
        }        

        // Pages are lazily enhanced. We call page() on the page
        // element to make sure it is always enhanced before we
        // attempt to enhance the listview markup we just injected.
        // Since subsequent calls to page() are ignored because a page/widget
        // can only be enhanced once, we destroy the page before re-initializing
        // to ensure any elements such as input fields and buttons are styled correctly
        $page.page();

        if (! silent){
             // Now call changePage() and tell it to switch to
             // the page we just modified.
             $.mobile.changePage( $page, options );

         }
}

//*************************************************************
//resizePageContent: resizes content area to fit between header and footer
//*************************************************************
function resizePageContent($page){

    //Get Content area of page
    var $content = $page.children(":jqmData(role=content)");

    //Compute height
    var windowheight = $(window).height() || 0;
    var headerheight = $page.children(":jqmData(role=header)").outerHeight() || 0;
    var contentpadding = $content.outerHeight() - $content.height();
    var footerheight = $page.children(":jqmData(role=footer)").outerHeight() || 0;

    var newcontentheight = windowheight - headerheight - contentpadding - footerheight;

//    var pagepadding = $page.outerHeight() - $page.height();
//    var newpageheight = windowheight - pagepadding;

//  $page.height(newpageheight);
    $content.height(newcontentheight);
}

//*************************************************************
// trapBackButton: triggers when back button on nav bar is selected
//*************************************************************
function trapBackButton(){
      removepage =  $.mobile.activePage.attr('id');
      return true;
}

//*************************************************************
// getCDATAtxt: extract text from a CDATA xml node
//*************************************************************
function getCDATAtxt(textVal){
    var n=textVal.indexOf('CDATA[');
    if(n>0){
        textVal=textVal.substring(n+6, (textVal.length));
        var nEnd=textVal.indexOf(']]');
        textVal=textVal.substring(0,nEnd);
    }
    return textVal;
}

//*************************************************************
// getXMLTagText: extract text from XML node
//*************************************************************
function getXMLTagText(startStr,tagName){
    var rtrnVal=startStr;
    var posStart=startStr.indexOf(tagName);
    if(posStart>-1){
        rtrnVal=rtrnVal.substring(posStart+tagName.length+1,rtrnVal.length);
        var posEnd=rtrnVal.indexOf("/"+tagName);
        rtrnVal=rtrnVal.substring(0,posEnd-1);
    }
    return rtrnVal;
}

//*************************************************************
// trimStr: trim spaces from string
//*************************************************************
function trimStr(startStr) {
    return startStr.replace(/^\s*/, "").replace(/\s*$/, "");
}

//*************************************************************
// String.replaceAll: Replaces all instances of the given substring
//*************************************************************
String.prototype.replaceAll = function(
    strTarget, // The substring you want to replace
    strSubString // The string you want to replace in.
    ){
    var strText = this;
    var intIndexOfMatch = strText.indexOf( strTarget );

    // Keep looping while an instance of the target string
    // still exists in the string.
    while (intIndexOfMatch != -1){
    // Relace out the current instance.
    strText = strText.replace( strTarget, strSubString )

    // Get the index of any next matching substring.
    intIndexOfMatch = strText.indexOf( strTarget );
    }

    // Return the updated string with ALL the target strings
    // replaced out with the new substring.
    return( strText );
}


//*************************************************************
// showHistoryStack: prints or displays the history stack
//*************************************************************
function showHistoryStack(){
      var histstack =  $.mobile.navigate.history.stack;
      var stackcontents = "";
      for (var i=0; i<histstack.length; i++){
          stackcontents += "     History Stack Entry " + i + "\n";
          stackcontents += "          url=" + histstack[i].url + "\n";
          stackcontents += "          title=" + histstack[i].title + "\n";
          stackcontents += "          pageurl=" + histstack[i].pageUrl + "\n";
          stackcontents += "          role=" + histstack[i].role + "\n";
      }
      stackcontents += "    active stack index=" + $.mobile.navigate.history.activeIndex + "\n";
      //showDebugMsg("     $.mobile.navigate.history.stack=\n" + stackcontents);
}

//*************************************************************
// showDebugMsg: generates alert or logs to console
//*************************************************************
function showDebugMsg(debugStr) {
    if (debugToConsole) {
        if (window.console) {
            console.log(debugStr)
        }
    }
}

//*************************************************************
//* showMessage: displays message on screen for specified period
//*************************************************************
function showMessage(message, timing) {
    showStatusMsgFlag = false;
    var delay = (typeof timing == "undefined" || timing == 0) ? 2500 : timing;
    $.mobile.loading('hide');
    // show message
    $.mobile.loading('show', {
        theme: $.mobile.pageLoadErrorMessageTheme,
        text: message,
        textonly: true,
        textVisible: true
    });
    // hide after delay
    setTimeout(function(){$.mobile.loading('hide');}, delay);
}

//*************************************************************
//* showLoadingMessage: displays loading message on screen
//*************************************************************
function showLoadingMessage(custmessage){
	if(typeof custmessage == "string"){
	    $.mobile.loading('show', {
	        text: custmessage,
	        textVisible: true
	    });
	}else{
	    $.mobile.loading('show');		
	}

}

//*************************************************************
//* hideLoadingMessage: hides loading message
//*************************************************************
function hideLoadingMessage(){
  $.mobile.loading('hide');
}



//*************************************************************
// doSearch: initiates search
//*************************************************************
function doSearch(searchFieldID) {
    //console.log("[doSearch]location hash: " + location.hash)
    var vt = getViewType("#search")
    var $page = $("#" + $.mobile.activePage.attr('id'));
    var searchText = $page.find("[id=" + searchFieldID + "]:first").val();
    if (!searchText == '') {
        var urlStr = document.location.href;
        getSearchData( searchText);
    }

}

//*************************************************************
//getSearchData: displays search results page
//*************************************************************
function getSearchData(searchText) {
    var hashUrl = location.hash;

    // This is FOR IE BUG, location.hash does not trigger page change in IE10 possibly IE9 as well
    if (isIE) {
        if (hashUrl.indexOf('#folder?') !== -1) {
	        $.mobile.changePage(hashUrl.replace("#folder?", "#search?") + "&query=" + encodeURI(searchText));
        }
        else if (hashUrl.indexOf('#view?') !== -1) {
        	$.mobile.changePage(hashUrl.replace("#view?", "#searchview?") + "&query=" + encodeURI(searchText));
        }
    } else {
        if (hashUrl.indexOf('#folder?') !== -1) {
	        location.hash = hashUrl.replace("#folder?", "#search?") + "&query=" + encodeURI(searchText);
        }
        else if (hashUrl.indexOf('#view?') !== -1) {
        	location.hash = hashUrl.replace("#view?", "#searchview?") + "&query=" + encodeURI(searchText);
        }        
    }
}

//*************************************************************
// logOut: log out to the application root path
//*************************************************************
function logOut(url) {
    try {
    window.location.href=url;
    } catch (exc) {
        alert("error: " + exc);
    }
}

//*************************************************************
//addAppDocument: compose a new application document
//*************************************************************
function addAppDocument(formname) {
    var e;
    var options = { "changeHash": true };

    var vt = viewtypes["form"];    
    var url = $.mobile.activePage.data('url') + "&formid=" + formname;
    var u = $.mobile.path.parseUrl(url);
    if (vt) {
        showContent(u, vt, options, e);
    }
}


//*************************************************************
// addDocument: compose a new document
//*************************************************************
function addDocument(doctypekey) {
    var e;
    var options = { "changeHash": true };
    var url = $.mobile.activePage.data('url');
    url = url.replace("#folder?", "#adddocument?");
    url += "&doctypekey=" + doctypekey;
    var u = $.mobile.path.parseUrl(url);
    var uhashStr = u.hash;
    var vt = getViewType(uhashStr);
    if (vt) {
        showContent(u, vt, options, e);
    }
}


//*************************************************************
// ViewCreateDocument: compose a new document from folder
//*************************************************************
function ViewCreateDocument()
{
    var url = $.mobile.activePage.data('url');

    var vt = getViewType("#doctypes");
    var newUrl = calcUrl(vt, url);

    $.ajax({
        url: newUrl,
        cache: false,
         async: true, // this was false
        type: 'GET',
        dataType: "xml"
    })
    .success( function (data, textStatus, jqxhr) {
         var entries = parseDocTypes(data);
         if (entries){
            if (entries.length == 1){
               addDocument(entries[0].id);
            }else{
                   //$.mobile.loading('hide');
              CreatePopUp("New Document", entries, "addDocument");
            }
         }
    })
    .error( function (jqxhr, ajaxOptions, thrownError) {
         showMessage("Unable to determine available document types.");
    });
}

//*************************************************************
// EditDocument: edit an existing document
//*************************************************************
function EditDocument() {
    var e;
    var options = {"changeHash": false};
    var url = $.mobile.activePage.data('url');
    url = url.replace("#document?", "#editdocument?");
    url = url.replace("#appdocument?", "#editappdocument?");
    var u = $.mobile.path.parseUrl( url );
    var uhashStr=u.hash;
    var vt = getViewType(uhashStr);
    if ( vt ) {
         showContent( u, vt, options, e);
    }
}

//*************************************************************
//* storeHistoryToCookie
//* saves mobile history stack to a browser cookie
//*************************************************************
function storeHistoryToCookie(offset){
      //showDebugMsg("storeHistoryToCookie -> start");
      //showHistoryStack();

      //Edit the history to remove duplicates and any intermediate pages that we don't want to reload
      var histstack =  $.mobile.navigate.history.stack;
      for (var i=histstack.length -1; i>0; i--){
            var url = $.mobile.path.parseUrl(histstack[i].url);
            var vt = getViewType(url.hash);
            if (vt && vt.storehistory){
                 if (histstack[i].url == histstack[i-1].url){    //remove the entry if it is a duplicate
                      histstack.splice(i, 1);
                 }
            }else{  //remove the entry if it has a hash that is not set to store to history
                 histstack.splice(i, 1);
            }
      }

      var startfrom = (offset != undefined && offset > 0) ? offset : 0;
      var endat = (offset != undefined && offset < 0) ? offset : 0;
      var jsonStr = "";
      jsonStr += '{';
      endat = (histstack.length < endat) ? histstack.length : (histstack.length + endat);
      for (var i=startfrom; i< endat; i++){
          var counter = (startfrom > 0) ? i-starfrom : i;
          jsonStr += (counter > 0) ? ',' : "";
          jsonStr += '"' + counter + '": {';
          jsonStr += (histstack[i].hash == undefined) ? '' : '"hash" : "' + histstack[i].hash + '",';
          jsonStr += (histstack[i].pageUrl == undefined) ? '' : '"pageUrl" : "' + histstack[i].pageUrl + '",';
          jsonStr += (histstack[i].title == undefined) ? '' : '"title" : "' + histstack[i].title + '",';
          jsonStr += (histstack[i].transition == undefined) ? '' : '"transition" : "' + histstack[i].transition + '",';
          jsonStr += '"url" : "' + histstack[i].url + '"';
          jsonStr += '}';
      }
      jsonStr += '}';

      //showDebugMsg("        " + jsonStr);

      var exdate=new Date();
      exdate.setDate(exdate.getDate() + 1);

      var c_value=escape(jsonStr);
      document.cookie=c_name + "=" + c_value + "; path=/; expires="+exdate.toUTCString();
}


//*************************************************************
//* loadHistoryFromCookie
//* retrieves mobile history stack from a browser cookie
//*************************************************************
function loadHistoryFromCookie(){
     var result = false;

     var c_value = document.cookie;
     var c_start = c_value.indexOf(" " + c_name + "=");
     if (c_start == -1){
          c_start = c_value.indexOf(c_name + "=");
      }
      if (c_start == -1){
         c_value = null;
     } else{
         c_start = c_value.indexOf("=", c_start) + 1;
         var c_end = c_value.indexOf(";", c_start);
         if (c_end == -1){
              c_end = c_value.length;
         }
        c_value = unescape(c_value.substring(c_start,c_end));
     }
     showDebugMsg("History Cookie=" + c_value);

    if (c_value != null){
        //delete any existing cookie so it is not used on a subsequent load
//        document.cookie = c_name + '=; path=/; expires=Thu, 01-Jan-1970 00:00:01 GMT';

         var historyObj = $.parseJSON(c_value);
         var keycount = 0;
         for (k in historyObj){ if (historyObj.hasOwnProperty(k)) keycount++};
        //keycount = 3; // check why 4th and fifth entry is being added

         for (var index=0; index < keycount; index++){
              if (historyObj.hasOwnProperty(index)) {
                    var u = $.mobile.path.parseUrl( historyObj[index].url);
                     var uhashStr=u.hash;
                     if (uhashStr != ""){
                          $.mobile.navigate.history.add(historyObj[index].url, historyObj[index]);
                          $.mobile.navigate.history.activeIndex = $.mobile.navigate.history.stack.length - 1;

                         var vt = getViewType(uhashStr);
                         if ( vt ) {
                            var e;
                            var options = {};
                            showContent( u, vt, options, e);
                            result = true;
                          }
                    }
              }
          }
    }

    return result;
}


//*************************************************************
//* getObjectKeyCount: counts number of keys in an object
//*************************************************************
function getObjectKeyCount(obj){
    var size = 0;
    var key;
    for (key in obj) {
        if (obj.hasOwnProperty(key)) size++;
    }
    return size;
}

//*************************************************************
//* Generate pop up menu
//*************************************************************
function CreatePopUp(popupTitle, popupItems, userFunction) {
    var popupid = "popupMenu";
    var actionHandler = "ProcessPopUpAction(this, " + userFunction + ")";
    var maxHeight = jQuery(window).height() - 100;
    var $popup = jQuery("#" + popupid).remove();  //remove any existing popup that may exist
    var menuStr = '<div id="' + popupid + '" data-role="popup" data-transition="pop" data-theme="{{ mbthemetitlebar }}" data-dismissible="true" data-history="false">';
    menuStr += '<ul style="min-width: 210px;" data-role="listview" data-theme="{{ mbthemedocuments }}" data-inset="true">';
    menuStr += '<li data-role="divider" data-theme="{{ mbthemetitlebar }}">' + popupTitle + '</li>';
    menuStr += '</ul>';
    menuStr += '<ul style="min-width: 210px; max-height: ' + maxHeight.toString() + 'px; overflow-y: auto;" data-role="listview" data-theme="{{ mbthemedocuments }}" data-inset="true">';
    for (var i = 0; i < popupItems.length; i++) {
        menuStr += '<li><a href="#" id="' + popupItems[i].id + '" onclick="' + actionHandler + '">';
        menuStr += popupItems[i].name;
        menuStr += '</a></li>';
    }
    menuStr += '</ul>';
    menuStr += '</div>';

    page = jQuery("#" + jQuery.mobile.activePage.attr('id'));
    var $popup = jQuery(menuStr).appendTo(page);

   //hide the spinner upon selection
   $popup.popup({
       afteropen: function (event, ui) { $.mobile.loading('hide'); }
   });
   page.page('destroy').page();
   $popup.popup('open');

   return false;
}


//*************************************************************
//* Add pop up menu submenu handler
//*************************************************************
function ProcessPopUpAction(action, userFunction) {
    if (action == undefined || action == "") { return false };

    // showProgressSpinner = true;
    //$.mobile.loading('show');
    var popupid = "popupMenu";
    popup = jQuery("#" + popupid);
    popup.popup('close');
    var actionid = jQuery(action).attr("id");
    var actiontext = jQuery(action).text();

    userFunction(actionid, actiontext);

    return;
}

//*************************************************************
//* Navigate back
//*************************************************************
function NavBack(skipsteps) {
  var count = 1;
  if(typeof skipsteps !== "undefined" && jQuery.isNumeric(skipsteps)){
    count = parseInt(skipsteps, 10);
  }
  history.go(-count);
  return;
}

</script>
</head>
<body>
<!---------------------------------------------------------------------------->
<!------------------( 1. Home page )------------------------------------------>
<div id="home" data-role="page">
    <div data-role="header" data-position="fixed" data-theme="{{ mbthemetitlebar }}" data-tap-toggle="false" >
        {% if not isMobileApp %}
        <img src="{{ asset('bundles/docova/images/Docova-ICON-64px.png') }}" id="headingImg"/>
        <div data-role="navbar" data-iconpos="left">
            <div align="center">DOCOVA</div>
        </div><!-- /navbar -->
        {% endif %}
    </div><!-- /header -->
    <!------------------ home content section --------------------------------->
    <div data-role="content" data-theme="{{ mbthemedefault }}">
    </div>
    {% if not isMobileApp %}
    <!-- footer is hidden for native apps -->
    <div data-role="footer" data-position="fixed" data-theme="{{ mbthemetitlebar }}" data-tap-toggle="false" class="ui-bar">
        <div data-role="controlgroup" data-type="horizontal">
            <a href="#" onclick="logOut('{{ path('docova_logout') }}');" target="_top" rel="external" data-icon="back" data-ajax="false" data-iconpos="left" data-mini="true">Log Out</a>
        </div><!-- buttons -->
    </div><!-- /footer -->
    {% endif %}
</div><!-- page.home -->

<!---------------------------------------------------------------------------->
<!------------------( 2. Libraries and Apps page )---------------------------->
<div id="libraries_template" data-role="page">
    <div data-role="header" data-position="fixed" data-theme="{{ mbthemetitlebar }}" data-tap-toggle="false">
        {% if not isMobileApp %}
        <img src="{{ asset('bundles/docova/images/Docova-ICON-64px.png') }}" id="headingImg"/>
            <div data-role="navbar" data-iconpos="left">
                <div align="center">DOCOVA</div>
            </div><!-- /navbar -->
        {% else %}
            <h1>Applications</h1>
        {% endif %}
     </div><!-- /header -->
    <!------------------ libraries and apps content section ( List libraries and Applications) --------------------------------->
    <div data-role="content" data-theme="{{ mbthemefolders }}">
        <!-- <p class="listTitle">Libraries</p> -->
        <ul data-role="listview" data-inset="true" itemtype="folder"></ul>
    </div>
    {% if not isMobileApp %}
    <!-- footer is hidden for native apps -->
    <div data-role="footer" data-position="fixed" data-theme="{{ mbthemetitlebar }}" data-tap-toggle="false" class="ui-bar">
        <div data-role="controlgroup" data-type="horizontal">
            <a href="#" onclick="logOut('{{ path('docova_logout') }}');" target="_top" rel="external" data-icon="back" data-ajax="false" data-iconpos="left" data-mini="true">Log Out</a>
        </div><!-- buttons -->
    </div><!-- /footer -->
    {% endif %}
</div><!-- page.libraries -->

<!-------------------------------------------------------------------------------------------------->
<!------------------( 3. Root FOLDER lists page )--------------------------------------------------->
<div id="rootfolders_template" data-role="page">
    <!-- Root folders header -->
    <div data-role="header" data-position="fixed" data-theme="{{ mbthemetitlebar }}" data-tap-toggle="false">
        {% if not isMobileApp %}
        <img src="{{ asset('bundles/docova/images/Docova-ICON-64px.png') }}" id="headingImg"/>
        {% endif %}
        <div data-role="navbar" data-iconpos="left">
            <ul>
                <li><a href='#' class="ui-btn ui-btn-icon-left ui-corners-all ui-icon-carat-l" onclick="history.back(); return false">Back</a></li>
            </ul>
        </div><!-- /navbar -->
    </div><!-- /header -->
    <!-- Root folder list : content -->
    <div data-role="content" data-theme="{{ mbthemefolders }}">
        <!-- <p class="listTitle"></p> -->
        <ul data-role="listview" data-inset="true" itemtype="folder"></ul>
    </div>
    {% if not isMobileApp %}
    <!-- footer toolbar -->
    <div data-role="footer" data-position="fixed" data-theme="{{ mbthemetitlebar }}" data-tap-toggle="false" class="ui-bar">
        <div data-role="controlgroup" data-type="horizontal">
            <a href="#libraries" data-icon="home" data-iconpos="left" data-mini="true">Home</a>
            <a href="#" onclick="logOut('{{ path('docova_logout') }}');" target="_top" rel="external" data-icon="back" data-ajax="false" data-iconpos="left" data-mini="true">Log Out</a>
        </div><!-- buttons -->
    </div><!-- /footer -->
    {% endif %}
</div><!-- page.rootfolders -->

<!----------------------------------------------------------------------------------->
<!------------------ ( 4. Sub FOLDERS and DOCUMENTS page )  ------------------------->
<div id="subfolders_template" data-role="page">
    <div data-role="header" data-position="fixed" data-theme="{{ mbthemetitlebar }}" data-tap-toggle="false" class="ui-bar">
        {% if not isMobileApp %}
        <img src="{{ asset('bundles/docova/images/Docova-ICON-64px.png') }}" id="headingImg"/>
        {% endif %}
        <div data-role="navbar" data-iconpos="left">
          <ul>
            <li><a href='#' class="ui-btn ui-btn-icon-left ui-corners-all ui-icon-carat-l" onclick="history.back(); return false">Back</a></li>
            <li>
               <div class="searchPanel">
                   <div class="ui-input-search ui-body-a ui-corner-all ui-mini ui-shadow-inset ui-input-has-clear">
                       <input type="text" id="search-basic3" data-role="none" value="" data-theme="{{ mbthemedefault }}" data-mini="true" />
                       <a href="#" id="doSearch" tabindex="-1" aria-hidden="true" onClick='doSearch("search-basic3");' class="doSearchButton ui-input-clear ui-btn ui-icon-check ui-btn-icon-notext ui-corner-all ui-input-clear-hidden" title="Run Search"></a>
                   </div>
               </div>
            </li>
          </ul>
        </div><!-- /navbar -->
    </div><!-- /header -->
    <!--Sub folder list : content -->
    <div data-role="content" data-theme="{{ mbthemefolders }}">
        <!-- to add new button -->
        <!-- <a href="#" onclick="ViewCreateDocument();"  data-role="button" data-theme="{{ mbthemetitlebar }}" data-icon="plus"  data-inline='true' data-mini='true' id="btnNewDocument" >New Document </a>  -->
        <button onclick="ViewCreateDocument();"  data-role="button" data-theme="{{ mbthemetitlebar }}" data-icon="plus"  data-inline='true' data-mini='true' id="btnNewDocument" >New Document </button>
        <!-- <p class="listTitle"></p> -->
        <ul data-role="listview" data-inset="true" itemtype="folder"></ul>
        <ul data-role="listview" data-inset="true" itemtype="document" data-theme="{{ mbthemedocuments }}"></ul>
    </div>
    {% if not isMobileApp %}
    <!-- footer toolbar -->
    <div data-role="footer"  data-position="fixed" data-theme="{{ mbthemetitlebar }}" data-tap-toggle="false" class="ui-bar">
        <div data-role="controlgroup" data-type="horizontal" style="float: left;">
            <a href="#libraries" data-icon="home" data-iconpos="left" data-mini="true">Home</a>
            <a href="#" onclick="logOut('{{ path('docova_logout') }}');" target="_top" rel="external" data-icon="back" data-ajax="false" data-iconpos="left" data-mini="true">Log Out</a>
            <a href="#" onclick="ViewCreateDocument();" data-icon="plus" data-iconpos="left" data-mini="true" style="margin-right:50px;">New</a>
        </div><!-- buttons -->
    </div><!-- /footer -->
    {% endif %}
</div><!-- page.subfolders -->

<!----------------------------------------------------------------------------------->
<!------------------ ( 5. Document page  ) ------------------------------------------>
<div id="document_template" data-role="page">
    <div data-role="header" data-position="fixed" data-theme="{{ mbthemetitlebar }}" data-tap-toggle="false" class="ui-bar">
        {% if not isMobileApp %}
        <img src="{{ asset('bundles/docova/images/Docova-ICON-64px.png') }}" id="headingImg"/>
        {% endif %}
        <div data-role="navbar" data-iconpos="left">
            <ul>
                <li> <a href='#' class="ui-btn ui-btn-icon-left ui-corners-all ui-icon-carat-l" onclick="history.back(); return false">Back</a></li>
            </ul>
        </div><!-- /navbar -->
    </div><!-- /header -->
    <!--document : content -->
    <div data-role="content" data-theme="{{ mbthemedocuments }}">
        <ul data-role="listview" data-inset="true" itemtype="documentbody" data-theme="{{ mbthemedocuments }}"></ul>
    </div>
    {% if not isMobileApp %}
    <!-- footer toolbar -->
    <div data-role="footer"  data-position="fixed" data-theme="{{ mbthemetitlebar }}" data-tap-toggle="false" class="ui-bar">
        <div data-role="controlgroup" data-type="horizontal" style="float: left;">
            <a href="{{ path('docova_mobile') }}#libraries" data-icon="home" data-iconpos="left" data-mini="true">Home</a>
            <a href="#" onclick="logOut('{{ path('docova_logout') }}');" target="_top" rel="external" data-icon="back" data-ajax="false" data-iconpos="left" data-mini="true">Log Out</a>
        </div><!-- buttons -->
        <div data-role="controlgroup" data-type="horizontal" style="float: right;">
        </div><!-- buttons -->
    </div><!-- /footer -->
    {% endif %}
</div><!-- page.document -->

<!----------------------------------------------------------------------------------->
<!------------------ ( 6. Edit Document page  ) ------------------------------------->
<div id="editdocument_template" data-role="page">
    <div data-role="header" data-position="fixed" data-theme="{{ mbthemetitlebar }}" data-tap-toggle="false" class="ui-bar">
        {% if not isMobileApp %}
        <img src="{{ asset('bundles/docova/images/Docova-ICON-64px.png') }}" id="headingImg"/>
        {% endif %}
        <div data-role="navbar" data-iconpos="left">
            <ul>
                <li> <a href='#' class="ui-btn ui-btn-icon-left ui-corners-all ui-icon-carat-l"  data-inline='true' onclick="history.back(); return false">Back</a></li>
            </ul>
        </div><!-- /navbar -->
    </div><!-- /header -->
    <!--editdocument : content -->
    <div data-role="content" data-theme="{{ mbthemedocuments }}">
        <ul data-role="listview" data-inset="true" itemtype="documentbody" data-theme="{{ mbthemedocuments }}"></ul>
    </div>
    {% if not isMobileApp %}
    <!-- footer toolbar -->
    <div data-role="footer"  data-position="fixed" data-theme="{{ mbthemetitlebar }}" data-tap-toggle="false" class="ui-bar">
        <div data-role="controlgroup" data-type="horizontal" style="float: left;">
            <a href="#libraries" data-icon="home" data-iconpos="left" data-mini="true">Home</a>
            <a href="#" onclick="logOut('{{ path('docova_logout') }}');" target="_top" rel="external" data-icon="back" data-ajax="false" data-iconpos="left" data-mini="true">Log Out</a>
        </div><!-- buttons -->
        <div data-role="controlgroup" data-type="horizontal" style="float: right;">
        </div><!-- buttons -->
    </div><!-- /footer -->
    {% endif %}
</div><!-- page.editdocument -->

<!-------------------------------------------------------------------------------------------------->
<!------------------  ( 7.Search results page )  --------------------------------------------------->
<div id="search_template" data-role="page">
    <div  data-role="header" data-theme="{{ mbthemetitlebar }}" data-position="fixed"  data-tap-toggle="false">
        {% if not isMobileApp %}
        <img src="{{ asset('bundles/docova/images/Docova-ICON-64px.png') }}" id="headingImg"/>
        {% endif %}
        <div data-role="navbar" data-iconpos="left">
            <ul>
                <li><a href='#' class="ui-btn ui-btn-icon-left ui-corners-all ui-icon-carat-l" onclick="history.back(); return false">Clear</a></li>
            </ul>
        </div><!-- /navbar -->               
    </div><!-- /header -->
    <!--Sub folder list : content -->
    <div data-role="content" data-theme="{{ mbthemedocuments }}">
        <!-- <p class="listTitle"></p> -->
        <ul data-role="listview" data-inset="true" itemtype="folder"></ul>
        <ul data-role="listview" data-inset="true" itemtype="document" data-theme="{{ mbthemedocuments }}"></ul>
    </div>
    {% if not isMobileApp %}
    <!-- footer toolbar -->
    <div data-role="footer"  data-position="fixed" data-theme="{{ mbthemetitlebar }}" data-tap-toggle="false" class="ui-bar">
        <div data-role="controlgroup" data-type="horizontal" style="float: left;">
            <a href="#libraries" data-icon="home" data-iconpos="left" data-mini="true">Home</a>
            <a href="#" onclick="logOut('{{ path('docova_logout') }}');" target="_top" rel="external" data-icon="back" data-ajax="false" data-iconpos="left" data-mini="true">Log Out</a>
        </div><!-- buttons -->
    </div><!-- /footer -->
    {% endif %}
</div><!-- page.subfolders -->

<!-------------------------------------------------------------------------------------------------->
<!------------------( 8. Application Menu page )---------------------------------------------------->
<div id="menu_template" data-role="page">
    <!-- Menu header -->
    <div data-role="header" data-position="fixed" data-theme="{{ mbthemetitlebar }}" data-tap-toggle="false" >
        {% if not isMobileApp %}
        <img src="{{ asset('bundles/docova/images/Docova-ICON-64px.png') }}" id="headingImg"/>
        {% endif %}
        <div data-role="navbar" data-iconpos="left">
            <ul>
                <li><a href='#' class="ui-btn ui-btn-icon-left ui-corners-all ui-icon-carat-l" onclick="history.back(); return false">Back</a></li>
            </ul>
        </div><!-- /navbar -->
    </div><!-- /header -->
    <!-- Menu list : content -->
    <div data-role="content" data-theme="{{ mbthemefolders }}">
        <!-- <p class="listTitle"></p> -->
        <ul data-role="listview" data-inset="true" itemtype="folder"></ul>
    </div>
    {% if not isMobileApp %}
    <!-- footer toolbar -->
    <div data-role="footer" data-position="fixed" data-theme="{{ mbthemetitlebar }}" data-tap-toggle="false" class="ui-bar">
        <div data-role="controlgroup" data-type="horizontal">
            <a href="#libraries" data-icon="home" data-iconpos="left" data-mini="true">Home</a>
            <a href="#" onclick="logOut('{{ path('docova_logout') }}');" target="_top" rel="external" data-icon="back" data-ajax="false" data-iconpos="left" data-mini="true">Log Out</a>
        </div><!-- buttons -->
    </div><!-- /footer -->
    {% endif %}
</div><!-- page.menu -->

<!-------------------------------------------------------------------------------------------------->
<!------------------( 9. Application View page )---------------------------------------------------->
<div id="view_template" data-role="page">
    <!-- View header -->
    <div data-role="header" data-position="fixed" data-theme="{{ mbthemetitlebar }}" data-tap-toggle="false" >
        {% if not isMobileApp %}
        <img src="{{ asset('bundles/docova/images/Docova-ICON-64px.png') }}" id="headingImg"/>
        {% endif %}
        <div data-role="navbar" data-iconpos="left">
            <ul>
                <li><a href='#' class="ui-btn ui-btn-icon-left ui-corners-all ui-icon-carat-l" onclick="history.back(); return false">Back</a></li>
                <li>
                   <div class="searchPanel">
                       <div class="ui-input-search ui-body-a ui-corner-all ui-mini ui-shadow-inset ui-input-has-clear">
                           <input type="text" id="search-basicapp" data-role="none" value="" data-theme="{{ mbthemedefault }}" data-mini="true" />
                           <a href="#" id="doAppSearch" tabindex="-1" aria-hidden="true" onClick='doSearch("search-basicapp");' class="doSearchButton ui-input-clear ui-btn ui-icon-check ui-btn-icon-notext ui-corner-all ui-input-clear-hidden" title="Run Search"></a>
                       </div>
                   </div>
                </li>
            </ul>
        </div><!-- /navbar -->
    </div><!-- /header -->
    <!-- Document list : content -->
    <div data-role="content" data-theme="{{ mbthemedocuments }}">
		<div itemtype="actionbuttons" data-theme="{{ mbthemedocuments }}"></div>
        <ul data-role="listview" data-inset="true" itemtype="document" data-theme="{{ mbthemedocuments }}"></ul>
    </div>
    {% if not isMobileApp %}
    <!-- footer toolbar -->
    <div data-role="footer" data-position="fixed" data-theme="{{ mbthemetitlebar }}" data-tap-toggle="false" class="ui-bar">
        <div data-role="controlgroup" data-type="horizontal">
            <a href="#libraries" data-icon="home" data-iconpos="left" data-mini="true">Home</a>
            <a href="#" onclick="logOut('{{ path('docova_logout') }}');" target="_top" rel="external" data-icon="back" data-ajax="false" data-iconpos="left" data-mini="true">Log Out</a>
        </div><!-- buttons -->
    </div><!-- /footer -->
    {% endif %}
</div><!-- page.view -->

<!----------------------------------------------------------------------------------->
<!------------------ ( 10. Page page  ) --------------------------------------------->
<div id="page_template" data-role="page">
    <div data-role="header" data-position="fixed" data-theme="{{ mbthemetitlebar }}" data-tap-toggle="false" class="ui-bar">
        {% if not isMobileApp %}
        <img src="{{ asset('bundles/docova/images/Docova-ICON-64px.png') }}" id="headingImg"/>
        {% endif %}
        <div data-role="navbar" data-iconpos="left">
            <ul>
                <li> <a href='#' class="ui-btn ui-btn-icon-left ui-corners-all ui-icon-carat-l" onclick="history.back(); return false">Back</a></li>
            </ul>
        </div><!-- /navbar -->
    </div><!-- /header -->
    <!--Page : content -->
    <div data-role="content" data-theme="{{ mbthemedocuments }}">
        <ul data-role="listview" data-inset="true" itemtype="documentbody" data-theme="{{ mbthemedocuments }}"></ul>
    </div>
    {% if not isMobileApp %}
    <!-- footer toolbar -->
    <div data-role="footer"  data-position="fixed" data-theme="{{ mbthemetitlebar }}" data-tap-toggle="false" class="ui-bar">
        <div data-role="controlgroup" data-type="horizontal" style="float: left;">
            <a href="{{ path('docova_mobile') }}#libraries" data-icon="home" data-iconpos="left" data-mini="true">Home</a>
            <a href="#" onclick="logOut('{{ path('docova_logout') }}');" target="_top" rel="external" data-icon="back" data-ajax="false" data-iconpos="left" data-mini="true">Log Out</a>
        </div><!-- buttons -->
        <div data-role="controlgroup" data-type="horizontal" style="float: right;">
        </div><!-- buttons -->
    </div><!-- /footer -->
    {% endif %}
</div><!-- page.page -->

<!----------------------------------------------------------------------------------->
<!------------------ ( 11. Form page  ) --------------------------------------------->
<div id="form_template" data-role="page">
    <div data-role="header" data-position="fixed" data-theme="{{ mbthemetitlebar }}" data-tap-toggle="false" class="ui-bar">
        {% if not isMobileApp %}
        <img src="{{ asset('bundles/docova/images/Docova-ICON-64px.png') }}" id="headingImg"/>
        {% endif %}
        <div data-role="navbar" data-iconpos="left">
            <ul>
                <li> <a href='#' class="ui-btn ui-btn-icon-left ui-corners-all ui-icon-carat-l" onclick="history.back(); return false">Back</a></li>
            </ul>
        </div><!-- /navbar -->
    </div><!-- /header -->
    <!--Form : content -->
    <div data-role="content" data-theme="{{ mbthemedocuments }}">
        <ul data-role="listview" data-inset="true" itemtype="documentbody" data-theme="{{ mbthemedocuments }}"></ul>
    </div>
    {% if not isMobileApp %}
    <!-- footer toolbar -->
    <div data-role="footer"  data-position="fixed" data-theme="{{ mbthemetitlebar }}" data-tap-toggle="false" class="ui-bar">
        <div data-role="controlgroup" data-type="horizontal" style="float: left;">
            <a href="{{ path('docova_mobile') }}#libraries" data-icon="home" data-iconpos="left" data-mini="true">Home</a>
            <a href="#" onclick="logOut('{{ path('docova_logout') }}');" target="_top" rel="external" data-icon="back" data-ajax="false" data-iconpos="left" data-mini="true">Log Out</a>
        </div><!-- buttons -->
        <div data-role="controlgroup" data-type="horizontal" style="float: right;">
        </div><!-- buttons -->
    </div><!-- /footer -->
    {% endif %}
</div><!-- page.form -->
</body>
</html>