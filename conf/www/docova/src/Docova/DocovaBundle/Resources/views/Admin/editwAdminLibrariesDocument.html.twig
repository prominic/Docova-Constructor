<!DOCTYPE HTML>
<html>
<head>
<title>{%trans%}Library Settings{%endtrans%}</title>
<!--  common javascript & CSS header -->
{% include 'DocovaBundle:Admin:sfWebAdminCommonScriptHeader.html.twig'%}
<script type="text/javascript" src="{{ asset('bundles/docova/js/viewObjects.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/docova/js/embeddedViewObjects.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/docova/js/sarissa.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/docova/js/sarissa_ieemu_xpath.js') }}"></script>
<style type="text/css">
TD.listselheader { width: 10px !important; }
TD.listselheader, TD.listheader, TD.listitem, TD.listsel { padding: 1px !important; font-weight: normal !important; }
</style>
<script language="JavaScript" type="text/javascript">
var subscribedUsers = null;

$(function() {
	$('form').height($(window).height() - 46);
	$( window ).unload(function() {
		return processOnUnload();
	});

	$('#divFormContainer').accordion({
		heightStyle: "content",
		collapsible: true
	});

	$('#title').focus();

	$('#DocumentType').multiselect({
		position: { my: 'left top', at: 'left bottom'},  //required due to content scroll workaround
		selectedList: 3,
	});

	$('#btnAddSubscriber').button({
		icons : {
			primary : 'ui-icon-plusthick'
		}		
	})
	.click(function(e) {
		e.preventDefault();
		AddSubscribers();
	});

	$('input[name=MemberAssignment]').on('click', function() {
		if (docInfo.isNewDoc == "") {
			SetMemberAssignment($(this));
		}
	});

	{% if library is defined %}
	InitMembers(); //Initialize membership data island
	{% endif %}
	loadSubscribedUsers();
});

// validate user profile fields before submitting
function validateDocumentFields()
{
	return true;
}

//create XML request for agent
function AddSubscribers() {
	window.top.Docova.Utils.showAddressDialog({
		dlgtype: "multi",
		sourcedocument: document,
		cb: function(result){
			var request = "";
   		 	var agentName = "LibraryServices";
			if (result){
				request += "<Request><Action>ADDSUBSCRIBERS</Action>";
				request += "<UserName><![CDATA[" + docInfo.UserNameAB+ "]]></UserName>";
				request += "<Document>";
				request += "<LibKey>"+ docInfo.DocKey +"</LibKey>";
				request += generateXMLSubscriberList(result);
				request += "</Document>";
				request += "</Request>";
				var responseResult=Submit_XMLRequest(request,agentName);
				if(responseResult){
					loadSubscribedUsers();
					window.top.Docova.Utils.messageBox({
						title: "{% trans %}Subscription(s) created.{% endtrans %}",
						prompt: "{% trans %}The Subscription(s) have been created successfully.{% endtrans %}",
						icontype: 4,
						msgboxtype: 0,
						width: 300
					});					
				}else{
					window.top.Docova.Utils.messageBox({
						title: "{% trans %}Subscription(s) not created.{% endtrans %}",
						prompt: "{% trans %}The subscription(s) were not created successfully.<br>Try again or contact the Adminstrator.{% endtrans %}",
						icontype: 1,
						msgboxtype: 0,
						width:300
					});
				}
			}			
		}
	});
}

//tokenize subscibers
function generateXMLSubscriberList(userList)
{
	var xmlText="";
	if(typeof userList == "string"){
		var arrSubscribers = userList.split(",");
		for (var x=0; x < arrSubscribers.length; x++){
			 xmlText += "<SubscriberName><![CDATA[" + arrSubscribers[x]  + "]]></SubscriberName>";
		}
	}
	return xmlText;
}

//submits XML request to the agent
function Submit_XMLRequest(request, agentName)
{
	//send the request to server
	var processUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/" + agentName  + "?OpenAgent";
	window.top.Docova.Utils.showProgressMessage("{%trans%}Processing request. Please wait{%endtrans%}...");
	var httpObj = new objHTTP();
	if(!httpObj.PostData(request, processUrl) || httpObj.status=="FAILED")
	{
		alert(httpObj.status);
		window.top.Docova.Utils.hideProgressMessage();
		return false;
	}
	window.top.Docova.Utils.hideProgressMessage();
	return (httpObj.results.length) ? httpObj.results[0] : true;
}

//check if there is any data
function checkSubscriptionOnLoad(){
	var emptyNodeChk = subscribedUsers.XMLDocument.selectSingleNode("documents/h2");
	if (emptyNodeChk !=null){
		$('#trUserSubscription').addClass('hidden');
	}else{
		$('#trUserSubscription').removeClass('hidden');
	}
}

function loadSubscribedUsers()
{
	if (!$('#btnAddSubscriber').hasClass('hidden'))
	{
		subscribedUsers = new xmlDataIsland();
		subscribedUsers.setSrc("{{ path('docova_admin_usersubscription') }}?RestrictToCategory={% if library is defined %}{{ library.getId }}{% endif %}&{{ 'now'|date('m/d/Y h:i:s A') }}");
		subscribedUsers.id = "xmlUserSubscription";
		subscribedUsers.setTemplateName( "otblSubscribedUsers");
		subscribedUsers.ondatasetcomplete = function() { checkSubscriptionOnLoad(); };
		subscribedUsers.process();
		$('#trUserSubscription').removeClass('hidden');
	}
	else {
		$('#trUserSubscription').addClass('hidden');
	}
}

function InitMembers() {
	MembersView = new EmbViewObject;
	MembersView.embViewID = "divMembers";	
	MembersView.captureEventDiv = "divMembersCapture";
	MembersView.perspectiveID = "xmlMembers";
	MembersView.lookupURL = docInfo.ServerUrl + "/" + docInfo.NsfName + "/LibraryMembers.xml?OpenPage&RestrictToCategory=" + docInfo.DocKey;
	MembersView.onRowClick = "EditMember";
	MembersView.maxHeight = "300";
	MembersView.imgPath = '{{ asset('bundles/docova/images/') }}';
	MembersView.fixedHeight = "";
	MembersView.idPrefix = "Members";
	MembersView.usejQuery = false;
	MembersView.EmbViewInitialize();
}

function SetMemberAssignment(obj){
	var valMemberAssignment = obj.val();
	if (valMemberAssignment == "D"){
		if(MembersView.objEmbView.hasData){
			window.top.Docova.Utils.messageBox({
				title: "Setting to Defaults",
				prompt: "Please remove all Members before trying to set this Library back to Default access.",
				icontype: 1,
				msgboxtype: 0,
				width:400
			});
			$('input[name="MemberAssignment"][value="A"]').prop('checked',true);
		}
	}
	if (valMemberAssignment == "A"){
		//if setting the library doc to use Member Assignment then create membership for existing Library Admins that might have
		//already been defined in the LibraryAdmins field prior to the member assignment options change over.
		var membernames = "";
		var accesstype = "Library Administrator";
		var libadminarray = $("#LibraryAdmins").val().split(",");
		
		if($.trim(libadminarray[0]) != ""){
			for(var x=0; x<libadminarray.length; x++){
				if(membernames == ""){
					membernames = libadminarray[x] + "|" + "Person";
				}else{
					membernames += "," + libadminarray[x] + "|" + "Person";
				}
			}
			AddMembers(accesstype, membernames, false)
		}
	}
}

//create XML request to add members for agent
function AddMembers(accesstype, membernames, updateaccess) {
	var delimiter = ",";
	var fieldName = "hiddenMembers";

	if(!accesstype && !membernames){
		jQuery(fieldName).val("");		
	}

	if(!accesstype){	
		window.top.Docova.Utils.selectKeyword({
			choicelist: "User;Library Administrator",
			windowtitle: "Member Access Level",
			delegate: window,
			oncomplete: function(accesslevel){
				AddMembers(accesslevel);
			}
		});
	}
	
	if(accesstype && !membernames){	
		window.top.Docova.Utils.showAddressDialog({
			"fieldname": fieldName, 
			"dlgtype": "multi",
			"title": "Member Selection",
			"separator": delimiter,
			"sourcedocument" : document,
			"returntypes": true,
			"cb": function(memberdata){
				if(memberdata){
					AddMembers(accesstype, memberdata);
				}
			}
		});		
	}
	
	if(accesstype && membernames){
	 	var agentName = "LibraryServices";
		var request = "";	
		request += "<Request>";
    	request += "<Action>ADDLIBRARYMEMBERS</Action>";
		request += "<UserName><![CDATA[" + docInfo.UserNameAB+ "]]></UserName>";
		request +="<LibKey>"+ docInfo.DocKey +"</LibKey>";
		if(updateaccess == false){
			request +="<UpdateAccess>" + updateaccess + "</UpdateAccess>";
		}		
 
 		var arrNames=membernames.split(delimiter);
	 	for (var x=0;x<arrNames.length;x++){
		 	var tempinfo = arrNames[x].split("|");
		 	request +="<Member>";
			request +="<MemberName><![CDATA[" + tempinfo[0]  + "]]></MemberName>";
			request +="<MemberType>" + (tempinfo[1] ? tempinfo[1] : "Unknown") + "</MemberType>";
			request +="<MemberAccess>" + accesstype + "</MemberAccess>";
			request +="</Member>";
	 	 }
		 request += "</Request>";

		var responseResult=Submit_XMLRequest(request,agentName);
		if(responseResult){
			RefreshMembers();
		}else{					
			window.top.Docova.Utils.messageBox({
				title: "Error Adding Members.",
				prompt: "An error occured while adding new library members, check event logs for error.",
				icontype: 1,
				msgboxtype: 0,
				width:300
			});
		}
	}
}//--end AddMembers
</script>
{% if library is defined %}
	{% set path_info = path('docova_admin_editdocument', { 'view_name' : 'wAdminLibraries', 'doc_id' : library.getId }) %}
{% else %}
	{% set path_info = path('docova_admin_library') ~ '?OpenForm&ParentUNID=' %}
{% endif %}

{% include 'DocovaBundle:Admin:sfWebAdminCommonFields.html.twig' with { 
	'document' : library is defined ? library : '', 
	'view_name' : 'wAdminLibraries', 
	'view_title' : 'Libraries', 
	'path_info' : path_info,
	'mode' : 'edit'
} %}
<style type="text/css">
#trUserSubscription TABLE {
	width: 100%;
	display: block;
	height: 114px;
	overflow: auto;
}
#otblSubscribedUsers {
	width: 100%;
	display: table;
}
#otblSubscribedUsers TD:hover {
	background-color: #E7E7E7;
}
#ChangeStatus {
	width: 110px;
}
.ui-icon-group {
	background-image: url('{{ asset('bundles/docova/images/icons/vwicn004.gif') }}') !important;
	background-position: center;	
}
</style>
</head>
<body scroll="no">
	<ul class="ui-widget-header actionBar hidetoload">
		<li id="closeBtn">{% trans %}Close{% endtrans %}</li>
		<li id="saveAndCloseBtn">{% trans %}Save and Close{% endtrans %}</li>
	</ul>
	<form method="post" class="hidetoload" action="{% if library is not defined %}{{ path('docova_admin_library') }}?OpenForm&amp;ParentUNID=0{% else %}{{ path('docova_admin_editdocument', { 'view_name' : 'wAdminLibraries', 'doc_id' : library.getId }) }}?EditDocument{% endif %}&amp;Seq=1" name="_Library" autocomplete="off">
		<h3 class="adjusted headings1">{% trans %}Library Settings{% endtrans %}</h3>
		<div id="divFormContainer">
			<h3>{%trans%}General Settings{%endtrans%}</h3>
			<div>
				<table class="elmContainer" cellspacing="0">
					<tr>
						<td class="firstRw">{%trans%}Set Status{%endtrans%}:</td>
						<td class="firstRw">
							<select class="text ui-widget-content ui-corner-all" name="ChangeStatus" id="ChangeStatus">
								<option {% if library is defined %}{{ library.getStatus == false ? "selected": "" }}{% endif %} value="0">{%trans%}Off-Line{%endtrans%}</option>
								<option {% if library is defined %}{{ library.getStatus == true ? "selected": "" }}{% else %} selected{% endif %} value="1">{%trans%}On-Line{%endtrans%}</option>
							</select>
						</td>
					</tr>
					<tr>
						<td>{% trans %}Source Template{% endtrans %}:</td>
						<td>
							<select class="text ui-widget-content ui-corner-all" name="SourceTemplate" id="SourceTemplate" {{ library is defined ? 'disabled="disabled" style="background:#DDD;"' : '' }}>
								<option value="" {{ library is not defined ? 'selected' : '' }}>{% trans %}Default{% endtrans %}</option>
								{% if lib_templates|length %}
									{% for lib in lib_templates if library is not defined or (library is defined and lib['id'] != library.getId) %}
								<option value="{{ lib['id'] }}" {{ library is defined and lib['id'] == library.getSourceTemplate ? 'selected' : '' }}>{{ lib['Library_Title'] }}</option>
									{% endfor %}
								{% endif %}
							</select>
						</td>
					</tr>
					<tr>
						<td>{%trans%}Title{%endtrans%}:</td>
						<td><input type="text" class="text ui-widget-content ui-corner-all" id="title" name="Title" value="{% if library is defined %}{{ library.getLibraryTitle }}{% endif %}"></td>
					</tr>
					<tr>
						<td>{%trans%}Description{%endtrans%}:</td>
						<td><input type="text" class="text ui-widget-content ui-corner-all" name="Description" value="{% if library is defined %}{{ library.getDescription }}{% endif %}"></td>
					</tr>
					<tr>
						<td>{%trans%}Library Key{%endtrans%}:</td>
						<td>{% if library is defined %}{{ library.getId }}{% endif %}</td>
					</tr>
					<tr>
						<td>{%trans%}Recycle Bin retentions{%endtrans%}:</td>
						<td><input type="text" class="text ui-widget-content ui-corner-all" name="TrashCleanupDelay" value="{% if library is defined %}{{ library.getRecycleRetention }}{% else %}30{% endif %}" />{%trans%}day(s){%endtrans%}</td>
					</tr>
					<tr>
						<td>{%trans%}Archive retention{%endtrans%}:</td>
						<td><input type="text" class="text ui-widget-content ui-corner-all" name="ArchiveCleanupDelay" value="{% if library is defined %}{{ library.getArchiveRetention }}{% else %}730{% endif %}" />{%trans%}day(s){%endtrans%}</td>
					</tr>
					<tr>
						<td>{%trans%}Document Log retention{%endtrans%}:</td>
						<td><input type="text" class="text ui-widget-content ui-corner-all" name="LogCleanupDelay" value="{% if library is defined %}{{ library.getDocLogRetention }}{% else %}2192{% endif %}">{%trans%}day(s) after the document is permanently deleted.{%endtrans%}</td>
					</tr>
					<tr>
						<td>{%trans%}Event log retention{%endtrans%}:</td>
						<td><input type="text" class="text ui-widget-content ui-corner-all" name="EventCleanupDelay" value="{% if library is defined %}{{ library.getEventLogRetention }}{% else %}90{% endif %}">{%trans%}day(s){%endtrans%}&nbsp;</td>
					</tr>
					<tr>
						<td>{%trans%}Applicable document types{%endtrans%}:</td>
						<td>
							<label><input class="hideShow" hide="libDocTypes" type="radio" name="DocumentTypeOption" value="A" {% if library is defined  %}{% if library.getApplicableDocType.count == 0 %}checked{% endif %}{% else %}checked{% endif %} >{% trans %}All{% endtrans %}</label>
							<label><input class="hideShow" show="libDocTypes" type="radio" name="DocumentTypeOption" value="S" {% if library is defined and library.getApplicableDocType.count > 0 %}checked{% endif %}>{%trans%}Selected{%endtrans%}</label>
						</td>
					<tr>
					<tr class="libDocTypes{% if library is not defined or library.getApplicableDocType.count == 0 %} hidden{% endif %}">
						<td class="firstRw exc"></td>
						<td class="firstRw exc">
							<select id="DocumentType" name="DocumentType[]" multiple="multiple">
							{% if doctypes|length > 0 %}
								{% for item in doctypes %}
									{% set selected = '' %}
									{% if library is defined and library.getApplicableDocType.count > 0 %}
										{% for doctype in library.getApplicableDocType %}
											{% if doctype.getId == item.getId %}
												{% set selected = 'selected="selected"' %}
											{% endif %}
										{% endfor %}
									{% endif %}
								<option {{ selected }} value="{{ item.getId }}" >{{ item.getDocName }}</option>
								{% endfor %}
							{% endif %}&nbsp;
							</select>
						</td>
					</tr>
					<tr>
						<td>{%trans%}Who can create folders at the library root level?{%endtrans%} 
							<span class="elNote">{%trans%}Leave blank for all{%endtrans%}</span>
						</td>
						<td>
						{% set folder_creator_users = '' %}
						{% set fcu_html = '' %}
						{% if folder_creators is defined and folder_creators.count > 0 %}
							{% for item in folder_creators %}
							{% set folder_creator_users = ',' ~ item.getUserNameDnAbbreviated ~ folder_creator_users %}
							{% set fcu_html = fcu_html ~ '<span>'~ item.getUserNameDnAbbreviated ~'<i class="far fa-times removename"></i></span>' %}
							{% endfor %}
						{% endif %}
						{% if group_creators is defined and group_creators.count > 0 %}
							{% for item in group_creators %}
							{% set folder_creator_users = ',' ~ item.getDisplayName ~ folder_creator_users %}
							{% set fcu_html = fcu_html ~ '<span>'~ item.getDisplayName ~'<i class="far fa-times removename"></i></span>' %}
							{% endfor %}
						{% endif %}
						{% set folder_creator_users = folder_creator_users|length > 0 ? folder_creator_users[1:] : '' %}
							<input type="text" class="text ui-widget-content ui-corner-all namepicker" target="CanCreateRootFolders" elmtype="multi" value="" />
							<button class="show-namepicker" type="button"></button>
							<input type="hidden" name="CanCreateRootFolders" id="CanCreateRootFolders" value="{{ folder_creator_users }}" />
							{% if folder_creator_users %}
							<em class="slContainer" id="slContainercancreaterootfolders">{{ fcu_html }}</em>
							{% endif %}
						</td>
					</tr>
					<tr>
						<td>
							{% trans %}Library Administrators{% endtrans %}:
							<span class="elNote">{%trans%}System Administrators will still have access.{%endtrans%}</span>
						</td>
						<td>
						{% set admin_users = '' %}
						{% set admin_users_html = '' %}
						{% if libadmin_users is defined and libadmin_users|length > 0 %}
							{% for item in libadmin_users %}
							{% set admin_users = ',' ~ item.getUserNameDnAbbreviated ~ admin_users %}
							{% set admin_users_html = admin_users_html ~ '<span>'~ item.getUserNameDnAbbreviated ~'<i class="far fa-times removename"></i></span>' %}
							{% endfor %}
						{% endif %}
						{% if libadmin_groups is defined and libadmin_groups.count > 0 %}
							{% for item in libadmin_groups %}
							{% set admin_users = ',' ~ item.getDisplayName ~ admin_users %}
							{% set admin_users_html = admin_users_html ~ '<span>'~ item.getDisplayName ~'<i class="far fa-times removename"></i></span>' %}
							{% endfor %}
						{% endif %}
						{% set admin_users = admin_users|length > 0 ? admin_users[1:] : '' %}
							<input type="text" class="text ui-widget-content ui-corner-all namepicker" target="LibraryAdmins" elmtype="multi" value="" />
							<button class="show-namepicker" type="button"></button>
							<input type="hidden" name="LibraryAdmins" id="LibraryAdmins" value="{{ admin_users }}" />
							{% if admin_users %}
							<em class="slContainer" id="slContainerlibraryadmins">{{ admin_users_html }}</em>
							{% endif %}
						</td>
					</tr>
					<tr>
						<td>{%trans%}Community{%endtrans%}</td>
						<td><input type="text" name="Community" class="text ui-widget-content ui-corner-all" value="{% if library is defined %}{{ library.getCommunity }}{% endif %}"></td>
					</tr>
					<tr>
						<td>{%trans%}Realm{%endtrans%}</td>
						<td><input type="text" name="Realm" class="text ui-widget-content ui-corner-all" value="{% if library is defined %}{{ library.getRealm }}{% endif %}"></td>
					</tr>
					<tr>
						<td>{%trans%}Public Access{%endtrans%}
						   <span class="elNote">{%trans%}Allows users to share files with external users.{%endtrans%}</span>
						</td>
						
						<td>
						   <input type="checkbox" id="EnablePublicAccess" name="EnablePublicAccess" value="1" {{ (library is defined and library.getPublicAccessEnabled is defined and library.getPublicAccessEnabled) ? " checked" : "" }}
						      
						    onclick="var isEnabled = (jQuery('input[name=EnablePublicAccess]:checked').val() ==  &quot;1&quot;);
if (isEnabled){
	jQuery('#publicAccessSettings').show();
}else{
	jQuery('#publicAccessSettings').hide();
}
" 
class="inpRadioChkbox" />Enable Public Access</label>
                           <span id="publicAccessSettings" style="display:{{ (library is defined and library.getPublicAccessEnabled is defined and library.getPublicAccessEnabled) ? 'inline' : 'none' }}">						   
							   <p/>
							   <span class="elNote" style="display:inline;">Default Expiration:</span>
							   <input type="text" name="Public_Access_Expiration" style="width:30px;" class="text ui-widget-content ui-corner-all" 
							   value="{{ (library is defined and library.getPublicAccessExpiration is defined and library.getPublicAccessExpiration!='') ? library.getPublicAccessExpiration : 1}}"/>
							   <span class="elNote" style="display:inline;">(days)</span>
						   </span>
						</td>

					</tr>				
					<tr>
						<td>{% trans %}Display Documents in Folder List{% endtrans %}</td>
						<td><label><input type="checkbox" name="LoadDocsAsFolders" value="1" {{ library is defined and library.getLoadDocsAsFolders ? 'checked' : '' }}> {% trans %}Enabled{% endtrans %}</label></td>
					</tr>
					<tr>
						<td>{% trans %}Enable Use as a Template{% endtrans %}:</td>
						<td><label><input type="checkbox" name="IsTemplate" id="IsTemplate" value="1" {{ library is defined and library.getIsTemplate ? 'checked' : '' }}> {% trans %}Allow use as a template for new libraries{% endtrans %}</label></td>
					</tr>
					<tr>
						<td>{%trans%}Doc compare file source{%endtrans%}</td>
						<td>
							<input type="text" name="UploaderAttachmentsField" class="text ui-widget-content ui-corner-all" value="{% if library is defined %}{{ library.getCompareFileSource }}{% endif %}"> 
							<span class="elNote">{%trans%}If using multiple uploaders and want to limit the files collected by the Compare Documents process, enter the field specified by the AttachmentNames param of the Uploader to be used. Leave blank to collect all files.{%endtrans%}</span>
						</td>
					</tr>
					<tr>
						<td>{%trans%}Compare Documents{%endtrans%}:</td>
						<td> 
							<label>
								<input type="radio" name="RequirePDFCreator" value="0" {% if library is not defined or not library.getPDFCreatorRequired %}checked{% endif %} class="hideShow" hide="requirePDF" show="notRequirePDF">
								{%trans%}PDF Creator not required for document comparison{%endtrans%}
							</label> <br />
							<label>
								<input type="radio" name="RequirePDFCreator" value="1" {% if library is defined and library.getPDFCreatorRequired %}checked{% endif %} class="hideShow" hide="notRequirePDF" show="requirePDF"> 
								{%trans%}Require PDF Creator to be installed for document comparison{%endtrans%}
							</label>
							<span class="notRequirePDF elNote{% if library is defined and library.getPDFCreatorRequired %} hidden{% endif %}">
								{%trans%}Comparison results will be displayed in Word and printing will not be controlled.{%endtrans%}
							</span>
							<span class="requirePDF elNote{% if library is not defined or not library.getPDFCreatorRequired %} hidden{% endif %}">
								{%trans%}Comparison results will be converted to PDF for display. If run from a folder, the ability to print the PDF comparison results will be disabled. If run from within a document, the ability to print the PDF comparison results is controlled by the Restrict Printing option for the document type.{%endtrans%}
							</span>
						</td>
					</tr>
				</table>
			</div>
			
			<h3>{% trans %}Access Control{% endtrans %}</h3>
			<div>
				<table class="elmContainer">
					<tr>
						<td class="firstRw">{% trans %}Access Control{% endtrans %}:</td>
						<td class="firstRw">
							<label><input type="radio" name="MemberAssignment" class="hideShow" hide="libmembers" value="D" {{ library is not defined or not library.getMemberAssignment ? 'checked' : '' }}> {% trans %}Default{% endtrans %}</label>
							<label><input type="radio" name="MemberAssignment" class="hideShow" show="libmembers" value="A" {{ library is defined and library.getMemberAssignment ? 'checked' : '' }}> {% trans %}Assign Membership{% endtrans %}</label>
						</td>
					</tr>
					<tr>
						<td>{% trans %}Library specific org unit{% endtrans %}</td>
						<td><input type="text" class="text ui-widget-content ui-corner-all" id="LibraryDomainOrgUnit" name="LibraryDomainOrgUnit" value="{{ library is defined ? library.getLibraryDomainOrgUnit : '' }}" ></td>
					</tr>
					{% if library is defined %}
					<tr class="libmembers{{ library.getMemberAssignment ? '' : ' hidden' }}">
						<td colspan="2">
							<span class="elNote" style="padding-top: 2px; padding-bottom: 2px;">{% trans %}Save this page and re-open in read mode in order to update members.{% endtrans %}</span>
							<!--- Embedded view perspective----->
	   						<script id="xmlMembers" type="text/xml"><viewperspective><type>system</type><id>system_default_folder</id><Unid/><name>Built-in perspective</name><description/><createdby/><createddate/><modifiedby/><modifieddate/><autocollapse>0</autocollapse><viewsettings><viewproperties><showSelectionMargin>1</showSelectionMargin><allowCustomization>1</allowCustomization><extendLastColumn>1</extendLastColumn><isSummary/><isThumbnails/><categoryBorderStyle>border-bottom : solid 2px #aaccff;</categoryBorderStyle></viewproperties><columns><column><title>{% trans %}Member Name{% endtrans %}</title><xmlNodeName>MemberName</xmlNodeName><sortOrder>ascending</sortOrder><width>120</width></column><column><title>{% trans %}Type{% endtrans %}</title><xmlNodeName>MemberType</xmlNodeName><width>50</width></column><column><title>{% trans %}Access{% endtrans %}</title><xmlNodeName>MemberAccess</xmlNodeName><width>100</width></column><column><title>{% trans %}Maintained By{% endtrans %}</title><xmlNodeName>MaintainedBy</xmlNodeName><width>80</width></column></columns></viewsettings></viewperspective></script>
							<div id="divMembersCapture">
								<!--- BEGIN Embedded view contents---->
	      						<div id="divMembers" style="display:none; background-color:white;width:100%; padding: 0px; margin: 0px;overflow: auto; overflow-x: hidden;" ></div>
								<!--- END Embedded view contents----->
							</div>
							<!--- Empty Embedded view message----->
							<div id="nodivMembers" style="display: none; padding:5px;">{% trans %}No members assigned.{% endtrans %}</div>
						</td>
					</tr>
					{% endif %}
				</table>
			</div>
			
			<h3>{%trans%}Subscriptions{%endtrans%}</h3>
			<div>
				<table class="elmContainer">
					<tr>
						<td class="firstRw">{%trans%}Current Subscribers{%endtrans%}:</td>
						<td class="firstRw">
							<input type="hidden" id="hiddenUserSubscription" value="" />
							<button type="button" id="btnAddSubscriber" class="{% if library is not defined %}hidden{% endif %}">{%trans%}Add Subscribers{%endtrans%}</button>
							<span class="elNote">({%trans%}When Adding Subscribers, only pick individual's names, not groups{%endtrans%})</span>
						</td>
					</tr>
					<tr>
						<td class="hdr" colspan="2">{%trans%}Subscriber Name{%endtrans%}</td>
					</tr>
					<tr id="trUserSubscription">
						<td class="firstRw exc" colspan="2">
							<script type="text/xml" id="xmlUserSubscription"></script>
							<table datasrc="#xmlUserSubscription" cellpadding="0">
							<tbody id="otblSubscribedUsers">
								<tr>
									<td class="firstRw exc" datafld="SubscriberName">&nbsp;</td>
								</tr>
							</tbody>
							</table>
						</td>
					</tr>
					<tr>
						<td>{%trans%}Subscription Restrictions{%endtrans%}:</td>
						<td>
							<span class="elNote">{%trans%}Only the following users can subscribe to this library (blank allows all){%endtrans%}:</span> 
							{% set restricted_users = '' %}
							{% set restricted_users_html = '' %}
							{% if restrictions is defined and restrictions.count > 0 %}
								{% for item in restrictions %}
								{% set restricted_users = (',' ~ item.getUserNameDnAbbreviated ~ restricted_users) %}
								{% set restricted_users_html = restricted_users_html ~ '<span>'~ item.getUserNameDnAbbreviated ~'<i class="far fa-times removename"></i></span>' %}
								{% endfor %}
							{% endif %}
							{% if group_restrictions is defined and group_restrictions.count > 0 %}
								{% for item in group_restrictions %}
								{% set restricted_users = ',' ~ item.getDisplayName ~ restricted_users %}
								{% set restricted_users_html = restricted_users_html ~ '<span>'~ item.getDisplayName ~'<i class="far fa-times removename"></i></span>' %}
								{% endfor %}
							{% endif %}
							{% set restricted_users = restricted_users|length > 0 ? (restricted_users[1:]) : '' %}
							<input type="text" class="text ui-widget-content ui-corner-all namepicker" target="Subscribers" elmtype="multi" value="" />
							<button class="show-namepicker" type="button"></button>
							<input type="hidden" name="Subscribers" id="Subscribers" value="{{ restricted_users }}" />
							{% if restricted_users %}
							<em class="slContainer" id="slContainersubscribers">{{ restricted_users_html }}</em>
							{% endif %}
						</td>
					</tr>
				</table>
			</div>
			
			<h3>{%trans%}Comments{%endtrans%}</h3>
			<div>
				<table class="elmContainer">
					<tr>
						<td class="firstRw">{%trans%}Library comments{%endtrans%}:</td>
						<td class="firstRw">
							<textarea name="Body" class="text ui-widget-content ui-corner-all">{% if library is defined %}{{ library.getComments }}{% endif %}</textarea>
						</td>
					</tr>
				</table>
			</div>
		</div>
	</form>
</body>
</html>
