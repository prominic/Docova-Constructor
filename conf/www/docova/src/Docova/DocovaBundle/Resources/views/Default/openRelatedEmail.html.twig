<!DOCTYPE HTML>
<html>
<head>
<title>{% trans %}Associated Email{% endtrans %}</title>
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="CACHE-CONTROL" CONTENT="0">
<META HTTP-EQUIV="EXPIRES" CONTENT="0">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/smoothness/jquery-ui.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/css/styleDocumentBase.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/css/styleActionBar.css') }}" type="text/css" />
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/commonFunctions.js') }}" charset="UTF-8"></script>
<script type="text/javascript" language="JavaScript" src="{{ asset('bundles/docova/jquery/jquery.js') }}"></script>
<script type="text/javascript" language="JavaScript" src="{{ asset('bundles/docova/jquery/jquery-ui.js') }}"></script>
{% include 'DocovaBundle:Default:scriptMessagesTranslation.html.twig' %}
<script language="JavaScript" type="text/javascript">
var srcWindow = null;
var openAction = null;
var addressDlg=null;
var info = {
  "DocID" : "{{ mail ? mail.getId : '' }}",
  "DocKey" : "{{ mail ? mail.getId : '' }}",
  "UserName" : "{{ user.getUserNameDn|replace({'\\': '\\\\'}) }}",
  "UserNameAB" : "{{ user.getUserNameDnAbbreviated|replace({'\\': '\\\\'}) }}",
  "UserNameCN" : "{{ user.username }}",
  "UserRoles" : "$$WebClient;[Administration]",
  "isNewDoc" : "",
  "isDocBeingEdited" : "",
  "Mode" : "",
  "HTTP_Referer" : "",
  "Query_String" : "OpenDocument",
  "Query_String_Decoded" : "OpenDocument",
  "Path_Info" : "",
  "Path_Info_Decoded" : "{{ path('docova_advancedcomments') }}",
  "ServerName" : "{{ app.request.server.get('HTTP_HOST') }}",
  "NsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
  "ServerUrl" : "{{ app.request.getscheme }}://{{ app.request.server.get('HTTP_HOST') }}",
  "PortalWebPath" : "{{ path('docova_homepage')[:path('docova_homepage')|length - 1] }}",
  "PortalNsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
  "ParentDocKey" : "{{ mail ? mail.getDocument.getId : '' }}",
  "UserMailSystem" : "N",
  "UserMailImport" : "",
  "DocAttachmentNames" : "",
  "OutlookAttachmentsSize" : ""
};
function getinfovar(){
   return info;
}		

$(document).ready(function(){  
	$( "button" ).button().click(function( event ) {
		event.preventDefault();
	});

	$("#btnPrintPage").button({
		icons: { primary: "ui-icon-print" }
    	}).click(function(event){
    		printPage();
    		event.preventDefault();
	}).tooltip();

	$('#tdActionBar a').each(function(index,element) {
   		$(element).button({
			text: true,
			label: $.trim($(this).text()),
		});
	});

	$('#FormHeader').show();
});

function CloseDocument()
{
	var currDocID = docInfo.DocID;
	if(window.parent.fraTabbedTable && window.parent.fraTabbedTable.objTabBar){
		window.parent.fraTabbedTable.objTabBar.CloseTab(currDocID);
	}
}

function HandleKeyboard()
{
	if(event.keyCode == 27 && !docInfo.isDocBeingEdited) {CloseDocument();}
}

//====================== uploader burtton handlers =====================




function HideAttachmentTables(){
	var count, tables;	
	//-------------------------------------------------------------------------
	tables =  jQuery("#divRTContent").find("TABLE").get();
	if (tables == null){
		return(0);		
	}
	//-------------------------------------------------------------------------
	count = tables.length;
	if (count <= 0){
		return(0);		
	}
	//-------------------------------------------------------------------------
	for (a = 0; a < count; a++){
		obj = tables[a];
		if ((obj.border == 1) && (obj.cellSpacing == 2) && (obj.cellPadding == 4)){
			obj.style.display = "none";
		}
	}
}

function ExpandHTMLIframes(){
	//------------------- set html content iframe display -----------
	iframeBoxes= jQuery("#divRTContent").find("IFRAME").get();
	if (iframeBoxes == null){
		return(0);		
	}
	
	//-------------------------------------------------------------------------
	count = iframeBoxes.length;
	if (count <= 0){
		return(0);		
	}
	//-------------------------------------------------------------------------
	for (a = 0; a < count; a++){
		obj = iframeBoxes[a];
			obj.height = obj.document.body.scrollHeight
	}
}

//------------------	 formats href tags for divRTContent so it opens in new window --
function fixMailMemoHref()
{
	var divRTContent = document.getElementById("divRTContent");
	var findHref = new RegExp("<a","gi");
	divRTContent.innerHTML = divRTContent.innerHTML.replace(findHref, "<a target='_blank' ");
}

//---------------------  formats inline img src path for outlook embeded attachments and regular attachments  -----------------------
function fixInlineSrcPath()
{
	if(docInfo.UserMailImport=='O' )
	{
		var imgs = document.getElementById("divRTContent").getElementsByTagName("img");
		var divLinks = document.getElementById("outlookMsgAttachments");
		var imgsCount=imgs.length
	 	//check if there are any attachments
	 	if (docInfo.DocAttachmentNames ==null || docInfo.DocAttachmentNames =="")
	 	{
	 		return;
	 	}
	  	var attachList = docInfo.DocAttachmentNames.split("*");
	 	var outlookAttachments = new Array();
	 	var outookEmdAttachments = new Array();

		for (var i = 0;i < imgsCount; i++) 
		{
	 		var newSrc= imgs[i].nameProp;
	 		// check if its an embeded or inline attachment
			if (attachList.exists(newSrc))
			{
				imgs[i].src='../0/'+docInfo.DocID+'/$file/' + newSrc;
				outookEmdAttachments.push(newSrc);
			}
		}
		//check for regular attachments
		var emdAttLength = outookEmdAttachments.length;
		for( var x=0;x<emdAttLength;x++)
		{
			attachList.remove(outookEmdAttachments[x]);
		}
		//check for embeded css
		var links = document.getElementById("divRTContent").getElementsByTagName("link");
		for ( var t=0; t<links.length; t++)
		{
			attachList.remove(links[t].href );
		}
		
		//text to display with attachments for regular attachments
		var attachLinks="Attachments: &nbsp;";
		var attachSize=attachList.length;
		// exlude emebeded attachments
		for(var y=0;y<attachSize;y++)
		{
		     // create img tag
			var imgStr =returnImageIconForAttachment(attachList[y]);
			var attachSizes = docInfo.OutlookAttachmentsSize.split(",");
			var attNameSize = formatAttachmentNameSize(attachSizes,attachList[y]);
			attachLinks += '<a style=\"text-decoration: none\" target=\"_blank\" href=\"'+'../0/'+docInfo.DocID+'/$file/' + attachList[y] + '\">' + imgStr + attNameSize+ '</a>&nbsp;&nbsp';
		}
		divLinks.innerHTML =attachLinks;
		// show for regular attachments
		if (attachSize > 0)
		{
			divLinks.style.display="block";
		}
	} 
}

//---------------	 format Name and size for each regular attachment	--------------------
function formatAttachmentNameSize(arrayAttachSizes, attachmentFileName)
{
	var attachmentLength = arrayAttachSizes.length;
	var strRetFileName=attachmentFileName;
	for (var a=0; a<attachmentLength;a++)
	{
		var tempArray = arrayAttachSizes[a].split("*");
		if (tempArray.exists(attachmentFileName))
		{
			strRetFileName=attachmentFileName+ " (" + tempArray[1] + ")";
		}
	}

	return strRetFileName;
}
//-------------  function to create icon for each recognized attachments -----
function returnImageIconForAttachment(attFileName)
{
	var imgTag='';
	var dbLibPath = '/'+docInfo.NsfName + '/';
	if (attFileName !=null && attFileName !="")
	{
		//PDF
		if (attFileName.indexOf('.pdf') !=-1)
		{
			imgTag+='<img border="0" src="'+dbLibPath+'pdf.gif" />';
		}
		//Word Doc
		else if (attFileName.indexOf('.doc') !=-1)
		{
			imgTag+='<img border="0" src="'+dbLibPath+'doc.gif" />';
		}
		//Excel
		else if (attFileName.indexOf('.xls') !=-1)
		{
			imgTag+='<img border="0" src="'+dbLibPath+'excel.gif" />';
		}
		//ZIP
		else if (attFileName.indexOf('.zip') !=-1)
		{
			imgTag+='<img border="0" src="'+dbLibPath+'zip.gif" />';
		}
		//HTML
		else if (attFileName.indexOf('.html') !=-1 || attFileName.indexOf('.htm') !=-1)
		{
			imgTag+='<img border="0" src="'+dbLibPath+'html.gif" />';
		}
		//powerpoint
		else if (attFileName.indexOf('.ppt') !=-1)
		{
			imgTag+='<img border="0" src="'+dbLibPath+'powerpoint.gif" />';
		}
		// text file
		else if (attFileName.indexOf('.txt') !=-1)
		{
			imgTag+='<img border="0" src="'+dbLibPath+'text.gif" />';
		}
		//xml
		else if (attFileName.indexOf('.xml') !=-1)
		{
			imgTag+='<img border="0" src="'+dbLibPath+'xml.gif" />';
		}
		//Gif
		else if (attFileName.indexOf('.gif') !=-1)
		{
			imgTag+='<img border="0" src="'+dbLibPath+'gif.gif" />';
		}
		//JPEG
		else if (attFileName.indexOf('.jpg') !=-1 || attFileName.indexOf('.jpeg') !=-1)
		{
			imgTag+='<img border="0" src="'+dbLibPath+'jpeg.gif" />';
		}
		//bmp
		else if (attFileName.indexOf('.bmp') !=-1)
		{
			imgTag+='<img border="0" src="'+dbLibPath+'bmp.gif" />';
		}
		//Unknown fiel type
		else 
		{
			imgTag+='<img border="0" src="'+dbLibPath+'unkown.gif" />';
		}
	}
	return imgTag;
}

//------------ 	Removes array element  ---------------
Array.prototype.remove=function(s){
  for(i=0;i<this .length;i++){
    if(s==this[i]) this.splice(i, 1);
  }
}
//------------ Checks if string exists in an array  ------------------
Array.prototype.exists = function (strCheck) {
	for (var i = 0; i < this.length; i++) 
	{
        if (this[i] == strCheck) return true;
    }
    return false;
}

/*******************************************************************
 * Prints page after adjusting the width of Uploader
*********************************************************************/
function printPage()
{
	$( "#btnPrintPage" ).tooltip( "destroy" )
	window.print();
	return;
}

function IsValidParent()
{
	try	{
		srcWindow = window.parent.fraContentTop;
		if(srcWindow.ViewLoadDocument){return true;}
	}
	catch (e){
		return false;
	}
	return false;
}
function HasUploaderResize()
{
	try	{
		if(SetUploaderWidth){return true;}
	}
	catch (e)
	{
		return false;
	}
	return false;
}
</script>
</head>
<body text="#000000" class="ui-widget" SCROLL="no" onload="InitVars(info); document.body.onkeydown=HandleKeyboard; ExpandHTMLIframes(); fixInlineSrcPath(); fixMailMemoHref();">
	<form action="">
		<div id="FormHeader" style="display:none;">
    		<table border="0" cellspacing="2" style="width:100%">
    			<tr valign="middle">
    				<td id="tdActionBar"><a onclick="CloseDocument(); return false;" href="">{% trans %}Close{% endtrans %}</a></td>
    				<td style="text-align:right;padding-right:20px;"><button id="btnPrintPage" title="Print this document." class="btnStandard"></button></td>
    			</tr>
    		</table>
		</div>
		<div id="divContentSection" style="top:35px;">
			<div id="divDocPage" style="min-height:95%;border: solid 1px #aaaaaa;border-right: solid 2px #777777;border-bottom: solid 2px #777777;padding: 5px; background-color: #FEFEFE;">
    			<fieldset style="padding: 4px;">
    				<legend style="font: bold 12px verdana, arial, sans-serif; margin-bottom: 10px;">Associated Email&nbsp;</legend>
    				<table width="100%" border="0" cellspacing="0" cellpadding="0">
    					<tr valign="top">
    						<td width="10%">{% trans %}Related to{% endtrans %}:</td>
    						<td width="90%">{{ mail ? mail.getDocument.getDocTitle : '' }}</a></td>
    					</tr>
    					<tr valign="top">
    						<td width="10%">{% trans %}Date{% endtrans %}:</td>
    						<td width="90%">{{ mail ? mail.getDateSent.format('m/d/Y h:i:s A') }}</td>
    					</tr>
    					<tr valign="top">
    						<td width="10%">{% trans %}From{% endtrans %}:</td>
    						<td width="90%">{{ mail ? mail.getFromWho }}</td>
    					</tr>
    					<tr valign="top">
    						<td width="10%">{% trans %}To{% endtrans %}:</td>
    						<td width="90%">{{ mail ? mail.getToWho }}</td>
    					</tr>
    					<tr valign="top">
    						<td width="10%">{% trans %}cc{% endtrans %}:</td>
    						<td width="90%">{{ mail ? mail.getCc}}</td>
    					</tr>
    					<tr valign="top">
    						<td width="10%">{% trans %}bcc{% endtrans %}:</td>
    						<td width="90%">{{ mail ? mail.getBcc }}</td>
    					</tr>
    					<tr valign="top">
    						<td width="10%">{% trans %}Subject{% endtrans %}:</td>
    						<td width="90%">{{ mail ? mail.getSubject }}</td>
    					</tr>
    					<tr valign="top">
    						<td width="100%" bgcolor="#FFFFFF" colspan="2">
    							<div id="outlookMsgAttachments" style="display: none;"></div>
    						</td>
    					</tr>
    					<tr valign="top">
    						<td width="100%" style="padding-top:5px;" colspan="2"><b>{% trans %}Content{% endtrans %}:</b></td>
    					</tr>
    				</table>
    				<div id="divRTContent" style="width: 95%; background-color: white; padding: 4px;">
    					<br><p>{{ mail_content|raw }}<p>
    					{% if mail_attachments is defined and mail_attachments|length > 0 %}
    						<table width="100%" border="0" cellspacing="0" cellpadding="0">
    						<tr valign="top">
    							<td width="100%" bgcolor="#EFEFEF" colspan="2"><b>{% trans %}Attachments{% endtrans %}:</b></td>
    						</tr>										
    						{% for index,fileInfo in mail_attachments %}
    							<tr>
    				    			<td>					   
    				    				<a href="{{ fileInfo[0] }}">{{ fileInfo[1] }}</a>
    				    			</td>
    							</tr>								    
    						{% endfor %}
    						</table>
    					{% endif %}					
    					<table border="1" cellspacing="2" cellpadding="4" style="display: none;">
    						<tr valign="middle">
    							<td>
    								<a href="{# path to the attachment #}"><img hspace="4" align="middle" src="{{ asset('bundles/docova/images/icons/medoc.gif') }}" border="0"	alt="{% trans %}Document Icon{% endtrans %}">{# attachment name #}</a>
    							</td>
    							<td>
    								<B>{% trans %}Type{% endtrans %}: </B>image/jpeg<br> <B>{% trans %}Name{% endtrans %}: </B>
    							</td>
    						</tr>
    					</table>
    				</div>
    			</fieldset>
    		</div>
		</div>
		<!------------------ SUBFORM sfKillCache ------------>
		<!------------------Microsoft suggestion to force no cacheing of documents------------>
		<HEAD>
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="CACHE-CONTROL" CONTENT="0">
<META HTTP-EQUIV="EXPIRES" CONTENT="0">
		</HEAD>
		<!------------------END SUBFORM sfKillCache  ------------>
	</form>
</body>
</html>