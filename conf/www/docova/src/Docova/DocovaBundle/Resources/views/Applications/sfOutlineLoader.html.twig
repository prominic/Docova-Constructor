{{ f_SetApplication(appId) }}{{ f_SetUser(user) }}
<!doctype html>
<html>
<head>
<META content="0" http-equiv="expires">
<META content="0" http-equiv="cache-control">
<META content="no-cache" http-equiv="Pragma">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/smoothness/jquery-ui.css') }}">
<link rel="stylesheet" href="{{ asset('bundles/docova/font-awesome/css/all.min.css') }}">
<script type="text/javascript" src="{{ asset('bundles/docova/jquery/jquery.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/docova/jquery/jquery-ui.js') }}"></script>
<script type="text/javascript" language="JavaScript" src="{{ asset('bundles/docova/js/Docova.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/docova/js/commonFunctions.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/FormulaLanguage.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/admin/appBuilderJS.js') }}"></script>
{% if not outline.getOutlineType or outline.getOutlineType == 'B' %}
<link rel="stylesheet" href="{{ asset('bundles/docova/css/styleOutline.css') }}">
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/basicmenu.js') }}" ></script>
{% elseif outline.getOutlineType == 'C' or outline.getOutlineType == 'VP' or  outline.getOutlineType == 'VC' or outline.getOutlineType == 'VS' %}
<link rel="stylesheet" href="{{ asset('bundles/docova/css/verticalmenu.css') }}">
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/verticalmenu.js') }}" ></script>
{% elseif outline.getOutlineType == 'N' %}
<link rel="stylesheet" href="{{ asset('bundles/docova/css/vnavigatormenu.css') }}">
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/vnavigatormenu.js') }}" ></script>
{% elseif   outline.getOutlineType == 'HC' or outline.getOutlineType == 'HP' or outline.getOutlineType == "IC" or outline.getOutlineType == "IS" %}
<link rel="stylesheet" href="{{ asset('bundles/docova/css/horizontalmenu.css') }}">
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/horizontalmenu.js') }}" ></script>
{% elseif outline.getOutlineType == 'F' %}
<link rel="stylesheet" href="{{ asset('bundles/docova/css/footermenu.css') }}">
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/footermenu.js') }}" ></script>
{% endif %}
{% if outline %}
	{% include 'DocovaBundle:DesignElements:' ~ appId ~ '/outline/' ~ outline.getOutlineName|replace({' ':'', '\\': '-', '/':'-'}) ~ '_twig.html.twig' ignore missing %}
{% endif %}
{% if custcss %}
{% set cssFile = outline.getOutlineName|replace({'/':'-', '\\':'-'})|replace({' ':''}) %}
<link rel="stylesheet" type='text/css' href="{{ asset('bundles/docova/css/custom/'~ app.request.query.get('AppID') ~'/outlines/' ~ cssFile ~ '.css?'~random() ) }}" />

{% endif %}
<script language="JavaScript" type="text/javascript">


var isInIframe = false;
var isInTabs = false;
var ifrm;
var style = "";
var liclass = "";
var liheaderclass = "";
var info = {
	"AppID" : "{{ appId }}",
	"LibraryKey" : "{{ appId }}",
	"UserName" : "{{ user.getUsername }}",
	"UserNameAB" : "{{ user.getUserNameDnAbbreviated|replace({'\\': '\\\\'}) }}",
	"UserNameCN" : "{{ user.getUserProfile.getDisplayName }}",
	"UserNamesList" : "",
	"UserRoles" : "$$WebClient",
	"HTTP_Referer" : "",
	"Query_String" : "openDocument",
	"Query_String_Decoded" : "openDocument",
	"Path_Info_Decoded" : "{% if outline %}{{ path('docova_viewoutlines', {'outline':outline.getOutlineName}) }}?openDocument&AppID={{ appId }}{% endif %}",
	"ServerName" : "{{ app.request.server.get('HTTP_HOST') }}",
	"ServerUrl" : "{{ app.request.getscheme }}://{{ app.request.server.get('HTTP_HOST') }}",
	"NsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
	"PortalWebPath" : "{{ path('docova_homepage')[:path('docova_homepage')|length -1] }}",
	"PortalNsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length-2] }}",
	"HomePageWeb" : "{{ path('docova_homepage') }}",
	"Expand":  "{{ app.request.query.get('expand') }}",
	"SSLState" : "OFF"
};
function getinfovar() {
	return info;
}
InitVars(info);

$(document).ready(function(){
	$( ".OutlineItems" ).disableSelection();

	//---if the outline is in an iframe, in a page
	if($(window.frameElement).attr("elem") == "outline"){ 
		isInIframe = true;
	}
	
	if ( isInIframe ) {
		var iframename = $("#DEName").text();
		var iframealias = $("#DEAlias").text();
	 	ifrm = $("iframe[outlinename='"+iframename+"']", window.parent.document)
		if ( ifrm.length == 0)
			ifrm =  $("iframe[outlinename=" + iframealias + "]", window.parent.document)
	}
	
	$( "button" ).button().click(function( event ) {
		event.preventDefault();
	});

	//---if the outline is also in the DOCOVA tabbed structure
	if(isInIframe){
		var parentFrame = parent.frameElement;
		if($(parentFrame).prop("id") == "appViewMain"){
			isInTabs = true;
		}
// 		OLHeight = parseInt($(".OutlineItems")[0].scrollHeight + 10);
// 		$(ifrm).css("height",OLHeight );
	}

});

function OpenMenuItem(menuObj){
	var eTarget = getFrameTargetName(menuObj);

	var eUrl = "";
	var eType = $(menuObj).attr("etype");
	var eElement = $(menuObj).attr("eelement");
	var eViewType = $(menuObj).attr("eviewtype");	
	var uiw = Docova.getUIWorkspace(document);
	var notab = $(menuObj).attr('enotab') == '1' ? true : false;
	var eElemTitle = $(menuObj).children(".itemlabel:first").text();
	if(eType == "view"){
		uiw.openView({viewname: eElement, title: eElemTitle, targetframe: eTarget, viewtype: eViewType});
	}else if(eType == "form"){
		uiw.openForm({formname: eElement, title: eElemTitle, forcenotab: notab, targetframe: eTarget, readmode: false});				
	}else if(eType == "page"){
		uiw.openPage({pagename: eElement, title: eElemTitle, forcenotab: notab, targetframe: eTarget});
	}else if(eType == 'layout'){
		uiw.openLayout({layoutid: eElement, title: eElemTitle, forcenotab: notab, targetframe: eTarget});
	}else	if(eType == "url"){
		uiw.openUrl({url: eElement, title: eElemTitle, forcenotab: notab, targetframe: eTarget});	
	}else if(eType == "js"){
		
		var escapedcode = eElement;
		var unescapedcode = safe_quotes_js(escapedcode, false, true);
		unescapedcode = safe_tags(unescapedcode, true);
		var jscode = unescapedcode;					
		if(jscode != ""){
			try{
				_targetframe = eTarget;
				var tempfunc = new Function(jscode);
				tempfunc();
			}catch(e){alert("{% trans %}Error: There is an error in the code being executed by this outline entry.{% endtrans %} (" + e.message + ")");}
		}
	}

	return;
}

function ToggleMenuItem(menuObj){
	oIcon = $(menuObj).find("span:first") //first span inside the li
	oNext = $(menuObj).next() //Next sibling to current menu item
	oNextTag = $(oNext).prop("tagName") //tag name of next sibling

	var expicon = $(menuObj).attr("expicon") && $(menuObj).attr("expicon") != "" ? $(menuObj).attr("expicon") : "fa-chevron-down";
	var colicon = $(menuObj).attr("colicon") && $(menuObj).attr("colicon") != "" ? $(menuObj).attr("colicon") : "fa-chevron-up";



	if( ! $(oNext).is(":hidden")){
		if(oNextTag == "UL"){
			$(oNext).css("display", "none")
		}
		$(oIcon).removeClass(expicon)
		$(oIcon).addClass(colicon)
	}else {
		if(oNextTag == "UL"){
			$(oNext).css("display", "")
		}
		$(oIcon).removeClass(colicon)
		$(oIcon).addClass(expicon)
	}

	
}


function getFrameTargetName(menuObj){
	//gets current menu item's "eTarget" attribute, if blank it gets the "target" attribute of the container frame
	//the targets are the frames that are targetted in which to open the menu item elements like a view, page or form
	var eTarget = $(menuObj).attr("eTarget");

	if(isInIframe){
		if ( !eTarget || eTarget == "" ) {
			if(isInTabs){
				var parentFrame = parent.parent.frameElement;
			}else{
				var parentFrame = parent.frameElement;
			}
			
			var parentPanel = $(parentFrame).parents(".grid-stack-item");

			eTarget = parentPanel.attr("target");
		}
	}else{
		if ( !eTarget || eTarget == "" ) {
			var parentFrame = frameElement;
			var parentPanel =$(parentFrame).parents(".grid-stack-item");

			eTarget = parentPanel.attr("target");
		}
	}
	return eTarget;
}

function getTargetFrame(eTarget){
	//with the target frame name (eTarget)...find the frame to open element into
	//gets the current application id and uses that to get the app frame name, then gets that frames doc
	//and uses the application frame doc to find eTarget frame with getFrame
	var ws = Docova.getUIWorkspace(document);
	var appid = ws.getCurrentAppId();
    var appFrameId = "fra" + appid;
    var appFrameDoc = ws.getDocovaFrame(appFrameId, "document");
	var frameObj = Docova.getFrame(appFrameDoc, eTarget);
	return frameObj;
}



function fixJson(jsonin){

	if (  !jsonin.Items || jsonin.Items == null)
		return;

	for ( var p=0; p < jsonin.Items.length; p ++ )
	{
		
		fixJson(jsonin.Items[p]);
	}

	jsonin.Items.splice(jsonin.Items.length-1, 1);
}

function initiateOutlineContainer()
{


	if (outlineJson && outlineJson.Perspective)
	{
		//remove the extra obj added at the end of the json which was added to handle hide whens in twig
		fixJson(outlineJson);

		if (outlineJson.Alignment != 'L') {
			$('#divOutline').removeClass();
			$('#divOutline').addClass('align' + outlineJson.Alignment);
		}
		if (parseInt(outlineJson.borderWidth))
		{
    		$('#divOutline').css({
    			'border-width' : outlineJson.borderWidth + 'px',
    			'border-color' : outlineJson.borderColor,
    			'border-radius' : outlineJson.borderRadius + 'px'
    		});
		}
		else { $('#divOutline').css('border', 0); }
		$('#divOutline').css({
			'padding-top': outlineJson.bpaddingTop + 'px',
			'padding-right': outlineJson.bpaddingRight + 'px',
			'padding-bottom': outlineJson.bpaddingBottom + 'px',
			'padding-left': outlineJson.bpaddingLeft + 'px'
		});
		return true;
	}
	else {
		$('#divOutline').html('<p>{% trans %}Unable to load outline!{% endtrans %}</p>');
		return false;
	}

	
}
</script>
</head>
<body text="#000000" bgcolor="#FFFFFF">
	<div id="DEName" style="display: none;">{{ outline ? outline.getOutlineName : '' }}</div>
	<div id="DEAlias" style="display: none;">{{ outline ? outline.getOutlineAlias : '' }}</div>
	<div id="DELastModifiedBy" style="display: none;">{{ outline ? outline.getModifiedBy.getUserNameDnAbbreviated : '' }}</div>
	<div id="OutlineType" style="display:none;">{{ outline ? outline.getOutlineType : '' }}</div>
	<div id="ProhibitDesignUpdate" style="display:none;">{{ outline and outline.getPDU ? 'PDU' : '' }}</div>
	<div id="DEKey" style="display: none;">{{ outline ? outline.getId : '' }}</div>
	<div id="divOutline"></div>
</body>
</html>