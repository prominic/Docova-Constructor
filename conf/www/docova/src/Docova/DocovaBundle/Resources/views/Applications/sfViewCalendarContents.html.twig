<!DOCTYPE html>
<html>
<head>
<META content="0" http-equiv="expires">
<META content="0" http-equiv="cache-control">
<META content="no-cache" http-equiv="Pragma">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/smoothness/jquery-ui.css') }}">
<link rel="stylesheet" href="{{ asset('bundles/docova/css/admin/styleAppBuilder.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/css/styleFolderBase.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/css/styleActionBar.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/css/styleViewIcons.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/font-awesome/css/all.min.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/css/multiselect.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/fullcalendar/fullcalendar.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/fullcalendar/fullcalendar.print.css') }}" type="text/css" media="print" />
<script type="text/javascript" language="JavaScript" src="{{ asset('bundles/docova/jquery/jquery.js') }}"></script>
<script type="text/javascript" language="JavaScript" src="{{ asset('bundles/docova/jquery/jquery-ui.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/viewObjects.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/sarissa.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/sarissa_ieemu_xpath.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/commonFunctions.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/Docova.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/multiselect.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/viewContents.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/fullcalendar/moment.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/fullcalendar/fullcalendar.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/beautify/beautify.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/FormulaLanguage.js') }}"></script>
<script language="JavaScript" type="text/javascript">
var info = {
	"DocID" : "{{ view.getId }}",
	"DocKey" : "{{ view.getId }}",
	"UserName" : "{{ user.getUserNameDn|replace({'\\': '\\\\'}) }}",
	"UserNameAB" : "{{ user.getUserNameDnAbbreviated|replace({'\\': '\\\\'}) }}",
	"UserNameCN" : "{{ f_Name("[CN]", user.getUserNameDnAbbreviated)|replace({'\\': '\\\\'}) }}",
	"SystemKey" :  "{{ settings.getSystemKey }}",
	"DocAccessLevel" : "",
	"DocAccessRole" : "",
	"DbAccessLevel" : "",
	"CutCopyPaste" : "",
  	"HTTP_Referer" : "",
  	"Query_String" : "OpenDocument&viewType=Calendar",
  	"Query_String_Decoded" : "OpenDocument&viewType=Calendar",
  	"Path_Info_Decoded" : "{{ path('docova_appviewall', {'viewname' : view.getViewName }) }}?OpenDocument&viewType=Calendar&AppID={{ view.getApplication.getId }}",
	"ServerName" : "{{ app.request.server.get('HTTP_HOST') }}",
	"ServerUrl" : "{{ app.request.getscheme }}://{{ app.request.server.get('HTTP_HOST') }}",
	"NsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
	"LibraryKey" : "{{ view.getApplication.getId }}",
	"PortalWebPath" : "{{ path('docova_homepage')[:path('docova_homepage')|length -1] }}",
	"ViewName" : "{{ view.getViewName }}",
	"RestrictToCategory" :"",
	"AppID" : "{{ view.getApplication.getId }}",
	"IsEmbedded":  false,
	"ShowSearch":   "",
	"SessionDateFormat" : "{{ settings.getDefaultDateFormat|lower|replace({'yyyy':'yy'}) }}",
	"ViewID": "{{ view.getId }}",
	"UseContentPaging" : "",
	"MaxDocCount" : "100",
	"OpenDocInEditMode": "{{ view.getOpenInEdit ? 1 : '' }}",
	"TitleNode": "",
	"PortalNsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
	"IsFolder" : "{{ view.getEmulateFolder ? 1 : '' }}",
	"PrivateOnFirstUse" : "{{ view.getEmulateFolder and view.getPrivateOnFirstUse ? 1 : '' }}",
	"HideActions" : {{ app.request.query.get('HideActions') in ['1', 'true'] ? 'true' : 'false' }},
	"Weekends" : {{ view.getWeekends ? 'true' : 'false' }},
	"Style" : {{ view.getStyle ? 'true' : 'false' }},
	"EventColor" : "{{ view.getEventColor ? view.getEventColor : '#000000' }}",
	"EventTextColor" : "{{ view.getEventTextColor ? view.getEventTextColor : '#000000' }}",
	"DayClick" : "{{ view.getDayClick|raw }}",
	"DayDblClick" : "{{ view.getDayDblClick|raw }}",
	"EventClick" : "{{ view.getEventClick|raw }}",
	"EventDblClick" : "{{ view.getEventDblClick|raw }}",
	"FirstDay" : {{ view.getFirstDay ? view.getFirstDay : 1 }},
	"SelectedDoc" : "",
	"SelectedDate" : null
};
function getinfovar(){
   return info;
}
InitVars(info);
PreloadBaseImages();

var objView = null; //view object
var curColumnObj = null //view column object
var currentPerspective=""; //current perspective id
var isiPad = navigator.userAgent.match(/iPad/i) != null; //Detects if User is using an iPad.  Used to handle things like double click.

var prevCalView = "";

var dlgParams = new Array();  //params array that gets used by dialogs
var retValues = new Array(); //ret params array that can be used by dialogs

var shiftkeypressed = false;
var ctrlkeypressed = false;
var DLExtensions = null;

//Column actions, set as global to pass to Docova.menu function
var colAscSortAction="" 
var colDescSortAction="" 
var colDefaultSortAction="" 
var colCategorizeAction=""
var colFreezeAction=""
var colDeleteAction=""
var colInsertAction=""
var colAppendAction=""
var colPropertiesAction=""

//---------------------------------------------------------------------
//var aBar = new objCustomActionBar(false, "aBar");

$(document).ready(function(){
	DLExtensions = window.top.DocovaExtensions;
	var objContent = $("#divViewContent");
	objContent.on('dragover', function (e) 
	{
	     e.stopPropagation();
	     e.preventDefault();
	     $( this).css("border", "2px dashed gray");
	});
	objContent.on('dragleave', function (e) 
	{
	     e.stopPropagation();
	     e.preventDefault();
	     $( this).css("border", "0px");
	});

	objContent.disableSelection();
		
	if(info.HideActions){
		$("#divHeaderSection").hide();
		$("#divViewContent").css("top", "0px");
		$("#divToolbarSearch").css("top", "0px");
	}else{
		//get the toolbar
		var elementURL =  docInfo.ServerUrl+ "/"+ docInfo.NsfName + "/AppViewsAll/" + docInfo.ViewName.replace(/\/|\\/g, '-') + "?OpenView&AppID=" + docInfo.AppID;	
	
		jQuery.ajax({
    		url: elementURL,
    		success: function (results) {
				var frm = $(results).filter("form:first");
				var tbl = frm.find("table:first");
			
				$("#tmpToolbardata").html( "<table>" + tbl.html() + "</table>" );
				//if no buttons in the action pane, then hide the header
				if ( $("#tdActionBar > button, #tdActionBar > a").length == 0 ){
					$("#divHeaderSection").hide();
					$("#divViewContent").css("top", "0px");
					$("#divToolbarSearch").css("top", "0px");
				}
				checkAvailableHeight(); 
			}
		});
	}
		
	$('input:text')
 		.button()
		.css({
			'font' : 'inherit',
			'color' : 'inherit',
			'text-align' : 'left',
			'outline' : 'none',
			'cursor' : 'text',
			'background' : '#ffffff',
			'padding' : '.35em'		
	}).off('keydown');
	
	$('#divViewContent').scroll(moveScroll);
	
	$(".listheader").resizable({
		handles: "e"
	})
	
	//show/reveal view after all elements are loaded
	$("#viewMainContainer").css("display", "");

	//load the calendar display
	$('#divViewContent').fullCalendar({
	     customButtons: {
	     	refresh: {
	     		text: "",
	     		icon: "arrowrefresh-1-s",
	     		themeIcon: "arrowrefresh-1-s",
	     		click: function(){
	     			$('#divViewContent').fullCalendar( 'refetchEvents' );
	     		}
	     	}
	     },
		header: {
			left: 'prevYear,prev,today,next,nextYear',
			center: 'title',
			right: 'month,agendaWeek,agendaDay,listMonth,refresh'
		},
		timeFormat: 'h(:mm)a',
		weekends: docInfo.Weekends,
		theme: docInfo.Style,
		firstDay: docInfo.FirstDay,
		navLinks: true,
		events: {
			url : '/'+ docInfo.NsfName + "/PlugInServices?OpenAgent&Action=CALENDAR&AppID="+ docInfo.AppID +"&ViewName=" + docInfo.ViewName + (docInfo.RestrictToCategory !== "" ? "&category=" + encodeURIComponent(docInfo.RestrictToCategory) : ""),			
			error: function(data) { alert('{% trans %}There was an error while fetching events!{% endtrans %}\n\n' + data.getResponseHeader)}
		},
		eventColor: docInfo.EventColor,
		eventTextColor: docInfo.EventTextColor,
		//---- dayClick
		dayClick: function(date, jsEvent, view){
		     var tempdate = null;

			if(view.name == "month"){
				$(".fc-state-highlight").removeClass("fc-state-highlight");
	        		$("td[data-date="+date.format('YYYY-MM-DD')+"]").addClass("fc-state-highlight");
	        		tempdate = moment(date).local().toDate();
			}else if(view.name == "agendaDay"){
				$(".fc-state-highlight").removeClass("fc-state-highlight");
				$(jsEvent.target).closest("tr").addClass("fc-state-highlight");
				tempdate = _getCalendarDateOnClick(jsEvent);
			}else if(view.name == "agendaWeek"){
				$(".fc-state-highlight").removeClass("fc-state-highlight");
				$(jsEvent.target).closest("tr").addClass("fc-state-highlight");			
				tempdate = _getCalendarDateOnClick(jsEvent);				
			}
			
			docInfo.SelectedDate = tempdate;			
			
			if(docInfo.DayClick){
				window[docInfo.DayClick](date, jsEvent, view);
			}
		},
		//---- eventClick
		eventClick: function(calEvent, jsEvent, view){
			docInfo.SelectedDoc = calEvent.id;
			if(docInfo.EventClick){
				window[docInfo.EventClick](calEvent.id);
			}
		},
		//---- eventRender
		eventRender: function(calEvent, element) {
			if(calEvent.icon !== ""){
				var iconhtml = "";
				if($.isNumeric(calEvent.icon)){
					iconhtml = '<div class="viewicon vwicon' + calEvent.icon + '"  style="width:16px; height:16px;" ></div>&nbsp;';
				}
				else if ((calEvent.icon.indexOf('fas') != -1 || calEvent.icon.indexOf('far') != -1 || calEvent.icon.indexOf('fal') != -1 || calEvent.icon.indexOf('fab') != -1) && calEvent.icon.indexOf('fa-') != -1) {
					iconhtml = '<i class="'+ calEvent.icon +'"></i>&nbsp;';
				}else{
					iconhtml = '<img src="../' + calEvent.icon + '"  style="width:16px; height: 16px;" ></img>&nbsp;';									
				}
				element.find("div.fc-content").prepend(iconhtml);
			}
			
			element.bind('dblclick', function(eventobj) {
				eventobj.stopPropagation();
            	if(docInfo.EventDblClick){
					window[docInfo.EventDblClick](calEvent.id);
				}else{
					openCalendarEntry(calEvent.id);					
				}
           	});				
		},
		eventAfterAllRender: function() {
			if(typeof window['Postopen'] == "function"){
				try{
						Postopen();
				}catch(e){}
			}	
		},
		//---- dayRender		
		dayRender: function(date, cell){	
		},
		//---- viewRender		
		viewRender: function(view, element){			
			if(prevCalView == ""){
				prevCalView = view.name;
			}
			
			if(view.name == "month"){
				jQuery("button.fc-prevYear-button, button.fc-nextYear-button").attr("disabled", false).removeClass("ui-state-disabled");
				$("td.fc-day-top, td.fc-day").on("dblclick", function(eventobj){
					if(docInfo.DayDblClick){
						window[docInfo.DayDblClick](docInfo.SelectedDate, eventobj, view);
					}
				});					
			}else{
				if(view.name != prevCalView){
					if(docInfo.SelectedDate){
						$('#divViewContent').fullCalendar('gotoDate', docInfo.SelectedDate);
					}				
				}	
				jQuery("button.fc-prevYear-button, button.fc-nextYear-button").attr("disabled", true).addClass("ui-state-disabled");			
				if(view.name == "agendaWeek" || view.name == "agendaDay"){
					$("td.fc-axis").closest("tr").on("dblclick", function(eventobj){
						if(docInfo.DayDblClick){
							window[docInfo.DayDblClick](docInfo.SelectedDate, eventobj, view);
						}						
					});									
				}	
			}
			docInfo.SelectedDoc = "";
			docInfo.SelectedDate = null;
			prevCalView = view.name;
		}
	});	
	
	InitPage();
});   

function _getCalendarDateOnClick(eventobj){
	var result = null;
	var xselected = eventobj.pageX;
	var datestring = "";
	jQuery("th.fc-day-header").each(function(){
		var leftX = jQuery(this).offset().left;
		if(xselected >= leftX){
			datestring = jQuery(this).attr("data-date");
		}
	});

	var timestring = "";
	timestring = jQuery(eventobj.target).closest("tr").attr("data-time");
	
	if(datestring){
		result = moment(datestring + "T" + timestring).local().toDate();
	}
	return result;
}

function moveScroll() {
	var scroll = $('#divViewContent').offset().top;
	var anchor_top = $("#VDataTable").offset().top;
//	var anchor_bottom = $("#bottom_anchor").offset().top;

	if (scroll > anchor_top){ //&& scroll < anchor_bottom) {

		clone_table = $("#clone");
		if (clone_table.length === 0) {							
			var top = $("#actionPaneHeader").outerHeight();
		     top= top +2					
			clone_table = $("#VDataTable").clone();
			clone_table.attr({
				id : "clone"
			}).css({
				position : "fixed",
				"pointer-events" : "none",
				left : $("#VDataTable").offset().left + 'px',
				"z-index": "100",
				top : top	}).width($("#VDataTable").width());
				
			$("#divViewContent").append(clone_table);
			$("#clone").width($("#VDataTable").width());
			$("#clone").css({
				border : "none"
			});

			$("#clone thead").css({
				visibility : "true"
			});

			// clone tbody is hidden
			$("#clone tbody").css({
				visibility : "hidden",
			});

			var footEl = $("#clone tfoot");
			if (footEl.length) {
				footEl.css({
					visibility : "hidden"
				});
			}
		}
	} else {
		$("#clone").remove();
	}
}

function mayUserEditDoc(docID) {
	//supports folder context menu option 'Edit' and 'Edit in New Window'
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/DocumentServices?OpenAgent"
	var request="";
	request += "<Request>";
	request += "<Action>MAYUSEREDIT</Action>";
	request += "<Unid>" + docID + "</Unid>";
	request += "</Request>";	

	var httpObj = new objHTTP();
	if(!httpObj.PostData(request, url) || httpObj.status=="FAILED") {return false; }

	return httpObj.results[0];
}

function ResetMenu()
{
//	if(aBar)
//	{
//		if(aBar.curSubactionParent) {aBar.resetSubactionPanel(); }
//	}
}

//----- object presence testers ----
function HasUploaderResize()
{
	try	{
		if(SetUploaderDimensions){return true;}
	}
	catch (e)
	{
		return false;
	}
	return false;
}

function HasViewPane()
{
	try	{
		if(ViewLoadDefaultPerspective){return true;}
	}
	catch (e)
	{
		return false;
	}
	return false;
}
// ------------- preloads icons used in view object---------------

function PreloadBaseImages()
{
	var curNsf = "{{ asset('bundles/docova/images/') }}";
    var imgArray = new Array();
    var imgNames = "cat-collapse.gif,cat-expand.gif,coloptions.gif,pincolumn.gif,viewRefreshGreen.gif,chkrbrdclosed.gif,chkrbrdopened.gif,icn16-stddoc.gif,icn16-unknowndoc.gif,icn16-webpage.gif,sortadred-default.gif,popmenu-check.gif";
    var imgList = imgNames.split(",");

	for (k=0; k<imgList.length; k++)
	{
		imgArray[k] = new Image();
		imgArray[k].src = curNsf + imgList[k] + "?Open";
	}
}

// ======================= view event handlers =======================

//Global varables
var dragSourceColumn; //column heading being dragged into new location
var dragTargetColumn; //target column heading for dragover and drop 
var selectDragMode; //specifies how the drag selection over checkboxes should be handled
var viewContainer ; //object where the view contents will be plugged
mouseX; //mouse coordinates
mouseY;

//----------------  open/close document handlers -----------------------
function ViewLoadDocument(docid, docTypeName, isNewDoc, editMode)
{
	var action = "Open";
	if(editMode) { 
		//need to check if user is authorized to edit
		if(!mayUserEditDoc(docid)) {
			Docova.Utils.messageBox({
				title: "{% trans %}Not Authorized{% endtrans %}",
				prompt: "{% trans %}You are not authorized to edit this document.{% endtrans %}",
				icontype: 1,
				msgboxtype: 0
			});
			return
		}
		action = "Edit";
	}
	
	//check if the view defaults to open the doc in edit mode
	if ( docInfo.OpenDocInEditMode == "1" ){
		action = "Edit";
	}
	
	docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/wReadDocument/" + docid + "?OpenDocument&ParentUNID=" + docInfo.AppID;
	//docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/0/" + docid + "?" + action + "Document&ParentUNID=" + docInfo.DocID;
	
	//------------- tabbed interface ----------------------------------
	var frameID = "";
	var title = "";
	if(isNewDoc) {
		frameID = window.parent.fraTabbedTable.objTabBar.GetNewDocID();
		if(docTypeName == undefined || docTypeName == "") {
			docTypeName = "Document";
		}
		title = "New " + docTypeName;	
	} else { 		
		frameID = docid; 
		
		if ( frameID.indexOf("~" ) > 0 ){
			frameID = frameID.substring(0, frameID.indexOf("~") );			
		}
		
		if(docTypeName == undefined || docTypeName == "") {
			docTypeName = "Document";
		}
		title = docTypeName;	
	}

	try	{
		if(onDocumentOpen()){return true;}
	}
	catch (e)
	{		
		if ( docInfo.IsEmbedded === true ){
			window.parent.parent.fraTabbedTable.objTabBar.CreateTab(title, frameID, "D", docUrl, docInfo.DocID, isNewDoc);
		}else{
			window.parent.fraTabbedTable.objTabBar.CreateTab(title, frameID, "D", docUrl, docInfo.DocID, isNewDoc);
		}
	}
}

function OpenDocumentWindow(docID, editMode) {
	var targetUnid=(docID)? docID : objView.currentEntry;
	if(!targetUnid){return false;}
	var action = "Open";
	if(editMode) { 
		//need to check if user is authorized to edit
		if(!mayUserEditDoc(objView.GetCurrentEntry().entryId)) {
			Docova.Utils.messageBox({
				title: "{% trans %}Not Authorized{% endtrans %}",
				prompt: "{% trans %}You are not authorized to edit this document.{% endtrans %}",
				icontype: 1,
				msgboxtype: 0
			});
			return
		}
		action = "Edit" 
	}

	var docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/wReadDocument/" + targetUnid + "?OpenDocument&ParentUNID=" + docInfo.AppID + '&mode=window';
	//var docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/0/" + targetUnid + "?" + action + "Document&ParentUNID=" + docInfo.DocID + "&mode=window";

	var leftPosition = (screen.width) ? (screen.width-700)/2 : 20;
	var topPosition = (screen.height) ? (screen.height-500)/2 : 20;
	dlgSize = "height=500,width=700,top=" + topPosition+ ",left=" + leftPosition;
	var dlgSettings = dlgSize + ",status=no,toolbar=no,menubar=no,location=no,scrollbars=yes,resizable=yes";
	return window.open(docUrl,targetUnid,dlgSettings); //Display the address dialog
}

function OpenFileWindow(filename){
	var targetUnid=objView.currentEntry;
	if(!targetUnid){return false;}

	var docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/openDocFile/" + filename + "?OpenDocument&doc_id=" + targetUnid + '&' + Math.random();
	//var docUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/0/" + targetUnid + "/$file/" + filename + "?open&" + Math.random();

	return window.open(docUrl); //Display the address dialog
}

function ViewUnloadDocument(refreshView, selectDocId)
{
	ViewSetTitleOptions("Folder: " + docInfo.FolderName)
	window.parent.fsContentFrameset.rows = "*,0";	
	if(refreshView) 
	{
		ViewReload(selectDocId);
		return;
	}
		
	if(objView.currentEntry != "") 
	{
		objView.HighlightEntryById(objView.currentEntry);
	}
	else
	{
		$("#divViewContent").focus();
	}
	var curContentUrl = window.parent.fraContentBottom.location.href;
	if(curContentUrl.indexOf("/BlankContent?")==-1){
		var contentUrl = docInfo.ServerUrl + "/" + docInfo.NsfName + "/" +  "BlankContent?OpenPage";
		window.parent.fraContentBottom.location.href=contentUrl ;
	}
}

//----------- utility functions ---------------

// clears the view event variables in case mouse cursor had wandered to far
function ViewClearEventState()
{
    var dragSourceColumn=null;
    var dragTargetColumn=null;
    selectDragMode=null;
    return true;
}

function CancelEvent()
{
	if(!window.event) {return;}
	window.event.cancelBubble = true;
	window.event.returnValue=false;
	return false;
}


//================= sets header title ====================
function ViewSetTitleOptions(title)
{
	$("#divHeadingTitle").html(title);
}

function getOffset( el ) {
	var _x = 0;     
	var _y = 0;
	while( el && !isNaN( el.offsetLeft ) && !isNaN( el.offsetTop ) ) {
		_x += el.offsetLeft - el.scrollLeft;
		_y += el.offsetTop - el.scrollTop;
		el = el.offsetParent;
	}

	return { top: _y, left: _x }; 
}  

function getCurrentSelectedOptionText(NodeName){

	var CurrentFilterTxt = $("#CurrentFilterDiv").html()
	var CurrentFilterArray = CurrentFilterTxt.split("~")
	var expValuesArray;
	var currentSelectedOptionText = "";

	for (var x=0; x<CurrentFilterArray.length; x++){
		expValuesArray = CurrentFilterArray[x].split("=")
		if(expValuesArray[0] == NodeName){
			currentSelectedOption = expValuesArray[1];
			currentSelectedOptionText = rightBack(leftBack(currentSelectedOption, "'"),"'")
			return currentSelectedOptionText;
		}
	}
	return currentSelectedOptionText;
}

function HideFilterSelection(objSelectFilterField){
	$(objSelectFilterField).css("display", "none")
}

function checkAvailableHeight(){
	try{
		var vpheight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;	
		if(vpheight == 0){return;}  //-- in case we aren't able to get the height
		var buttonheader = document.getElementById("actionPaneHeader");			
		var viewheader = document.getElementById("divViewHeader");
		var headingsheight = buttonheader.clientHeight + viewheader.clientHeight;
		var container = document.getElementById("divViewContent");
		var hght = vpheight  - headingsheight;
		if ( hght > 0 ){
			$(container).css("height", hght);
			$('#divViewContent').fullCalendar('option', 'height', hght - 10);
		}
	}catch(e){}
}

function SubmitRequest(request, agentName){
	//send the request to server
	var processUrl = docInfo.ServerUrl + docInfo.PortalWebPath + "/" + agentName  + "?OpenAgent"
	var httpObj = new objHTTP();
	if(!httpObj.PostData(request, processUrl) || httpObj.status=="FAILED"){
		HideProgressMessage();
		return false;
	}

	return (httpObj.results.length)? httpObj.results[0] : true;
}


function openCalendarEntry(docid){ 
	if(docid){
		ViewLoadDocument(docid, "", false, docInfo.OpenDocInEditMode);
	}
}

{% if view.getViewJavaScript %}
{{ view.getViewJavaScript|raw }}
{% endif %}
</script>
<style type="text/css">
div.fc-time {
	display: inline-block;
}

div.fc-title {
	display: inline-block;
}

.fc-state-highlight {
	background: #C0C0C0;
}
</style>
</head>
<body text="#000000" bgcolor="#FFFFFF" SCROLL="no" oncontextmenu="" autocomplete="off">
	<form onsubmit="doUpdate(); return true;" action="">
		<div id="tmpToolbardata" style="display: none"></div>
		<div id="viewMainContainer" style="display: none;">
			<!-------------------------- non-scrollable header ----------------------->
			<div id="divHeaderSection" style="width: 100%;">
				<!------------------------------------------------------>
				<div id="actionPaneHeader" class="hideOnPrint wrapper" style="width: 100%; padding: 4px 6px 3px 6px;">
					<table border=0 cellspacing=0 cellpadding=0 width=100%>
						<tr>
							<td id="tdActionBar">{{ toolbar|raw }}</td>
							<td align="right">
								<span style="font-size: 11px; color: #0050D1; display: none" id="divSearchResultCount"></span>
							</td>
							<td align="right">&nbsp</td>
						</tr>
					</table>
				</div>
				<!------------------------------------------------------>
			</div>
			<!------------------------------------------------------>
			<div id="divViewEventCapture" tabindex="1">
				<!--- BEGIN Document View header ----->
				<div id="divViewHeader" style="width: 100%; padding: 0px 0px 0px 0px;"></div>
				<!--- END Document View header ----->
				<!-------------------------- scrollable content----------------------->
				<!--- BEGIN Document view contents----->
				<div id="divViewContent" style="background-color: white; position: relative; top: 35px; width: 99%; padding: 5px 5px 0px 5px; border-top: 1px solid #cccccc; margin: 0px; overflow: auto;"></div>
				<!--- END Document view contents----->
				<!--- End event capture area ----->
			</div>
		</div>
		<!--- END viewMainContainer--->
<!------------------ SUBFORM sfKillCache ------------>
<!------------------Microsoft suggestion to force no cacheing of documents------------>
<HEAD>
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="CACHE-CONTROL" CONTENT="0">
<META HTTP-EQUIV="EXPIRES" CONTENT="0">
</HEAD>
<!------------------END SUBFORM sfKillCache  ------------>
	</form>
</body>
</html>