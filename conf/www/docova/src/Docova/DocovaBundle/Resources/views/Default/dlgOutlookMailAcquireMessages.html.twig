<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>{% trans %}Outlook Mail Acquire - Messages{% endtrans %}</title>
<link rel="stylesheet" href="{{ asset('bundles/docova/css/styleDialogBase.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/css/styleMailAcquireDialog.css') }}" type="text/css" />
<link rel="stylesheet" href="{{ asset('bundles/docova/css/styleFolderControl.css') }}">
<link rel="stylesheet" href="{{ asset('bundles/docova/js/jstree/themes/style.css') }}">
<script type="text/javascript" src="{{ asset('bundles/docova/jquery/jquery.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/docova/jquery/jquery-ui.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/docova/js/Docova.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/sarissa.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/sarissa_ieemu_xpath.js') }}"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/commonFunctions.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/jstree/jstree.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/folderControl.js') }}" charset="UTF-8"></script>

<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/js/Log4j.js') }}" charset="UTF-8"></script>
{% include 'DocovaBundle:Default:scriptMessagesTranslation.html.twig' %}
{% set date_format = settings.getDefaultDateFormat|replace({'MM' : 'm', 'DD' : 'd', 'YYYY' : 'Y'}) %}
<script language="JavaScript" type="text/javascript">


var info = {
	"SystemKey" :  "{{ settings.getSystemKey }}",
	"UserName" : "{{ user.getUserNameDn|replace({'\\': '\\\\'}) }}",
	"UserNameAB" : "{{ user.getUserNameDnAbbreviated|replace({'\\': '\\\\'}) }}",
	"UserNameCN" : "{{ f_Name("[CN]", user.getUserNameDnAbbreviated)|replace({'\\': '\\\\'}) }}",
	"UserRoles" : "$$WebClient;[User]",
	"IsSuperuser" : "",
	"HTTP_Referer" : "",
	"Query_String" : "OpenForm&ParentUNID={{ folder.getId }}",
	"Query_String_Decoded" : "OpenForm&ParentUNID={{ folder.getId }}",
	"Path_Info_Decoded" : "{{ path('docova_outlookacquiremessages') }}?OpenForm&ParentUNID={{ folder.getId }}", 
	"ServerName" : "{{ app.request.server.get('HTTP_HOST') }}", 
 	"ServerUrl" : "{{ app.request.getscheme }}://{{ app.request.server.get('HTTP_HOST') }}",
	"NsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
	"PortalWebPath" : "{{ path('docova_homepage')[:path('docova_homepage')|length - 1] }}",
	"PortalNsfName" : "{{ path('docova_homepage')[1:path('docova_homepage')|length - 2] }}",
	"Date" : "{{ 'now'|date(date_format) }}",
	"DateTime" : "{{ 'now'|date('m/d/Y h:i:s A') }}",
	"FolderID" : "{{ folder.getId }}",
	"NoRefresh" : "",
	"EPass" : "{{ app.session.get('epass') }}",
	"ExcludeOutlookFolders" : "{{ user.getUserProfile.getExcludeOutlookFolders }}", 
	"OutlookMsgsToShow" : "{{ user.getUserProfile.getOutlookMsgsToShow }}",
	"EnableDebugMode" : "{% if user.getUserProfile.getEnableDebugMode == true %}On{% endif %}",
	"ExcludeOutlookInboxLevelFolders" : "{{ user.getUserprofile.getExcludeOutlookInboxLevel }}",
	"MailViewPageSize" : "{{ user.getUserprofile.getOutlookMsgsToShow ? user.getUserprofile.getOutlookMsgsToShow : 100 }}"
};
function getinfovar() {
	return info;
}
var xmlMailViewData = new xmlDataIsland();

var xmlFolderData = Sarissa.getDomDocument();
var xmlMailDocs = Sarissa.getDomDocument();
var xmlMailAttachmentStyle = Sarissa.getDomDocument();

var startRecord=1; 
var recordCount=0;
var currentView=""; // currently scrolled view name
var currentFolderID=""; // id of current folder selected - used to back out of folder navigation
var bigPageSize=0; // fast scroll page size
var scrollPageSize=0; //current scroll page size - big or regular depending which scroll button was pressed
var importedCount=0;
var selectedEntry = null; // selected row object
var tempDocUNID = "";

var srcWindow = null;
var srcDoc = null;
var srcDocInfo = null;


///    error logging
var enableDebugMode=false;
var log = null;



/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: InitDialog
 * Called when dialog is first opened.  Initializes settings.
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function InitDialog()
{
	InitVars(info);

	jQuery("button").button();		//--style buttons
	
	srcWindow = window.top.Docova.GlobalStorage["divDlgAcquireMessages"].sourcewindow;	
	srcDocInfo = srcWindow.getinfovar();
	srcDoc = window.top.Docova.GlobalStorage["divDlgAcquireMessages"].sourcedocument;
	
	//-- acquire single message mode so need to resize folder and document listing to make room
	if(docInfo.AcquireType == "S"){
	   foldercontrolconfig.MaxHeight = foldercontrolconfig.MaxHeight - 80;
	    jQuery("#divSection1").height(jQuery("#divSection1").height() - 80);
	    jQuery("#divMailRecords").height(jQuery("#divMailRecords").height() - 80);	    	    
	    jQuery("#divAcquireOptions").show();
	}

	//-- get data island for mail view records ready
	xmlMailViewData.id = "xmlMailViewData";
	xmlMailViewData.setTemplateName("otblMailRecords");
     xmlMailViewData.ondatasetcomplete = function() {formatMailEntries()};		
	
 	Initialize(); //-- initialize the folder control 	
	
//	var result = callOutlook("GETVERSION");
// 	if(result && result.runstatus && result.runstatus == "SUCCESS" && result.data){
// 		jQuery("#olVersion").html("V"+ parseInt(result.data).toString());
// 	}else{
//		window.top.Docova.Utils.messageBox({prompt: "Error: Unable to communicate with Outlook.", title: "Outlook Mail Acquire", width: 400});
// 		return false;
// 	}

	GetMailFolderInfo();	//--retrieve folder listing
 	//-- Inbox folder content will be displayed by the onFoldersReady parameter
	
	scrollPageSize=(docInfo.MailViewPageSize)? parseFloat(docInfo.MailViewPageSize) : 20;	     

	jQuery("#tblContainer td.Folders.resizable").resizable({handles: "e,w"});
	
	$("#spanScrollFirst").button({text: false, icons: { primary: "ui-icon-seek-first"}}).click(function(event){ ScrollView(this); });
	$("#spanScrollFastBack").button({text: false, icons: { primary: "ui-icon-seek-prev"}}).click(function(event){ ScrollView(this); });
	$("#spanScrollBack").button({text: false, icons: { primary: " ui-icon-triangle-1-w"}}).click(function(event){ ScrollView(this); });
	$("#spanScrollFwd").button({text: false,	icons: { primary: "ui-icon-triangle-1-e"}}).click(function(event){ ScrollView(this); });
	$("#spanScrollFastFwd").button({text: false,	icons: { primary: "ui-icon-seek-next"}}).click(function(event){ ScrollView(this); });
	$("#spanScrollLast").button({text: false,	icons: { primary: "ui-icon-seek-end"}}).click(function(event){ ScrollView(this); });

}//--end InitDialog

/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: formatMailEntries
 * converts mail file sizes from bytes to descriptive format and hides selection column when in acquire 
 * single message mode
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function formatMailEntries(){
    if(docInfo.AcquireType == "S"){
		jQuery("#tblMailRecords td.col1").find("input.selectioncheckbox").hide();
	}
	jQuery("#tblMailRecords td.col5").each(function(index, element){
		var displayval = "";
		var bytevalue = parseInt(jQuery(this).text().trim());			
		jQuery(this).text(bytesToSize(bytevalue));
	});
}//--end formatMailEntries


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: bytesToSize
 * converts a byte value to a corresponding descriptive size in Bytes, KB, MB, GB, or TB
 * Inputs: bytes - size in bytes
 * Returns: string - value formatted to appropriate data size
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function bytesToSize(bytes) {
   var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
   if (bytes == 0) return '0 Byte';
   var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
   return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];
}//--end bytesToSize


 /*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: callOutlook
 * Communicates with Outlook to retrieve data
 * Inputs: action - string - action to perform with outlook. one of; 
 *                           GETVERSION - returns version number of outlook as string
 *                           GETFOLDERS - returns xml containing folder listing
 *                           GETMESSAGES - returns xml containing document listing
 *                           GETMESSAGEDATA - returns xml containing message content
 *               data - value pair array (optional) - containing data elements to be passed to outlook
 *                           data.storeid - string - id of message store to target
 *                           data.folderid - string - id of folder to target
 *                           data.messageid - string - id of message to target
 *                           data.selectiontype - string - I to include specific folders, E to exclude specific folders
 *                           data.folderlist - string - comma separated list of folders to include/exclude
 *                           data.start - integer - starting message to target
 *                           data.count - integer - number of messages to retrieve
 *                           data.ftsearch - string - value to use to search for messages
 * Returns: json object containing;
 *                             .runstatus - string - SUCCESS or FAILURE
 *                             .data - string - various content, but typically xml string
 * Example:
 *------------------------------------------------------------------------------------------------------------------------------------------- */
 function callOutlook(action, data){
 	var result = false;
 	
 	if(! window.top.Docova.IsPluginAlive){
		window.top.Docova.Utils.messageBox({prompt: "DOCOVA Plugin is not running.  This functionality requires the use of the DOCOVA Plugin.", title: "Outlook Mail Acquire", width: 400});
 		return result;
 	}
 	
 	 var defaultOptns = {
				storeid: "",
				folderid: "",
				messageid: "",
				selectiontype: "",
				folderlist: "",				
				start: 1,
				count: 0,
				ftsearch: ""							
			 };
	var opts = jQuery.extend({}, defaultOptns, data);	
 	
 	var codestr = "";
  	codestr += 'string result = @"{""runstatus"": ""FAILED""}";\n';
  	codestr += '/*-- start parameters passed in from calling routine --*/\n';
	codestr += 'string opts_storeid = @"' + opts.storeid + '";\n';
 	codestr += 'string opts_folderid = @"' + opts.folderid + '";\n';
 	codestr += 'string opts_messageid = @"' + opts.messageid + '";\n'; 	
 	codestr += 'string opts_selectiontype = @"' + opts.selectiontype +'";\n';
 	codestr += 'string opts_folderlist = @"' + opts.folderlist +'";\n'; 	
 	codestr += 'int opts_start = ' + opts.start + ';\n';
 	codestr += 'int opts_count = ' + opts.count + ';\n'; 		  	
 	codestr += 'string opts_ftsearch = "' + opts.ftsearch +'";\n'; 	
   	codestr += '/*-- end parameters --*/';	
	codestr += 'Type olAppType = null;\n';
	codestr += 'Object olApp = null;\n';
	codestr += 'Object olNamespace = null;\n';
	codestr += 'Type olSafeType = null;\n';
	codestr += 'Object olSafe = null;\n';
	codestr += 'olAppType = Type.GetTypeFromProgID("Outlook.Application");\n';
	codestr += 'if(olAppType == null){ goto Cleanup;}\n';
	codestr += 'olApp = Activator.CreateInstance(olAppType);\n';
	codestr += 'if(olApp == null){ goto Cleanup;}\n';	
	codestr += 'olNamespace = olApp.GetType().InvokeMember("GetNamespace", BindingFlags.InvokeMethod, null, olApp, new object[]{"MAPI"});\n';
	codestr += 'if(olNamespace == null){ goto Cleanup;}\n';	
	codestr += 'olSafeType = Type.GetTypeFromProgID("Redemption.SafeMailItem");\n';
	codestr += 'if(olSafeType == null){ goto Cleanup;}\n';
	codestr += 'olSafe = Activator.CreateInstance(olSafeType);\n';
	codestr += 'if(olSafe == null){goto Cleanup;}\n';		
	codestr += 'string olAppVersionFull = (string) olApp.GetType().InvokeMember("Version", BindingFlags.GetProperty, null, olApp, null);\n';
 	codestr += 'int pos = olAppVersionFull.IndexOf(".");\n';
 	codestr += 'int olAppVersion = 0;\n';
 	codestr += 'if(pos > -1){\n';
 	codestr += '     olAppVersion = Int32.Parse(olAppVersionFull.Substring(0, pos));\n';
 	codestr += '}\n';
 	codestr += 'string tempDir = System.IO.Path.GetTempPath();\n';
	
 	var actionname = action.toUpperCase(); 	
 	if(actionname=="GETVERSION"){
	   	codestr += '/*-- return outlook version value --*/\n';	 	
		codestr += '    result = @"{""runstatus"": ""SUCCESS"", ""data"": " + olAppVersion.ToString() + @"}";\n';
 	}else if(actionname == "GETFOLDERS"){
	   	codestr += '/*-- return outlook folder listing --*/\n';	 	
		codestr += 'string[] folderSelection = opts_folderlist.Split(new string[]{","}, StringSplitOptions.RemoveEmptyEntries);\n'; 	
		codestr += 'string[] folderSort = new string[]{"Inbox", "Drafts", "Sent Items", "Deleted Items", "Junk E-mail", "Outbox"};\n';
 	 	codestr += 'Func<System.Text.StringBuilder, Object, bool> getFolderXML= null;\n';
          codestr += 'getFolderXML = (System.Text.StringBuilder sb, Object olParentFolder)=>{\n';
          codestr += '     string folderPath = "";\n';
          codestr += '     string folderName = "";\n';
          codestr += '     string storeID = "";\n';
		codestr += '     string folderID = "";\n';
		codestr += '     try{\n';
		codestr += '    if(olParentFolder == null){\n';
 	 	codestr += '        Object olStores = olNamespace.GetType().InvokeMember("Stores", BindingFlags.GetProperty, null, olNamespace, new object[]{});\n';
 	 	codestr += '        int storeCount = (int) olStores.GetType().InvokeMember("Count", BindingFlags.GetProperty, null, olStores, new object[]{});\n';
 	 	codestr += '        for (int s = 1; s<= storeCount; s++){\n';
 	 	codestr += '            Object olStore = olStores.GetType().InvokeMember("Item", BindingFlags.InvokeMethod, null, olStores, new object[]{s});\n';
 	 	codestr += '            if(olStore == null){ continue; }\n';
 	 	codestr += '            folderName = (string) olStore.GetType().InvokeMember("DisplayName", BindingFlags.GetProperty, null, olStore, new object[]{});\n';
 	 	codestr += '            storeID = (string) olStore.GetType().InvokeMember("StoreID", BindingFlags.GetProperty, null, olStore, new object[]{});\n'; 	 	
 		codestr += '            /*-- root entry for outlook store -- */\n';
 		codestr += '            sb.Append(@"<viewentry>");\n';
 		codestr += '            sb.Append(@"<entrydata columnnumber=""0"" name=""FolderName"">");\n';
 		codestr += '            sb.Append(@"<text>" + folderName + @"</text>");\n';
 		codestr += '            sb.Append(@"</entrydata>");\n';
  		codestr += '            sb.Append(@"<entrydata columnnumber=""1"" name=""FolderID"">");\n';
 		codestr += '            sb.Append(@"<text>" + storeID +@"</text>");\n';
 		codestr += '            sb.Append(@"</entrydata>");\n';		
  		codestr += '            sb.Append(@"<entrydata columnnumber=""2"" name=""FolderIcon"">");\n';
 		codestr += '            sb.Append(@"<text>{{ asset("bundles/docova/images/FIcon_Mail2.png") }}</text>");\n';
 		codestr += '            sb.Append(@"</entrydata>");\n';	
  		codestr += '            sb.Append(@"<entrydata columnnumber=""3"" name=""FolderType"">");\n';
 		codestr += '            sb.Append(@"<text>library</text>");\n';
 		codestr += '            sb.Append(@"</entrydata>");\n';			
 		codestr += '            sb.Append(@"</viewentry>");\n'; 	 	
 		codestr += '            /*-- now get root folder for store and recurse to get child folders -- */\n'; 		
 	 	codestr += '            Object olStoreRootFolder  = olStore.GetType().InvokeMember("GetRootFolder", BindingFlags.InvokeMethod, null, olStore, new object[]{});\n';		
		codestr += '            getFolderXML(sb, olStoreRootFolder);\n';
		codestr += '            olStoreRootFolder = null;\n';
		codestr += '            olStore = null;\n';
 	 	codestr += '        }\n';
 	 	codestr += '        olStores = null;\n';
 	 	codestr += '    }else{\n';
 	 	codestr += '        Object olChildFolders = olParentFolder.GetType().InvokeMember("Folders", BindingFlags.GetProperty, null, olParentFolder, new object[]{});\n';
		codestr += '        int folderCount = (int) olChildFolders.GetType().InvokeMember("Count", BindingFlags.GetProperty, null, olChildFolders, new object[]{});\n';
 	 	codestr += '        for (int f = 1; f<= folderCount; f++){\n'; 	  	 	
 	 	codestr += '            Object olChildFolder = olChildFolders.GetType().InvokeMember("Item", BindingFlags.InvokeMethod, null, olChildFolders, new object[]{f});\n'; 	 	
 	 	codestr += '            if(olChildFolder == null){ continue;}\n';
 	 	codestr += '            folderName = (string) olChildFolder.GetType().InvokeMember("Name", BindingFlags.GetProperty, null, olChildFolder, new object[]{});\n'; 	 	
 	 	codestr += '            if(opts_selectiontype == "I" && (Array.IndexOf(folderSelection, folderName) == -1)){continue;}\n'; 	 
 	 	codestr += '            if(opts_selectiontype == "E" && (Array.IndexOf(folderSelection, folderName) > -1)){continue;}\n';	
 	 	codestr += '            folderPath = (string) olChildFolder.GetType().InvokeMember("FolderPath", BindingFlags.GetProperty, null, olChildFolder, new object[]{});\n';
 	 	codestr += '            storeID = (string) olChildFolder.GetType().InvokeMember("StoreID", BindingFlags.GetProperty, null, olChildFolder, new object[]{});\n'; 	 	 	 	
 	 	codestr += '            folderID = (string) olChildFolder.GetType().InvokeMember("EntryID", BindingFlags.GetProperty, null, olChildFolder, new object[]{});\n'; 	 	 	 	 	 	
 		codestr += '            folderPath = folderPath.Replace(@"\\\\", @"");\n';
 		codestr += '            int sortOrder = Array.IndexOf(folderSort, folderName);\n';
 		codestr += '            /*-- folder data -- */\n';		
 		codestr += '            sb.Append(@"<viewentry>");\n';
 		codestr += '            sb.Append(@"<entrydata columnnumber=""0"" name=""FolderName"">");\n';
 		codestr += '            sb.Append(@"<text>" + folderPath + @"</text>");\n';
 		codestr += '            sb.Append(@"</entrydata>");\n';
  		codestr += '            sb.Append(@"<entrydata columnnumber=""1"" name=""FolderID"">");\n';
 		codestr += '            sb.Append(@"<text>" + storeID + @"#" + folderID + @"</text>");\n';
 		codestr += '            sb.Append(@"</entrydata>");\n';		
  		codestr += '            sb.Append(@"<entrydata columnnumber=""2"" name=""FolderIcon"">");\n';
 		codestr += '            sb.Append(@"<text>0</text>");\n';
 		codestr += '            sb.Append(@"</entrydata>");\n';		
  		codestr += '            sb.Append(@"<entrydata columnnumber=""4"" name=""SortOrder"">");\n';
 		codestr += '            sb.Append(@"<text>" + ((sortOrder > -1) ? sortOrder.ToString() : "")  + @"</text>");\n';
 		codestr += '            sb.Append(@"</entrydata>");\n';		 		
 		codestr += '            sb.Append(@"</viewentry>");\n'; 		
 		codestr += '            /*-- recursive call to get sub folder data -- */\n';		 		
		codestr += '             getFolderXML(sb, olChildFolder);\n';
		codestr += '             olChildFolder = null;\n';		
		codestr += '        }\n';	 	
		codestr += '        olChildFolders = null;\n';		
 		codestr += '    }\n';
 		codestr += '    return true;\n';
		codestr += '    } catch(Exception e) { return false; }\n';
 		codestr += '};\n'; 	
		codestr += 'System.Text.StringBuilder strXMLFolders = new System.Text.StringBuilder("");\n';
		codestr += 'strXMLFolders.Append(@"<?xml version=""1.0"" encoding=""UTF-8"" ?>\n");\n';
		codestr += 'strXMLFolders.Append(@"<viewentries toplevelentries=""1"">\n");\n';
		codestr += 'getFolderXML(strXMLFolders, null);\n';
		codestr += 'strXMLFolders.Append(@"</viewentries>");\n';
		codestr += 'result = @"{""runstatus"": ""SUCCESS"", ""data"": """ + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(strXMLFolders.ToString())) + @"""}";\n';		
		codestr += 'strXMLFolders = null;\n';
 	}else if(actionname == "GETMESSAGES"){
	   	codestr += '/*-- return outlook folder message listing --*/\n';	 	 	
	 	codestr += 'Func<System.Text.StringBuilder, Object, bool> getMessagesXML= null;\n';
          codestr += 'getMessagesXML = (System.Text.StringBuilder sb, Object olFolder)=>{\n';
          codestr += '    Object olMessage = null;\n';
          codestr += '    Object olFolderItems = olFolder.GetType().InvokeMember("Items", BindingFlags.GetProperty, null, olFolder, new object[]{});\n'; 		
          codestr += '    if(olFolderItems == null){return false;}\n';          
          codestr += '    if(opts_ftsearch != ""){\n';
//          codestr += '               string filter = @"@SQL=""urn:schemas:httpmail:subject"" like " + (char)39 + "%" + opts_ftsearch + "%" + (char)39;\n';   
//          codestr += '               string filter = @"@SQL=""urn:schemas:httpmail:subject"" = " + (char)39 + "" + opts_ftsearch + "" + (char)39;\n';   
//          codestr += '               string filter = @"@SQL=""urn:schemas:httpmail:textdescription"" like " + (char)39 + "%" + opts_ftsearch + "%" + (char)39;\n';   
		codestr += '               string filter = @"@SQL=";\n';
		codestr += '                          filter = filter + @"""urn:schemas:httpmail:subject"" like " + (char)39 + "%" + opts_ftsearch + "%" + (char)39;\n';  
		codestr += '                          filter = filter + " OR ";\n';
          codestr += '                          filter = filter + @"""urn:schemas:httpmail:textdescription"" like " + (char)39 + "%" + opts_ftsearch + "%" + (char)39;\n';  
		codestr += '                          filter = filter + " OR ";\n';
          codestr += '                          filter = filter + @"""urn:schemas:httpmail:from"" like " + (char)39 + "%" + opts_ftsearch + "%" + (char)39;\n';
		codestr += '                          filter = filter + " OR ";\n';
          codestr += '                          filter = filter + @"""urn:schemas:httpmail:to"" like " + (char)39 + "%" + opts_ftsearch + "%" + (char)39;\n';          
          codestr += '               olFolderItems = (Object) olFolderItems.GetType().InvokeMember("Restrict", BindingFlags.InvokeMethod, null, olFolderItems, new object[]{filter});\n'; 		          
          codestr += '    }\n';
          codestr += '    olFolderItems.GetType().InvokeMember("Sort", BindingFlags.InvokeMethod, null, olFolderItems, new object[2]{"[ReceivedTime]", false});\n'; 		
          codestr += '    int itemCount = (int) olFolderItems.GetType().InvokeMember("Count", BindingFlags.GetProperty, null, olFolderItems, new object[]{});\n';
 		codestr += '    if(opts_start == -1){\n';
 		codestr += '          opts_start = (int) ((itemCount < opts_count) ? 1 : itemCount + 1 - opts_count);\n'; 
 		codestr +='      }\n';
          codestr += '    int maxCount = (int) Math.Min(opts_start + opts_count - 1, itemCount);\n'; 		
 	  	codestr += '    sb.Append(@"<viewentries toplevelentries=""" + itemCount.ToString() + @""">");\n';                     
  	 	codestr += '    for (int m = opts_start; m<= maxCount; m++){\n';
 	 	codestr += '         olMessage = olFolderItems.GetType().InvokeMember("Item", BindingFlags.InvokeMethod, null, olFolderItems, new object[]{m});\n';
 	 	codestr += '         if(olMessage == null){ continue; }\n';
 	 	codestr += '         Object itemClass = olMessage.GetType().InvokeMember("Class", BindingFlags.GetProperty, null, olMessage, new object[]{});\n'; 	 	
 	 	codestr += '         if(itemClass.ToString() == "43"){\n';
          codestr += '              olSafe.GetType().InvokeMember("Item", BindingFlags.SetProperty, null, olSafe, new object[]{olMessage});\n';           
          codestr += '              string msgID = (string) olSafe.GetType().InvokeMember("EntryID", BindingFlags.GetProperty, null, olSafe, new object[]{});\n';
          codestr += '              string msgWho = (string) olSafe.GetType().InvokeMember("SenderName", BindingFlags.GetProperty, null, olSafe, new object[]{});\n';
          codestr += '              DateTime msgDate = (DateTime) olSafe.GetType().InvokeMember("ReceivedTime", BindingFlags.GetProperty, null, olSafe, new object[]{});\n';
          codestr += '              int msgSize = (int) olSafe.GetType().InvokeMember("Size", BindingFlags.GetProperty, null, olSafe, new object[]{});\n';
          codestr += '              string msgSubject = (string)  olSafe.GetType().InvokeMember("Subject", BindingFlags.GetProperty, null, olSafe, new object[]{});\n';
          codestr += '              Object msgAttachments = olSafe.GetType().InvokeMember("Attachments", BindingFlags.GetProperty, null, olSafe, new object[]{});\n';
          codestr += '              int msgAttachCount = (int) msgAttachments.GetType().InvokeMember("Count", BindingFlags.GetProperty, null, msgAttachments, new object[]{});\n';
          
 	  	codestr += '              sb.Append(@"<viewentry id=""").Append(msgID).Append(@""">");\n'; 
		codestr += '              sb.Append("<id>").Append("<![CDATA[").Append(msgID).Append("]]>").Append("</id>");\n';         
		codestr += '              sb.Append("<who>").Append("<![CDATA[").Append(msgWho).Append("]]>").Append("</who>");\n';         
		codestr += '              sb.Append("<date>").Append("<![CDATA[").Append(msgDate.ToString("M/d/yyyy")).Append("]]>").Append("</date>");\n';
		codestr += '              sb.Append("<time>").Append("<![CDATA[").Append(msgDate.ToString("h:mm tt")).Append("]]>").Append("</time>");\n';		
		codestr += '              sb.Append("<size>").Append("<![CDATA[").Append(msgSize.ToString()).Append("]]>").Append("</size>");\n';
		codestr += '              sb.Append("<subject>").Append("<![CDATA[").Append(msgSubject).Append("]]>").Append("</subject>");\n';         
		codestr += '              sb.Append("<selected/>");\n';		
		codestr += '              sb.Append("<icon>");\n';
		codestr += '              if(msgAttachCount > 0){\n';
		codestr += '                    sb.Append(@"&lt;img src=""{{ asset("bundles/docova/images/icons/vwicn005.gif") }}""&gt;");\n';				
		codestr += '              }\n';		
		codestr += '              sb.Append("</icon>");\n';
		codestr += '              sb.Append("<attachments>");\n';
		codestr += '              sb.Append("<filecount>").Append(msgAttachCount.ToString()) .Append("</filecount>");\n';		
		codestr += '              for(int a=1; a<=msgAttachCount; a++){\n';
		codestr += '                    Object msgAttachment = msgAttachments.GetType().InvokeMember("Item", BindingFlags.InvokeMethod, null, msgAttachments, new object[]{a});\n';
		codestr += '                    if(msgAttachment == null){ continue;}\n';
		codestr += '                    string msgAttachmentFileName = (string)  msgAttachment.GetType().InvokeMember("FileName", BindingFlags.GetProperty, null, msgAttachment, new object[]{});\n';
		codestr += '                    sb.Append("<attachment>");\n';
		codestr += '                    sb.Append("<filename>").Append("<![CDATA[").Append(msgAttachmentFileName).Append("]]>").Append("</filename>");\n';
		codestr += '                    int msgAttachmentSize = (int)  msgAttachment.GetType().InvokeMember("Size", BindingFlags.GetProperty, null, msgAttachment, new object[]{});\n';
		codestr += '                    sb.Append("<filesize>").Append(msgAttachmentSize.ToString()).Append("</filesize>");\n';              	
		codestr += '                    sb.Append("</attachment>");\n';		
		codestr += '                    msgAttachment = null;\n';
		codestr += '             }\n';
		codestr += '             sb.Append("</attachments>");\n';
		codestr += '             sb.Append("<hasfiles>").Append((msgAttachCount > 0) ? "1" : "0").Append("</hasfiles>");\n';				
 	  	codestr += '             sb.Append(@"</viewentry>");\n'; 
		codestr += '             msgAttachments = null;\n'; 
 	 	codestr += '         }\n';
		codestr += '    }\n';   
 	  	codestr += '    sb.Append(@"</viewentries>");\n';    
          codestr += '    olMessage = null;\n';
          codestr += '    olFolderItems = null;\n';       		
 		codestr += '    return true;\n';
 		codestr += '};\n'; 	 	
 		codestr += 'Object olTargetFolder = olNamespace.GetType().InvokeMember("GetFolderFromID", BindingFlags.InvokeMethod, null, olNamespace, new object[2]{opts_folderid, opts_storeid});\n'; 		
 		codestr += 'if(olTargetFolder == null){goto Cleanup;}\n'; 		
		codestr += 'System.Text.StringBuilder strXMLMessages = new System.Text.StringBuilder("");\n';
		codestr += 'strXMLMessages.Append(@"<?xml version=""1.0"" encoding=""UTF-8"" ?>\n");\n';
		codestr += 'strXMLMessages.Append(@"<Results>\n");\n';
		codestr += 'strXMLMessages.Append(@"<Result ID=""Ret1"">\n");\n';		
		codestr += 'getMessagesXML(strXMLMessages, olTargetFolder);\n';		
		codestr += 'strXMLMessages.Append(@"</Result>");\n';	
		codestr += 'strXMLMessages.Append(@"</Results>");\n';	
		codestr += 'olTargetFolder = null;\n';
		codestr += 'result = @"{""runstatus"": ""SUCCESS"", ""data"": """ + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(strXMLMessages.ToString())) + @"""}";\n';		
		codestr += 'strXMLMessages = null;\n';	
	}else if(actionname == "GETMESSAGEDATA"){
          codestr += 'Object olMessage = null;\n';
 	 	codestr += 'olMessage = olNamespace.GetType().InvokeMember("GetItemFromID", BindingFlags.InvokeMethod, null, olNamespace, new object[2]{opts_messageid, opts_storeid});\n';
 	 	codestr += 'if(olMessage == null){ goto Cleanup; }\n';
		codestr += 'System.Text.StringBuilder strXMLMessage = new System.Text.StringBuilder("");\n'; 	 	
 	 	codestr += 'Object itemClass = olMessage.GetType().InvokeMember("Class", BindingFlags.GetProperty, null, olMessage, new object[]{});\n'; 	 	
 	 	codestr += 'if(itemClass.ToString() == "43"){\n';		         
          codestr += '    olSafe.GetType().InvokeMember("Item", BindingFlags.SetProperty, null, olSafe, new object[]{olMessage});\n';           
		codestr += '    strXMLMessage.Append(@"<?xml version=""1.0"" encoding=""UTF-8"" ?>\n");\n';
		codestr += '    strXMLMessage.Append(@"<Results>\n");\n';
		codestr += '    strXMLMessage.Append(@"<Result ID=""Ret1"">\n");\n';	
		codestr += '    strXMLMessage.Append(@"<message>\n");\n';	
          codestr += '    string msgFrom = (string) olSafe.GetType().InvokeMember("SenderName", BindingFlags.GetProperty, null, olSafe, new object[]{});\n';
          codestr += '    msgFrom += "[";\n';
		codestr += '    msgFrom += (string) olSafe.GetType().InvokeMember("SenderEmailAddress", BindingFlags.GetProperty, null, olSafe, new object[]{});\n';
		codestr += '    msgFrom += "]";\n';		
		codestr += '    strXMLMessage.Append("<msgfrom>").Append("<![CDATA[").Append(msgFrom).Append("]]>").Append("</msgfrom>");\n';
          codestr += '    string msgTo = (string) olSafe.GetType().InvokeMember("To", BindingFlags.GetProperty, null, olSafe, new object[]{});\n';
		codestr += '    strXMLMessage.Append("<msgto>").Append("<![CDATA[").Append(msgTo).Append("]]>").Append("</msgto>");\n';
          codestr += '    string msgSubject = (string) olSafe.GetType().InvokeMember("Subject", BindingFlags.GetProperty, null, olSafe, new object[]{});\n';
		codestr += '    strXMLMessage.Append("<msgsubject>").Append("<![CDATA[").Append(msgSubject).Append("]]>").Append("</msgsubject>");\n';		
          codestr += '    string msgCopyTo = (string) olSafe.GetType().InvokeMember("cc", BindingFlags.GetProperty, null, olSafe, new object[]{});\n';
		codestr += '    strXMLMessage.Append("<msgcopyto>").Append("<![CDATA[").Append(msgCopyTo).Append("]]>").Append("</msgcopyto>");\n';				
          codestr += '    DateTime msgDate = (DateTime) olSafe.GetType().InvokeMember("ReceivedTime", BindingFlags.GetProperty, null, olSafe, new object[]{});\n';
		codestr += '    strXMLMessage.Append("<msgdate>").Append("<![CDATA[").Append(msgDate.ToString("M/d/yyyy h:mm tt")).Append("]]>").Append("</msgdate>");\n';
          codestr += '    int msgSize = (int) olSafe.GetType().InvokeMember("Size", BindingFlags.GetProperty, null, olSafe, new object[]{});\n';
		codestr += '     strXMLMessage.Append("<msgsize>").Append(msgSize.ToString()).Append("</msgsize>");\n';		
          codestr += '     string msgHTMLBody = (string) olSafe.GetType().InvokeMember("HTMLBody", BindingFlags.GetProperty, null, olSafe, new object[]{});\n';		
		codestr += '     strXMLMessage.Append("<msghtmlbody>");\n';
          codestr += '     strXMLMessage.Append(System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(msgHTMLBody)));\n';            
		codestr += '     strXMLMessage.Append("</msghtmlbody>");\n';		
          codestr += '     Object msgAttachments = olSafe.GetType().InvokeMember("Attachments", BindingFlags.GetProperty, null, olSafe, new object[]{});\n';
          codestr += '     int msgAttachCount = (int) msgAttachments.GetType().InvokeMember("Count", BindingFlags.GetProperty, null, msgAttachments, new object[]{});\n';
		codestr += '     strXMLMessage.Append("<attachments>");\n';
		codestr += '     strXMLMessage.Append("<filecount>").Append(msgAttachCount.ToString()) .Append("</filecount>");\n';		
		codestr += '     for(int a=1; a<=msgAttachCount; a++){\n';
		codestr += '          Object msgAttachment = msgAttachments.GetType().InvokeMember("Item", BindingFlags.InvokeMethod, null, msgAttachments, new object[]{a});\n';
		codestr += '           if(msgAttachment == null){ continue;}\n';
		codestr += '           string msgAttachmentFileName = (string)  msgAttachment.GetType().InvokeMember("FileName", BindingFlags.GetProperty, null, msgAttachment, new object[]{});\n';
		codestr += '           string msgAttachmentFilePath = tempDir + @"\" + msgAttachmentFileName;\n';
		codestr += '           strXMLMessage.Append("<attachment>");\n';
		codestr += '                    msgAttachment.GetType().InvokeMember("SaveAsFile", BindingFlags.InvokeMethod, null, msgAttachment, new object[]{msgAttachmentFilePath});\n' 
		codestr += '                    strXMLMessage.Append("<filename>").Append("<![CDATA[").Append(msgAttachmentFileName).Append("]]>").Append("</filename>");\n';
		codestr += '                    strXMLMessage.Append("<filepath>").Append("<![CDATA[").Append(msgAttachmentFilePath).Append("]]>").Append("</filepath>");\n';
		codestr += '                    int msgAttachmentSize = (int)  msgAttachment.GetType().InvokeMember("Size", BindingFlags.GetProperty, null, msgAttachment, new object[]{});\n';
		codestr += '                    strXMLMessage.Append("<filesize>").Append(msgAttachmentSize.ToString()).Append("</filesize>");\n';     
		codestr += '                    int prpid = 0x3712001F;\n';
		codestr += '                    string msgAttachmentCID = (string) msgAttachment.GetType().InvokeMember("Fields", BindingFlags.GetProperty, null, msgAttachment, new object[]{prpid});\n';
		codestr += '                    strXMLMessage.Append("<contentid>").Append(msgAttachmentCID).Append("</contentid>");\n';
		codestr += '           strXMLMessage.Append("</attachment>");\n';		
		codestr += '           msgAttachment = null;\n';
		codestr += '     }\n';
		codestr += '     strXMLMessage.Append("</attachments>");\n';		
		codestr += '     strXMLMessage.Append(@"</message>");\n';
		codestr += '     strXMLMessage.Append(@"</Result>");\n';	
		codestr += '     strXMLMessage.Append(@"</Results>");\n';	 	 
		codestr += '     msgAttachments = null;\n';	
 	 	codestr += '}\n';
 	 	codestr += 'olMessage = null;\n';
 	 	codestr += 'itemClass = null;\n';
		codestr += 'result = @"{""runstatus"": ""SUCCESS"", ""data"": """ + System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(strXMLMessage.ToString())) + @"""}";\n';		
		codestr += 'strXMLMessage = null;\n'; 	 	
 	}
 
	codestr += 'Cleanup:\n';	
	codestr += '     olSafe = null;\n';
	codestr +='      olSafeType = null;\n';
	codestr +='      olNamespace = null;\n';
	codestr += '     olApp = null;\n';
	codestr += '     olAppType = null;\n';	
	codestr += 'return result;\n';
 	
	var retval = window.top.DocovaExtensions.executeCode(codestr, false, true);
	if(retval.status == "SUCCESS"){
		try{
			//-- try to parse the json data being returned into an object
			var tempjson = JSON.parse(retval.results);

			//-- try doing some extra conversion of the returned data
			if(actionname=="GETVERSION"){
				//-- do nothing
 			}else if(actionname == "GETFOLDERS" || actionname == "GETMESSAGES" || actionname == "GETMESSAGEDATA"){
 				//-- decode base64 encoded data
 				if(tempjson.data){
					tempjson.data = base64_decode(tempjson.data);
				}
			}
			
			result = tempjson;
		}catch(e){
			//-- not valid json so just return unparsed result
			result = retval.results;
		}
	}else{
		window.top.Docova.Utils.messageBox({prompt: "An error has occurred communicating with Outlook. Error [" + retval.error + "]", title: "Outlook Mail Acquire", width: 400});
	}
	 	
 	return result;
 }//--end callOutlook


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: GetMailFolderInfo
 * retrieves the list of folders from user's mail file
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function GetMailFolderInfo()
{
	//------------------------------------------------------------------------------------------------	
	ShowProgressMessage("Retrieving mail folders. Please wait...");
	//------------------------------------------------------------------------------------------------	

	var xmlFolderTreeXML = "";
	var dataoptions = {};
	if(docInfo.FolderSelection != "" && docInfo.FolderSelectionType != ""){
		dataoptions.selectiontype = docInfo.FolderSelectionType;
		dataoptions.folderlist = docInfo.FolderSelection;				
	}

	var result = callOutlook("GETFOLDERS", dataoptions);
	if(result && result.runstatus && result.runstatus == "SUCCESS" && result.data){
			xmlFolderTreeXML= result.data; 			
	}
	

	//------------------------------------------------------------------------------------------------	
	HideProgressMessage();
	//------------------------------------------------------------------------------------------------
	
	if(xmlFolderTreeXML == ""){
		window.top.Docova.Utils.messageBox({prompt: "Error retrieving Outlook folder listing.  [error in GetMailFolderInfo()]", title: "Outlook Mail Acquire", width: 400});
		return;
	}
	
	if (window.DOMParser)
	{
  			var parser=new DOMParser();
  			xmlFolderData=parser.parseFromString(xmlFolderTreeXML,"text/xml");
	 }else{
			window.top.Docova.Utils.messageBox({prompt: "Error retrieving Outlook folder listing.  [error in GetMailFolderInfo()]", title: "Outlook Mail Acquire", width: 400});	 
		 	return false;
	 }
	
	// load transformed xml into folder listing
	DLITFolderView.LoadFoldersFromXML(xmlFolderData);		

}//--end GetMailFolderInfo



/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: openDefaultFolder 
 * Triggers the opening of the Inbox folder when folder list has loaded
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function openDefaultFolder(){
	var folderpath = "Inbox";
	var targetnode = DLITFolderView.jstree.get_node(DLITFolderView.hashCode(folderpath));
	if(targetnode){
		DLITFolderView.jstree.select_node(targetnode, false, false);
	}
}//--end openDefaultFolder


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: ViewFTClear
 * clears the search query and resets the view results
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function ViewFTClear(){
	jQuery("#inpQuery").val("");
	GetViewEntries(currentView, -1);
}//--end ViewFTClear

/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: ViewFTSearch
 * triggers view refresh based on search query input
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function ViewFTSearch(){
	GetViewEntries(currentView, -1);
}//--end ViewFTSearch



/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: GetViewEntries
 * retrieves a page of records from the selected mail folder
 * Inputs: viewName - string - storeID#folderID
 *              start - integer - entry in the view to start retrieval from
 *              count - integer - number of entries to return
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function GetViewEntries(viewName, start, count)
{
	var storeID = "";
	var folderID = "";
	var tempSplit = viewName.split('#');
	if(tempSplit.length < 2){
		return false;
	}
	storeID = tempSplit[0];
	folderID = tempSplit[1];

	//------------------------------------------------------------------------------------------------	
	ShowProgressMessage("Retrieving mail records. Please wait...");
	//------------------------------------------------------------------------------------------------	
	
	if(count ==undefined || count == null){
		var count = docInfo.MailViewPageSize;
	}
	
	if(start == undefined || start == null){
		var start = -1;
	}
	
	var ftsearch = jQuery("#inpQuery").val().trim();
	
	var xmlMailDocsXML = "";
	var result = callOutlook("GETMESSAGES", {"storeid": storeID, "folderid": folderID, "start" : start, "count": count, "ftsearch" : ftsearch});
	if(result && result.runstatus && result.runstatus == "SUCCESS" && result.data){
		xmlMailDocsXML= result.data; 			
		if(xmlMailDocsXML != ""){
			if (window.DOMParser)
  			{
  				var parser=new DOMParser();
  				xmlMailDocs=parser.parseFromString(xmlMailDocsXML,"text/xml");
		 	}else{
	 			HideProgressMessage();		 	
		 		alert("Error converting xml mail data");		 	
		 		return false;
		 	}
			var recCountNodeText = jQuery(xmlMailDocs.selectSingleNode("//Results/Result[@ID='Ret1']/toplevelentries")).text().trim();
			if(recCountNodeText == ""){
				var recCountNodeText = jQuery(xmlMailDocs.selectSingleNode("//Results/Result[@ID='Ret1']/viewentries")).attr("toplevelentries").trim();						
			}
			recordCount=parseFloat(recCountNodeText);		
			var viewEntryNode = xmlMailDocs.selectSingleNode("//Results/Result[@ID='Ret1']/viewentries");
			if (window.DOMParser)
  			{
  				var parser=new DOMParser();
  				xmlMailDocs=parser.parseFromString(new XMLSerializer().serializeToString(viewEntryNode),"text/xml");
		 	}else{
	 			HideProgressMessage();		 	
		 		alert("Error converting xml mail data");
		 		return false;
		 	}		
			xmlMailViewData.oxml = xmlMailDocs;		
			xmlMailViewData.XMLDocument = xmlMailDocs;
		     xmlMailViewData.process();	
		 	jQuery("#tblMailRecords").show();		
		}else{
			if (window.DOMParser)
  			{
  				var parser=new DOMParser();
  				xmlMailDocs=parser.parseFromString("<viewentries/>","text/xml");
		 	}else{
	 			HideProgressMessage();		 	
		 		alert("Error converting xml mail data");
		 		return false;
		 	}		
			xmlMailViewData.oxml = xmlMailDocs;
			xmlMailViewData.XMLDocument = xmlMailDocs;
		     xmlMailViewData.process();		
			recordCount=0;		
		 	jQuery("#tblMailRecords").hide();				
		}
	}
	
	
	if(start == undefined || start == null || isNaN(start) || start=="")
	{
		startRecord = 1;
	}
	else if(start=="-1")
	{
		startRecord = (recordCount +1) - count
	}
	else
	{
		startRecord = start
	}

	var recCountString = "";
	if( recordCount > count){
		var startRecordNo = parseFloat(startRecord);
		var pageSizeNo = scrollPageSize-1;
		recCountString = (startRecordNo < 0)? " 1 to " : startRecord + " to ";
		recCountString += ( startRecordNo + pageSizeNo < recordCount)? startRecord + pageSizeNo : recordCount;
		recCountString += " of " + recordCount;
	}
	jQuery("#spanRecCount").text(recCountString);
	UpdateScrollButtons();

	//------------------------------------------------------------------------------------------------	
	HideProgressMessage();
	//------------------------------------------------------------------------------------------------	
	
}//--end GetViewEntries



/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: GetSelectedUNIDs
 * Returns an array of document unique ids for selected mail documents
  * Returns: string array containing document unids of selected entries
 *------------------------------------------------------------------------------------------------------------------------------------------- */
 function GetSelectedUNIDs()
{
	var idList= new Array();
	var recordset = xmlMailViewData.recordset;
	if(recordset){
		var maxrows = recordset.getRecordCount();
		for(var row=0; row<maxrows; row++){
			recordset.AbsolutePosition(row);
			var selected = recordset.Fields("Selected").getValue();
			if(selected == "1"){
				idList[idList.length] = recordset.Fields("id").getValue();			
			}		
		}
	}

	return idList;
}//--end GetSelectedUNIDs()


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: DeselectEntries
 * deslects selected entries in the list
 *------------------------------------------------------------------------------------------------------------------------------------------- */
 function DeselectEntries()
{
	selectedEntry = null;
	
	var recordset = xmlMailViewData.recordset;
	if(recordset){
		var maxrows = recordset.getRecordCount();
		for(var row=0; row<maxrows; row++){
			recordset.AbsolutePosition(row);
			var selected = recordset.Fields("Selected").getValue();
			if(selected == "1"){
				recordset.Fields("Selected").setValue("0");			
			}		
		}
	}
	
	xmlMailViewData.Refresh();
}//--end DeselectEntries


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: ImportSelected
 * Imports selected messages by recursive calls to itself
 * Inputs: options - data value pair consisting of
 *                    cb: function (optional) function to call on completion with result
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function ImportSelected(options)
{
    var defaultOptns = {
		step: "initial",
		cb: function() {},
		storeid: "",
		selunids: new Array(),
		cleanupfiles: new Array(),
		importcount: 0
    };

	var opts = $.extend({}, defaultOptns, options);

	//1. initial processing on first call of function     
    if(opts.step == "initial"){	
		var tempSplit = currentView.split('#');
		if(tempSplit.length < 2){
			return opts.cb(false);
		}
		opts.storeid = tempSplit[0];
		opts.selunids = GetSelectedUNIDs();
		if(opts.selunids.length==0){ 
			return opts.cb(false);
		}
	
		jQuery("input[name=DocumentTypeKey]").val("MAILMEMO");
		jQuery("input[name=msgImportType]").val("O");
		jQuery("input[name=importOrigin]").val("Folder");
	
		//check if its a document import
		if (srcDocInfo.DocumentNumber){
			jQuery("input[name=importOrigin]").val("Document");
			if (srcDocInfo.DocKey ==null || srcDocInfo.DocKey =="" ){
				window.top.Docova.Utils.messageBox({prompt: "Missing document key, message can not be imported", msgboxtype: 0, icontype: 1, title: "Outlook Mail Import", width: 400});
				return opts.cb(false);
			}else{
				jQuery("input[name=ParentDocKey]").val(srcDocInfo.DocKey);
			}
			if (srcDocInfo.DocID ==null || srcDocInfo.DocID =="" )	{
				window.top.Docova.Utils.messageBox({prompt: "Missing document id, message can not be imported", msgboxtype: 0, icontype: 1, title: "Outlook Mail Import", width: 400});
				return opts.cb(false);
			}else	{
				jQuery("input[name=ParentDocID]").val(srcDocInfo.DocID);
			}
		}		
		
		//------------------------------------------------------------------------------------------------	
		ShowProgressMessage("Importing messages. Please wait...");
		//------------------------------------------------------------------------------------------------	
		opts.step = "process";
	}//end initial step
	
	//2. processing stage of function
	if(opts.step == "process"){
		var dataoptions = {};
		dataoptions.storeid = opts.storeid;
		
		if(opts.selunids && opts.selunids.length > 0){
			//-- reset form submit values
			jQuery("#Body").val("");
			jQuery("input[name=Sender]").val("");
			jQuery("input[name=SendTo]").val("");
			jQuery("input[name=CopyTo]").val("");
			jQuery("input[name=Subject]").val("");
			jQuery("input[name=PostedDate]").val("");
			jQuery("input[name=msgSize]").val("");			
			jQuery("input[name=MsgAttachmentCount]").val("");
			
		  	DLIUploader1.SelectAll();
		  	DLIUploader1.RemoveSelectedFiles();			

			//-- get the next message to process
			dataoptions.messageid = opts.selunids.pop();						
			var result = callOutlook("GETMESSAGEDATA", dataoptions); 
			if(result && result.runstatus && result.runstatus == "SUCCESS" && result.data){
				var xmlMsgData = jQuery.parseXML(result.data);
				
				var msgFrom = jQuery(xmlMsgData).find("message > msgfrom").text(); 
				jQuery("input[name=Sender]").val(msgFrom);
			
				var msgTo = jQuery(xmlMsgData).find("message > msgto").text(); 
				jQuery("input[name=SendTo]").val(msgTo);
			
				var msgCopyTo = jQuery(xmlMsgData).find("message > msgcopyto").text(); 
				jQuery("input[name=CopyTo]").val(msgCopyTo);
			
				var msgSubject = jQuery(xmlMsgData).find("message > msgsubject").text(); 
				jQuery("input[name=Subject]").val(msgSubject);
	
				var msgDate = jQuery(xmlMsgData).find("message > msgdate").text();			
				jQuery("input[name=PostedDate]").val(msgDate);
			
				var msgSize = jQuery(xmlMsgData).find("message > msgsize").text(); 
				jQuery("input[name=msgSize]").val(msgSize);

				var msgAttachmentCount = jQuery(xmlMsgData).find("message > attachments > filecount").text();
				if(isNaN(parseInt(msgAttachmentCount))){
					msgAttachmentCount = 0;
				}else{
					msgAttachmentCount = parseInt(msgAttachmentCount);
				}
				jQuery("input[name=MsgAttachmentCount]").val(msgAttachmentCount.toString());
			
				var msgHTMLBody = jQuery(xmlMsgData).find("message > msghtmlbody").text();
				msgHTMLBody = base64_decode(msgHTMLBody); //base64 decode html message body
			
				var cleanupFileListArray = new Array();
				var msgAttachmentSizeArray = new Array();
				jQuery(xmlMsgData).find("message > attachments > attachment").each(function(index){
					var msgAttachmentFileName = jQuery(this).find("filename").text();
					var msgAttachmentFilePath = jQuery(this).find("filepath").text();
					var msgAttachmentFileSize = jQuery(this).find("filesize").text();					
					var msgAttachmentCID = jQuery(this).find("contentid").text();
					
					//-- add files to cleanup array for purging later
					opts.cleanupfiles.push(msgAttachmentFilePath);
					
					if (DLIUploader1.UploadFile( msgAttachmentFilePath, msgAttachmentFileName ) == false){
						window.top.Docova.Utils.messageBox({prompt: "Unable to add mail attachment file to upload list. Filename: [" + msgAttachmentFileName + "]", title: "Mail Import", width: 400});
					}
					//check if its an embeded attachment
	  		 		if (msgAttachmentCID !=null && msgAttachmentCID !=""){
	  		 			msgHTMLBody.replace(msgAttachmentCID, msgAttachmentFileName);
				     	msgHTMLBody=msgHTMLBody.replace("cid:" + msgAttachmentCID, msgAttachmentFileName);
	  		 		}else	{
	  		 			//regular attachment
	  		 			msgAttachmentSizeArray.push(msgAttachmentFileName+"*"+bytesToSize(msgAttachmentFileSize));	  		 		
	  		 		}				
				});						
			
				jQuery("input[name=msgAttachmentsSize]").val(msgAttachmentSizeArray);
				jQuery("#Body").val("[" + msgHTMLBody );	//-- add bracket to get Notes rich text field to render html	

				//-- submit the message with attachments
				DLIUploader1.Submit({
					Navigate: false, 
					GetResults: false,
					Silent: true,
					onOk: function(){
						opts.importcount += 1;
						ImportSelected(opts);
					},
					onOther: function(){
						window.top.Docova.Utils.messageBox({prompt: "Unable to import mail message. Subject: [" + msgSubject + "]", title: "Mail Import", width: 400});					
						ImportSelected(opts);
					}
				});
			}else{
				ImportSelected(opts);				
			}
		}else{
			//--no more ids left to process
			opts.step = "finish";
		}
	}//end process step

	//3. final step to perform cleanup and return results		
	if(opts.step == "finish"){
		CleanupTempData(opts.cleanupfiles);			
		DeselectEntries();

		//------------------------------------------------------------------------------------------------	
		HideProgressMessage();
		//------------------------------------------------------------------------------------------------

		if(opts.importcount > 0){
			window.top.Docova.Utils.messageBox({icontype: 4, msgboxtype : 0, prompt: "Completed importing " + opts.importcount.toString() + " selected messages.", title: "Mail Import", width: 400});

			//--- record msg import in audit log
			var requesturl = srcDocInfo.ServerUrl + "/" + srcDocInfo.NsfName + "/DocumentServices?OpenAgent";
				
			var request="";
			request += "<Request>";
			request += "<Action>IMPORTEMAIL</Action>";
			request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
			request += "<Unid>" + srcDocInfo.DocID + "</Unid>";
			request += "</Request>";

			var httpObj = new objHTTP();
			httpObj.PostData(request, requesturl);
			
			return opts.cb(true);
		}else{
			window.top.Docova.Utils.messageBox({icontype: 1, msgboxtype : 0, prompt: "A problem occurred importing selected messages.", title: "Mail Import", width: 400});	
			return opts.cb(false);			
		}		
	}//end finish		
		
}//--end ImportSelected


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: AcquireSelected
 * Acquire content from selected message
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function AcquireSelected()
{
	var successful = false;
	
	var tempSplit = currentView.split('#');
	if(tempSplit.length < 2){return false;}
	var storeID = tempSplit[0];
	
	if(!selectedEntry){
		window.top.Docova.Utils.messageBox( {prompt: "Please select the message to acquire.", title: "Mail Acquire", width: 400});
		return false;
	}	

	var getBody = (jQuery("input[name=AcquireBody]:checked").length > 0);
	var getSubject = (jQuery("input[name=AcquireSubject]:checked").length > 0);
	var getFiles = (jQuery("input[name=AcquireFiles]:checked").length > 0);
	
	if( !getBody && !getSubject && !getFiles){
		window.top.Docova.Utils.messageBox( {prompt: "Please select the message elements you wish to acquire.", title: "Mail Acquire", width: 400});
		return false;
	}	
	
	//------------------------------------------------------------------------------------------------	
	ShowProgressMessage("Acquiring message content. Please wait...");
	//------------------------------------------------------------------------------------------------	
	
	var row = parseInt(jQuery(selectedEntry).find("input[datafld=selected]").attr("record"));  //get row number 
	if(!isNaN(row)){
		var recordset = xmlMailViewData.recordset;
		recordset.AbsolutePosition(row);
		var unid = recordset.Fields("id").getValue();
		if(unid == undefined || unid == null || unid == ""){
			return false;
		}
	}

	
	var allOK = true;
	allOK = allOK && AcquireMessageSubject();
	
	if(getBody || getFiles){
		var dataoptions = {};
		dataoptions.storeid = storeID;		
		dataoptions.messageid = unid;
		var result = callOutlook("GETMESSAGEDATA", dataoptions); 
		if(result && result.runstatus && result.runstatus == "SUCCESS" && result.data){	
			var xmlMsgData = jQuery.parseXML(result.data);
			
			if(getBody){
				var msgHTMLBody = jQuery(xmlMsgData).find("message > msghtmlbody").text();
				msgHTMLBody = base64_decode(msgHTMLBody); //base64 decode html message body			
				msgHTMLBody = convertInlineImgReferences(msgHTMLBody);
				
				allOK = allOK && AcquireMessageBody(msgHTMLBody);							
			}
			
			var selectedFiles = new Array();			
			if(getFiles){
				if(jQuery("input[name=AcquireOptionFiles][value=A]:checked").length > 0){
					// All files option selected, dont check the checkboxes
					selectedFiles = jQuery("input[name=FileSelect]").map(function(){return jQuery(this).val();}).get();
				}else{			
					selectedFiles = jQuery("input[name=FileSelect]:checked").map(function(){return jQuery(this).val();}).get();			
				}			
			}
			var acquireFileListArray = new Array();						
			var cleanupFileListArray = new Array();			
			jQuery(xmlMsgData).find("message > attachments > attachment").each(function(index){
				var msgAttachmentFileName = jQuery(this).find("filename").text();
				var msgAttachmentFilePath = jQuery(this).find("filepath").text();
					
				if(selectedFiles.indexOf(msgAttachmentFileName)> -1){
					acquireFileListArray.push(msgAttachmentFilePath);				
				}else{
					cleanupFileListArray.push(msgAttachmentFilePath);				
				}	

			});
			if(getFiles){
				allOK = allOK && AcquireMessageFiles(acquireFileListArray);				
			}

			// clear temp files
			CleanupTempData(cleanupFileListArray);

		}else{
			allOK = false;
		}	
	}	

	DeselectEntry();
							
	successful = allOK;			
	importedCount += 1;						
	
	//------------------------------------------------------------------------------------------------	
	HideProgressMessage();
	//------------------------------------------------------------------------------------------------
	
	if(successful){
	//--- record acquire event in audit log
		var request="";
		request += "<Request>";
		request += "<Action>ACQUIREEMAIL</Action>";
		request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
		request += "<Unid>" + srcDocInfo.DocID + "</Unid>";
		request += "</Request>";

		if (srcDocInfo.isNewDoc) {
			jQuery("#tmpEmailAuditDataXml", srcDoc).val(request);
		} else {
			var url = srcDocInfo.ServerUrl + "/" + srcDocInfo.NsfName + "/DocumentServices?OpenAgent";
			var httpObj = new objHTTP();
		
			if(httpObj.PostData(request, url)){

			}
		}
	}else{
		window.top.Docova.Utils.messageBox({icontype: 1, msgboxtype : 0, prompt: "A problem occurred acquiring selected message.", title: "Mail Acquire", width: 400});	
	}	
	
	return successful;
}//--end AcquireSelected


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: UpdateScrollButtons
 * updates the state of scroll buttons depending on record count, start record etc
 *------------------------------------------------------------------------------------------------------------------------------------------- */
 function UpdateScrollButtons()
{
	var $firstBtn = jQuery("#spanScrollFirst");
	var $lastBtn = jQuery("#spanScrollLast");
	var $fwdBtn = jQuery("#spanScrollFwd");
	var $fastFwdBtn = jQuery("#spanScrollFastFwd");
	var $backBtn = jQuery("#spanScrollBack");
	var $fastBackBtn = jQuery("#spanScrollFastBack");
	pageSize=parseFloat(docInfo.MailViewPageSize);
	
	if(recordCount <= pageSize){
		jQuery("#divScrollButtons").hide();
		return;
	}else{
		jQuery("#divScrollButtons").show();
	}
	//----------------------------------------------
	jQuery("#divScrollButtons").prop('disabled', (recordCount <=0));
	//----------------------------------------------
	$fwdBtn.prop("title",  "Next " + pageSize + " records");
	$backBtn.prop("title", "Previous " + pageSize + " records");
	
	//-------------- compute the appropriate fast scroll page size --------------
	if(recordCount > 40*pageSize){
		bigPageSize = 10*pageSize;
		}
	else if(recordCount > 20*pageSize){
		bigPageSize = 5*pageSize;
		}
	else if(recordCount > 10*pageSize){
		bigPageSize = 2*pageSize;
		}
	else{
		bigPageSize = 0;
		}
	//----------------------------------------------
	if(bigPageSize==0){
		$fastFwdBtn.hide();
		$fastBackBtn.hide();
	}else{
		$fastFwdBtn.prop({	"title" :  "Jump " + bigPageSize + " records"}).show();
		$fastBackBtn.prop({	"title" :  "Jump " + bigPageSize + " records"}).show();
	}


}//--end UpdateScrollButtons


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: ImportBeforeNavigating
 * import handler for messages selected prior to navigating to the next page or view
 * Inputs: cb - callback function - function or anonymous function to run after check/prompt
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function ImportBeforeNavigating(cb)
{	
	var selUnids = GetSelectedUNIDs();
	if(selUnids.length>0 && docInfo.AcquireType != "S"){
			window.top.Docova.Utils.messageBox({
				icontype: 2, 
				msgboxtype : 3, 
				prompt: "Would you like to import selected messages prior to navigating away from current set of records?", 
				title: "Mail Import", 
				width: 400,
				onYes: function(){
					ImportSelected({"cb" : cb});
				},
				onNo: function(){
					if(typeof cb == "function"){
						cb(false);
					}					
				},
				onCancel: function(){
					//-- need to reset folder highlight since it will have changed and we want to cancel - rollback - the operation
					var targetnode = DLITFolderView.jstree.get_node(currentFolderID);
					if(targetnode){
						DLITFolderView.jstree.deselect_all();
						DLITFolderView.jstree.select_node(targetnode, true, false);
					}
				}				
			});
	}else{
		if(typeof cb == "function"){
			cb(false);
		}	
	}
}//--end ImportBeforeNavigating


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: ScrollView
 * view scroll button handler
 * Inputs: scrollButton - element id - button selected
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function ScrollView(scrollButton)
{
	if(scrollButton.disabled) {return;}

	//-- conditional check to see if anything selected that needs to be imported before navigating away
	ImportBeforeNavigating(function(){
		//-- start scroll code
		startRecordNo = parseFloat(startRecord);
		pageSize=parseFloat(docInfo.MailViewPageSize);
		
		//------------------------ first page --------------
		if(scrollButton.id == "spanScrollFirst" && startRecordNo > 1){
			scrollPageSize=pageSize;
			GetViewEntries(currentView, 1);
			return;
		}
		//------------------------ last page --------------
		if(scrollButton.id == "spanScrollLast" && (pageSize < recordCount)){
			scrollPageSize=pageSize;
			GetViewEntries(currentView, recordCount-pageSize +1);
			return;
		}
		//------------------------ page fwd --------------
		if(scrollButton.id == "spanScrollFwd" && (startRecordNo + pageSize < recordCount)){
				scrollPageSize=pageSize;
				GetViewEntries(currentView, startRecordNo + pageSize);
				return;
		}
		//------------------------ page back --------------
		if(scrollButton.id == "spanScrollBack" && (startRecordNo > 1)){
			scrollPageSize=pageSize;
			if(startRecordNo >= pageSize){
				GetViewEntries(currentView, startRecordNo - pageSize);
				return;
			}else{
				GetViewEntries(currentView, 1);
				return;
			}
		}
		//------------------------ page fast fwd --------------
		if(scrollButton.id == "spanScrollFastFwd" && (startRecordNo + bigPageSize < recordCount)){
			scrollPageSize=bigPageSize;
			GetViewEntries(currentView, startRecordNo + bigPageSize);
			return; 
		}
		//------------------------ page fast back --------------
		if(scrollButton.id == "spanScrollFastBack" && (startRecordNo > 1)){
			scrollPageSize=bigPageSize;
			if(startRecordNo >= bigPageSize){
				GetViewEntries(currentView, startRecordNo - bigPageSize);
				return;
			}else{
				GetViewEntries(currentView, 1);
				return;
			}
		}		
		//--end scroll code
	});	
}//--end ScrollView



/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: OpenView
 * View/folder selection handler. Triggered by folder control when user selects a folder.
  *------------------------------------------------------------------------------------------------------------------------------------------- */
function OpenView()
{
	//--check to see if we are navigating to the same folder that is currently open
	if(DLITFolderView.CurrentFolderID == currentFolderID){
		//-- do nothing
	}else{
		//-- conditional check to see if selected entries need to be imported before navigating away
		ImportBeforeNavigating(function() {
			//--start open view code	
			viewName = DLITFolderView.CurrentUNID;	
			if(viewName == ""){return;}	

			GetViewEntries(viewName, -1);
			
			currentView = viewName;
			currentFolderID = DLITFolderView.CurrentFolderID;
			//--end open view code
		});
		
	}	
}//--end OpenView



/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: SelectEntry
 * in single select mode highlights the currently selected record and displays additional choice selections
 * Inputs: obj - tr element selected
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function SelectEntry(obj)
{
	if(docInfo.AcquireType != "S"){
		return;   //-- quit since we only select single entries when in the single selection mode
	}

	var recordset = xmlMailViewData.recordset;
	if(selectedEntry){
		if(obj == selectedEntry){return;} //already selected so quit now		
		jQuery(selectedEntry).removeClass("ui-state-hover");  //remove highlight
		jQuery(selectedEntry).find("input[datafld=selected]").val(""); //clear checkbox
		var row = parseInt(jQuery(selectedEntry).find("input[datafld=selected]").attr("record"));  //get row number 
		if(!isNaN(row)){
			recordset.AbsolutePosition(row);
			recordset.Fields("Selected").setValue("0");
		}
	}			

	jQuery("#divFileList").html("");
	
	jQuery(obj).addClass("ui-state-hover");
	jQuery(obj).find("input[datafld=selected]").val("1");  //set checkbox
	var row = parseInt(jQuery(obj).find("input[datafld=selected]").attr("record")); //get row number
	if(!isNaN(row)){			
		recordset.AbsolutePosition(row);
		recordset.Fields("Selected").setValue("1");
		var unid = recordset.Fields("id").getValue();	

		selectedEntry = obj;		
	
		if(SelectedHasFiles()){
			GetEntryInfo(unid);
		}			
	}	
	SetAcquireOptionDefaults();
}//--end SelectEntry


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: DeselectEntry
 * in single select mode removes highlight from the currently selected record and resets additional choice selections
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function DeselectEntry()
{
	if(docInfo.AcquireType != "S"){
		return;   //-- quit since we only select single entries when in the single selection mode
	}

	var recordset = xmlMailViewData.recordset;
	if(selectedEntry){
		jQuery(selectedEntry).removeClass("ui-state-hover");  //remove highlight
		jQuery(selectedEntry).find("input[datafld=selected]").val(""); //clear checkbox
		var row = parseInt(jQuery(selectedEntry).find("input[datafld=selected]").attr("record"));  //get row number 
		if(!isNaN(row)){
			recordset.AbsolutePosition(row);
			recordset.Fields("Selected").setValue("0");
		}
	}			

	selectedEntry = null;
	jQuery("#divFileList").html("");
	SetAcquireOptionDefaults();
}//--end DeselectEntry

/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: SelectedHasFiles
 * checks if selected entry has file attachments
 * Returns: boolean - true or false
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function SelectedHasFiles()
{
	if(!selectedEntry) {return false;}

	var recordset = xmlMailViewData.recordset;
	var row = parseInt(jQuery(selectedEntry).find("input[datafld=selected]").attr("record"));  //get row number 
	if(!isNaN(row)){
		recordset.AbsolutePosition(row);
		return (recordset.Fields("hasfiles").getValue() == "1");
	}
	
	return false;
}//--end SelectedHasFiles


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: AcquireMessageSubject
 * imports the selected email subject to the current document
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function AcquireMessageSubject()
{
	if((jQuery("input[name=AcquireSubject]:checked").length == 0) || !selectedEntry) {return true;}
	//-- get subject and copy it into the source document----
	try{
		var row = parseInt(jQuery(selectedEntry).find("input[datafld=selected]").attr("record"));  //get row number 
		if(!isNaN(row)){
			var recordset = xmlMailViewData.recordset;		
			recordset.AbsolutePosition(row);
			jQuery("input[name=Subject]:first", srcDoc).val(recordset.Fields("Subject").getValue());
		}		
	return true;
	}catch(e){
		window.top.Docova.Utils.messageBox({prompt: "Message subject acquire failed due to the following error: " + e , icontype: 4,  title: "Mail Acquire", width: 400});
		return false;
		}
}//--end AcquireMessageSubject

/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: AcquireMessageBody
 * imports the selected email body text to the current document
 * Inputs: msgText - plain text or html body content 
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function AcquireMessageBody(msgText)
{
	if((jQuery("input[name=AcquireBody]:checked").length == 0) || !selectedEntry || srcDocInfo.TextContentType=="") {return true;}
	//-- take message text and copy it into the source document----
	//------------------------------------------------------------------------------------------------	
	try{
			if(srcDocInfo.TextContentType=="HTML"){
				//html content editor
				var divider = "<br/><hr/><br/>";

				if(srcWindow.tinyMCE){
					var docTextContent = srcWindow.tinyMCE.activeEditor.getContent();
					docTextContent += (docTextContent != "")? divider + msgText : msgText;
					srcWindow.tinyMCE.activeEditor.setContent(docTextContent, {format : 'html'});
				}else if(jQuery("#dEdit0", srcDoc).length > 0){
					var curval = jQuery("#dEdit0", srcDoc).html();						
					curval += (jQuery(curval).text().trim() != "") ? divider : "";
					curval += msgText;					
					jQuery("#dEdit0", srcDoc).html(curval);										
				}			
			}
			else{
				//text area
				var divider = "\r\r---------------------------------------------------------------------------------------\r\r";
				var curval = jQuery("#Body", srcDoc).val();				
				curval += (curval != "") ? divider : "";
				curval += msgText.replace("&lt;", "<").replace("&gt;", ">");
				jQuery("#Body", srcDoc).val(curval);				
			}
			return true;
	}catch(e){
		window.top.Docova.Utils.messageBox({prompt: "Message text acquire failed due to the following error: " + e , icontype: 4,  title: "Mail Acquire", width: 400});
		return false;
		}
}//--end AcquireMessageBody

/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: AcquireMessageFiles
 * imports the selected email file attachments to the current document
 * Inputs: selectedFiles - string array - attachment file paths
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function AcquireMessageFiles(selectedFiles)
{
	if((jQuery("input[name=AcquireFiles]:checked").length == 0) || !selectedEntry || (jQuery("input[name=FileSelect]:checked").length == 0) || !srcDocInfo.HasAttachmentsSection) {return true;}

	//------------------------------------------
	if(selectedFiles.length ==0){
		//nothing selected
		window.top.Docova.Utils.messageBox({prompt: "Please select the files to acquire.", icontype: 3, title: "Mail Acquire", width: 400});
		return false;
	} 
	
	//------------------------------------------
	try{
		var maxFiles = srcWindow.GetAvailableFileCount();
		//----- check if the source document can accept the selected files
		if(maxFiles != -1 && selectedFiles.length > maxFiles){
			var errorMsg = (maxFiles == 0)? "You can not attach any more files to the current document." : "You can attach only " + maxFiles + " file(s) to the current document.";
			window.top.Docova.Utils.messageBox( {prompt: errorMsg , icontype: 3, title: "Mail Acquire", width: 400});
			return false;
		}
		
		var up = srcWindow.DLIUploader1;
		if(up == undefined || up == null){
			return false;
		}		
		for(i = 0; i<selectedFiles.length; i++){
			if (up.UploadFile( selectedFiles[i]) == false){
				window.top.Docova.Utils.messageBox({prompt: "Unable to add mail attachment file to upload list. Filepath: [" + selectedFiles[i] + "]", title: "Mail Acquire", width: 400});
			}else{
				srcWindow.tmpFilePaths[srcWindow.tmpFilePaths.length]=selectedFiles[i];
			}
		}
		return true;
	}
	catch(e){
		window.top.Docova.Utils.messageBox({prompt: "Message file acquire failed due to the following error: " + e , icontype: 4,  title: "Mail Acquire", width: 400});
		return false;
	}
	return false;
}//--end AcquireMessageFiles


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: SetAcquireOptionDefaults
 * sets the display and selection defaults in the acquire options section
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function SetAcquireOptionDefaults()
{	
	var hasFiles = SelectedHasFiles();
	
	//-------------------------------------------------------
	// set default checkbox/radio button values
	jQuery("input[name=AcquireSubject]").prop("checked", "");
	jQuery("input[name=AcquireBody]").prop("checked", "");
	jQuery("input[name=AcquireFiles]").prop("checked", "");
	jQuery("input[name=AcquireOptionFiles]").prop("checked", ""); 
	jQuery("input[name=FileSelect]").prop("checked", "");		
	
	//---- enable/disable buttons ---
	jQuery("#spanAcquireSubject").prop("disabled", (selectedEntry)? "" : "disabled");
	jQuery("#spanAcquireBody").prop("disabled", (selectedEntry && srcDocInfo.TextContentType!="")? "" : "disabled");
	jQuery("#spanAcquireFiles").prop("disabled", (selectedEntry && srcDocInfo.HasAttachmentsSection && hasFiles)? "" : "disabled");
	jQuery("#spanAcquireOptionFiles").prop("disabled", "disabled").hide();
	jQuery("#divFileList").prop("disabled", "disabled").hide();
}//--end SetAcquireOptionDefaults

/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: SetFileAcquireOption
 * sets the display and selection defaults in the acquire options section
 * Inputs: fileSelect - element - radio button element
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function SetFileAcquireOption(fileSelect)
{
	if(fileSelect.checked){
		jQuery("#spanAcquireOptionFiles").prop("disabled", "").show();
		jQuery("input[name=AcquireOptionFiles][value=A]").prop("checked", "checked");
		jQuery("#divFileList").prop("disabled", "disabled").show();
		jQuery("input[name=FileSelect]").prop("checked", "checked");
	}
	else{
		jQuery("#spanAcquireOptionFiles").prop("disabled", "disabled").hide();
		jQuery("#divFileList").prop("disabled", "disabled").hide();
	}
}//--end SetFileAcquireOption

/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: SetAcquireOptionFiles
 * sets the display and selection defaults in the acquire options section
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function SetAcquireOptionFiles()
{
	if(jQuery("input[name=AcquireOptionFiles][value=S]:checked").length > 0){
		//allow selection
		jQuery("#divFileList").prop("disabled", "").show();
	}

	if(jQuery("input[name=AcquireOptionFiles][value=A]:checked").length > 0){
		//enable all files
		jQuery("input[name=FileSelect]").prop("checked", "checked");
		//dispable selection
		jQuery("#divFileList").prop("disabled", "disabled").show();
	}	
}//--SetAcquireOptionFiles


/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: GetEntryInfo
 * collects information about the selected (highlighted ) entry
 * Inputs: id - string - unid of selected mail record
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function GetEntryInfo(id)
{
	var curEntry = xmlMailDocs.selectSingleNode("viewentries/viewentry[id='" + id + "']");
	if(curEntry == null){
		return false;
	}

	//---------------------------------------------
	var fileNodeList = curEntry.selectNodes("attachments/attachment");
	if(fileNodeList.length == 0) {
		return false;
	}
	entryListNode = 	curEntry.selectSingleNode("attachments");

	//---------------------------------------------
	// get style sheet
	if (window.DOMParser)
  	{
  		var parser=new DOMParser();
  		xmlMailAttachmentStyle=parser.parseFromString(jQuery("#xmlMailAttachmentStyle").text(),"text/xml");
	}else{
		return false;
	}			
	// create an instance of XSLTProcessor
	var processor = new XSLTProcessor();
	// configure the processor to use our stylesheet 
	processor.importStylesheet(xmlMailAttachmentStyle);
	// transform and insert into existing element
	var newNode = processor.transformToFragment(entryListNode, document);
	jQuery("#divFileList").get(0).appendChild(newNode);
}//--end GetEntryInfo



/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: CleanupTempData
 * cleans up any temporary attachments created by the acquire process
 * Inputs: filelist - string  array - array of file paths
 * Returns: boolean - true if successful, false otherwise
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function CleanupTempData(filelist)
{
	var result = true;
	//------------------------------------------------------------------------------------------------	
	for(var a=0; a<filelist.length; a++){
		if(filelist[a] != ""){
			result = window.top.DocovaExtensions.deleteFile(filelist[a]);
		}
	}

	return result;
}//--end CleanupTempData




/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: CompleteDialog
 * imports any selected entries and returns the total imported record count
 * Inputs: cb - callback function to call on completion
 * Returns: integer or boolean - false if no records imported, otherwise integer containing total imported 
 *                  record count
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function CompleteDialog(cb)
{
	//-- selection of components/elements within a single email
	if(docInfo.AcquireType == "S"){	
		cb(AcquireSelected());
	}else{  //-- selection of entire emails rather than components/elements of a single email
		ImportSelected({"cb" : cb});	
	}
}//--end CompleteDialog

/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: GetImportCount
 * returns the total number of records imported
 * Returns: integer - total number of records imported
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function GetImportCount(){
	return importedCount;
}//--end GetImportCount

/*-------------------------------------------------------------------------------------------------------------------------------------------- 
 * Function: convertInlineImgReferences
 * Given an HTML text string searches for inline images in the format of 
 * <img src="cid:someimag.jpg@01939.8383"> and strips the cid: and @ components to just leave the 
 * base image name
 * Inputs: msgText - string - html message body
 * Returns: text - html message body with any inline images converted
 *------------------------------------------------------------------------------------------------------------------------------------------- */
function convertInlineImgReferences(msgText){
	var convertedMsg = msgText;
	convertedMsg = convertedMsg.replace(/(<img.+src=")cid:(.*?)@(.*?)"/g, '$1$2"');
	return convertedMsg;
}
</script>
<style>
   #tblContainer {
         width:100%; 
         border-spacing: 0;
         border: solid 1px silver;
   }
   #tblContainer tr.viewHeader{
         background-color: #ECE9D8;
   }
   #tblContainer td.Folders {
        width: 200px;
         border-right: solid 1px silver;
  }
   #divDocCount {
         display: inline;
         line-height:25px;
   }
   #divScrollButtons {
         float: right; 
         padding:3px 22px 3px 3px; 
         line-height:15px;
         color:black;
   }
   #divSearch {
        display: inline; 
   }
    #inpQuery{
        width: 200px;
        height: 14px;
    }
   button {
      height: 20px;
   }
   #btnFTSearch > span{
    display: inline !important;
   }
   #btnFTClear > span {
    display: inline !important;
   }
   #divSection1 {
      width:200px; 
      height:380px;
   }
   #divMailRecords {
        width:100%; 
        height:380px;  
        overflow-x:none; 
        overflow-y:auto;
   }

   #tblMailRecords th {
         border-right: solid 1px silver;
   }
   #tblMailRecords th.col1{	/*selection column*/
         width: 20px;
   }
   #tblMailRecords th.col2{       /*who column*/
         width: 100px;
   }
   #tblMailRecords th.col3{         /*date column*/
         width: 70px;
   }
   #tblMailRecords th.col4{         /*time column*/
         width: 75px;
   }
   #tblMailRecords th.col5{        /*size column*/
         width: 50px;
   }
   #tblMailRecords th.col6{        /*attachment icon column*/
         width: 20px;
   }
   #tblMailRecords th.col7{        /*subject column*/
   }
   #tblMailRecords td.col1{
         border-right: solid 1px silver;
         margin: 0;
         padding: 0;
   }
   #tblAcquireOptions {
         width:100%; 
         border: solid 1px silver;
         margin-top: 5px;
         height: 80px;
   }
   #tblAcquireOptions td{
         vertical-align: top;
   }
   #divAcquireOptionAll {
        display: inline;
   }
   .boldtext {
         font-weight: bold;
   }
</style>
<script type="text/javascript">
  var foldercontrolconfig = {
	"MaxHeight" : 380,
	"LoadAllAtStartup" : false,
	"LibraryUrl" : "",
	"LoadUrl" : "",
	"LoadUrlPartial" : "",
	"LoadDocsUrl" : "",
	"DocumentService" : "",
	"FolderService" : "",
	"FolderAccessUrl" : "",
	"FolderPropertiesUrl" : "",
	"FavoritesUrl" : "",
	"FavoritesService" : "",
	"UrlType" : 1,
	"ReadLimit" : 1000,
	"onFoldersReady" : "openDefaultFolder",
	"onClick" : "OpenView",
	"onDoubleClick" : "",
	"onContextMenu" : "",
	"onBeforeFolderCreate" : "",
	"onFolderCreate" : "",
	"onAfterFolderCreate" : "",
	"onBeforeDocumentCreate" : "",
	"onDocumentCreate" : "",
	"onBeforeFolderRename" : "",
	"onFolderRename" : "",
	"onAfterFolderRename" : "",
	"onBeforeFolderDelete" : "",
	"onFolderDelete" : "",
	"onAfterFolderDelete" : "",
	"onBeforeDocumentDelete" : "",
	"onDocumentDelete" : "",
	"onAfterDocumentDelete" : "",
	"onBeforeAddFavorite" : "",
	"onAddFavorite" : "",
	"onAfterAddFavorite" : "",
	"onBeforeDeleteFavorite" : "",
	"onDeleteFavorite" : "",
	"onAfterDeleteFavorite" : "",
	"onBeforeOpenInNewTab" : "",
	"onOpenInNewTab" : "",
	"onAfterOpenInNewTab" : "",
	"onBeforeAddFiles" : "",
	"onAddFiles" : "",
	"onAfterAddFiles" : "",
	"onBeforeFileExport" : "",
	"onFileExport" : "",
	"onAfterFileExport" : "",
	"onBeforeFolderCopy" : "",
	"onFolderCopy" : "",
	"onAfterFolderCopy" : "",
	"onBeforeFolderCut" : "",
	"onFolderCut" : "",
	"onAfterFolderCut" : "",
	"onBeforeFolderPaste" : "",
	"onFolderPaste" : "",
	"onAfterFolderPaste" : "",
	"onPropertiesMenu" : "",
	"onSubscriptionClick" : "",
	"onBeforeExpandAll" : "",
	"onAfterExpandAll" : "",
	"onBeforeCopyFolderLink" : "",
	"onCopyFolderLink" : "",
	"onAfterCopyFolderLink" : ""
  }
</script>

<script id="xmlMailAttachmentStyle" type="text/xml">
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" >
<xsl:output method="html" encoding="utf-8" indent="no"/>
<xsl:template match="attachments">
        <div>
	<xsl:apply-templates select="attachment"/>
         </div>
</xsl:template>
<xsl:template match="attachment">
	<xsl:apply-templates select="filename"/>
</xsl:template>
<xsl:template match="filename">
          <input name="FileSelect" type="checkbox">
             <xsl:attribute name="value">
                <xsl:value-of select="."/>              
             </xsl:attribute>
          </input>
          <xsl:value-of select="."/>
    &#xa0;&#xa0;
</xsl:template>
</xsl:stylesheet>
</script>
</head>
<body text="#000000" bgcolor="white" class="dlgBody" SCROLL="no" onload="InitDialog()">
<form method="post" action="{{ path('docova_outlookacquiremessages') }}?OpenForm&ParentUNID={{ folder.getId }}&Seq=1" enctype="multipart/form-data" name="_dlgOutlookMailAcquireMessages">
<div id="dlgContentNh">
<div class="viewHeader">Mail for <Computed Value></div>
<table id="tblContainer">
  <tr class="viewHeader">
    <td class="Folders">
       <img src="{{ asset('bundles/docova/images/outlook.jpg') }}" /> Microsoft Outlook <span id="olVersion"></span><br><br>
       <div>Folders and Views</div>
    </td>
    <td class="Documents">
       <div>
           <div id="divDocCount">Documents <span id="spanRecCount"></span></div>
           <div id="divScrollButtons" style="display:none;">
               <span id="spanScrollFirst" title="First page"></span> 
               <span id="spanScrollFastBack" title="Previous page group"></span> 
               <span id="spanScrollBack" title="Previous page"></span> 
               <span id="spanScrollFwd" title="Next page"></span> 
               <span id="spanScrollFastFwd" title="Next page group"></span> 
               <span id="spanScrollLast" title="Last page"></span> 
             </div>
         </div>
         <div id="divSearch"><span>Search for:</span><input id="inpQuery" type="text"/>&nbsp;<button id="btnFTSearch" onclick="ViewFTSearch();return false;">Search</button>&nbsp;<button id="btnFTClear"  onclick="ViewFTClear();return false;">Clear</button></div>
     </td>
   </tr>
   <tr>
     <td class="Folders resizable">
         <!-------------- Folder control for mail folder navigation ----------------->
         <div id="divSection1">
              <script  src="{{ asset('bundles/docova/js/loaderFolderControlMailAcquire.js') }}" language="javascript"></script>
         </div>
     </td>
     <td class="Documents">
         <!------ mail view data table -------->
         <div id="divMailRecords">
             <table id="tblMailRecords" class="viewTable"  datasrc="#xmlMailViewData" cellspacing="0" cellpadding="0">
               <thead>
                   <tr>
                       <th class="col1">&nbsp</th>
                       <th class="col2">Who</th>
                       <th class="col3">Date</th>
                       <th class="col4">Time</th>
                       <th class="col5">Size</th>
                       <th class="col6">&nbsp;</th>
                       <th class="col7">Subject</th>
                  </tr>
               </thead>
              <tbody id="otblMailRecords">
                <tr onclick="SelectEntry(this)">
                  <td class="col1"><input class="selectioncheckbox" type="checkbox" datafld="selected"  /></td>
                  <td class="col2"><span datafld="who"></span></td>
                  <td class="col3"><span datafld="date"></span></td>
                  <td class="col4"><span datafld="time"></span></td>
                  <td class="col5"><span datafld="size"></span></td>
                  <td class="col6"><span datafld="icon" dataformatas="html"></span></td>
                  <td class="col7"><span datafld="subject"></span></td>
                </tr>
             </tbody>
          </table>
       </div>
     </td>
   </tr>
  </table>
<!-- Selected message acquire options -->
  <div id="divAcquireOptions" style="display:none;">
  <table id="tblAcquireOptions">
    <tr>
       <td>
         <span class="boldtext">Acquire:</span>&nbsp; &nbsp;
         <div id="divAcquireOptionAll">
            <label><span id="spanAcquireSubject" disabled="disabled"><input type="checkbox" name="AcquireSubject" value="Subject"/>Subject</span></label>&nbsp;
            <label><span id="spanAcquireBody" disabled="disabled"><input type="checkbox" name="AcquireBody" value="Body" />Text</span></label>&nbsp;
            <label><span id="spanAcquireFiles" disabled="disabled"><input type="checkbox" name="AcquireFiles" value="Files" onclick="SetFileAcquireOption(this);"/>Files</span></label>&nbsp;<span id="spanAcquireOptionFiles" style="display:none;" disabled="disabled">(<label><input type="radio" name="AcquireOptionFiles" value="A" checked=true onclick="SetAcquireOptionFiles();"/>All</label><label><input type="radio" name="AcquireOptionFiles" value="S" onclick="SetAcquireOptionFiles();"/>Selected</label>)</span>
        </div>
       </td>
   </tr>
   <tr>
      <td>
            <div id="divFileList" disabled="disabled" class="fileList"></div>
      </td>
   </tr>
   </table>
  </div>
</div>
<div style="display:none;">
<!--------------------------------------------- DLI Uploader Section ---------------------------------------------------->
<input name="MultiFileCtrlStorage" value="" style="display:none">
<input name="RefreshStorage" value="" style="display:none"> 
<input id="BaseUpld" style="display: none" type="file" name="Uploader_DLI_Tools[]">
<div class="ui-widget ui-widget-content itemcontainer" id="attachDisplay"></div>
</div>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/jquery/jquery.ui.widget.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/jquery/jquery.fileupload.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src="{{ asset('bundles/docova/jquery/jquery.iframe-transport.js') }}" charset="UTF-8"></script>
<script language="JavaScript" type="text/javascript" src ="{{ asset('bundles/docova/jquery/jQueryFileDownload.js') }}"></script>
<script language="JavaScript" type="text/javascript" src ="{{ asset('bundles/docova/js/Uploader.js') }}"></script>
<script type="text/javascript">
	jQuery(document).ready(function(){
		jQuery.support.cors = true;
		DLIUploader1= new Docova.Uploader({ 
				divId : "attachDisplay",
				AttachmentNames : "",
				AttachmentLengths:  "",
				AttachmentDates:  "Incorrect data type for operator or @Function: Time/Date expected",
				FileCtrlId: "BaseUpld",
				ListType: "D"
			});
		DLIUploader1.init();
	});
</script>
<span style="display:none;">
<input name="SyncCreate" value="">
<input name="SyncRemoveFile" value=""> 
<input name="SyncUnid" value="">
<input name="OFileNames" value=""> 
<input name="OFileDates" value=""> 
<input name="tmpAddedFiles" value="" id="tmpAddedFiles">
<input name="tmpEditedFiles" value="" id="tmpEditedFiles"> </font>
<textarea name="body" id="Body" rows="7" cols="50"></textarea>
<font size="2">
<input name="SendTo" value="">
<input name="Sender" value="">
<input name="PostedDate" value="">
<input name="Subject" value="">
<input name="msgSize" value="">
<input name="CopyTo" value="">
<input name="MsgAttachmentCount" value="">
<input name="msgAttachmentNames" value="">
<input name="msgImportType" value="">
<input name="msgAttachmentsSize" value="">
<input name="importOrigin" value="Folder">
<input name="ParentDocKey" value="">
<input name="ParentDocID" value=""> </font></span>
	</form>

</body>
</html>
