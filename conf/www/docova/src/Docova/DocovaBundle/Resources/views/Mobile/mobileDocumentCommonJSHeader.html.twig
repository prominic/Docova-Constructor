<script language="JavaScript" type="text/javascript">

//to show jqm spinner
function showSpinner()
{
	$.mobile.loading( 'show', {  text: "processing ...", textVisible: true, theme: "a", textonly: false,	html: ""  	});

}

function hideSpinner()
{
	$.mobile.loading( "hide" );
}

function editDocumentFromWorkflowScreen(){
	var editDocUrl= $(location).attr('href');
	//editDocUrl=editDocUrl.replace("?OpenDocument", "?EditDocument");
	editDocUrl=editDocUrl.replace("ReadDocument", "EditDocument");
	$(location).attr('href',editDocUrl);
}

//--- updates docInfo from stub document data stored in the master home database -----
function UpdateStubInfo()
{
     var result = false;

	//--- processing agent url
	var getDataURL = docInfo.ServerUrl + "/" + docInfo.NsfName + "/DocumentServices?OpenAgent"

	//--build the GETSTUBINFO request
	var request="";
	request += "<Request>";
	request += "<Action>GETSTUBINFO</Action>";
	request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "<Unid>" + docInfo.DocID + "</Unid>";
	request += "</Request>";

     jQuery.ajax({
        url: getDataURL, 
        data: request,       
        cache: false, 
        async: false,
        type: 'POST',
        contentType: "text/xml",
        dataType: "xml"
      })
      .success( function (data, textStatus, jqxhr) {
    			 try{
				var $xml = jQuery(data);
				if($xml.find("Result:first").text() == "OK"){
					var $xmlRet1 = $xml.find('Result[ID="Ret1"]');
					docInfo.LastModifiedBy= $xmlRet1.find("LastModifiedBy").text();
  					docInfo.LastModifiedDate=$xmlRet1.find("LastModifiedDate").text();
					docInfo.LastModifiedServer=$xmlRet1.find("LastModifiedServer").text();
					docInfo.isReplicated=$xmlRet1.find("IsReplicated").text();
					docInfo.LockEditor=$xmlRet1.find("LockEditor").text();
					docInfo.LockDate=$xmlRet1.find("LockDate").text();
					docInfo.LockServer=$xmlRet1.find("LockServer").text();
					docInfo.LockStatus=$xmlRet1.find("LockStatus").text();
					docInfo.isLockEditor=$xmlRet1.find("IsLockEditor").text();
					docInfo.isLocked=$xmlRet1.find("IsLocked").text();
					result = true;
				}
			  }catch(e){}
      })
      .error( function (jqxhr, ajaxOptions, thrownError) {
      });
    
	return result;
}

// boolean, checks if the document can be modified at this moment
function CanModifyDocument(noMsg)
{
	if(!docInfo.isDocBeingEdited){
		if (!UpdateStubInfo()){
		   if(noMsg){return false;}
		   alert("An error occurred retrieving access information.");
		   return false;
		}
	}
	
	var msg="";
	if(docInfo.DocAccessLevel < "3"){
		if(noMsg){return false;}
		alert("You do not have sufficient access to modify this document.");
		return false;
	}
/*
	if(!docInfo.isReplicated){ 
		if(noMsg){return false;}
		msg += "The document updates done on " + docInfo.LastModifiedDate + " by " + docInfo.LastModifiedBy;
		msg += " on server " + docInfo.LastModifiedServer + " have not yet replicated to your server. ";
		msg += "You cannot modify the current document until the latest changes are available to you. Please try again in few minutes.";
		alert(msg);
		return false;	
	}
*/
	if(docInfo.LockStatus=="2"){ 
		if(noMsg){return false;}
		msg += "The document has been locked on " + docInfo.LockDate + " by " + docInfo.LockEditor;
		msg += " on server " + docInfo.LockServer + ". ";
		msg += "Please wait until the other user releases document lock and latest changes are available to you.";
		alert(msg);
		return false;	
	}
	
	return true;
}


function UserHasFilesCheckedOut()
{
	//TODO - add check here for checked out files
	return false;
}


//***************************************************
//* SaveAndClose
//* function to save current navigation state and submit the current document
//* if in edit mode, or navigate back if in read mode
function SaveAndClose()
{
	// check if you editing from workflow screen
	var isWorkflowSave=false;
	if (docInfo.isMobileWorkflowSave =="1"){
		isWorkflowSave=true;
	}

	if(! docInfo.isDocBeingEdited) {
           history.back();return false;
     }
	var $page = jQuery("#" + jQuery.mobile.activePage.attr('id'));
	allowClose = true; //to let the onUnload event fall through
	//----- get Docova Editor ----------------
      try {
//            saveDocovaRichText();
      }
      catch (e) {}	
	//----- get rich editor data -----------------	
	try	{
//			_getEditAppletData();
		}
	catch (e) {}
	try{
//		tinyMCE.triggerSave();
		}
		catch(e) {}

	//---------------------------------------------
	if(!docInfo.isWorkflowCreated && docInfo.CreateWorkflowInDraft && $page.find("[name=tmpWorkflowDataXml]:first").val()==""){
		ProcessWorkflow("CREATE");
	}
    
    if (isWorkflowSave )
    {
		document.forms[0].submit(); 
    }else
    {
	      var $form = $page.find("form:first");
	      if($form.length > 0){
	          //skip back past the current document if it was an existing doc being edited
	          var skip = (!docInfo.isNewDoc && docInfo.isDocBeingEdited) ? -1 : 0;
	          storeHistoryToCookie(skip);      //Declared in mobile.htm page 
	
	      	$form.attr("data-ajax","false"); 
	          $form.submit();
	      }
      }
    return true;
}

//-------- release the document --------
function ReleaseDocument(keepVersion)
{
     var result = false;
     
	//----Run custom on before release JS function if identified---//
	if(!CustomOnBeforeReleaseHandler()){
		return false;
	}
	
	if (UserHasFilesCheckedOut())
	{
		alert("Before you can release this document you must check in any files you have checked out")
		return false
	}
	
	var userComment = "";
	var requestOptions="";

//*** TODO - add dialog to get new version info if needed				
	if(docInfo.EnableVersions && !keepVersion && false)  //&& false added temporarily to disable this code TODO - fix
		{
			var params = new Array();
			params[0] = docInfo.AvailableVersionList; 
			params[1] = docInfo.FullVersion; 
			params[2] = docInfo.isInitialVersion; 
			params[3] = docInfo.StrictVersioning;

			var dlgUrl ="/" + NsfName + "/" + "dlgWorkflowDocRelease?OpenForm";
			var dlgSettings = "dialogHeight:270px;dialogWidth:435px;center:yes; help:no; resizable:no; status:no;";
			var retVal = window.showModalDialog(dlgUrl,params,dlgSettings); //Display the version dialog
			if( !retVal ) {return false; } //cancelled
			if( !retVal[0] ) {return false; } //version was not provided
			requestOptions += "<Version>" + retVal[0] +  "</Version>";
			requestOptions += "<UserComment><![CDATA[" + retVal[1] +  "]]></UserComment>";
		}
	else
		{
			var userComment = GetComment("Please enter the release comments (optional):", false);
			requestOptions += "<Version>" + docInfo.FullVersion + "</Version>";
			requestOptions += "<UserComment><![CDATA[";
			requestOptions += (userComment)? userComment : ""; //userComment will be false if the dialog is cancelled
			requestOptions += "]]></UserComment>";	
		}
	var request="";
	//--build the RELEASEVERSION request
	request += "<Request>";
	request += "<Action>RELEASEVERSION</Action>";
	request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "<Unid>" + docInfo.DocID + "</Unid>";
	request += requestOptions;
	request += "</Request>";

	//--- process on server --
	if(docInfo.isDocBeingEdited){
		doc.tmpRequestDataXml.value=request;
		//-----Set tmpVersion field to make available for onAfterRelease event------
		if(docInfo.EnableVersions && !keepVersion && false){   //&& false added temporarily to disable this code TODO - fix
			var $page = jQuery("#" + jQuery.mobile.activePage.attr('id'));
			$page.find("[name=tmpVersion]:first").val(retVal[0]);
		}else{
			var $page = jQuery("#" + jQuery.mobile.activePage.attr('id'));
			$page.find("[name=tmpVersion]:first").val(docInfo.FullVersion);
		}
		//-----Run custom on after release handler				
		if(!CustomOnAfterReleaseHandler()){
			return false;
		}
		
		HandleSaveClick();
		return;
	}
	//--- processing agent url
	var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/WorkflowServices?OpenAgent"

	jQuery.ajax({
        url: url, 
        data: request,       
        cache: false, 
        async: false,
        type: 'POST',
        contentType: "text/xml",
        dataType: "xml"
      })
      .success( function (data, textStatus, jqxhr) {
    			 try{
				var $xml = jQuery(data);
				if($xml.find("Result:first").text() == "OK"){
					SaveAndClose();
					result = true;
				}
			  }catch(e){}
      })
      .error( function (jqxhr, ajaxOptions, thrownError) {
      });
	
	return result;
}

// ---------- workflow/lifecycle comment dialog --------
function GetComment(fieldMsg, required)
{
      var result = false;
      var promptmsg = (fieldMsg)? fieldMsg : "Add a comment";
      var valueneeded = (required == undefined) ? false : required;

	var oktoexit = true;
      do{
         result = prompt(promptmsg, "");
         oktoexit = (((result == null || result == "") && valueneeded) ? false : true);
      }
      while (! oktoexit);
      
      return result;
}


//--------------------------------------------------------------------
// ValidateFields: document fields validation called from IsValidData function
//---------------------------------------------------------------------
function ValidateFields(items, hideErrorMsg){
	var fieldlist = [];
		
    if (typeof items == "string"){
		var itemList = items.split(";");
		if(itemList.length == 0) { return true; }
		for (var k=0; k<itemList.length; k++){
		   var itemProperties = itemList[k].split("~");
		   fieldlist.push({"fieldname" : itemProperties[0],
		                   "fieldlabel" : ((itemProperties[2])? itemProperties[2] : itemProperties[0]),
						   "datatype" : itemProperties[1]
		   })
		}		
	}else if (typeof items == "object"){
	    if (items.length == 0) { return true; }
		fieldlist = items;
	}else{
	    return false;
	}
	
	if(fieldlist) {
		var msgPrefix = "The following fields did not pass the validation:\n\n"; 
		var msg = "";
		var msgSuffix = "\nPlease complete/correct the invalid entries.";
		
		var $page = jQuery("#" + jQuery.mobile.activePage.attr('id'));
		
		for(i in fieldlist){
			var jqField = $page.find("[name=" + fieldlist[i].fieldname + "]:first");	
			if (jqField.length > 0){		
			
			  	var fieldvalue = (jqField.val()) ? jqField.val() : jqField.text();  
			  	if(fieldvalue == "") { 
				  		msg += "- " + fieldlist[i].fieldlabel  + (fieldlist[i].message == undefined ? "" : " - " + fieldlist[i].message ) +"\n" 
			  }else{
				switch (fieldlist[i].datatype){
				case "text":
				    break;
				case "date":
				     //var dateval = new Date(fieldvalue);
				     var dateval = new Date(fieldvalue.replace(/\-/g,'\/').replace(/[T|Z]/g,' '));  //seems to overcome issues on some browsers withh date formats
				     if (fieldlist[i].weekday != undefined){
				     	var weekday = fieldlist[i].weekday;
				     	var dow = new Array("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday");    
				     	if (weekday != dow[dateval.getDay()]){
					        msg += "- " + fieldlist[i].fieldlabel + (fieldlist[i].message == undefined ? " - enter a date that falls on a " +  weekday : " - " +fieldlist[i].message)  + "\n";
					     }
				     }
					break;
				case "currency":
				     var number = Number(fieldvalue.replace(/[^0-9\.]+/g,""));
				     if (isNaN(number)){
				     	msg += "- " + fieldlist[i].fieldlabel + " - enter a currency value\n" 
				     }else if (fieldlist[i].greaterthan != undefined){
					    	if (number <= fieldlist[i].greaterthan){
					        msg += "- " + fieldlist[i].fieldlabel + (fieldlist[i].message == undefined ? " - enter an amount greater than " + fieldlist[i].greaterthan : " - " + fieldlist[i].message) + "\n";
					     }
					}		
				     break;
				case "number":
				     var number = Number(fieldvalue.replace(/[^0-9\.]+/g,""));
				     if (isNaN(number)){
				     	msg += "- " + fieldlist[i].fieldlabel + " - enter a numeric value\n" 				
	     			}else if (fieldlist[i].greaterthan != undefined){
					    	if (number <= fieldlist[i].greaterthan){
					        msg += "- " + fieldlist[i].fieldlabel + (fieldlist[i].message == undefined ? " - enter an amount greater than " + fieldlist[i].greaterthan : " - " + fieldlist[i].message) + "\n";
					     }				
					}
				    break;
				default:
				}
			}	
			}
		}	
		
		if(msg != "") {
			if (!hideErrorMsg){
				alert(msgPrefix + msg + msgSuffix);
			}
			return false;
		} 			
	}
	return true;
}

</script>



<script language="JavaScript" type="text/javascript">

// onchange handler for the workflow template selection
function SwitchWorkflow(processId)
{
if(!processId)
 {
  document.all.DataEdit.style.display="none";
  return false;
 }

// get new data

var wfUrl =  docInfo.PortalWebPath +  "/xViewData.xml?ReadForm&view=xmlWorkflowStepsByProcessId&col=2&lkey="  + processId;

var wfData = document.getElementById("ProcessData");
var xmlDoc = wfData.XMLDocument;



var xmlObj = new ActiveXObject ("Microsoft.XMLHTTP"); 
xmlObj.open ("GET", wfUrl, false);
xmlObj.send();
xmlDoc.async = false;   
xmlDoc.loadXML(xmlObj.responseXML.xml)


return true;
}


function insertWorkflow( processId, insertBeforeItemTitle )
{
if (!processId) { 
 document.all.DataEdit.style.display="none"; 
     return false; 
} 

// get new data 
var wfUrl = docInfo.PortalWebPath +  "/xViewData.xml?ReadForm&view=xmlWorkflowStepsByProcessId&col=2&lkey="  + processId; 
var wfData = document.getElementById("ProcessData"); 
var xmlDoc = wfData.XMLDocument; 

//Changed by Sandeep to do a get first through xmlhttp and then do the load 
//var oXml =new ActiveXObject("Microsoft.XMLDOM"); 
//oXml.async = false 

var xmlObj = new ActiveXObject ("Microsoft.XMLHTTP"); 
xmlObj.open ("GET", wfUrl, false); 
xmlObj.send(); 

var oXml =new ActiveXObject("Microsoft.XMLDOM"); 

oXml.async = false;   
oXml.loadXML(xmlObj.responseXML.xml) 


//load done above...disable this 
//oXml.load(wfUrl); 


if (oXml.parseError.errorCode != 0) { 
        var myErr = oXml.parseError; 
   alert ("You have error " + myErr.reason); 
} else { 
   //alert (oXml.xml); 
} 


var root =  oXml.documentElement; 
var currNode = xmlDoc.documentElement.lastChild; 

//remove the isCurrentItem flag if it is set. 
var fixNode= oXml.selectSingleNode('Documents/Document/wfIsCurrentItem[.="1"]' ); 
fixNode.firstChild.nodeValue = 0; 

if ( insertBeforeItemTitle != null ) { 
        var qry= 'Documents/Document[wfTitle="' + insertBeforeItemTitle + '"]'; 
//        alert(qry) 
        var insertBeforeNode = xmlDoc.selectSingleNode (qry) 
} 


for ( i=0; i < root.childNodes.length; i ++ ){ 
        var newNode = root.childNodes.item(i).cloneNode (true ); 
        xmlDoc.documentElement.insertBefore( newNode, insertBeforeNode ); 
} 

//renumber all the nodes 
var nodeList = xmlDoc.selectNodes( 'Documents/Document/wfOrder' ); 
if(nodeList.length ==0){ return false;} 
var txtnode; 
var ctr = 0; 
while( (objNode = nodeList.nextNode())){ 
                        var txtNode = objNode.firstChild; 
                        if ( txtNode != null ) { 
                                txtNode.nodeValue= ctr; 
                        }else{ 
                                txtNode = xmlDoc.createTextNode('wfOrder'); 
                                txtNode.nodeValue = ctr; 
                                objNode.appendChild ( txtNode ); 
                        } 
                        ctr++; 
} 

ProcessWorkflow("UPDATE"); 
return true; 
}


function isFieldCdata ( fieldname ){
     return false;  //TODO fix this for use in mobile
	var xmlDoc = ProcessData;

	//find the row we need to process...
	var isCdata = false;
	
	var fixNode = xmlDoc.selectSingleNode('Documents/Document/' + fieldname + '[0]');
	if ( fixNode != null ) {
		if ( fixNode.firstChild.nodeType == 4 ) isCdata = true;
	}

	return isCdata;
}

function handleCdataField ( key, field, newValue ){
	return; //TODO - update this function for use in mobile
	var table = document.all.tblDataEdit;
	var tbody = table.tBodies[key];
	if ( tbody ==null ) return;
	var row = tbody.rows[0];
	if ( row == null ) return;
	var tds = row.childNodes;
	for ( j = 0; j < tds.length; j ++){
		var elm = tds[j].firstChild;
	     if ( elm.dataFld == field ) elm.innerText = newValue;
	}

}



//---------- allows to customize a workflow step --------
function ChangeWorkflowStep(keyType, key, field, value, replaceToken, force )
{	var newValue;

	if(!HasWorkflowData()){
			return false;
		}

	if(keyType != "wfOrder" && keyType != "wfTitle"){
		return false;
	}
	
	if(field.toLowerCase() == "wfreviewerapproverlist") {field = "wfDispReviewerApproverList";}
	
	//check if field is a cData field
	var isCdata = isFieldCdata ( field );
	
	var currentStep = GetCurrentWorkflowStep();
	var currentStepNo = (currentStep)? jQuery(currentStep).find("wfOrder").text() : "0";
	var rs = jQuery(ProcessData).find('Document');
	for(var i=0; i<rs.length; i++)
	{
     	if(jQuery(rs[i]).find(keyType).text() == key){
			// found selected step, now check if it is still pending
			if(jQuery(rs[i]).find("wfOrder").text() <= currentStepNo){
				//step already completed, no changes allowed
				return false;
			}
			
			if ( replaceToken ) {
				newValue = jQuery(rs[i]).find(field).text().replace(replaceToken, value);
			}else{
				newValue = value;
			}
			
			 jQuery(rs[i]).find(field).text(newValue);
			//now lets manually update the value in the span tag if its a CDATA type node...
			if ( isCdata ){handleCdataField ( key, field, newValue )}
			 jQuery(rs[i]).find("Modified").text("1");
			return true;
		}
	}
	return false;
}

function ChangeWorkflowStepGroup(field, value, replaceToken )
{
	if(!HasWorkflowData()){
			return false;
		}

	if(field.toLowerCase() == "wfreviewerapproverlist") {field = "wfDispReviewerApproverList";}
	
	//check if field is a cData field
	var isCdata = isFieldCdata ( field );	

	var currentStep = GetCurrentWorkflowStep();
	var currentStepNo = (currentStep)? currentStep.Fields("wfOrder").Value : "0";
	var rs = doc.ProcessData.recordset;
	rs.MoveFirst
	while(!rs.EOF){
			if(rs.Fields("wfOrder").Value >= currentStepNo){
				if(replaceToken){
					newValue = rs.Fields(field).Value.replace(replaceToken,value);			
				}
				else{	
					newValue = value;
				}
				rs.Fields(field).Value = newValue;
				
				//now lets manually update the value in the span tag if its a CDATA type node...
				if ( isCdata ){handleCdataField ( rs.Fields("wfOrder").Value, field, newValue )}			
				rs.Fields("Modified").Value = "1";
			}
		rs.MoveNext;
	}
	return false;
}

//----- modifies the workflow data defaults -----
function SetDataDefaults(dataSource)
{
	// --- replace all instances of [Author] with the author's name ---
	if(docInfo.isDocBeingEdited)
		{
		if(!HasWorkflowData())
			{
				jQuery("#DataEdit").hide();
				return false;
			}
		jQuery("#DataEdit").show();
	
		var rs = jQuery(dataSource).find( 'Document' );
		if(rs.length > 0)
		{
		     rs.find("wfReviewerApproverList").each(function(){
		     	var tmpNames = jQuery(this).text();
		     	jQuery(this).text(tmpNames.replace("[Author]", docInfo.UserNameAB));
		     	jQuery(this).siblings("Modified").text("1");
		     });
		     rs.find("wfDispReviewerApproverList").each(function(){
		     	var tmpNames = jQuery(this).text();
		     	jQuery(this).text(tmpNames.replace("[Author]", docInfo.UserNameAB));
		     	jQuery(this).siblings("Modified").text("1");
		     });
	      }
	}
}

// --- sets the default properties of items loaded in the workflow data table ----
function SetItemProperties(dataTable)
{

	if(!HasWorkflowData())
		{
			return false;
		}
	if (dataTable.readyState == "complete" )
	{
		var docInfo = document.getElementById("info"); 
		var rs = ProcessData.recordset;
		if(rs.RecordCount == 0){return;}
		rs.MoveFirst;
		while(!rs.EOF)
		{
		if(rs.FIELDS.Count > 0)
			{
			if(rs.FIELDS("wfIsCurrentItem").Value =="1") //highlight current item
			{
				var textSpan = dataTable.rows[rs.AbsolutePosition].cells[0].getElementsByTagName("SPAN")[0];
				textSpan.runtimeStyle.fontWeight="bold";
				dataTable.rows[rs.AbsolutePosition].runtimeStyle.backgroundColor="#dfefff";
			}
			if(rs.FIELDS("wfStatus").Value=="Pending"  && docInfo.isDocBeingEdited )
				{
				//-- show name selection button next to pending entries with enabled customization ----- 
				var addressButton = dataTable.rows[rs.AbsolutePosition].getElementsByTagName("BUTTON")[0];
				addressButton.style.display = (rs.FIELDS("wfReviewerApproverSelect").Value)? "" : "none";
				}
			}
		rs.MoveNext
		}
	}
}

//--- select workflow participants for steps that can be customized----
function SelectParticipants(clickedObj)
{
	var rs = ProcessData.recordset;
	rs.AbsolutePosition = clickedObj.recordNumber;
	//----------------------------------
	var dialogType = (rs.Fields("wfType") == "Serial")? "single" : "multi";
	var ret = showNamePicker(rs.Fields("wfDispReviewerApproverList").Value, dialogType, "," ,true);
	if(ret == null) {return;}
	//----------------------------------
	rs.Fields("wfDispReviewerApproverList").Value = ret;
	rs.Fields("Modified").Value = "1";
	
	//if this is a cdata filed, then we need to refresh the html table manually...bug in recordset object with cdata type fields.
	if ( isFieldCdata ("wfDispReviewerApproverList" ) ) handleCdataField ( (clickedObj.recordNumber-1), "wfDispReviewerApproverList", ret )
	
	//--- process on server immediately if workflow was already created--
	if(docInfo.isWorkflowCreated)
		{
			ProcessWorkflow("UPDATE");
			rs.Fields("Modified").Value = "0";
			//HandleSaveClick();
		}
}

//-- starts workflow on the document ---
function StartWorkflow()
{
     
	//Provide a way to determine whether doc is just being saved or saved and submitted to wf.  Handy for validation purposes.
	wfInfo.wfStartTriggered = "1"
	
	if(!IsValidData()) {
		wfInfo.wfStartTriggered = "";
		return false;
	}
	
	if (UserHasFilesCheckedOut())
		{
			alert("Before you can start the workflow you must check in any files you have checked out")
			wfInfo.wfStartTriggered = "";
			return false
		}
		
	//----- Initial inquiry -----
	var submitChoice = confirm("You are about to start workflow process for this document.  Are you sure?");
	if (! submitChoice)
		{
			wfInfo.wfStartTriggered = "";
			return(false);
		}

	//----------------------------------
	if( ! ValidateWorkflow("Start")) {
		wfInfo.wfStartTriggered = "";
		return false;
	}
	//----------------------------------
	var $page = jQuery("#" + jQuery.mobile.activePage.attr('id'));
	$page.find("[name=isWorkflowStarted]:first").val(1);
	
	if  ( ! onWorkflowStart() ) { 		
		wfInfo.wfStartTriggered = "";
		$page.find("[name=isWorkflowStarted]:first").val("");
		return false;
	}
	
	var additionalHeader = "";

	var currentStep = GetCurrentWorkflowStep();
	if(currentStep) 
	{
	//--- process on server --
	var action = (docInfo.isWorkflowCreated)? "COMPLETE" : "START";

	if(ProcessWorkflow(action, additionalHeader))
		{	
			HandleSaveClick(true);
		}
	}

}


// ----- process the "Decline" action-----	
function DenyWorkflowStep()
{
	if(!HasWorkflowData())
		{
			return false;
		}
		
	if (UserHasFilesCheckedOut())
		{
			alert("Before you decline this workflow step you must check in any files you have checked out")
			return false
		}
		
	var additionalHeader = "";
	var currentStep = GetCurrentWorkflowStep();
	var userComment = "";
	
	if(currentStep)
		{
	//----- Initial inquiry -----
	var submitChoice = confirm("You are about to deny the approval.  Are you sure?");
	if (!submitChoice)
		{
			return(false);
		}
		var userComment = GetComment("Please specify the reason:", true);

		if( ! userComment ) {return false; }

		additionalHeader += "<UserComment><![CDATA[" + userComment +  "]]></UserComment>";
		
		//API HOOK
		
		if ( ! onDeny() ) { return false; }
		
		//--- process on server --
		if(ProcessWorkflow("DENY", additionalHeader))
			{
			//----- Add to additional comments subform section on document if set -----
			if(docInfo.isLinkComments){
				var addrequest = "<UserComment><![CDATA[" + "Declined: " + userComment +  "]]></UserComment>";
				addrequest += "<CommentType>LC</CommentType>";				
				if(ProcessComment("LOGCOMMENT", addrequest, true)){
					try{
//							doc.AdvComments.src=doc.AdvComments.src + "&" + (new Date()).valueOf(); //refresh data island to show the new comment
						}
					catch (e){}
				}
			}
				HandleSaveClick(true);
			}
		}
}

// ----- process the "Approve" action-----	
function ApproveWorkflowStep()
{
	if(!HasWorkflowData())
		{
			return false;
		}
		
	if (UserHasFilesCheckedOut())
		{
			alert("Before you can complete your Approval step you must check in any files you have checked out")
			return false
		}
		
	//do field validation
     if(!IsValidWfData("Approve")) {return false;}
	var additionalHeader = "";
	var userComment = "";
	var currentStep = GetCurrentWorkflowStep();	
	if(currentStep)
	{		
		//API HOOK		
		if ( ! onApprove() ) { 				
			return false; 
		}
		//ensure currentStep resultset pointer correct as may be reset by custom functions
		currentStep = GetCurrentWorkflowStep();
		if(jQuery(currentStep).find("wfOptionalComments").text() == "1"){
			var userComment = GetComment("Please enter any comments (optional):", false);
			if(userComment == null || userComment === false) {return false}
			additionalHeader += "<UserComment><![CDATA[" + userComment +  "]]></UserComment>";
		}			

		//--- process on server --
		if(ProcessWorkflow("APPROVE", additionalHeader))
		{
			//----- Add to additional comments subform section on document if set -----
			if(docInfo.isLinkComments){
				if(userComment) {
					var addrequest = "<UserComment><![CDATA[" + "Approved: " + userComment +  "]]></UserComment>";
					addrequest += "<CommentType>LC</CommentType>";					
					if(ProcessComment("LOGCOMMENT", addrequest, true)){
						try{
//								doc.AdvComments.src=doc.AdvComments.src + "&" + (new Date()).valueOf(); //refresh data island to show the new comment
							}
						catch (e){}
					}
				}
			}
				HandleSaveClick(true);
			}
		}
}


// ----- process the "Complete" action-----	
function CompleteWorkflowStep()
{
	if(!HasWorkflowData())
		{
			return false;
		}
		
	if (UserHasFilesCheckedOut())
		{
			alert("Before you can complete your workflow step you must check in any files you have checked out")
			return false
		}
	//set the action field that will tell validateWorkflow function what the user is trying to do at this point 
	
     if(!IsValidWfData("Complete")) {return false;}
	var additionalHeader = "";
	userComment = ""; 
	var currentStep = GetCurrentWorkflowStep();
	if(currentStep)
		{
	
		//API HOOK
		
		if ( ! onComplete() ) { return false;}
		//ensure currentStep resultset pointer correct as may be reset by custom functions
		currentStep = GetCurrentWorkflowStep();
		
		if(jQuery(currentStep).find("wfOptionalComments").text() == "1"){
			var userComment = GetComment("Please enter any comments (optional):", false);
			if(userComment == null || userComment === false) {return false}
			additionalHeader += "<UserComment><![CDATA[" + userComment +  "]]></UserComment>";
		}		
		
		//--- process on server --	
		if(ProcessWorkflow("COMPLETE", additionalHeader))
			{
			//----- Add to additional comments subform section on document if set -----
			if(docInfo.isLinkComments){
				if(userComment) {
					var addrequest = "<UserComment><![CDATA[" + "Reviewed: " + userComment +  "]]></UserComment>";
					addrequest += "<CommentType>LC</CommentType>";
					if(ProcessComment("LOGCOMMENT", addrequest, true)){
						try{
//								doc.AdvComments.src=doc.AdvComments.src + "&" + (new Date()).valueOf(); //refresh data island to show the new comment
							}
						catch (e){}
					}
				}
			}
				HandleSaveClick(true);
			}
		}
}

// ----- process the "Finish workflow" action-----	
function FinishWorkflow()
{
	//----Run custom on before release JS function if identified---//
	if(!CustomOnBeforeReleaseHandler()){
		return false;
	}
	if(!HasWorkflowData())
		{
			return false;
		}
	if (UserHasFilesCheckedOut())
		{
			alert("Before you can complete this workflow step you must check in any files you have checked out")
			return false
		}
	 //do field validation
     if(!IsValidWfData("Finish")) {return false;}
	var additionalHeader = "";
	var currentStep = GetCurrentWorkflowStep();
	var userComment = "";
	
	if(currentStep)
		{
			if(docInfo.EnableVersions && false)  //*TODO - false added to disable this code, fix
				{
					var params = new Array();
					params[0] = docInfo.AvailableVersionList; 
					params[1] = docInfo.FullVersion; 
					params[2] = docInfo.isInitialVersion; 
					params[3] = docInfo.StrictVersioning;
					
					var dlgUrl ="/" + NsfName + "/" + "dlgWorkflowDocRelease?OpenForm";
					var dlgSettings = "dialogHeight:270px;dialogWidth:435px;center:yes; help:no; resizable:no; status:no;";
					var retVal = window.showModalDialog(dlgUrl,params,dlgSettings); //Display the version dialog
					if( !retVal ) {return false; } //cancelled
					if( !retVal[0] ) {return false; } //version was not provided
		
					additionalHeader += "<Version>" + retVal[0] +  "</Version>";
					additionalHeader += "<UserComment><![CDATA[" + retVal[1] +  "]]></UserComment>";
				}
			else
				{
					var userComment = GetComment("Please enter comments (optional):", false);
					if( userComment == null || userComment === false) {return false; } 					
					additionalHeader += "<Version>" + docInfo.FullVersion + "</Version>";
					additionalHeader += "<UserComment><![CDATA[";
					additionalHeader += (userComment)? userComment : ""; //userComment will be false if the dialog is cancelled
					additionalHeader += "]]></UserComment>";
				}
			//--- process on server --

		if(ProcessWorkflow("FINISH", additionalHeader)){
			//----- Add to additional comments subform section on document if set -----
			if(docInfo.isLinkComments){
				var requestcomment =  (userComment)? userComment : (retVal ? retVal[1] : "");
				var addrequest =  "<UserComment><![CDATA[" + "Finish: " + requestcomment +  "]]></UserComment>"
				addrequest += "<CommentType>LC</CommentType>";				
				if(ProcessComment("LOGCOMMENT", addrequest, true)){
					try{
//							doc.AdvComments.src=doc.AdvComments.src + "&" + (new Date()).valueOf(); //refresh data island to show the new comment
						}
					catch (e){}
				}
			}	
			
			//-----Set tmpVersion field to make available for onAfterRelease event------
			if(docInfo.EnableVersions && false){  //*TODO - false added to disable this code, fix
				var $page = jQuery("#" + jQuery.mobile.activePage.attr('id'));
				$page.find("[name=tmpVersion]:first").val(retVal[0]);
			}else{			
				var $page = jQuery("#" + jQuery.mobile.activePage.attr('id'));
				$page.find("[name=tmpVersion]:first").val(docInfo.FullVersion);
			}

			if(!CustomOnAfterReleaseHandler()){
				return false;
			}
			
				HandleSaveClick(true);
			}
		}
}

function DeleteWorkflowStepByKey(keyType, key)
{
	
	if(keyType =="" || key ==""){ return false;}
	if(!HasWorkflowData()){return false;}
	var currentStep = GetCurrentWorkflowStep();
	if(!currentStep){ return false;}
	
	var additionalHeader = "";
	xmlDom = doc.ProcessData.XMLDocument;
	doc.ProcessData.async = false;
	var query = 'wfAction != "Start" and wfAction != "End" and wfOrder > ' + currentStep.FIELDS("wfOrder").Value;
	query +=  ' and ' + keyType + ' = "' + key + '"' ;
	var nodeList = xmlDom.selectNodes( 'Documents/Document[' + query + ' ]' );
	
	if(nodeList.length ==0){ return false;}
	var objNode=null;
	var selectEl = null;	

	while( (objNode = nodeList.nextNode())){
			selectEl = objNode.selectSingleNode( 'Selected');
			selectEl.text="1";
		}
		
		var parentNode=xmlDom.selectSingleNode( 'Documents');
		//--- process on server --
		if(docInfo.isWorkflowCreated)
		{		
		if(ProcessWorkflow("DELETE", additionalHeader, true))	{
				doc.ProcessData.src=doc.ProcessData.src;
				return;
			}
		}
		else{
		
			//--- remove deleted nodes from current doc
				for (var i=0; i < nodeList.length; i++) {
      				objNode = nodeList.item(i);
					parentNode.removeChild(objNode);      				
					}
			}
}



function DeleteWorkflowStep()
{
	if(!HasWorkflowData())
		{
			return false;
		}
	var additionalHeader = "";
	var currentStep = GetCurrentWorkflowStep();
	
	xmlDom = doc.ProcessData.XMLDocument;
	var query = 'wfAction != "Start" and wfAction != "End" and wfOrder > ' + currentStep.FIELDS("wfOrder").Value;
	var nodeList = xmlDom.selectNodes( 'Documents/Document[' + query + ' ]' );
	if(nodeList.length ==0){
		return alert("There are no steps that can be deleted.")
	}
	//----- Initial inquiry -----
	var labeltext = "Please select the steps to delete:"; 
	var stepNoList = SelectWorkflowStep(nodeList, true, labeltext ); //let user select one of the completed steps

	if( stepNoList ==null) {return false; }

	var node = null;
	var selectEl = null;
	var stepIdxArray = stepNoList.split(",");
	parentNode=xmlDom.selectSingleNode( 'Documents');
	//------------------------------------------------------
	for (var k=0; k< stepIdxArray.length; k++)
		{
			query = 'wfOrder = ' + stepIdxArray[k];
			node = xmlDom.selectSingleNode( 'Documents/Document[' + query + ' ]' );
			if(node) {
				selectEl = node.selectSingleNode( 'Selected');
				selectEl.text="1";
			}
		}

		//--- process on server --
		if(docInfo.isWorkflowCreated)
		{		
		if(ProcessWorkflow("DELETE", additionalHeader, true))
			{
				//HandleSaveClick(true);
				doc.ProcessData.src=doc.ProcessData.src;
				return;
			}
		}
		else{
			//--- remove deleted nodes from current doc
			for (var k=0; k< stepIdxArray.length; k++)
				{
					query = 'wfOrder = ' + stepIdxArray[k];
					node = xmlDom.selectSingleNode( 'Documents/Document[' + query + ' ]' );
					if(node) {
						parentNode.removeChild(node);
					}
				}
		}

}

function CancelWorkflow()
{
	if(!HasWorkflowData())
		{
			return false;
		}
	var additionalHeader = "";
	var currentStep = GetCurrentWorkflowStep();
	var userComment = "";
	
	if(currentStep)
		{
	//----- Initial inquiry -----
	var submitChoice = thingFactory.Messagebox("You are about to cancel the workflow. This action will delete the current workflow and return this document to Draft state.\r\rDo you want to continue?", 4+32, "Document Workflow")
	if (submitChoice == 7)
		{
			return(false);
		}
		var userComment = GetComment("Please specify the reason:", true);

		if( !userComment ) {return(false); }

		additionalHeader += "<UserComment><![CDATA[" + userComment +  "]]></UserComment>";
		//--- process on server --
		ProcessWorkflow("CANCEL", additionalHeader);
		//----- Add to additional comments subform section on document if set -----
		if(docInfo.isLinkComments){
			var addrequest = "<UserComment><![CDATA[" + "Cancelled: " + userComment +  "]]></UserComment>";
			addrequest += "<CommentType>LC</CommentType>";			
			if(ProcessComment("LOGCOMMENT", addrequest, true)){
				try{
						doc.AdvComments.src=doc.AdvComments.src + "&" + (new Date()).valueOf(); //refresh data island to show the new comment
					}
				catch (e){}
			}
		}		
		HandleSaveClick(true);
		
		}
}

function PauseWorkflow()
{
	if(!HasWorkflowData())
		{
			return false;
		}
	var additionalHeader = "";
	var currentStep = GetCurrentWorkflowStep();
	var userComment = "";
	
	if(currentStep)
		{
	//----- Initial inquiry -----
	var submitChoice = thingFactory.Messagebox("You are about to pause the workflow. This action will stop past due reminders.\r\rAre you sure?", 4+32, "Document Workflow")
	if (submitChoice == 7)
		{
			return(false);
		}
		var userComment = GetComment("Please specify the reason:", true);

		if( !userComment ) {return(false); }

		additionalHeader += "<UserComment><![CDATA[" + userComment +  "]]></UserComment>";
		//--- process on server --
		ProcessWorkflow("PAUSE", additionalHeader);
		//----- Add to additional comments subform section on document if set -----
		if(docInfo.isLinkComments){
			var addrequest = "<UserComment><![CDATA[" + "Paused: " + userComment +  "]]></UserComment>";
			addrequest += "<CommentType>LC</CommentType>";			
			if(ProcessComment("LOGCOMMENT", addrequest, true)){
				try{
						doc.AdvComments.src=doc.AdvComments.src + "&" + (new Date()).valueOf(); //refresh data island to show the new comment
					}
				catch (e){}
			}
		}		
		HandleSaveClick(true);
		
		}
}

function BacktrackWorkflow()
{
	if(!HasWorkflowData())
		{
			return false;
		}
	var additionalHeader = "";
	var currentStep = GetCurrentWorkflowStep();

	//----- Initial inquiry -----
	var submitChoice = thingFactory.Messagebox("You are about to backtrack the workflow.  Are you sure?", 4+32, "Document Workflow")
	if (submitChoice == 7)
		{
			return(false);
		}
		if(currentStep)
		{
		xmlDom = doc.ProcessData.XMLDocument;
		var query = "wfOrder <= " + currentStep.FIELDS("wfOrder").Value;
		var nodeList = xmlDom.selectNodes( 'Documents/Document[' + query + ' ]' );
		if(nodeList.length <=1)
			{
				var stepNo = 0 //start from begining
			}
			else
			{
				var labeltext = "Please select the workflow step to backtrack to:"; 
				var stepNo = SelectWorkflowStep(nodeList, false, labeltext ); //let user select one of the completed steps
			}
		}

		if(stepNo == null ) {return; }

		additionalHeader += "<ProcessedStep>" + stepNo +  "</ProcessedStep>";
		//--- process on server --
		if(ProcessWorkflow("BACKTRACK", additionalHeader))
			{
				HandleSaveClick(true);
			}
		}

//--- processess the workflow on the server ---
function ProcessWorkflow(action, additionalHeader, processNow)
{
     var result = false;
//	ShowProgressMessage("Processing workflow request. Please wait...")
	var wfNodes = jQuery(ProcessData).find( 'Document' );

	if (wfNodes.length == 0) {
//	   HideProgressMessage();
	   return;
	}
	var request="";

	//--collect the xml for all nodes to be processed
	request += "<Request>";
	request += "<Action>" + action + "</Action>";
	request += "<ServerUrl>" + docInfo.ServerUrl + "</ServerUrl>";
	request += (additionalHeader)? additionalHeader : "";
	request += "<UserName><![CDATA[" + docInfo.UserNameAB + "]]></UserName>";
	request += "<Unid>" + docInfo.DocID + "</Unid>";
	request += "<EditMode>" + docInfo.isDocBeingEdited + "</EditMode>";
	
	request += serializeXML(wfNodes);

	request += "</Request>";

	if(docInfo.isDocBeingEdited && !processNow) //edit mode, doc WQS agent will take care of the request
		{	
			if (docInfo.isMobileWorkflowSave =="1") {
				$("#tmpWorkflowDataXml").val(request);
			}else{
				var $page = jQuery("#" + jQuery.mobile.activePage.attr('id'));
				$page.find("[name=tmpWorkflowDataXml]:first").val(request);
			}

			return true;
		}
	else // read mode, process via workflow services agent
		{			
			var url = docInfo.ServerUrl + "/" + docInfo.NsfName + "/WorkflowServices?OpenAgent"
			
			jQuery.ajax({
				url: url, 
				data: request,       
				cache: false, 
				async: false,
				type: 'POST',
				contentType: "text/xml",
				dataType: "xml"
	      	})
			.success( function (data, textStatus, jqxhr) {
	    			 try{
					var $xml = jQuery(data);
					if($xml.find("Result:first").text() == "OK"){
					 var MobileWorkflowFlag=docInfo.isMobileWorkflowSave;
					 var MobileAppDevice=docInfo.MobileAppDevice;
						console.log( "isMobileWorkflowSave: "+ MobileWorkflowFlag );
						console.log( "MobileAppDevice: "+ MobileAppDevice );
						
					 	if (docInfo.isMobileWorkflowSave =="1") {
					 		if (docInfo.MobileAppDevice =="ios"){
						 		showIOSWorkflowScreen();
					 		}else if (docInfo.MobileAppDevice =="android") {
					 			showAndroidWorkflowScreen();
					 		}
					 		
					 	}
					 	else{
					 			    result = true;
								   return result;
					 	}

					}
				  }catch(e){}
	      	})
			.error( function (jqxhr, ajaxOptions, thrownError) {});             
	}
	
	return result;	
}


 function showAndroidWorkflowScreen() {
        //alert("redirecting to workflow screen")
        DOCOVA_MOBILE_HOOK.showWorkflowActionScreenFromDocument();
 }
 function showIOSWorkflowScreen() {
        window.location.href="https://www.docova.net/workflowcompletedtoken/";
   }
    
//--- check the basic requirements for the workflow ---
function ValidateWorkflow(action)
{

	if(!HasWorkflowData() && wfInfo.HasMultiWorkflow)
		{
			SelectWorkflow();
			if(!HasWorkflowData()) {return false;}
		}
	else if(!HasWorkflowData() && !wfInfo.HasMultiWorkflow)
		{
			alert("No workflow actions are defined in this document");
			return(false);
		}

	if(!HasWorkflowData())
		{
			alert("Please select the applicable workflow.");
			return false;
		}
		
	var rs = jQuery(ProcessData).find('Document');
	if(rs.length == 0)
	{
		alert("No workflow actions are defined in this document");
		return(false);
	}

	//----- make sure that the names are selected for each workflow step ----
	for(var i=0; i<rs.length; i++)
	{
        if(jQuery(rs[i]).find("wfDispReviewerApproverList").text() == "")
	     {
			alert("You must select participant names for all steps of the document workflow.")
			return(false);
		}
     }
     
     //do field validation
     return IsValidWfData(action);
}



// ------ locates current workflow step in the recordset ----
function GetCurrentWorkflowStep()
{
	if(!HasWorkflowData())
		{
			return false;
		}
	var rs = jQuery(ProcessData).find('Document');
	
	//---- find current record ------
	for(var i=0; i<rs.length; i++)
	{
		if(jQuery(rs[i]).find("wfIsCurrentItem").text()=="1") // if current item
		{
			return rs[i];
		}
	}
	return false; //could not find current item
}

// displays dialog allowing user to select one or more workflow steps for further processing
function SelectWorkflowStep(nodeList, selectMulti, fieldLabel)
{
var params = new Array();
params[0] = nodeList;
params[1] = (selectMulti)? selectMulti : false;
params[2] = fieldLabel;

var dlgUrl ="/" + NsfName + "/" + "dlgWorkflowSelectStep?OpenForm";
var dlgSettings = "dialogHeight:240px;dialogWidth:460px;center:yes; help:no; resizable:no; status:no;";
return window.showModalDialog(dlgUrl,params,dlgSettings); //Display the selection dialog
}

// displays dialog allowing user to select workflow applicable to the document
function SelectWorkflow()
{
	xmlDom = doc.ProcessSettings.XMLDocument;
	var nodeList = xmlDom.selectNodes( 'Documents/Document' );
	if(nodeList.length == 0)
		{
			return alert("There are no workflow processess available for this document.")
		}

var dlgUrl ="/" + NsfName + "/" + "dlgWorkflowSelectProcess?OpenForm";
var dlgSettings = "dialogHeight:240px;dialogWidth:460px;center:yes; help:no; resizable:no; status:no;";
retVal = window.showModalDialog(dlgUrl,nodeList,dlgSettings); //Display the selection
if(retVal == null) {return false;}
doc.wfWorkflowName.value = retVal[1];
doc.spanDispWorkflowName.innerText = retVal[1];
doc.wfEnableImmediateRelease.value = retVal[2];
doc.wfCustomizeAction.value = retVal[2];
return SwitchWorkflow(retVal[0]);
}

//------ removes the user name from the list ----
function RemoveName(name, fromList)
{
fromList = fromList.replace(name, "");
fromList = trim(fromList.replace(", ", ",").split(",")).join(", "); 
return fromList;
}

//------ adds user name to the list -----
function AddName(name, toList)
{
if(toList.indexOf(name) != -1) {return toList;} 
return  (toList)? toList + ", "  + name : name;
}


// ---------- workflow info request dialog --------
function RequestWorkflowInfo()
{
	var additionalHeader = "";
	var currentStep = GetCurrentWorkflowStep();
	var userComment = "";
	
	if(currentStep)
		{
		var dlgUrl =docInfo.ServerUrl + "/" + NsfName + "/" + "dlgWorkflowInfoRequest?OpenForm&ParentUNID=" + docInfo.DocID + "&AllowPause=" + wfInfo.AllowPause;
		var dlgSettings = "dialogHeight:370px;dialogWidth:420px;center:yes; help:no; resizable:no; status:no;";
		var retValues =  window.showModalDialog(dlgUrl,window,dlgSettings); //Display the address dialog
		if(!retValues) {return false;}

		additionalHeader += "<SendTo><![CDATA[" + retValues[0] +  "]]></SendTo>";
		additionalHeader += "<Subject><![CDATA[" + retValues[1] +  "]]></Subject>";
		additionalHeader += "<UserComment><![CDATA[" + retValues[2] +  "]]></UserComment>";		
		additionalHeader += "<PauseWorkflow>" + retValues[3] +  "</PauseWorkflow>";		
		//--- process on server --
		ProcessWorkflow("INFO", additionalHeader);
		}
		

}
//==========================================================================================
// workflow submenu
//==========================================================================================

function CreateWorkflowSubmenu(actionButton) //creates right-click contect menu
{
	if(!actionButton) {return}
	var popup = new objPopupmenu();
	popup.textColumnWidth = 125;
	popup.actionHeight=18;
	var actionHandler = "parent.ProcessWorkflowSubmenuAction(this)";

//	addAction= function(isActive, isChecked, isBold, actionText, actionName, actionIconSrc, actionShortcutKeyText, actionHandler)
	var isChecked = false; 

	popup.addAction((wfInfo.AllowPause) && HasWorkflowData() && docInfo.isWorkflowCreated, false, false, "Request Information" , "requestinfo", "" , "", actionHandler);
	popup.addAction(HasWorkflowData() && docInfo.isWorkflowCreated, false, false, "Add comment" , "addcomment", "" , "", actionHandler);
	popup.addDivider();
	popup.addAction(HasWorkflowData() && (docInfo.isNewDoc || wfInfo.isStartStep) && doc.wfEnableImmediateRelease.value=="1", false, false, "Release document" , "release", "" , "", actionHandler);
	popup.addAction((wfInfo.AllowPause) && HasWorkflowData() && docInfo.isWorkflowCreated, false, false, "Pause workflow" , "pause", "" , "", actionHandler);
	popup.addDivider();
	popup.addAction(wfInfo.AllowCustomize && HasWorkflowData(), false, false, "Delete workflow step" , "delete", "" , "", actionHandler);
	popup.addAction(wfInfo.AllowBacktrack && HasWorkflowData(), false, false, "Backtrack workflow" , "backtrack", "" , "", actionHandler);
	popup.addAction(wfInfo.AllowCancel && HasWorkflowData(), false, false, "Cancel workflow" , "cancel", "" , "", actionHandler);

	popup.height = 151;
	popup.width = 131;
	popup.offsetTop= 15;
	popup.offsetRight = 0;

	var oPopBody = oPopup.document.body;
	oPopBody.innerHTML = popup.innerHTML();

	oPopup.show(0, 20, popup.width, popup.height, actionButton);
	return false;

}


//==========================================================================================
// submenu handler
//==========================================================================================

function ProcessWorkflowSubmenuAction(actionObj) //handle action from contect menu
{
	if(!actionObj ) {return false};
	if(oPopup) {oPopup.hide();}
	var action = actionObj.actionName.split("-")[0];
	if(action=="delete") {
		if(!CanModifyDocument()){return false;}
		DeleteWorkflowStep();
	}
	else if(action=="backtrack"){
		if(!CanModifyDocument()){return false;}
		BacktrackWorkflow();
	}
	else if(action=="requestinfo"){
		RequestWorkflowInfo();
	}
	else if(action=="cancel"){
		if(!CanModifyDocument()){return false;}
		CancelWorkflow();
	}
	else if(action=="pause"){
		if(!CanModifyDocument()){return false;}
		PauseWorkflow();
	}
	else if(action=="release"){
		if(!CanModifyDocument()){return false;}
		FinishWorkflow();
	}
	else if(action=="addcomment"){
		LogLifecycleComment();
	}

	return;
}

function HasWorkflowData()
{
    try{
	  var wfNode = jQuery(ProcessData).find( 'Document:first' );
	   return (wfNode!=null);
	}catch(err){
	  return (false);
	}
}


function serializeXML(data){
    var out = "";
    if (typeof XMLSerializer == 'function' || typeof XMLSerializer == 'object') {
        var xs = new XMLSerializer();
        jQuery(data).each(function() {
            out += xs.serializeToString(this);
        });
    } else if (data[0] && data[0].xml != 'undefined') {
        jQuery(data).each(function() {
            out += this.xml;
        });
    }
    return out;
};


function getXMLDocumentFromString(txt){
	if (window.DOMParser)
  	{
  		parser=new DOMParser();
  		xmlDoc=parser.parseFromString(txt,"text/xml");
  	}
	else // Internet Explorer
  	{
  		xmlDoc=new ActiveXObject("Microsoft.XMLDOM");
  		xmlDoc.async=false;
  		xmlDoc.loadXML(txt);
  }  
  return xmlDoc;
};

//---------------------------------------------------------------------------------------------------------
//------------  INLINE JS functions on mDocument within the document just below inline CSS -------------------

function HandleSaveClick(refreshView){
	if(!IsValidData()) {return false;}
	{% if document_type.getSaveCloseCustomJS %}
	try { 
		{{ document_type.getSaveCloseCustomJS|raw }} 
	} catch(e) {
		alert('Custom save function could not be executed due to the following error: ' + e); return false;
	}{% else %}
	SaveAndClose(false);
	{% endif %}
}

	function HandleEditClick(){
		{%if document_type.getEditDocumentCustomJS %}
			try {
				{{ document_type.getEditDocumentCustomJS|raw }}
			} catch(e) 
				{alert('Custom edit function could not be executed due to the following error: r' + e); return false;}
		{% else %}
			{%  if app.request.query.get('type') == 'workflow' %}
					editDocumentFromWorkflowScreen();
			{% else %}
					EditDocument();
			{% endif %}
		{% endif %}
	}
	
function IsValidData(){
        try{
	if(!ValidateFields('Subject~text~Document Title/Subject')){ return false;}            } catch(e) {
            alert('Validation function could not be executed due to the following error: \r' + e);
            return false;
        }
        return true;
}

function CustomOnLoadHandler($page){
{% if document_type.getOnLoadCustomJS %}
	try {
		{{ document_type.getOnLoadCustomJS|raw }}
	} catch(e) {alert('Custom onLoad function could not be executed due to the following error: ' + e); return false;}
{% else %}
	return true;
{% endif %}
}

function  CustomOnUnLoadHandler(){
{% if document_type.getOnUnLoadCustomJS %}
	try {
		{{ document_type.getOnUnLoadCustomJS|raw }}
	} catch(e) {alert('Custom onUnLoad function could not be executed due to the following error: ' + e); return false;}
{% else %}
	return true;
{% endif %}
}

function  CustomOnBeforeReleaseHandler(){
	try{
		{% if document_type.getBeforeReleaseCustomJS %}
		{{ document_type.getBeforeReleaseCustomJS|raw }}
		{% endif %}
	} catch(e) {
		alert('Workflow on before release function could not be executed due to the following error: \r' + e); 
		return false;
	}
	return true;
}

function   CustomOnAfterReleaseHandler(){
	try{
		{% if document_type.getAfterReleaseCustomJS %}
		{{ document_type.getAfterReleaseCustomJS|raw }}
		{% endif %}
	} catch(e) {
		alert('Workflow on after release function could not be executed due to the following error: \r' + e); 
		return false;
	}
	return true;
}

</script>


